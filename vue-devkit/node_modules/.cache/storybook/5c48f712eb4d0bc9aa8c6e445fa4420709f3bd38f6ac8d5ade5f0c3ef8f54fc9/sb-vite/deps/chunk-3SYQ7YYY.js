import {
  require_jsx_runtime
} from "./chunk-5NM75F2F.js";
import {
  require_react
} from "./chunk-PTQAA24L.js";
import {
  __commonJS,
  __publicField,
  __require,
  __toESM
} from "./chunk-LK32TJAX.js";

// node_modules/.cache/sb-vite-plugin-externals/@storybook/core/client-logger.js
var require_client_logger = __commonJS({
  "node_modules/.cache/sb-vite-plugin-externals/@storybook/core/client-logger.js"(exports, module) {
    module.exports = __STORYBOOK_MODULE_CLIENT_LOGGER__;
  }
});

// node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/cjs/scheduler.development.js
var require_scheduler_development = __commonJS({
  "node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/cjs/scheduler.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var enableSchedulerDebugging = false;
        var enableProfiling = false;
        var frameYieldMs = 5;
        function push(heap, node) {
          var index = heap.length;
          heap.push(node);
          siftUp(heap, node, index);
        }
        function peek(heap) {
          return heap.length === 0 ? null : heap[0];
        }
        function pop(heap) {
          if (heap.length === 0) {
            return null;
          }
          var first = heap[0];
          var last = heap.pop();
          if (last !== first) {
            heap[0] = last;
            siftDown(heap, last, 0);
          }
          return first;
        }
        function siftUp(heap, node, i) {
          var index = i;
          while (index > 0) {
            var parentIndex = index - 1 >>> 1;
            var parent = heap[parentIndex];
            if (compare(parent, node) > 0) {
              heap[parentIndex] = node;
              heap[index] = parent;
              index = parentIndex;
            } else {
              return;
            }
          }
        }
        function siftDown(heap, node, i) {
          var index = i;
          var length = heap.length;
          var halfLength = length >>> 1;
          while (index < halfLength) {
            var leftIndex = (index + 1) * 2 - 1;
            var left = heap[leftIndex];
            var rightIndex = leftIndex + 1;
            var right = heap[rightIndex];
            if (compare(left, node) < 0) {
              if (rightIndex < length && compare(right, left) < 0) {
                heap[index] = right;
                heap[rightIndex] = node;
                index = rightIndex;
              } else {
                heap[index] = left;
                heap[leftIndex] = node;
                index = leftIndex;
              }
            } else if (rightIndex < length && compare(right, node) < 0) {
              heap[index] = right;
              heap[rightIndex] = node;
              index = rightIndex;
            } else {
              return;
            }
          }
        }
        function compare(a7, b) {
          var diff = a7.sortIndex - b.sortIndex;
          return diff !== 0 ? diff : a7.id - b.id;
        }
        var ImmediatePriority = 1;
        var UserBlockingPriority = 2;
        var NormalPriority = 3;
        var LowPriority = 4;
        var IdlePriority = 5;
        function markTaskErrored(task, ms2) {
        }
        var hasPerformanceNow = typeof performance === "object" && typeof performance.now === "function";
        if (hasPerformanceNow) {
          var localPerformance = performance;
          exports.unstable_now = function() {
            return localPerformance.now();
          };
        } else {
          var localDate = Date;
          var initialTime = localDate.now();
          exports.unstable_now = function() {
            return localDate.now() - initialTime;
          };
        }
        var maxSigned31BitInt = 1073741823;
        var IMMEDIATE_PRIORITY_TIMEOUT = -1;
        var USER_BLOCKING_PRIORITY_TIMEOUT = 250;
        var NORMAL_PRIORITY_TIMEOUT = 5e3;
        var LOW_PRIORITY_TIMEOUT = 1e4;
        var IDLE_PRIORITY_TIMEOUT = maxSigned31BitInt;
        var taskQueue = [];
        var timerQueue = [];
        var taskIdCounter = 1;
        var currentTask = null;
        var currentPriorityLevel = NormalPriority;
        var isPerformingWork = false;
        var isHostCallbackScheduled = false;
        var isHostTimeoutScheduled = false;
        var localSetTimeout = typeof setTimeout === "function" ? setTimeout : null;
        var localClearTimeout = typeof clearTimeout === "function" ? clearTimeout : null;
        var localSetImmediate = typeof setImmediate !== "undefined" ? setImmediate : null;
        var isInputPending = typeof navigator !== "undefined" && navigator.scheduling !== void 0 && navigator.scheduling.isInputPending !== void 0 ? navigator.scheduling.isInputPending.bind(navigator.scheduling) : null;
        function advanceTimers(currentTime) {
          var timer = peek(timerQueue);
          while (timer !== null) {
            if (timer.callback === null) {
              pop(timerQueue);
            } else if (timer.startTime <= currentTime) {
              pop(timerQueue);
              timer.sortIndex = timer.expirationTime;
              push(taskQueue, timer);
            } else {
              return;
            }
            timer = peek(timerQueue);
          }
        }
        function handleTimeout(currentTime) {
          isHostTimeoutScheduled = false;
          advanceTimers(currentTime);
          if (!isHostCallbackScheduled) {
            if (peek(taskQueue) !== null) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            } else {
              var firstTimer = peek(timerQueue);
              if (firstTimer !== null) {
                requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
              }
            }
          }
        }
        function flushWork(hasTimeRemaining, initialTime2) {
          isHostCallbackScheduled = false;
          if (isHostTimeoutScheduled) {
            isHostTimeoutScheduled = false;
            cancelHostTimeout();
          }
          isPerformingWork = true;
          var previousPriorityLevel = currentPriorityLevel;
          try {
            if (enableProfiling) {
              try {
                return workLoop(hasTimeRemaining, initialTime2);
              } catch (error) {
                if (currentTask !== null) {
                  var currentTime = exports.unstable_now();
                  markTaskErrored(currentTask, currentTime);
                  currentTask.isQueued = false;
                }
                throw error;
              }
            } else {
              return workLoop(hasTimeRemaining, initialTime2);
            }
          } finally {
            currentTask = null;
            currentPriorityLevel = previousPriorityLevel;
            isPerformingWork = false;
          }
        }
        function workLoop(hasTimeRemaining, initialTime2) {
          var currentTime = initialTime2;
          advanceTimers(currentTime);
          currentTask = peek(taskQueue);
          while (currentTask !== null && !enableSchedulerDebugging) {
            if (currentTask.expirationTime > currentTime && (!hasTimeRemaining || shouldYieldToHost())) {
              break;
            }
            var callback = currentTask.callback;
            if (typeof callback === "function") {
              currentTask.callback = null;
              currentPriorityLevel = currentTask.priorityLevel;
              var didUserCallbackTimeout = currentTask.expirationTime <= currentTime;
              var continuationCallback = callback(didUserCallbackTimeout);
              currentTime = exports.unstable_now();
              if (typeof continuationCallback === "function") {
                currentTask.callback = continuationCallback;
              } else {
                if (currentTask === peek(taskQueue)) {
                  pop(taskQueue);
                }
              }
              advanceTimers(currentTime);
            } else {
              pop(taskQueue);
            }
            currentTask = peek(taskQueue);
          }
          if (currentTask !== null) {
            return true;
          } else {
            var firstTimer = peek(timerQueue);
            if (firstTimer !== null) {
              requestHostTimeout(handleTimeout, firstTimer.startTime - currentTime);
            }
            return false;
          }
        }
        function unstable_runWithPriority(priorityLevel, eventHandler) {
          switch (priorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
            case LowPriority:
            case IdlePriority:
              break;
            default:
              priorityLevel = NormalPriority;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_next(eventHandler) {
          var priorityLevel;
          switch (currentPriorityLevel) {
            case ImmediatePriority:
            case UserBlockingPriority:
            case NormalPriority:
              priorityLevel = NormalPriority;
              break;
            default:
              priorityLevel = currentPriorityLevel;
              break;
          }
          var previousPriorityLevel = currentPriorityLevel;
          currentPriorityLevel = priorityLevel;
          try {
            return eventHandler();
          } finally {
            currentPriorityLevel = previousPriorityLevel;
          }
        }
        function unstable_wrapCallback(callback) {
          var parentPriorityLevel = currentPriorityLevel;
          return function() {
            var previousPriorityLevel = currentPriorityLevel;
            currentPriorityLevel = parentPriorityLevel;
            try {
              return callback.apply(this, arguments);
            } finally {
              currentPriorityLevel = previousPriorityLevel;
            }
          };
        }
        function unstable_scheduleCallback(priorityLevel, callback, options) {
          var currentTime = exports.unstable_now();
          var startTime2;
          if (typeof options === "object" && options !== null) {
            var delay = options.delay;
            if (typeof delay === "number" && delay > 0) {
              startTime2 = currentTime + delay;
            } else {
              startTime2 = currentTime;
            }
          } else {
            startTime2 = currentTime;
          }
          var timeout;
          switch (priorityLevel) {
            case ImmediatePriority:
              timeout = IMMEDIATE_PRIORITY_TIMEOUT;
              break;
            case UserBlockingPriority:
              timeout = USER_BLOCKING_PRIORITY_TIMEOUT;
              break;
            case IdlePriority:
              timeout = IDLE_PRIORITY_TIMEOUT;
              break;
            case LowPriority:
              timeout = LOW_PRIORITY_TIMEOUT;
              break;
            case NormalPriority:
            default:
              timeout = NORMAL_PRIORITY_TIMEOUT;
              break;
          }
          var expirationTime = startTime2 + timeout;
          var newTask = {
            id: taskIdCounter++,
            callback,
            priorityLevel,
            startTime: startTime2,
            expirationTime,
            sortIndex: -1
          };
          if (startTime2 > currentTime) {
            newTask.sortIndex = startTime2;
            push(timerQueue, newTask);
            if (peek(taskQueue) === null && newTask === peek(timerQueue)) {
              if (isHostTimeoutScheduled) {
                cancelHostTimeout();
              } else {
                isHostTimeoutScheduled = true;
              }
              requestHostTimeout(handleTimeout, startTime2 - currentTime);
            }
          } else {
            newTask.sortIndex = expirationTime;
            push(taskQueue, newTask);
            if (!isHostCallbackScheduled && !isPerformingWork) {
              isHostCallbackScheduled = true;
              requestHostCallback(flushWork);
            }
          }
          return newTask;
        }
        function unstable_pauseExecution() {
        }
        function unstable_continueExecution() {
          if (!isHostCallbackScheduled && !isPerformingWork) {
            isHostCallbackScheduled = true;
            requestHostCallback(flushWork);
          }
        }
        function unstable_getFirstCallbackNode() {
          return peek(taskQueue);
        }
        function unstable_cancelCallback(task) {
          task.callback = null;
        }
        function unstable_getCurrentPriorityLevel() {
          return currentPriorityLevel;
        }
        var isMessageLoopRunning = false;
        var scheduledHostCallback = null;
        var taskTimeoutID = -1;
        var frameInterval = frameYieldMs;
        var startTime = -1;
        function shouldYieldToHost() {
          var timeElapsed = exports.unstable_now() - startTime;
          if (timeElapsed < frameInterval) {
            return false;
          }
          return true;
        }
        function requestPaint() {
        }
        function forceFrameRate(fps) {
          if (fps < 0 || fps > 125) {
            console["error"]("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported");
            return;
          }
          if (fps > 0) {
            frameInterval = Math.floor(1e3 / fps);
          } else {
            frameInterval = frameYieldMs;
          }
        }
        var performWorkUntilDeadline = function() {
          if (scheduledHostCallback !== null) {
            var currentTime = exports.unstable_now();
            startTime = currentTime;
            var hasTimeRemaining = true;
            var hasMoreWork = true;
            try {
              hasMoreWork = scheduledHostCallback(hasTimeRemaining, currentTime);
            } finally {
              if (hasMoreWork) {
                schedulePerformWorkUntilDeadline();
              } else {
                isMessageLoopRunning = false;
                scheduledHostCallback = null;
              }
            }
          } else {
            isMessageLoopRunning = false;
          }
        };
        var schedulePerformWorkUntilDeadline;
        if (typeof localSetImmediate === "function") {
          schedulePerformWorkUntilDeadline = function() {
            localSetImmediate(performWorkUntilDeadline);
          };
        } else if (typeof MessageChannel !== "undefined") {
          var channel = new MessageChannel();
          var port = channel.port2;
          channel.port1.onmessage = performWorkUntilDeadline;
          schedulePerformWorkUntilDeadline = function() {
            port.postMessage(null);
          };
        } else {
          schedulePerformWorkUntilDeadline = function() {
            localSetTimeout(performWorkUntilDeadline, 0);
          };
        }
        function requestHostCallback(callback) {
          scheduledHostCallback = callback;
          if (!isMessageLoopRunning) {
            isMessageLoopRunning = true;
            schedulePerformWorkUntilDeadline();
          }
        }
        function requestHostTimeout(callback, ms2) {
          taskTimeoutID = localSetTimeout(function() {
            callback(exports.unstable_now());
          }, ms2);
        }
        function cancelHostTimeout() {
          localClearTimeout(taskTimeoutID);
          taskTimeoutID = -1;
        }
        var unstable_requestPaint = requestPaint;
        var unstable_Profiling = null;
        exports.unstable_IdlePriority = IdlePriority;
        exports.unstable_ImmediatePriority = ImmediatePriority;
        exports.unstable_LowPriority = LowPriority;
        exports.unstable_NormalPriority = NormalPriority;
        exports.unstable_Profiling = unstable_Profiling;
        exports.unstable_UserBlockingPriority = UserBlockingPriority;
        exports.unstable_cancelCallback = unstable_cancelCallback;
        exports.unstable_continueExecution = unstable_continueExecution;
        exports.unstable_forceFrameRate = forceFrameRate;
        exports.unstable_getCurrentPriorityLevel = unstable_getCurrentPriorityLevel;
        exports.unstable_getFirstCallbackNode = unstable_getFirstCallbackNode;
        exports.unstable_next = unstable_next;
        exports.unstable_pauseExecution = unstable_pauseExecution;
        exports.unstable_requestPaint = unstable_requestPaint;
        exports.unstable_runWithPriority = unstable_runWithPriority;
        exports.unstable_scheduleCallback = unstable_scheduleCallback;
        exports.unstable_shouldYield = shouldYieldToHost;
        exports.unstable_wrapCallback = unstable_wrapCallback;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/index.js
var require_scheduler = __commonJS({
  "node_modules/.pnpm/scheduler@0.23.2/node_modules/scheduler/index.js"(exports, module) {
    "use strict";
    if (false) {
      module.exports = null;
    } else {
      module.exports = require_scheduler_development();
    }
  }
});

// node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/cjs/react-dom.development.js
var require_react_dom_development = __commonJS({
  "node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/cjs/react-dom.development.js"(exports) {
    "use strict";
    if (true) {
      (function() {
        "use strict";
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStart(new Error());
        }
        var React = require_react();
        var Scheduler = require_scheduler();
        var ReactSharedInternals = React.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED;
        var suppressWarning = false;
        function setSuppressWarning(newSuppressWarning) {
          {
            suppressWarning = newSuppressWarning;
          }
        }
        function warn(format) {
          {
            if (!suppressWarning) {
              for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {
                args[_key - 1] = arguments[_key];
              }
              printWarning("warn", format, args);
            }
          }
        }
        function error(format) {
          {
            if (!suppressWarning) {
              for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key2 = 1; _key2 < _len2; _key2++) {
                args[_key2 - 1] = arguments[_key2];
              }
              printWarning("error", format, args);
            }
          }
        }
        function printWarning(level, format, args) {
          {
            var ReactDebugCurrentFrame2 = ReactSharedInternals.ReactDebugCurrentFrame;
            var stack = ReactDebugCurrentFrame2.getStackAddendum();
            if (stack !== "") {
              format += "%s";
              args = args.concat([stack]);
            }
            var argsWithFormat = args.map(function(item) {
              return String(item);
            });
            argsWithFormat.unshift("Warning: " + format);
            Function.prototype.apply.call(console[level], console, argsWithFormat);
          }
        }
        var FunctionComponent = 0;
        var ClassComponent = 1;
        var IndeterminateComponent = 2;
        var HostRoot = 3;
        var HostPortal = 4;
        var HostComponent = 5;
        var HostText = 6;
        var Fragment6 = 7;
        var Mode = 8;
        var ContextConsumer = 9;
        var ContextProvider = 10;
        var ForwardRef = 11;
        var Profiler = 12;
        var SuspenseComponent = 13;
        var MemoComponent = 14;
        var SimpleMemoComponent = 15;
        var LazyComponent = 16;
        var IncompleteClassComponent = 17;
        var DehydratedFragment = 18;
        var SuspenseListComponent = 19;
        var ScopeComponent = 21;
        var OffscreenComponent = 22;
        var LegacyHiddenComponent = 23;
        var CacheComponent = 24;
        var TracingMarkerComponent = 25;
        var enableClientRenderFallbackOnTextMismatch = true;
        var enableNewReconciler = false;
        var enableLazyContextPropagation = false;
        var enableLegacyHidden = false;
        var enableSuspenseAvoidThisFallback = false;
        var disableCommentsAsDOMContainers = true;
        var enableCustomElementPropertySupport = false;
        var warnAboutStringRefs = true;
        var enableSchedulingProfiler = true;
        var enableProfilerTimer = true;
        var enableProfilerCommitHooks = true;
        var allNativeEvents = /* @__PURE__ */ new Set();
        var registrationNameDependencies = {};
        var possibleRegistrationNames = {};
        function registerTwoPhaseEvent(registrationName, dependencies) {
          registerDirectEvent(registrationName, dependencies);
          registerDirectEvent(registrationName + "Capture", dependencies);
        }
        function registerDirectEvent(registrationName, dependencies) {
          {
            if (registrationNameDependencies[registrationName]) {
              error("EventRegistry: More than one plugin attempted to publish the same registration name, `%s`.", registrationName);
            }
          }
          registrationNameDependencies[registrationName] = dependencies;
          {
            var lowerCasedName = registrationName.toLowerCase();
            possibleRegistrationNames[lowerCasedName] = registrationName;
            if (registrationName === "onDoubleClick") {
              possibleRegistrationNames.ondblclick = registrationName;
            }
          }
          for (var i = 0; i < dependencies.length; i++) {
            allNativeEvents.add(dependencies[i]);
          }
        }
        var canUseDOM = !!(typeof window !== "undefined" && typeof window.document !== "undefined" && typeof window.document.createElement !== "undefined");
        var hasOwnProperty = Object.prototype.hasOwnProperty;
        function typeName(value) {
          {
            var hasToStringTag = typeof Symbol === "function" && Symbol.toStringTag;
            var type = hasToStringTag && value[Symbol.toStringTag] || value.constructor.name || "Object";
            return type;
          }
        }
        function willCoercionThrow(value) {
          {
            try {
              testStringCoercion(value);
              return false;
            } catch (e7) {
              return true;
            }
          }
        }
        function testStringCoercion(value) {
          return "" + value;
        }
        function checkAttributeStringCoercion(value, attributeName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` attribute is an unsupported type %s. This value must be coerced to a string before before using it here.", attributeName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkKeyStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided key is an unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkPropStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` prop is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkCSSPropertyStringCoercion(value, propName) {
          {
            if (willCoercionThrow(value)) {
              error("The provided `%s` CSS property is an unsupported type %s. This value must be coerced to a string before before using it here.", propName, typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkHtmlStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("The provided HTML markup uses a value of unsupported type %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        function checkFormFieldValueStringCoercion(value) {
          {
            if (willCoercionThrow(value)) {
              error("Form field values (value, checked, defaultValue, or defaultChecked props) must be strings, not %s. This value must be coerced to a string before before using it here.", typeName(value));
              return testStringCoercion(value);
            }
          }
        }
        var RESERVED = 0;
        var STRING = 1;
        var BOOLEANISH_STRING = 2;
        var BOOLEAN = 3;
        var OVERLOADED_BOOLEAN = 4;
        var NUMERIC = 5;
        var POSITIVE_NUMERIC = 6;
        var ATTRIBUTE_NAME_START_CHAR = ":A-Z_a-z\\u00C0-\\u00D6\\u00D8-\\u00F6\\u00F8-\\u02FF\\u0370-\\u037D\\u037F-\\u1FFF\\u200C-\\u200D\\u2070-\\u218F\\u2C00-\\u2FEF\\u3001-\\uD7FF\\uF900-\\uFDCF\\uFDF0-\\uFFFD";
        var ATTRIBUTE_NAME_CHAR = ATTRIBUTE_NAME_START_CHAR + "\\-.0-9\\u00B7\\u0300-\\u036F\\u203F-\\u2040";
        var VALID_ATTRIBUTE_NAME_REGEX = new RegExp("^[" + ATTRIBUTE_NAME_START_CHAR + "][" + ATTRIBUTE_NAME_CHAR + "]*$");
        var illegalAttributeNameCache = {};
        var validatedAttributeNameCache = {};
        function isAttributeNameSafe(attributeName) {
          if (hasOwnProperty.call(validatedAttributeNameCache, attributeName)) {
            return true;
          }
          if (hasOwnProperty.call(illegalAttributeNameCache, attributeName)) {
            return false;
          }
          if (VALID_ATTRIBUTE_NAME_REGEX.test(attributeName)) {
            validatedAttributeNameCache[attributeName] = true;
            return true;
          }
          illegalAttributeNameCache[attributeName] = true;
          {
            error("Invalid attribute name: `%s`", attributeName);
          }
          return false;
        }
        function shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null) {
            return propertyInfo.type === RESERVED;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (name.length > 2 && (name[0] === "o" || name[0] === "O") && (name[1] === "n" || name[1] === "N")) {
            return true;
          }
          return false;
        }
        function shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag) {
          if (propertyInfo !== null && propertyInfo.type === RESERVED) {
            return false;
          }
          switch (typeof value) {
            case "function":
            // $FlowIssue symbol is perfectly valid here
            case "symbol":
              return true;
            case "boolean": {
              if (isCustomComponentTag) {
                return false;
              }
              if (propertyInfo !== null) {
                return !propertyInfo.acceptsBooleans;
              } else {
                var prefix2 = name.toLowerCase().slice(0, 5);
                return prefix2 !== "data-" && prefix2 !== "aria-";
              }
            }
            default:
              return false;
          }
        }
        function shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag) {
          if (value === null || typeof value === "undefined") {
            return true;
          }
          if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, isCustomComponentTag)) {
            return true;
          }
          if (isCustomComponentTag) {
            return false;
          }
          if (propertyInfo !== null) {
            switch (propertyInfo.type) {
              case BOOLEAN:
                return !value;
              case OVERLOADED_BOOLEAN:
                return value === false;
              case NUMERIC:
                return isNaN(value);
              case POSITIVE_NUMERIC:
                return isNaN(value) || value < 1;
            }
          }
          return false;
        }
        function getPropertyInfo(name) {
          return properties.hasOwnProperty(name) ? properties[name] : null;
        }
        function PropertyInfoRecord(name, type, mustUseProperty, attributeName, attributeNamespace, sanitizeURL2, removeEmptyString) {
          this.acceptsBooleans = type === BOOLEANISH_STRING || type === BOOLEAN || type === OVERLOADED_BOOLEAN;
          this.attributeName = attributeName;
          this.attributeNamespace = attributeNamespace;
          this.mustUseProperty = mustUseProperty;
          this.propertyName = name;
          this.type = type;
          this.sanitizeURL = sanitizeURL2;
          this.removeEmptyString = removeEmptyString;
        }
        var properties = {};
        var reservedProps = [
          "children",
          "dangerouslySetInnerHTML",
          // TODO: This prevents the assignment of defaultValue to regular
          // elements (not just inputs). Now that ReactDOMInput assigns to the
          // defaultValue property -- do we need this?
          "defaultValue",
          "defaultChecked",
          "innerHTML",
          "suppressContentEditableWarning",
          "suppressHydrationWarning",
          "style"
        ];
        reservedProps.forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            RESERVED,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [["acceptCharset", "accept-charset"], ["className", "class"], ["htmlFor", "for"], ["httpEquiv", "http-equiv"]].forEach(function(_ref) {
          var name = _ref[0], attributeName = _ref[1];
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["contentEditable", "draggable", "spellCheck", "value"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["autoReverse", "externalResourcesRequired", "focusable", "preserveAlpha"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEANISH_STRING,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "allowFullScreen",
          "async",
          // Note: there is a special case that prevents it from being written to the DOM
          // on the client side because the browsers are inconsistent. Instead we call focus().
          "autoFocus",
          "autoPlay",
          "controls",
          "default",
          "defer",
          "disabled",
          "disablePictureInPicture",
          "disableRemotePlayback",
          "formNoValidate",
          "hidden",
          "loop",
          "noModule",
          "noValidate",
          "open",
          "playsInline",
          "readOnly",
          "required",
          "reversed",
          "scoped",
          "seamless",
          // Microdata
          "itemScope"
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "checked",
          // Note: `option.selected` is not updated if `select.multiple` is
          // disabled with `removeAttribute`. We have special logic for handling this.
          "multiple",
          "muted",
          "selected"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            BOOLEAN,
            true,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "capture",
          "download"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            OVERLOADED_BOOLEAN,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "cols",
          "rows",
          "size",
          "span"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            POSITIVE_NUMERIC,
            false,
            // mustUseProperty
            name,
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        ["rowSpan", "start"].forEach(function(name) {
          properties[name] = new PropertyInfoRecord(
            name,
            NUMERIC,
            false,
            // mustUseProperty
            name.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var CAMELIZE = /[\-\:]([a-z])/g;
        var capitalize = function(token) {
          return token[1].toUpperCase();
        };
        [
          "accent-height",
          "alignment-baseline",
          "arabic-form",
          "baseline-shift",
          "cap-height",
          "clip-path",
          "clip-rule",
          "color-interpolation",
          "color-interpolation-filters",
          "color-profile",
          "color-rendering",
          "dominant-baseline",
          "enable-background",
          "fill-opacity",
          "fill-rule",
          "flood-color",
          "flood-opacity",
          "font-family",
          "font-size",
          "font-size-adjust",
          "font-stretch",
          "font-style",
          "font-variant",
          "font-weight",
          "glyph-name",
          "glyph-orientation-horizontal",
          "glyph-orientation-vertical",
          "horiz-adv-x",
          "horiz-origin-x",
          "image-rendering",
          "letter-spacing",
          "lighting-color",
          "marker-end",
          "marker-mid",
          "marker-start",
          "overline-position",
          "overline-thickness",
          "paint-order",
          "panose-1",
          "pointer-events",
          "rendering-intent",
          "shape-rendering",
          "stop-color",
          "stop-opacity",
          "strikethrough-position",
          "strikethrough-thickness",
          "stroke-dasharray",
          "stroke-dashoffset",
          "stroke-linecap",
          "stroke-linejoin",
          "stroke-miterlimit",
          "stroke-opacity",
          "stroke-width",
          "text-anchor",
          "text-decoration",
          "text-rendering",
          "underline-position",
          "underline-thickness",
          "unicode-bidi",
          "unicode-range",
          "units-per-em",
          "v-alphabetic",
          "v-hanging",
          "v-ideographic",
          "v-mathematical",
          "vector-effect",
          "vert-adv-y",
          "vert-origin-x",
          "vert-origin-y",
          "word-spacing",
          "writing-mode",
          "xmlns:xlink",
          "x-height"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xlink:actuate",
          "xlink:arcrole",
          "xlink:role",
          "xlink:show",
          "xlink:title",
          "xlink:type"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/1999/xlink",
            false,
            // sanitizeURL
            false
          );
        });
        [
          "xml:base",
          "xml:lang",
          "xml:space"
          // NOTE: if you add a camelCased prop to this list,
          // you'll need to set attributeName to name.toLowerCase()
          // instead in the assignment below.
        ].forEach(function(attributeName) {
          var name = attributeName.replace(CAMELIZE, capitalize);
          properties[name] = new PropertyInfoRecord(
            name,
            STRING,
            false,
            // mustUseProperty
            attributeName,
            "http://www.w3.org/XML/1998/namespace",
            false,
            // sanitizeURL
            false
          );
        });
        ["tabIndex", "crossOrigin"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            false,
            // sanitizeURL
            false
          );
        });
        var xlinkHref = "xlinkHref";
        properties[xlinkHref] = new PropertyInfoRecord(
          "xlinkHref",
          STRING,
          false,
          // mustUseProperty
          "xlink:href",
          "http://www.w3.org/1999/xlink",
          true,
          // sanitizeURL
          false
        );
        ["src", "href", "action", "formAction"].forEach(function(attributeName) {
          properties[attributeName] = new PropertyInfoRecord(
            attributeName,
            STRING,
            false,
            // mustUseProperty
            attributeName.toLowerCase(),
            // attributeName
            null,
            // attributeNamespace
            true,
            // sanitizeURL
            true
          );
        });
        var isJavaScriptProtocol = /^[\u0000-\u001F ]*j[\r\n\t]*a[\r\n\t]*v[\r\n\t]*a[\r\n\t]*s[\r\n\t]*c[\r\n\t]*r[\r\n\t]*i[\r\n\t]*p[\r\n\t]*t[\r\n\t]*\:/i;
        var didWarn = false;
        function sanitizeURL(url) {
          {
            if (!didWarn && isJavaScriptProtocol.test(url)) {
              didWarn = true;
              error("A future version of React will block javascript: URLs as a security precaution. Use event handlers instead if you can. If you need to generate unsafe HTML try using dangerouslySetInnerHTML instead. React was passed %s.", JSON.stringify(url));
            }
          }
        }
        function getValueForProperty(node, name, expected, propertyInfo) {
          {
            if (propertyInfo.mustUseProperty) {
              var propertyName = propertyInfo.propertyName;
              return node[propertyName];
            } else {
              {
                checkAttributeStringCoercion(expected, name);
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL("" + expected);
              }
              var attributeName = propertyInfo.attributeName;
              var stringValue = null;
              if (propertyInfo.type === OVERLOADED_BOOLEAN) {
                if (node.hasAttribute(attributeName)) {
                  var value = node.getAttribute(attributeName);
                  if (value === "") {
                    return true;
                  }
                  if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                    return value;
                  }
                  if (value === "" + expected) {
                    return expected;
                  }
                  return value;
                }
              } else if (node.hasAttribute(attributeName)) {
                if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                  return node.getAttribute(attributeName);
                }
                if (propertyInfo.type === BOOLEAN) {
                  return expected;
                }
                stringValue = node.getAttribute(attributeName);
              }
              if (shouldRemoveAttribute(name, expected, propertyInfo, false)) {
                return stringValue === null ? expected : stringValue;
              } else if (stringValue === "" + expected) {
                return expected;
              } else {
                return stringValue;
              }
            }
          }
        }
        function getValueForAttribute(node, name, expected, isCustomComponentTag) {
          {
            if (!isAttributeNameSafe(name)) {
              return;
            }
            if (!node.hasAttribute(name)) {
              return expected === void 0 ? void 0 : null;
            }
            var value = node.getAttribute(name);
            {
              checkAttributeStringCoercion(expected, name);
            }
            if (value === "" + expected) {
              return expected;
            }
            return value;
          }
        }
        function setValueForProperty(node, name, value, isCustomComponentTag) {
          var propertyInfo = getPropertyInfo(name);
          if (shouldIgnoreAttribute(name, propertyInfo, isCustomComponentTag)) {
            return;
          }
          if (shouldRemoveAttribute(name, value, propertyInfo, isCustomComponentTag)) {
            value = null;
          }
          if (isCustomComponentTag || propertyInfo === null) {
            if (isAttributeNameSafe(name)) {
              var _attributeName = name;
              if (value === null) {
                node.removeAttribute(_attributeName);
              } else {
                {
                  checkAttributeStringCoercion(value, name);
                }
                node.setAttribute(_attributeName, "" + value);
              }
            }
            return;
          }
          var mustUseProperty = propertyInfo.mustUseProperty;
          if (mustUseProperty) {
            var propertyName = propertyInfo.propertyName;
            if (value === null) {
              var type = propertyInfo.type;
              node[propertyName] = type === BOOLEAN ? false : "";
            } else {
              node[propertyName] = value;
            }
            return;
          }
          var attributeName = propertyInfo.attributeName, attributeNamespace = propertyInfo.attributeNamespace;
          if (value === null) {
            node.removeAttribute(attributeName);
          } else {
            var _type = propertyInfo.type;
            var attributeValue;
            if (_type === BOOLEAN || _type === OVERLOADED_BOOLEAN && value === true) {
              attributeValue = "";
            } else {
              {
                {
                  checkAttributeStringCoercion(value, attributeName);
                }
                attributeValue = "" + value;
              }
              if (propertyInfo.sanitizeURL) {
                sanitizeURL(attributeValue.toString());
              }
            }
            if (attributeNamespace) {
              node.setAttributeNS(attributeNamespace, attributeName, attributeValue);
            } else {
              node.setAttribute(attributeName, attributeValue);
            }
          }
        }
        var REACT_ELEMENT_TYPE = Symbol.for("react.element");
        var REACT_PORTAL_TYPE = Symbol.for("react.portal");
        var REACT_FRAGMENT_TYPE = Symbol.for("react.fragment");
        var REACT_STRICT_MODE_TYPE = Symbol.for("react.strict_mode");
        var REACT_PROFILER_TYPE = Symbol.for("react.profiler");
        var REACT_PROVIDER_TYPE = Symbol.for("react.provider");
        var REACT_CONTEXT_TYPE = Symbol.for("react.context");
        var REACT_FORWARD_REF_TYPE = Symbol.for("react.forward_ref");
        var REACT_SUSPENSE_TYPE = Symbol.for("react.suspense");
        var REACT_SUSPENSE_LIST_TYPE = Symbol.for("react.suspense_list");
        var REACT_MEMO_TYPE = Symbol.for("react.memo");
        var REACT_LAZY_TYPE = Symbol.for("react.lazy");
        var REACT_SCOPE_TYPE = Symbol.for("react.scope");
        var REACT_DEBUG_TRACING_MODE_TYPE = Symbol.for("react.debug_trace_mode");
        var REACT_OFFSCREEN_TYPE = Symbol.for("react.offscreen");
        var REACT_LEGACY_HIDDEN_TYPE = Symbol.for("react.legacy_hidden");
        var REACT_CACHE_TYPE = Symbol.for("react.cache");
        var REACT_TRACING_MARKER_TYPE = Symbol.for("react.tracing_marker");
        var MAYBE_ITERATOR_SYMBOL = Symbol.iterator;
        var FAUX_ITERATOR_SYMBOL = "@@iterator";
        function getIteratorFn(maybeIterable) {
          if (maybeIterable === null || typeof maybeIterable !== "object") {
            return null;
          }
          var maybeIterator = MAYBE_ITERATOR_SYMBOL && maybeIterable[MAYBE_ITERATOR_SYMBOL] || maybeIterable[FAUX_ITERATOR_SYMBOL];
          if (typeof maybeIterator === "function") {
            return maybeIterator;
          }
          return null;
        }
        var assign = Object.assign;
        var disabledDepth = 0;
        var prevLog;
        var prevInfo;
        var prevWarn;
        var prevError;
        var prevGroup;
        var prevGroupCollapsed;
        var prevGroupEnd;
        function disabledLog() {
        }
        disabledLog.__reactDisabledLog = true;
        function disableLogs() {
          {
            if (disabledDepth === 0) {
              prevLog = console.log;
              prevInfo = console.info;
              prevWarn = console.warn;
              prevError = console.error;
              prevGroup = console.group;
              prevGroupCollapsed = console.groupCollapsed;
              prevGroupEnd = console.groupEnd;
              var props = {
                configurable: true,
                enumerable: true,
                value: disabledLog,
                writable: true
              };
              Object.defineProperties(console, {
                info: props,
                log: props,
                warn: props,
                error: props,
                group: props,
                groupCollapsed: props,
                groupEnd: props
              });
            }
            disabledDepth++;
          }
        }
        function reenableLogs() {
          {
            disabledDepth--;
            if (disabledDepth === 0) {
              var props = {
                configurable: true,
                enumerable: true,
                writable: true
              };
              Object.defineProperties(console, {
                log: assign({}, props, {
                  value: prevLog
                }),
                info: assign({}, props, {
                  value: prevInfo
                }),
                warn: assign({}, props, {
                  value: prevWarn
                }),
                error: assign({}, props, {
                  value: prevError
                }),
                group: assign({}, props, {
                  value: prevGroup
                }),
                groupCollapsed: assign({}, props, {
                  value: prevGroupCollapsed
                }),
                groupEnd: assign({}, props, {
                  value: prevGroupEnd
                })
              });
            }
            if (disabledDepth < 0) {
              error("disabledDepth fell below zero. This is a bug in React. Please file an issue.");
            }
          }
        }
        var ReactCurrentDispatcher = ReactSharedInternals.ReactCurrentDispatcher;
        var prefix;
        function describeBuiltInComponentFrame(name, source, ownerFn) {
          {
            if (prefix === void 0) {
              try {
                throw Error();
              } catch (x7) {
                var match = x7.stack.trim().match(/\n( *(at )?)/);
                prefix = match && match[1] || "";
              }
            }
            return "\n" + prefix + name;
          }
        }
        var reentry = false;
        var componentFrameCache;
        {
          var PossiblyWeakMap = typeof WeakMap === "function" ? WeakMap : Map;
          componentFrameCache = new PossiblyWeakMap();
        }
        function describeNativeComponentFrame(fn, construct) {
          if (!fn || reentry) {
            return "";
          }
          {
            var frame = componentFrameCache.get(fn);
            if (frame !== void 0) {
              return frame;
            }
          }
          var control;
          reentry = true;
          var previousPrepareStackTrace = Error.prepareStackTrace;
          Error.prepareStackTrace = void 0;
          var previousDispatcher;
          {
            previousDispatcher = ReactCurrentDispatcher.current;
            ReactCurrentDispatcher.current = null;
            disableLogs();
          }
          try {
            if (construct) {
              var Fake = function() {
                throw Error();
              };
              Object.defineProperty(Fake.prototype, "props", {
                set: function() {
                  throw Error();
                }
              });
              if (typeof Reflect === "object" && Reflect.construct) {
                try {
                  Reflect.construct(Fake, []);
                } catch (x7) {
                  control = x7;
                }
                Reflect.construct(fn, [], Fake);
              } else {
                try {
                  Fake.call();
                } catch (x7) {
                  control = x7;
                }
                fn.call(Fake.prototype);
              }
            } else {
              try {
                throw Error();
              } catch (x7) {
                control = x7;
              }
              fn();
            }
          } catch (sample) {
            if (sample && control && typeof sample.stack === "string") {
              var sampleLines = sample.stack.split("\n");
              var controlLines = control.stack.split("\n");
              var s4 = sampleLines.length - 1;
              var c = controlLines.length - 1;
              while (s4 >= 1 && c >= 0 && sampleLines[s4] !== controlLines[c]) {
                c--;
              }
              for (; s4 >= 1 && c >= 0; s4--, c--) {
                if (sampleLines[s4] !== controlLines[c]) {
                  if (s4 !== 1 || c !== 1) {
                    do {
                      s4--;
                      c--;
                      if (c < 0 || sampleLines[s4] !== controlLines[c]) {
                        var _frame = "\n" + sampleLines[s4].replace(" at new ", " at ");
                        if (fn.displayName && _frame.includes("<anonymous>")) {
                          _frame = _frame.replace("<anonymous>", fn.displayName);
                        }
                        {
                          if (typeof fn === "function") {
                            componentFrameCache.set(fn, _frame);
                          }
                        }
                        return _frame;
                      }
                    } while (s4 >= 1 && c >= 0);
                  }
                  break;
                }
              }
            }
          } finally {
            reentry = false;
            {
              ReactCurrentDispatcher.current = previousDispatcher;
              reenableLogs();
            }
            Error.prepareStackTrace = previousPrepareStackTrace;
          }
          var name = fn ? fn.displayName || fn.name : "";
          var syntheticFrame = name ? describeBuiltInComponentFrame(name) : "";
          {
            if (typeof fn === "function") {
              componentFrameCache.set(fn, syntheticFrame);
            }
          }
          return syntheticFrame;
        }
        function describeClassComponentFrame(ctor, source, ownerFn) {
          {
            return describeNativeComponentFrame(ctor, true);
          }
        }
        function describeFunctionComponentFrame(fn, source, ownerFn) {
          {
            return describeNativeComponentFrame(fn, false);
          }
        }
        function shouldConstruct(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function describeUnknownElementTypeFrameInDEV(type, source, ownerFn) {
          if (type == null) {
            return "";
          }
          if (typeof type === "function") {
            {
              return describeNativeComponentFrame(type, shouldConstruct(type));
            }
          }
          if (typeof type === "string") {
            return describeBuiltInComponentFrame(type);
          }
          switch (type) {
            case REACT_SUSPENSE_TYPE:
              return describeBuiltInComponentFrame("Suspense");
            case REACT_SUSPENSE_LIST_TYPE:
              return describeBuiltInComponentFrame("SuspenseList");
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_FORWARD_REF_TYPE:
                return describeFunctionComponentFrame(type.render);
              case REACT_MEMO_TYPE:
                return describeUnknownElementTypeFrameInDEV(type.type, source, ownerFn);
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return describeUnknownElementTypeFrameInDEV(init(payload), source, ownerFn);
                } catch (x7) {
                }
              }
            }
          }
          return "";
        }
        function describeFiber(fiber) {
          var owner = fiber._debugOwner ? fiber._debugOwner.type : null;
          var source = fiber._debugSource;
          switch (fiber.tag) {
            case HostComponent:
              return describeBuiltInComponentFrame(fiber.type);
            case LazyComponent:
              return describeBuiltInComponentFrame("Lazy");
            case SuspenseComponent:
              return describeBuiltInComponentFrame("Suspense");
            case SuspenseListComponent:
              return describeBuiltInComponentFrame("SuspenseList");
            case FunctionComponent:
            case IndeterminateComponent:
            case SimpleMemoComponent:
              return describeFunctionComponentFrame(fiber.type);
            case ForwardRef:
              return describeFunctionComponentFrame(fiber.type.render);
            case ClassComponent:
              return describeClassComponentFrame(fiber.type);
            default:
              return "";
          }
        }
        function getStackByFiberInDevAndProd(workInProgress2) {
          try {
            var info = "";
            var node = workInProgress2;
            do {
              info += describeFiber(node);
              node = node.return;
            } while (node);
            return info;
          } catch (x7) {
            return "\nError generating stack: " + x7.message + "\n" + x7.stack;
          }
        }
        function getWrappedName(outerType, innerType, wrapperName) {
          var displayName = outerType.displayName;
          if (displayName) {
            return displayName;
          }
          var functionName = innerType.displayName || innerType.name || "";
          return functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName;
        }
        function getContextName(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromType(type) {
          if (type == null) {
            return null;
          }
          {
            if (typeof type.tag === "number") {
              error("Received an unexpected object in getComponentNameFromType(). This is likely a bug in React. Please file an issue.");
            }
          }
          if (typeof type === "function") {
            return type.displayName || type.name || null;
          }
          if (typeof type === "string") {
            return type;
          }
          switch (type) {
            case REACT_FRAGMENT_TYPE:
              return "Fragment";
            case REACT_PORTAL_TYPE:
              return "Portal";
            case REACT_PROFILER_TYPE:
              return "Profiler";
            case REACT_STRICT_MODE_TYPE:
              return "StrictMode";
            case REACT_SUSPENSE_TYPE:
              return "Suspense";
            case REACT_SUSPENSE_LIST_TYPE:
              return "SuspenseList";
          }
          if (typeof type === "object") {
            switch (type.$$typeof) {
              case REACT_CONTEXT_TYPE:
                var context = type;
                return getContextName(context) + ".Consumer";
              case REACT_PROVIDER_TYPE:
                var provider = type;
                return getContextName(provider._context) + ".Provider";
              case REACT_FORWARD_REF_TYPE:
                return getWrappedName(type, type.render, "ForwardRef");
              case REACT_MEMO_TYPE:
                var outerName = type.displayName || null;
                if (outerName !== null) {
                  return outerName;
                }
                return getComponentNameFromType(type.type) || "Memo";
              case REACT_LAZY_TYPE: {
                var lazyComponent = type;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  return getComponentNameFromType(init(payload));
                } catch (x7) {
                  return null;
                }
              }
            }
          }
          return null;
        }
        function getWrappedName$1(outerType, innerType, wrapperName) {
          var functionName = innerType.displayName || innerType.name || "";
          return outerType.displayName || (functionName !== "" ? wrapperName + "(" + functionName + ")" : wrapperName);
        }
        function getContextName$1(type) {
          return type.displayName || "Context";
        }
        function getComponentNameFromFiber(fiber) {
          var tag = fiber.tag, type = fiber.type;
          switch (tag) {
            case CacheComponent:
              return "Cache";
            case ContextConsumer:
              var context = type;
              return getContextName$1(context) + ".Consumer";
            case ContextProvider:
              var provider = type;
              return getContextName$1(provider._context) + ".Provider";
            case DehydratedFragment:
              return "DehydratedFragment";
            case ForwardRef:
              return getWrappedName$1(type, type.render, "ForwardRef");
            case Fragment6:
              return "Fragment";
            case HostComponent:
              return type;
            case HostPortal:
              return "Portal";
            case HostRoot:
              return "Root";
            case HostText:
              return "Text";
            case LazyComponent:
              return getComponentNameFromType(type);
            case Mode:
              if (type === REACT_STRICT_MODE_TYPE) {
                return "StrictMode";
              }
              return "Mode";
            case OffscreenComponent:
              return "Offscreen";
            case Profiler:
              return "Profiler";
            case ScopeComponent:
              return "Scope";
            case SuspenseComponent:
              return "Suspense";
            case SuspenseListComponent:
              return "SuspenseList";
            case TracingMarkerComponent:
              return "TracingMarker";
            // The display name for this tags come from the user-provided type:
            case ClassComponent:
            case FunctionComponent:
            case IncompleteClassComponent:
            case IndeterminateComponent:
            case MemoComponent:
            case SimpleMemoComponent:
              if (typeof type === "function") {
                return type.displayName || type.name || null;
              }
              if (typeof type === "string") {
                return type;
              }
              break;
          }
          return null;
        }
        var ReactDebugCurrentFrame = ReactSharedInternals.ReactDebugCurrentFrame;
        var current = null;
        var isRendering = false;
        function getCurrentFiberOwnerNameInDevOrNull() {
          {
            if (current === null) {
              return null;
            }
            var owner = current._debugOwner;
            if (owner !== null && typeof owner !== "undefined") {
              return getComponentNameFromFiber(owner);
            }
          }
          return null;
        }
        function getCurrentFiberStackInDev() {
          {
            if (current === null) {
              return "";
            }
            return getStackByFiberInDevAndProd(current);
          }
        }
        function resetCurrentFiber() {
          {
            ReactDebugCurrentFrame.getCurrentStack = null;
            current = null;
            isRendering = false;
          }
        }
        function setCurrentFiber(fiber) {
          {
            ReactDebugCurrentFrame.getCurrentStack = fiber === null ? null : getCurrentFiberStackInDev;
            current = fiber;
            isRendering = false;
          }
        }
        function getCurrentFiber() {
          {
            return current;
          }
        }
        function setIsRendering(rendering) {
          {
            isRendering = rendering;
          }
        }
        function toString(value) {
          return "" + value;
        }
        function getToStringValue(value) {
          switch (typeof value) {
            case "boolean":
            case "number":
            case "string":
            case "undefined":
              return value;
            case "object":
              {
                checkFormFieldValueStringCoercion(value);
              }
              return value;
            default:
              return "";
          }
        }
        var hasReadOnlyValue = {
          button: true,
          checkbox: true,
          image: true,
          hidden: true,
          radio: true,
          reset: true,
          submit: true
        };
        function checkControlledValueProps(tagName, props) {
          {
            if (!(hasReadOnlyValue[props.type] || props.onChange || props.onInput || props.readOnly || props.disabled || props.value == null)) {
              error("You provided a `value` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultValue`. Otherwise, set either `onChange` or `readOnly`.");
            }
            if (!(props.onChange || props.readOnly || props.disabled || props.checked == null)) {
              error("You provided a `checked` prop to a form field without an `onChange` handler. This will render a read-only field. If the field should be mutable use `defaultChecked`. Otherwise, set either `onChange` or `readOnly`.");
            }
          }
        }
        function isCheckable(elem) {
          var type = elem.type;
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (type === "checkbox" || type === "radio");
        }
        function getTracker(node) {
          return node._valueTracker;
        }
        function detachTracker(node) {
          node._valueTracker = null;
        }
        function getValueFromNode(node) {
          var value = "";
          if (!node) {
            return value;
          }
          if (isCheckable(node)) {
            value = node.checked ? "true" : "false";
          } else {
            value = node.value;
          }
          return value;
        }
        function trackValueOnNode(node) {
          var valueField = isCheckable(node) ? "checked" : "value";
          var descriptor = Object.getOwnPropertyDescriptor(node.constructor.prototype, valueField);
          {
            checkFormFieldValueStringCoercion(node[valueField]);
          }
          var currentValue = "" + node[valueField];
          if (node.hasOwnProperty(valueField) || typeof descriptor === "undefined" || typeof descriptor.get !== "function" || typeof descriptor.set !== "function") {
            return;
          }
          var get2 = descriptor.get, set2 = descriptor.set;
          Object.defineProperty(node, valueField, {
            configurable: true,
            get: function() {
              return get2.call(this);
            },
            set: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
              set2.call(this, value);
            }
          });
          Object.defineProperty(node, valueField, {
            enumerable: descriptor.enumerable
          });
          var tracker = {
            getValue: function() {
              return currentValue;
            },
            setValue: function(value) {
              {
                checkFormFieldValueStringCoercion(value);
              }
              currentValue = "" + value;
            },
            stopTracking: function() {
              detachTracker(node);
              delete node[valueField];
            }
          };
          return tracker;
        }
        function track(node) {
          if (getTracker(node)) {
            return;
          }
          node._valueTracker = trackValueOnNode(node);
        }
        function updateValueIfChanged(node) {
          if (!node) {
            return false;
          }
          var tracker = getTracker(node);
          if (!tracker) {
            return true;
          }
          var lastValue = tracker.getValue();
          var nextValue = getValueFromNode(node);
          if (nextValue !== lastValue) {
            tracker.setValue(nextValue);
            return true;
          }
          return false;
        }
        function getActiveElement(doc) {
          doc = doc || (typeof document !== "undefined" ? document : void 0);
          if (typeof doc === "undefined") {
            return null;
          }
          try {
            return doc.activeElement || doc.body;
          } catch (e7) {
            return doc.body;
          }
        }
        var didWarnValueDefaultValue = false;
        var didWarnCheckedDefaultChecked = false;
        var didWarnControlledToUncontrolled = false;
        var didWarnUncontrolledToControlled = false;
        function isControlled(props) {
          var usesChecked = props.type === "checkbox" || props.type === "radio";
          return usesChecked ? props.checked != null : props.value != null;
        }
        function getHostProps(element, props) {
          var node = element;
          var checked = props.checked;
          var hostProps = assign({}, props, {
            defaultChecked: void 0,
            defaultValue: void 0,
            value: void 0,
            checked: checked != null ? checked : node._wrapperState.initialChecked
          });
          return hostProps;
        }
        function initWrapperState(element, props) {
          {
            checkControlledValueProps("input", props);
            if (props.checked !== void 0 && props.defaultChecked !== void 0 && !didWarnCheckedDefaultChecked) {
              error("%s contains an input of type %s with both checked and defaultChecked props. Input elements must be either controlled or uncontrolled (specify either the checked prop, or the defaultChecked prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnCheckedDefaultChecked = true;
            }
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue) {
              error("%s contains an input of type %s with both value and defaultValue props. Input elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled input element and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component", props.type);
              didWarnValueDefaultValue = true;
            }
          }
          var node = element;
          var defaultValue = props.defaultValue == null ? "" : props.defaultValue;
          node._wrapperState = {
            initialChecked: props.checked != null ? props.checked : props.defaultChecked,
            initialValue: getToStringValue(props.value != null ? props.value : defaultValue),
            controlled: isControlled(props)
          };
        }
        function updateChecked(element, props) {
          var node = element;
          var checked = props.checked;
          if (checked != null) {
            setValueForProperty(node, "checked", checked, false);
          }
        }
        function updateWrapper(element, props) {
          var node = element;
          {
            var controlled = isControlled(props);
            if (!node._wrapperState.controlled && controlled && !didWarnUncontrolledToControlled) {
              error("A component is changing an uncontrolled input to be controlled. This is likely caused by the value changing from undefined to a defined value, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnUncontrolledToControlled = true;
            }
            if (node._wrapperState.controlled && !controlled && !didWarnControlledToUncontrolled) {
              error("A component is changing a controlled input to be uncontrolled. This is likely caused by the value changing from a defined to undefined, which should not happen. Decide between using a controlled or uncontrolled input element for the lifetime of the component. More info: https://reactjs.org/link/controlled-components");
              didWarnControlledToUncontrolled = true;
            }
          }
          updateChecked(element, props);
          var value = getToStringValue(props.value);
          var type = props.type;
          if (value != null) {
            if (type === "number") {
              if (value === 0 && node.value === "" || // We explicitly want to coerce to number here if possible.
              // eslint-disable-next-line
              node.value != value) {
                node.value = toString(value);
              }
            } else if (node.value !== toString(value)) {
              node.value = toString(value);
            }
          } else if (type === "submit" || type === "reset") {
            node.removeAttribute("value");
            return;
          }
          {
            if (props.hasOwnProperty("value")) {
              setDefaultValue(node, props.type, value);
            } else if (props.hasOwnProperty("defaultValue")) {
              setDefaultValue(node, props.type, getToStringValue(props.defaultValue));
            }
          }
          {
            if (props.checked == null && props.defaultChecked != null) {
              node.defaultChecked = !!props.defaultChecked;
            }
          }
        }
        function postMountWrapper(element, props, isHydrating2) {
          var node = element;
          if (props.hasOwnProperty("value") || props.hasOwnProperty("defaultValue")) {
            var type = props.type;
            var isButton = type === "submit" || type === "reset";
            if (isButton && (props.value === void 0 || props.value === null)) {
              return;
            }
            var initialValue = toString(node._wrapperState.initialValue);
            if (!isHydrating2) {
              {
                if (initialValue !== node.value) {
                  node.value = initialValue;
                }
              }
            }
            {
              node.defaultValue = initialValue;
            }
          }
          var name = node.name;
          if (name !== "") {
            node.name = "";
          }
          {
            node.defaultChecked = !node.defaultChecked;
            node.defaultChecked = !!node._wrapperState.initialChecked;
          }
          if (name !== "") {
            node.name = name;
          }
        }
        function restoreControlledState(element, props) {
          var node = element;
          updateWrapper(node, props);
          updateNamedCousins(node, props);
        }
        function updateNamedCousins(rootNode, props) {
          var name = props.name;
          if (props.type === "radio" && name != null) {
            var queryRoot = rootNode;
            while (queryRoot.parentNode) {
              queryRoot = queryRoot.parentNode;
            }
            {
              checkAttributeStringCoercion(name, "name");
            }
            var group = queryRoot.querySelectorAll("input[name=" + JSON.stringify("" + name) + '][type="radio"]');
            for (var i = 0; i < group.length; i++) {
              var otherNode = group[i];
              if (otherNode === rootNode || otherNode.form !== rootNode.form) {
                continue;
              }
              var otherProps = getFiberCurrentPropsFromNode(otherNode);
              if (!otherProps) {
                throw new Error("ReactDOMInput: Mixing React and non-React radio inputs with the same `name` is not supported.");
              }
              updateValueIfChanged(otherNode);
              updateWrapper(otherNode, otherProps);
            }
          }
        }
        function setDefaultValue(node, type, value) {
          if (
            // Focused number inputs synchronize on blur. See ChangeEventPlugin.js
            type !== "number" || getActiveElement(node.ownerDocument) !== node
          ) {
            if (value == null) {
              node.defaultValue = toString(node._wrapperState.initialValue);
            } else if (node.defaultValue !== toString(value)) {
              node.defaultValue = toString(value);
            }
          }
        }
        var didWarnSelectedSetOnOption = false;
        var didWarnInvalidChild = false;
        var didWarnInvalidInnerHTML = false;
        function validateProps(element, props) {
          {
            if (props.value == null) {
              if (typeof props.children === "object" && props.children !== null) {
                React.Children.forEach(props.children, function(child) {
                  if (child == null) {
                    return;
                  }
                  if (typeof child === "string" || typeof child === "number") {
                    return;
                  }
                  if (!didWarnInvalidChild) {
                    didWarnInvalidChild = true;
                    error("Cannot infer the option value of complex children. Pass a `value` prop or use a plain string as children to <option>.");
                  }
                });
              } else if (props.dangerouslySetInnerHTML != null) {
                if (!didWarnInvalidInnerHTML) {
                  didWarnInvalidInnerHTML = true;
                  error("Pass a `value` prop if you set dangerouslyInnerHTML so React knows which value should be selected.");
                }
              }
            }
            if (props.selected != null && !didWarnSelectedSetOnOption) {
              error("Use the `defaultValue` or `value` props on <select> instead of setting `selected` on <option>.");
              didWarnSelectedSetOnOption = true;
            }
          }
        }
        function postMountWrapper$1(element, props) {
          if (props.value != null) {
            element.setAttribute("value", toString(getToStringValue(props.value)));
          }
        }
        var isArrayImpl = Array.isArray;
        function isArray(a7) {
          return isArrayImpl(a7);
        }
        var didWarnValueDefaultValue$1;
        {
          didWarnValueDefaultValue$1 = false;
        }
        function getDeclarationErrorAddendum() {
          var ownerName = getCurrentFiberOwnerNameInDevOrNull();
          if (ownerName) {
            return "\n\nCheck the render method of `" + ownerName + "`.";
          }
          return "";
        }
        var valuePropNames = ["value", "defaultValue"];
        function checkSelectPropTypes(props) {
          {
            checkControlledValueProps("select", props);
            for (var i = 0; i < valuePropNames.length; i++) {
              var propName = valuePropNames[i];
              if (props[propName] == null) {
                continue;
              }
              var propNameIsArray = isArray(props[propName]);
              if (props.multiple && !propNameIsArray) {
                error("The `%s` prop supplied to <select> must be an array if `multiple` is true.%s", propName, getDeclarationErrorAddendum());
              } else if (!props.multiple && propNameIsArray) {
                error("The `%s` prop supplied to <select> must be a scalar value if `multiple` is false.%s", propName, getDeclarationErrorAddendum());
              }
            }
          }
        }
        function updateOptions(node, multiple, propValue, setDefaultSelected) {
          var options2 = node.options;
          if (multiple) {
            var selectedValues = propValue;
            var selectedValue = {};
            for (var i = 0; i < selectedValues.length; i++) {
              selectedValue["$" + selectedValues[i]] = true;
            }
            for (var _i2 = 0; _i2 < options2.length; _i2++) {
              var selected = selectedValue.hasOwnProperty("$" + options2[_i2].value);
              if (options2[_i2].selected !== selected) {
                options2[_i2].selected = selected;
              }
              if (selected && setDefaultSelected) {
                options2[_i2].defaultSelected = true;
              }
            }
          } else {
            var _selectedValue = toString(getToStringValue(propValue));
            var defaultSelected = null;
            for (var _i22 = 0; _i22 < options2.length; _i22++) {
              if (options2[_i22].value === _selectedValue) {
                options2[_i22].selected = true;
                if (setDefaultSelected) {
                  options2[_i22].defaultSelected = true;
                }
                return;
              }
              if (defaultSelected === null && !options2[_i22].disabled) {
                defaultSelected = options2[_i22];
              }
            }
            if (defaultSelected !== null) {
              defaultSelected.selected = true;
            }
          }
        }
        function getHostProps$1(element, props) {
          return assign({}, props, {
            value: void 0
          });
        }
        function initWrapperState$1(element, props) {
          var node = element;
          {
            checkSelectPropTypes(props);
          }
          node._wrapperState = {
            wasMultiple: !!props.multiple
          };
          {
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValueDefaultValue$1) {
              error("Select elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled select element and remove one of these props. More info: https://reactjs.org/link/controlled-components");
              didWarnValueDefaultValue$1 = true;
            }
          }
        }
        function postMountWrapper$2(element, props) {
          var node = element;
          node.multiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (props.defaultValue != null) {
            updateOptions(node, !!props.multiple, props.defaultValue, true);
          }
        }
        function postUpdateWrapper(element, props) {
          var node = element;
          var wasMultiple = node._wrapperState.wasMultiple;
          node._wrapperState.wasMultiple = !!props.multiple;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          } else if (wasMultiple !== !!props.multiple) {
            if (props.defaultValue != null) {
              updateOptions(node, !!props.multiple, props.defaultValue, true);
            } else {
              updateOptions(node, !!props.multiple, props.multiple ? [] : "", false);
            }
          }
        }
        function restoreControlledState$1(element, props) {
          var node = element;
          var value = props.value;
          if (value != null) {
            updateOptions(node, !!props.multiple, value, false);
          }
        }
        var didWarnValDefaultVal = false;
        function getHostProps$2(element, props) {
          var node = element;
          if (props.dangerouslySetInnerHTML != null) {
            throw new Error("`dangerouslySetInnerHTML` does not make sense on <textarea>.");
          }
          var hostProps = assign({}, props, {
            value: void 0,
            defaultValue: void 0,
            children: toString(node._wrapperState.initialValue)
          });
          return hostProps;
        }
        function initWrapperState$2(element, props) {
          var node = element;
          {
            checkControlledValueProps("textarea", props);
            if (props.value !== void 0 && props.defaultValue !== void 0 && !didWarnValDefaultVal) {
              error("%s contains a textarea with both value and defaultValue props. Textarea elements must be either controlled or uncontrolled (specify either the value prop, or the defaultValue prop, but not both). Decide between using a controlled or uncontrolled textarea and remove one of these props. More info: https://reactjs.org/link/controlled-components", getCurrentFiberOwnerNameInDevOrNull() || "A component");
              didWarnValDefaultVal = true;
            }
          }
          var initialValue = props.value;
          if (initialValue == null) {
            var children = props.children, defaultValue = props.defaultValue;
            if (children != null) {
              {
                error("Use the `defaultValue` or `value` props instead of setting children on <textarea>.");
              }
              {
                if (defaultValue != null) {
                  throw new Error("If you supply `defaultValue` on a <textarea>, do not pass children.");
                }
                if (isArray(children)) {
                  if (children.length > 1) {
                    throw new Error("<textarea> can only have at most one child.");
                  }
                  children = children[0];
                }
                defaultValue = children;
              }
            }
            if (defaultValue == null) {
              defaultValue = "";
            }
            initialValue = defaultValue;
          }
          node._wrapperState = {
            initialValue: getToStringValue(initialValue)
          };
        }
        function updateWrapper$1(element, props) {
          var node = element;
          var value = getToStringValue(props.value);
          var defaultValue = getToStringValue(props.defaultValue);
          if (value != null) {
            var newValue = toString(value);
            if (newValue !== node.value) {
              node.value = newValue;
            }
            if (props.defaultValue == null && node.defaultValue !== newValue) {
              node.defaultValue = newValue;
            }
          }
          if (defaultValue != null) {
            node.defaultValue = toString(defaultValue);
          }
        }
        function postMountWrapper$3(element, props) {
          var node = element;
          var textContent = node.textContent;
          if (textContent === node._wrapperState.initialValue) {
            if (textContent !== "" && textContent !== null) {
              node.value = textContent;
            }
          }
        }
        function restoreControlledState$2(element, props) {
          updateWrapper$1(element, props);
        }
        var HTML_NAMESPACE = "http://www.w3.org/1999/xhtml";
        var MATH_NAMESPACE = "http://www.w3.org/1998/Math/MathML";
        var SVG_NAMESPACE = "http://www.w3.org/2000/svg";
        function getIntrinsicNamespace(type) {
          switch (type) {
            case "svg":
              return SVG_NAMESPACE;
            case "math":
              return MATH_NAMESPACE;
            default:
              return HTML_NAMESPACE;
          }
        }
        function getChildNamespace(parentNamespace, type) {
          if (parentNamespace == null || parentNamespace === HTML_NAMESPACE) {
            return getIntrinsicNamespace(type);
          }
          if (parentNamespace === SVG_NAMESPACE && type === "foreignObject") {
            return HTML_NAMESPACE;
          }
          return parentNamespace;
        }
        var createMicrosoftUnsafeLocalFunction = function(func) {
          if (typeof MSApp !== "undefined" && MSApp.execUnsafeLocalFunction) {
            return function(arg0, arg1, arg2, arg3) {
              MSApp.execUnsafeLocalFunction(function() {
                return func(arg0, arg1, arg2, arg3);
              });
            };
          } else {
            return func;
          }
        };
        var reusableSVGContainer;
        var setInnerHTML = createMicrosoftUnsafeLocalFunction(function(node, html) {
          if (node.namespaceURI === SVG_NAMESPACE) {
            if (!("innerHTML" in node)) {
              reusableSVGContainer = reusableSVGContainer || document.createElement("div");
              reusableSVGContainer.innerHTML = "<svg>" + html.valueOf().toString() + "</svg>";
              var svgNode = reusableSVGContainer.firstChild;
              while (node.firstChild) {
                node.removeChild(node.firstChild);
              }
              while (svgNode.firstChild) {
                node.appendChild(svgNode.firstChild);
              }
              return;
            }
          }
          node.innerHTML = html;
        });
        var ELEMENT_NODE = 1;
        var TEXT_NODE = 3;
        var COMMENT_NODE = 8;
        var DOCUMENT_NODE = 9;
        var DOCUMENT_FRAGMENT_NODE = 11;
        var setTextContent = function(node, text) {
          if (text) {
            var firstChild = node.firstChild;
            if (firstChild && firstChild === node.lastChild && firstChild.nodeType === TEXT_NODE) {
              firstChild.nodeValue = text;
              return;
            }
          }
          node.textContent = text;
        };
        var shorthandToLonghand = {
          animation: ["animationDelay", "animationDirection", "animationDuration", "animationFillMode", "animationIterationCount", "animationName", "animationPlayState", "animationTimingFunction"],
          background: ["backgroundAttachment", "backgroundClip", "backgroundColor", "backgroundImage", "backgroundOrigin", "backgroundPositionX", "backgroundPositionY", "backgroundRepeat", "backgroundSize"],
          backgroundPosition: ["backgroundPositionX", "backgroundPositionY"],
          border: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth", "borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth", "borderLeftColor", "borderLeftStyle", "borderLeftWidth", "borderRightColor", "borderRightStyle", "borderRightWidth", "borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderBlockEnd: ["borderBlockEndColor", "borderBlockEndStyle", "borderBlockEndWidth"],
          borderBlockStart: ["borderBlockStartColor", "borderBlockStartStyle", "borderBlockStartWidth"],
          borderBottom: ["borderBottomColor", "borderBottomStyle", "borderBottomWidth"],
          borderColor: ["borderBottomColor", "borderLeftColor", "borderRightColor", "borderTopColor"],
          borderImage: ["borderImageOutset", "borderImageRepeat", "borderImageSlice", "borderImageSource", "borderImageWidth"],
          borderInlineEnd: ["borderInlineEndColor", "borderInlineEndStyle", "borderInlineEndWidth"],
          borderInlineStart: ["borderInlineStartColor", "borderInlineStartStyle", "borderInlineStartWidth"],
          borderLeft: ["borderLeftColor", "borderLeftStyle", "borderLeftWidth"],
          borderRadius: ["borderBottomLeftRadius", "borderBottomRightRadius", "borderTopLeftRadius", "borderTopRightRadius"],
          borderRight: ["borderRightColor", "borderRightStyle", "borderRightWidth"],
          borderStyle: ["borderBottomStyle", "borderLeftStyle", "borderRightStyle", "borderTopStyle"],
          borderTop: ["borderTopColor", "borderTopStyle", "borderTopWidth"],
          borderWidth: ["borderBottomWidth", "borderLeftWidth", "borderRightWidth", "borderTopWidth"],
          columnRule: ["columnRuleColor", "columnRuleStyle", "columnRuleWidth"],
          columns: ["columnCount", "columnWidth"],
          flex: ["flexBasis", "flexGrow", "flexShrink"],
          flexFlow: ["flexDirection", "flexWrap"],
          font: ["fontFamily", "fontFeatureSettings", "fontKerning", "fontLanguageOverride", "fontSize", "fontSizeAdjust", "fontStretch", "fontStyle", "fontVariant", "fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition", "fontWeight", "lineHeight"],
          fontVariant: ["fontVariantAlternates", "fontVariantCaps", "fontVariantEastAsian", "fontVariantLigatures", "fontVariantNumeric", "fontVariantPosition"],
          gap: ["columnGap", "rowGap"],
          grid: ["gridAutoColumns", "gridAutoFlow", "gridAutoRows", "gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          gridArea: ["gridColumnEnd", "gridColumnStart", "gridRowEnd", "gridRowStart"],
          gridColumn: ["gridColumnEnd", "gridColumnStart"],
          gridColumnGap: ["columnGap"],
          gridGap: ["columnGap", "rowGap"],
          gridRow: ["gridRowEnd", "gridRowStart"],
          gridRowGap: ["rowGap"],
          gridTemplate: ["gridTemplateAreas", "gridTemplateColumns", "gridTemplateRows"],
          listStyle: ["listStyleImage", "listStylePosition", "listStyleType"],
          margin: ["marginBottom", "marginLeft", "marginRight", "marginTop"],
          marker: ["markerEnd", "markerMid", "markerStart"],
          mask: ["maskClip", "maskComposite", "maskImage", "maskMode", "maskOrigin", "maskPositionX", "maskPositionY", "maskRepeat", "maskSize"],
          maskPosition: ["maskPositionX", "maskPositionY"],
          outline: ["outlineColor", "outlineStyle", "outlineWidth"],
          overflow: ["overflowX", "overflowY"],
          padding: ["paddingBottom", "paddingLeft", "paddingRight", "paddingTop"],
          placeContent: ["alignContent", "justifyContent"],
          placeItems: ["alignItems", "justifyItems"],
          placeSelf: ["alignSelf", "justifySelf"],
          textDecoration: ["textDecorationColor", "textDecorationLine", "textDecorationStyle"],
          textEmphasis: ["textEmphasisColor", "textEmphasisStyle"],
          transition: ["transitionDelay", "transitionDuration", "transitionProperty", "transitionTimingFunction"],
          wordWrap: ["overflowWrap"]
        };
        var isUnitlessNumber = {
          animationIterationCount: true,
          aspectRatio: true,
          borderImageOutset: true,
          borderImageSlice: true,
          borderImageWidth: true,
          boxFlex: true,
          boxFlexGroup: true,
          boxOrdinalGroup: true,
          columnCount: true,
          columns: true,
          flex: true,
          flexGrow: true,
          flexPositive: true,
          flexShrink: true,
          flexNegative: true,
          flexOrder: true,
          gridArea: true,
          gridRow: true,
          gridRowEnd: true,
          gridRowSpan: true,
          gridRowStart: true,
          gridColumn: true,
          gridColumnEnd: true,
          gridColumnSpan: true,
          gridColumnStart: true,
          fontWeight: true,
          lineClamp: true,
          lineHeight: true,
          opacity: true,
          order: true,
          orphans: true,
          tabSize: true,
          widows: true,
          zIndex: true,
          zoom: true,
          // SVG-related properties
          fillOpacity: true,
          floodOpacity: true,
          stopOpacity: true,
          strokeDasharray: true,
          strokeDashoffset: true,
          strokeMiterlimit: true,
          strokeOpacity: true,
          strokeWidth: true
        };
        function prefixKey(prefix2, key) {
          return prefix2 + key.charAt(0).toUpperCase() + key.substring(1);
        }
        var prefixes = ["Webkit", "ms", "Moz", "O"];
        Object.keys(isUnitlessNumber).forEach(function(prop) {
          prefixes.forEach(function(prefix2) {
            isUnitlessNumber[prefixKey(prefix2, prop)] = isUnitlessNumber[prop];
          });
        });
        function dangerousStyleValue(name, value, isCustomProperty) {
          var isEmpty = value == null || typeof value === "boolean" || value === "";
          if (isEmpty) {
            return "";
          }
          if (!isCustomProperty && typeof value === "number" && value !== 0 && !(isUnitlessNumber.hasOwnProperty(name) && isUnitlessNumber[name])) {
            return value + "px";
          }
          {
            checkCSSPropertyStringCoercion(value, name);
          }
          return ("" + value).trim();
        }
        var uppercasePattern = /([A-Z])/g;
        var msPattern = /^ms-/;
        function hyphenateStyleName(name) {
          return name.replace(uppercasePattern, "-$1").toLowerCase().replace(msPattern, "-ms-");
        }
        var warnValidStyle = function() {
        };
        {
          var badVendoredStyleNamePattern = /^(?:webkit|moz|o)[A-Z]/;
          var msPattern$1 = /^-ms-/;
          var hyphenPattern = /-(.)/g;
          var badStyleValueWithSemicolonPattern = /;\s*$/;
          var warnedStyleNames = {};
          var warnedStyleValues = {};
          var warnedForNaNValue = false;
          var warnedForInfinityValue = false;
          var camelize = function(string) {
            return string.replace(hyphenPattern, function(_6, character) {
              return character.toUpperCase();
            });
          };
          var warnHyphenatedStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error(
              "Unsupported style property %s. Did you mean %s?",
              name,
              // As Andi Smith suggests
              // (http://www.andismith.com/blog/2012/02/modernizr-prefixed/), an `-ms` prefix
              // is converted to lowercase `ms`.
              camelize(name.replace(msPattern$1, "ms-"))
            );
          };
          var warnBadVendoredStyleName = function(name) {
            if (warnedStyleNames.hasOwnProperty(name) && warnedStyleNames[name]) {
              return;
            }
            warnedStyleNames[name] = true;
            error("Unsupported vendor-prefixed style property %s. Did you mean %s?", name, name.charAt(0).toUpperCase() + name.slice(1));
          };
          var warnStyleValueWithSemicolon = function(name, value) {
            if (warnedStyleValues.hasOwnProperty(value) && warnedStyleValues[value]) {
              return;
            }
            warnedStyleValues[value] = true;
            error(`Style property values shouldn't contain a semicolon. Try "%s: %s" instead.`, name, value.replace(badStyleValueWithSemicolonPattern, ""));
          };
          var warnStyleValueIsNaN = function(name, value) {
            if (warnedForNaNValue) {
              return;
            }
            warnedForNaNValue = true;
            error("`NaN` is an invalid value for the `%s` css style property.", name);
          };
          var warnStyleValueIsInfinity = function(name, value) {
            if (warnedForInfinityValue) {
              return;
            }
            warnedForInfinityValue = true;
            error("`Infinity` is an invalid value for the `%s` css style property.", name);
          };
          warnValidStyle = function(name, value) {
            if (name.indexOf("-") > -1) {
              warnHyphenatedStyleName(name);
            } else if (badVendoredStyleNamePattern.test(name)) {
              warnBadVendoredStyleName(name);
            } else if (badStyleValueWithSemicolonPattern.test(value)) {
              warnStyleValueWithSemicolon(name, value);
            }
            if (typeof value === "number") {
              if (isNaN(value)) {
                warnStyleValueIsNaN(name, value);
              } else if (!isFinite(value)) {
                warnStyleValueIsInfinity(name, value);
              }
            }
          };
        }
        var warnValidStyle$1 = warnValidStyle;
        function createDangerousStringForStyles(styles) {
          {
            var serialized = "";
            var delimiter = "";
            for (var styleName in styles) {
              if (!styles.hasOwnProperty(styleName)) {
                continue;
              }
              var styleValue = styles[styleName];
              if (styleValue != null) {
                var isCustomProperty = styleName.indexOf("--") === 0;
                serialized += delimiter + (isCustomProperty ? styleName : hyphenateStyleName(styleName)) + ":";
                serialized += dangerousStyleValue(styleName, styleValue, isCustomProperty);
                delimiter = ";";
              }
            }
            return serialized || null;
          }
        }
        function setValueForStyles(node, styles) {
          var style2 = node.style;
          for (var styleName in styles) {
            if (!styles.hasOwnProperty(styleName)) {
              continue;
            }
            var isCustomProperty = styleName.indexOf("--") === 0;
            {
              if (!isCustomProperty) {
                warnValidStyle$1(styleName, styles[styleName]);
              }
            }
            var styleValue = dangerousStyleValue(styleName, styles[styleName], isCustomProperty);
            if (styleName === "float") {
              styleName = "cssFloat";
            }
            if (isCustomProperty) {
              style2.setProperty(styleName, styleValue);
            } else {
              style2[styleName] = styleValue;
            }
          }
        }
        function isValueEmpty(value) {
          return value == null || typeof value === "boolean" || value === "";
        }
        function expandShorthandMap(styles) {
          var expanded = {};
          for (var key in styles) {
            var longhands = shorthandToLonghand[key] || [key];
            for (var i = 0; i < longhands.length; i++) {
              expanded[longhands[i]] = key;
            }
          }
          return expanded;
        }
        function validateShorthandPropertyCollisionInDev(styleUpdates, nextStyles) {
          {
            if (!nextStyles) {
              return;
            }
            var expandedUpdates = expandShorthandMap(styleUpdates);
            var expandedStyles = expandShorthandMap(nextStyles);
            var warnedAbout = {};
            for (var key in expandedUpdates) {
              var originalKey = expandedUpdates[key];
              var correctOriginalKey = expandedStyles[key];
              if (correctOriginalKey && originalKey !== correctOriginalKey) {
                var warningKey = originalKey + "," + correctOriginalKey;
                if (warnedAbout[warningKey]) {
                  continue;
                }
                warnedAbout[warningKey] = true;
                error("%s a style property during rerender (%s) when a conflicting property is set (%s) can lead to styling bugs. To avoid this, don't mix shorthand and non-shorthand properties for the same value; instead, replace the shorthand with separate values.", isValueEmpty(styleUpdates[originalKey]) ? "Removing" : "Updating", originalKey, correctOriginalKey);
              }
            }
          }
        }
        var omittedCloseTags = {
          area: true,
          base: true,
          br: true,
          col: true,
          embed: true,
          hr: true,
          img: true,
          input: true,
          keygen: true,
          link: true,
          meta: true,
          param: true,
          source: true,
          track: true,
          wbr: true
          // NOTE: menuitem's close tag should be omitted, but that causes problems.
        };
        var voidElementTags = assign({
          menuitem: true
        }, omittedCloseTags);
        var HTML = "__html";
        function assertValidProps(tag, props) {
          if (!props) {
            return;
          }
          if (voidElementTags[tag]) {
            if (props.children != null || props.dangerouslySetInnerHTML != null) {
              throw new Error(tag + " is a void element tag and must neither have `children` nor use `dangerouslySetInnerHTML`.");
            }
          }
          if (props.dangerouslySetInnerHTML != null) {
            if (props.children != null) {
              throw new Error("Can only set one of `children` or `props.dangerouslySetInnerHTML`.");
            }
            if (typeof props.dangerouslySetInnerHTML !== "object" || !(HTML in props.dangerouslySetInnerHTML)) {
              throw new Error("`props.dangerouslySetInnerHTML` must be in the form `{__html: ...}`. Please visit https://reactjs.org/link/dangerously-set-inner-html for more information.");
            }
          }
          {
            if (!props.suppressContentEditableWarning && props.contentEditable && props.children != null) {
              error("A component is `contentEditable` and contains `children` managed by React. It is now your responsibility to guarantee that none of those nodes are unexpectedly modified or duplicated. This is probably not intentional.");
            }
          }
          if (props.style != null && typeof props.style !== "object") {
            throw new Error("The `style` prop expects a mapping from style properties to values, not a string. For example, style={{marginRight: spacing + 'em'}} when using JSX.");
          }
        }
        function isCustomComponent(tagName, props) {
          if (tagName.indexOf("-") === -1) {
            return typeof props.is === "string";
          }
          switch (tagName) {
            // These are reserved SVG and MathML elements.
            // We don't mind this list too much because we expect it to never grow.
            // The alternative is to track the namespace in a few places which is convoluted.
            // https://w3c.github.io/webcomponents/spec/custom/#custom-elements-core-concepts
            case "annotation-xml":
            case "color-profile":
            case "font-face":
            case "font-face-src":
            case "font-face-uri":
            case "font-face-format":
            case "font-face-name":
            case "missing-glyph":
              return false;
            default:
              return true;
          }
        }
        var possibleStandardNames = {
          // HTML
          accept: "accept",
          acceptcharset: "acceptCharset",
          "accept-charset": "acceptCharset",
          accesskey: "accessKey",
          action: "action",
          allowfullscreen: "allowFullScreen",
          alt: "alt",
          as: "as",
          async: "async",
          autocapitalize: "autoCapitalize",
          autocomplete: "autoComplete",
          autocorrect: "autoCorrect",
          autofocus: "autoFocus",
          autoplay: "autoPlay",
          autosave: "autoSave",
          capture: "capture",
          cellpadding: "cellPadding",
          cellspacing: "cellSpacing",
          challenge: "challenge",
          charset: "charSet",
          checked: "checked",
          children: "children",
          cite: "cite",
          class: "className",
          classid: "classID",
          classname: "className",
          cols: "cols",
          colspan: "colSpan",
          content: "content",
          contenteditable: "contentEditable",
          contextmenu: "contextMenu",
          controls: "controls",
          controlslist: "controlsList",
          coords: "coords",
          crossorigin: "crossOrigin",
          dangerouslysetinnerhtml: "dangerouslySetInnerHTML",
          data: "data",
          datetime: "dateTime",
          default: "default",
          defaultchecked: "defaultChecked",
          defaultvalue: "defaultValue",
          defer: "defer",
          dir: "dir",
          disabled: "disabled",
          disablepictureinpicture: "disablePictureInPicture",
          disableremoteplayback: "disableRemotePlayback",
          download: "download",
          draggable: "draggable",
          enctype: "encType",
          enterkeyhint: "enterKeyHint",
          for: "htmlFor",
          form: "form",
          formmethod: "formMethod",
          formaction: "formAction",
          formenctype: "formEncType",
          formnovalidate: "formNoValidate",
          formtarget: "formTarget",
          frameborder: "frameBorder",
          headers: "headers",
          height: "height",
          hidden: "hidden",
          high: "high",
          href: "href",
          hreflang: "hrefLang",
          htmlfor: "htmlFor",
          httpequiv: "httpEquiv",
          "http-equiv": "httpEquiv",
          icon: "icon",
          id: "id",
          imagesizes: "imageSizes",
          imagesrcset: "imageSrcSet",
          innerhtml: "innerHTML",
          inputmode: "inputMode",
          integrity: "integrity",
          is: "is",
          itemid: "itemID",
          itemprop: "itemProp",
          itemref: "itemRef",
          itemscope: "itemScope",
          itemtype: "itemType",
          keyparams: "keyParams",
          keytype: "keyType",
          kind: "kind",
          label: "label",
          lang: "lang",
          list: "list",
          loop: "loop",
          low: "low",
          manifest: "manifest",
          marginwidth: "marginWidth",
          marginheight: "marginHeight",
          max: "max",
          maxlength: "maxLength",
          media: "media",
          mediagroup: "mediaGroup",
          method: "method",
          min: "min",
          minlength: "minLength",
          multiple: "multiple",
          muted: "muted",
          name: "name",
          nomodule: "noModule",
          nonce: "nonce",
          novalidate: "noValidate",
          open: "open",
          optimum: "optimum",
          pattern: "pattern",
          placeholder: "placeholder",
          playsinline: "playsInline",
          poster: "poster",
          preload: "preload",
          profile: "profile",
          radiogroup: "radioGroup",
          readonly: "readOnly",
          referrerpolicy: "referrerPolicy",
          rel: "rel",
          required: "required",
          reversed: "reversed",
          role: "role",
          rows: "rows",
          rowspan: "rowSpan",
          sandbox: "sandbox",
          scope: "scope",
          scoped: "scoped",
          scrolling: "scrolling",
          seamless: "seamless",
          selected: "selected",
          shape: "shape",
          size: "size",
          sizes: "sizes",
          span: "span",
          spellcheck: "spellCheck",
          src: "src",
          srcdoc: "srcDoc",
          srclang: "srcLang",
          srcset: "srcSet",
          start: "start",
          step: "step",
          style: "style",
          summary: "summary",
          tabindex: "tabIndex",
          target: "target",
          title: "title",
          type: "type",
          usemap: "useMap",
          value: "value",
          width: "width",
          wmode: "wmode",
          wrap: "wrap",
          // SVG
          about: "about",
          accentheight: "accentHeight",
          "accent-height": "accentHeight",
          accumulate: "accumulate",
          additive: "additive",
          alignmentbaseline: "alignmentBaseline",
          "alignment-baseline": "alignmentBaseline",
          allowreorder: "allowReorder",
          alphabetic: "alphabetic",
          amplitude: "amplitude",
          arabicform: "arabicForm",
          "arabic-form": "arabicForm",
          ascent: "ascent",
          attributename: "attributeName",
          attributetype: "attributeType",
          autoreverse: "autoReverse",
          azimuth: "azimuth",
          basefrequency: "baseFrequency",
          baselineshift: "baselineShift",
          "baseline-shift": "baselineShift",
          baseprofile: "baseProfile",
          bbox: "bbox",
          begin: "begin",
          bias: "bias",
          by: "by",
          calcmode: "calcMode",
          capheight: "capHeight",
          "cap-height": "capHeight",
          clip: "clip",
          clippath: "clipPath",
          "clip-path": "clipPath",
          clippathunits: "clipPathUnits",
          cliprule: "clipRule",
          "clip-rule": "clipRule",
          color: "color",
          colorinterpolation: "colorInterpolation",
          "color-interpolation": "colorInterpolation",
          colorinterpolationfilters: "colorInterpolationFilters",
          "color-interpolation-filters": "colorInterpolationFilters",
          colorprofile: "colorProfile",
          "color-profile": "colorProfile",
          colorrendering: "colorRendering",
          "color-rendering": "colorRendering",
          contentscripttype: "contentScriptType",
          contentstyletype: "contentStyleType",
          cursor: "cursor",
          cx: "cx",
          cy: "cy",
          d: "d",
          datatype: "datatype",
          decelerate: "decelerate",
          descent: "descent",
          diffuseconstant: "diffuseConstant",
          direction: "direction",
          display: "display",
          divisor: "divisor",
          dominantbaseline: "dominantBaseline",
          "dominant-baseline": "dominantBaseline",
          dur: "dur",
          dx: "dx",
          dy: "dy",
          edgemode: "edgeMode",
          elevation: "elevation",
          enablebackground: "enableBackground",
          "enable-background": "enableBackground",
          end: "end",
          exponent: "exponent",
          externalresourcesrequired: "externalResourcesRequired",
          fill: "fill",
          fillopacity: "fillOpacity",
          "fill-opacity": "fillOpacity",
          fillrule: "fillRule",
          "fill-rule": "fillRule",
          filter: "filter",
          filterres: "filterRes",
          filterunits: "filterUnits",
          floodopacity: "floodOpacity",
          "flood-opacity": "floodOpacity",
          floodcolor: "floodColor",
          "flood-color": "floodColor",
          focusable: "focusable",
          fontfamily: "fontFamily",
          "font-family": "fontFamily",
          fontsize: "fontSize",
          "font-size": "fontSize",
          fontsizeadjust: "fontSizeAdjust",
          "font-size-adjust": "fontSizeAdjust",
          fontstretch: "fontStretch",
          "font-stretch": "fontStretch",
          fontstyle: "fontStyle",
          "font-style": "fontStyle",
          fontvariant: "fontVariant",
          "font-variant": "fontVariant",
          fontweight: "fontWeight",
          "font-weight": "fontWeight",
          format: "format",
          from: "from",
          fx: "fx",
          fy: "fy",
          g1: "g1",
          g2: "g2",
          glyphname: "glyphName",
          "glyph-name": "glyphName",
          glyphorientationhorizontal: "glyphOrientationHorizontal",
          "glyph-orientation-horizontal": "glyphOrientationHorizontal",
          glyphorientationvertical: "glyphOrientationVertical",
          "glyph-orientation-vertical": "glyphOrientationVertical",
          glyphref: "glyphRef",
          gradienttransform: "gradientTransform",
          gradientunits: "gradientUnits",
          hanging: "hanging",
          horizadvx: "horizAdvX",
          "horiz-adv-x": "horizAdvX",
          horizoriginx: "horizOriginX",
          "horiz-origin-x": "horizOriginX",
          ideographic: "ideographic",
          imagerendering: "imageRendering",
          "image-rendering": "imageRendering",
          in2: "in2",
          in: "in",
          inlist: "inlist",
          intercept: "intercept",
          k1: "k1",
          k2: "k2",
          k3: "k3",
          k4: "k4",
          k: "k",
          kernelmatrix: "kernelMatrix",
          kernelunitlength: "kernelUnitLength",
          kerning: "kerning",
          keypoints: "keyPoints",
          keysplines: "keySplines",
          keytimes: "keyTimes",
          lengthadjust: "lengthAdjust",
          letterspacing: "letterSpacing",
          "letter-spacing": "letterSpacing",
          lightingcolor: "lightingColor",
          "lighting-color": "lightingColor",
          limitingconeangle: "limitingConeAngle",
          local: "local",
          markerend: "markerEnd",
          "marker-end": "markerEnd",
          markerheight: "markerHeight",
          markermid: "markerMid",
          "marker-mid": "markerMid",
          markerstart: "markerStart",
          "marker-start": "markerStart",
          markerunits: "markerUnits",
          markerwidth: "markerWidth",
          mask: "mask",
          maskcontentunits: "maskContentUnits",
          maskunits: "maskUnits",
          mathematical: "mathematical",
          mode: "mode",
          numoctaves: "numOctaves",
          offset: "offset",
          opacity: "opacity",
          operator: "operator",
          order: "order",
          orient: "orient",
          orientation: "orientation",
          origin: "origin",
          overflow: "overflow",
          overlineposition: "overlinePosition",
          "overline-position": "overlinePosition",
          overlinethickness: "overlineThickness",
          "overline-thickness": "overlineThickness",
          paintorder: "paintOrder",
          "paint-order": "paintOrder",
          panose1: "panose1",
          "panose-1": "panose1",
          pathlength: "pathLength",
          patterncontentunits: "patternContentUnits",
          patterntransform: "patternTransform",
          patternunits: "patternUnits",
          pointerevents: "pointerEvents",
          "pointer-events": "pointerEvents",
          points: "points",
          pointsatx: "pointsAtX",
          pointsaty: "pointsAtY",
          pointsatz: "pointsAtZ",
          prefix: "prefix",
          preservealpha: "preserveAlpha",
          preserveaspectratio: "preserveAspectRatio",
          primitiveunits: "primitiveUnits",
          property: "property",
          r: "r",
          radius: "radius",
          refx: "refX",
          refy: "refY",
          renderingintent: "renderingIntent",
          "rendering-intent": "renderingIntent",
          repeatcount: "repeatCount",
          repeatdur: "repeatDur",
          requiredextensions: "requiredExtensions",
          requiredfeatures: "requiredFeatures",
          resource: "resource",
          restart: "restart",
          result: "result",
          results: "results",
          rotate: "rotate",
          rx: "rx",
          ry: "ry",
          scale: "scale",
          security: "security",
          seed: "seed",
          shaperendering: "shapeRendering",
          "shape-rendering": "shapeRendering",
          slope: "slope",
          spacing: "spacing",
          specularconstant: "specularConstant",
          specularexponent: "specularExponent",
          speed: "speed",
          spreadmethod: "spreadMethod",
          startoffset: "startOffset",
          stddeviation: "stdDeviation",
          stemh: "stemh",
          stemv: "stemv",
          stitchtiles: "stitchTiles",
          stopcolor: "stopColor",
          "stop-color": "stopColor",
          stopopacity: "stopOpacity",
          "stop-opacity": "stopOpacity",
          strikethroughposition: "strikethroughPosition",
          "strikethrough-position": "strikethroughPosition",
          strikethroughthickness: "strikethroughThickness",
          "strikethrough-thickness": "strikethroughThickness",
          string: "string",
          stroke: "stroke",
          strokedasharray: "strokeDasharray",
          "stroke-dasharray": "strokeDasharray",
          strokedashoffset: "strokeDashoffset",
          "stroke-dashoffset": "strokeDashoffset",
          strokelinecap: "strokeLinecap",
          "stroke-linecap": "strokeLinecap",
          strokelinejoin: "strokeLinejoin",
          "stroke-linejoin": "strokeLinejoin",
          strokemiterlimit: "strokeMiterlimit",
          "stroke-miterlimit": "strokeMiterlimit",
          strokewidth: "strokeWidth",
          "stroke-width": "strokeWidth",
          strokeopacity: "strokeOpacity",
          "stroke-opacity": "strokeOpacity",
          suppresscontenteditablewarning: "suppressContentEditableWarning",
          suppresshydrationwarning: "suppressHydrationWarning",
          surfacescale: "surfaceScale",
          systemlanguage: "systemLanguage",
          tablevalues: "tableValues",
          targetx: "targetX",
          targety: "targetY",
          textanchor: "textAnchor",
          "text-anchor": "textAnchor",
          textdecoration: "textDecoration",
          "text-decoration": "textDecoration",
          textlength: "textLength",
          textrendering: "textRendering",
          "text-rendering": "textRendering",
          to: "to",
          transform: "transform",
          typeof: "typeof",
          u1: "u1",
          u2: "u2",
          underlineposition: "underlinePosition",
          "underline-position": "underlinePosition",
          underlinethickness: "underlineThickness",
          "underline-thickness": "underlineThickness",
          unicode: "unicode",
          unicodebidi: "unicodeBidi",
          "unicode-bidi": "unicodeBidi",
          unicoderange: "unicodeRange",
          "unicode-range": "unicodeRange",
          unitsperem: "unitsPerEm",
          "units-per-em": "unitsPerEm",
          unselectable: "unselectable",
          valphabetic: "vAlphabetic",
          "v-alphabetic": "vAlphabetic",
          values: "values",
          vectoreffect: "vectorEffect",
          "vector-effect": "vectorEffect",
          version: "version",
          vertadvy: "vertAdvY",
          "vert-adv-y": "vertAdvY",
          vertoriginx: "vertOriginX",
          "vert-origin-x": "vertOriginX",
          vertoriginy: "vertOriginY",
          "vert-origin-y": "vertOriginY",
          vhanging: "vHanging",
          "v-hanging": "vHanging",
          videographic: "vIdeographic",
          "v-ideographic": "vIdeographic",
          viewbox: "viewBox",
          viewtarget: "viewTarget",
          visibility: "visibility",
          vmathematical: "vMathematical",
          "v-mathematical": "vMathematical",
          vocab: "vocab",
          widths: "widths",
          wordspacing: "wordSpacing",
          "word-spacing": "wordSpacing",
          writingmode: "writingMode",
          "writing-mode": "writingMode",
          x1: "x1",
          x2: "x2",
          x: "x",
          xchannelselector: "xChannelSelector",
          xheight: "xHeight",
          "x-height": "xHeight",
          xlinkactuate: "xlinkActuate",
          "xlink:actuate": "xlinkActuate",
          xlinkarcrole: "xlinkArcrole",
          "xlink:arcrole": "xlinkArcrole",
          xlinkhref: "xlinkHref",
          "xlink:href": "xlinkHref",
          xlinkrole: "xlinkRole",
          "xlink:role": "xlinkRole",
          xlinkshow: "xlinkShow",
          "xlink:show": "xlinkShow",
          xlinktitle: "xlinkTitle",
          "xlink:title": "xlinkTitle",
          xlinktype: "xlinkType",
          "xlink:type": "xlinkType",
          xmlbase: "xmlBase",
          "xml:base": "xmlBase",
          xmllang: "xmlLang",
          "xml:lang": "xmlLang",
          xmlns: "xmlns",
          "xml:space": "xmlSpace",
          xmlnsxlink: "xmlnsXlink",
          "xmlns:xlink": "xmlnsXlink",
          xmlspace: "xmlSpace",
          y1: "y1",
          y2: "y2",
          y: "y",
          ychannelselector: "yChannelSelector",
          z: "z",
          zoomandpan: "zoomAndPan"
        };
        var ariaProperties = {
          "aria-current": 0,
          // state
          "aria-description": 0,
          "aria-details": 0,
          "aria-disabled": 0,
          // state
          "aria-hidden": 0,
          // state
          "aria-invalid": 0,
          // state
          "aria-keyshortcuts": 0,
          "aria-label": 0,
          "aria-roledescription": 0,
          // Widget Attributes
          "aria-autocomplete": 0,
          "aria-checked": 0,
          "aria-expanded": 0,
          "aria-haspopup": 0,
          "aria-level": 0,
          "aria-modal": 0,
          "aria-multiline": 0,
          "aria-multiselectable": 0,
          "aria-orientation": 0,
          "aria-placeholder": 0,
          "aria-pressed": 0,
          "aria-readonly": 0,
          "aria-required": 0,
          "aria-selected": 0,
          "aria-sort": 0,
          "aria-valuemax": 0,
          "aria-valuemin": 0,
          "aria-valuenow": 0,
          "aria-valuetext": 0,
          // Live Region Attributes
          "aria-atomic": 0,
          "aria-busy": 0,
          "aria-live": 0,
          "aria-relevant": 0,
          // Drag-and-Drop Attributes
          "aria-dropeffect": 0,
          "aria-grabbed": 0,
          // Relationship Attributes
          "aria-activedescendant": 0,
          "aria-colcount": 0,
          "aria-colindex": 0,
          "aria-colspan": 0,
          "aria-controls": 0,
          "aria-describedby": 0,
          "aria-errormessage": 0,
          "aria-flowto": 0,
          "aria-labelledby": 0,
          "aria-owns": 0,
          "aria-posinset": 0,
          "aria-rowcount": 0,
          "aria-rowindex": 0,
          "aria-rowspan": 0,
          "aria-setsize": 0
        };
        var warnedProperties = {};
        var rARIA = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
        var rARIACamel = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
        function validateProperty(tagName, name) {
          {
            if (hasOwnProperty.call(warnedProperties, name) && warnedProperties[name]) {
              return true;
            }
            if (rARIACamel.test(name)) {
              var ariaName = "aria-" + name.slice(4).toLowerCase();
              var correctName = ariaProperties.hasOwnProperty(ariaName) ? ariaName : null;
              if (correctName == null) {
                error("Invalid ARIA attribute `%s`. ARIA attributes follow the pattern aria-* and must be lowercase.", name);
                warnedProperties[name] = true;
                return true;
              }
              if (name !== correctName) {
                error("Invalid ARIA attribute `%s`. Did you mean `%s`?", name, correctName);
                warnedProperties[name] = true;
                return true;
              }
            }
            if (rARIA.test(name)) {
              var lowerCasedName = name.toLowerCase();
              var standardName = ariaProperties.hasOwnProperty(lowerCasedName) ? lowerCasedName : null;
              if (standardName == null) {
                warnedProperties[name] = true;
                return false;
              }
              if (name !== standardName) {
                error("Unknown ARIA attribute `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties[name] = true;
                return true;
              }
            }
          }
          return true;
        }
        function warnInvalidARIAProps(type, props) {
          {
            var invalidProps = [];
            for (var key in props) {
              var isValid = validateProperty(type, key);
              if (!isValid) {
                invalidProps.push(key);
              }
            }
            var unknownPropString = invalidProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (invalidProps.length === 1) {
              error("Invalid aria prop %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            } else if (invalidProps.length > 1) {
              error("Invalid aria props %s on <%s> tag. For details, see https://reactjs.org/link/invalid-aria-props", unknownPropString, type);
            }
          }
        }
        function validateProperties(type, props) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnInvalidARIAProps(type, props);
        }
        var didWarnValueNull = false;
        function validateProperties$1(type, props) {
          {
            if (type !== "input" && type !== "textarea" && type !== "select") {
              return;
            }
            if (props != null && props.value === null && !didWarnValueNull) {
              didWarnValueNull = true;
              if (type === "select" && props.multiple) {
                error("`value` prop on `%s` should not be null. Consider using an empty array when `multiple` is set to `true` to clear the component or `undefined` for uncontrolled components.", type);
              } else {
                error("`value` prop on `%s` should not be null. Consider using an empty string to clear the component or `undefined` for uncontrolled components.", type);
              }
            }
          }
        }
        var validateProperty$1 = function() {
        };
        {
          var warnedProperties$1 = {};
          var EVENT_NAME_REGEX = /^on./;
          var INVALID_EVENT_NAME_REGEX = /^on[^A-Z]/;
          var rARIA$1 = new RegExp("^(aria)-[" + ATTRIBUTE_NAME_CHAR + "]*$");
          var rARIACamel$1 = new RegExp("^(aria)[A-Z][" + ATTRIBUTE_NAME_CHAR + "]*$");
          validateProperty$1 = function(tagName, name, value, eventRegistry) {
            if (hasOwnProperty.call(warnedProperties$1, name) && warnedProperties$1[name]) {
              return true;
            }
            var lowerCasedName = name.toLowerCase();
            if (lowerCasedName === "onfocusin" || lowerCasedName === "onfocusout") {
              error("React uses onFocus and onBlur instead of onFocusIn and onFocusOut. All React events are normalized to bubble, so onFocusIn and onFocusOut are not needed/supported by React.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (eventRegistry != null) {
              var registrationNameDependencies2 = eventRegistry.registrationNameDependencies, possibleRegistrationNames2 = eventRegistry.possibleRegistrationNames;
              if (registrationNameDependencies2.hasOwnProperty(name)) {
                return true;
              }
              var registrationName = possibleRegistrationNames2.hasOwnProperty(lowerCasedName) ? possibleRegistrationNames2[lowerCasedName] : null;
              if (registrationName != null) {
                error("Invalid event handler property `%s`. Did you mean `%s`?", name, registrationName);
                warnedProperties$1[name] = true;
                return true;
              }
              if (EVENT_NAME_REGEX.test(name)) {
                error("Unknown event handler property `%s`. It will be ignored.", name);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (EVENT_NAME_REGEX.test(name)) {
              if (INVALID_EVENT_NAME_REGEX.test(name)) {
                error("Invalid event handler property `%s`. React events use the camelCase naming convention, for example `onClick`.", name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (rARIA$1.test(name) || rARIACamel$1.test(name)) {
              return true;
            }
            if (lowerCasedName === "innerhtml") {
              error("Directly setting property `innerHTML` is not permitted. For more information, lookup documentation on `dangerouslySetInnerHTML`.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "aria") {
              error("The `aria` attribute is reserved for future use in React. Pass individual `aria-` attributes instead.");
              warnedProperties$1[name] = true;
              return true;
            }
            if (lowerCasedName === "is" && value !== null && value !== void 0 && typeof value !== "string") {
              error("Received a `%s` for a string attribute `is`. If this is expected, cast the value to a string.", typeof value);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "number" && isNaN(value)) {
              error("Received NaN for the `%s` attribute. If this is expected, cast the value to a string.", name);
              warnedProperties$1[name] = true;
              return true;
            }
            var propertyInfo = getPropertyInfo(name);
            var isReserved = propertyInfo !== null && propertyInfo.type === RESERVED;
            if (possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              var standardName = possibleStandardNames[lowerCasedName];
              if (standardName !== name) {
                error("Invalid DOM property `%s`. Did you mean `%s`?", name, standardName);
                warnedProperties$1[name] = true;
                return true;
              }
            } else if (!isReserved && name !== lowerCasedName) {
              error("React does not recognize the `%s` prop on a DOM element. If you intentionally want it to appear in the DOM as a custom attribute, spell it as lowercase `%s` instead. If you accidentally passed it from a parent component, remove it from the DOM element.", name, lowerCasedName);
              warnedProperties$1[name] = true;
              return true;
            }
            if (typeof value === "boolean" && shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              if (value) {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.', value, name, name, value, name);
              } else {
                error('Received `%s` for a non-boolean attribute `%s`.\n\nIf you want to write it to the DOM, pass a string instead: %s="%s" or %s={value.toString()}.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.', value, name, name, value, name, name, name);
              }
              warnedProperties$1[name] = true;
              return true;
            }
            if (isReserved) {
              return true;
            }
            if (shouldRemoveAttributeWithWarning(name, value, propertyInfo, false)) {
              warnedProperties$1[name] = true;
              return false;
            }
            if ((value === "false" || value === "true") && propertyInfo !== null && propertyInfo.type === BOOLEAN) {
              error("Received the string `%s` for the boolean attribute `%s`. %s Did you mean %s={%s}?", value, name, value === "false" ? "The browser will interpret it as a truthy value." : 'Although this works, it will not work as expected if you pass the string "false".', name, value);
              warnedProperties$1[name] = true;
              return true;
            }
            return true;
          };
        }
        var warnUnknownProperties = function(type, props, eventRegistry) {
          {
            var unknownProps = [];
            for (var key in props) {
              var isValid = validateProperty$1(type, key, props[key], eventRegistry);
              if (!isValid) {
                unknownProps.push(key);
              }
            }
            var unknownPropString = unknownProps.map(function(prop) {
              return "`" + prop + "`";
            }).join(", ");
            if (unknownProps.length === 1) {
              error("Invalid value for prop %s on <%s> tag. Either remove it from the element, or pass a string or number value to keep it in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            } else if (unknownProps.length > 1) {
              error("Invalid values for props %s on <%s> tag. Either remove them from the element, or pass a string or number value to keep them in the DOM. For details, see https://reactjs.org/link/attribute-behavior ", unknownPropString, type);
            }
          }
        };
        function validateProperties$2(type, props, eventRegistry) {
          if (isCustomComponent(type, props)) {
            return;
          }
          warnUnknownProperties(type, props, eventRegistry);
        }
        var IS_EVENT_HANDLE_NON_MANAGED_NODE = 1;
        var IS_NON_DELEGATED = 1 << 1;
        var IS_CAPTURE_PHASE = 1 << 2;
        var SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS = IS_EVENT_HANDLE_NON_MANAGED_NODE | IS_NON_DELEGATED | IS_CAPTURE_PHASE;
        var currentReplayingEvent = null;
        function setReplayingEvent(event) {
          {
            if (currentReplayingEvent !== null) {
              error("Expected currently replaying event to be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = event;
        }
        function resetReplayingEvent() {
          {
            if (currentReplayingEvent === null) {
              error("Expected currently replaying event to not be null. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          currentReplayingEvent = null;
        }
        function isReplayingEvent(event) {
          return event === currentReplayingEvent;
        }
        function getEventTarget(nativeEvent) {
          var target = nativeEvent.target || nativeEvent.srcElement || window;
          if (target.correspondingUseElement) {
            target = target.correspondingUseElement;
          }
          return target.nodeType === TEXT_NODE ? target.parentNode : target;
        }
        var restoreImpl = null;
        var restoreTarget = null;
        var restoreQueue = null;
        function restoreStateOfTarget(target) {
          var internalInstance = getInstanceFromNode(target);
          if (!internalInstance) {
            return;
          }
          if (typeof restoreImpl !== "function") {
            throw new Error("setRestoreImplementation() needs to be called to handle a target for controlled events. This error is likely caused by a bug in React. Please file an issue.");
          }
          var stateNode = internalInstance.stateNode;
          if (stateNode) {
            var _props = getFiberCurrentPropsFromNode(stateNode);
            restoreImpl(internalInstance.stateNode, internalInstance.type, _props);
          }
        }
        function setRestoreImplementation(impl) {
          restoreImpl = impl;
        }
        function enqueueStateRestore(target) {
          if (restoreTarget) {
            if (restoreQueue) {
              restoreQueue.push(target);
            } else {
              restoreQueue = [target];
            }
          } else {
            restoreTarget = target;
          }
        }
        function needsStateRestore() {
          return restoreTarget !== null || restoreQueue !== null;
        }
        function restoreStateIfNeeded() {
          if (!restoreTarget) {
            return;
          }
          var target = restoreTarget;
          var queuedTargets = restoreQueue;
          restoreTarget = null;
          restoreQueue = null;
          restoreStateOfTarget(target);
          if (queuedTargets) {
            for (var i = 0; i < queuedTargets.length; i++) {
              restoreStateOfTarget(queuedTargets[i]);
            }
          }
        }
        var batchedUpdatesImpl = function(fn, bookkeeping) {
          return fn(bookkeeping);
        };
        var flushSyncImpl = function() {
        };
        var isInsideEventHandler = false;
        function finishEventHandler() {
          var controlledComponentsHavePendingUpdates = needsStateRestore();
          if (controlledComponentsHavePendingUpdates) {
            flushSyncImpl();
            restoreStateIfNeeded();
          }
        }
        function batchedUpdates(fn, a7, b) {
          if (isInsideEventHandler) {
            return fn(a7, b);
          }
          isInsideEventHandler = true;
          try {
            return batchedUpdatesImpl(fn, a7, b);
          } finally {
            isInsideEventHandler = false;
            finishEventHandler();
          }
        }
        function setBatchingImplementation(_batchedUpdatesImpl, _discreteUpdatesImpl, _flushSyncImpl) {
          batchedUpdatesImpl = _batchedUpdatesImpl;
          flushSyncImpl = _flushSyncImpl;
        }
        function isInteractive(tag) {
          return tag === "button" || tag === "input" || tag === "select" || tag === "textarea";
        }
        function shouldPreventMouseEvent(name, type, props) {
          switch (name) {
            case "onClick":
            case "onClickCapture":
            case "onDoubleClick":
            case "onDoubleClickCapture":
            case "onMouseDown":
            case "onMouseDownCapture":
            case "onMouseMove":
            case "onMouseMoveCapture":
            case "onMouseUp":
            case "onMouseUpCapture":
            case "onMouseEnter":
              return !!(props.disabled && isInteractive(type));
            default:
              return false;
          }
        }
        function getListener(inst, registrationName) {
          var stateNode = inst.stateNode;
          if (stateNode === null) {
            return null;
          }
          var props = getFiberCurrentPropsFromNode(stateNode);
          if (props === null) {
            return null;
          }
          var listener = props[registrationName];
          if (shouldPreventMouseEvent(registrationName, inst.type, props)) {
            return null;
          }
          if (listener && typeof listener !== "function") {
            throw new Error("Expected `" + registrationName + "` listener to be a function, instead got a value of `" + typeof listener + "` type.");
          }
          return listener;
        }
        var passiveBrowserEventsSupported = false;
        if (canUseDOM) {
          try {
            var options = {};
            Object.defineProperty(options, "passive", {
              get: function() {
                passiveBrowserEventsSupported = true;
              }
            });
            window.addEventListener("test", options, options);
            window.removeEventListener("test", options, options);
          } catch (e7) {
            passiveBrowserEventsSupported = false;
          }
        }
        function invokeGuardedCallbackProd(name, func, context, a7, b, c, d, e7, f) {
          var funcArgs = Array.prototype.slice.call(arguments, 3);
          try {
            func.apply(context, funcArgs);
          } catch (error2) {
            this.onError(error2);
          }
        }
        var invokeGuardedCallbackImpl = invokeGuardedCallbackProd;
        {
          if (typeof window !== "undefined" && typeof window.dispatchEvent === "function" && typeof document !== "undefined" && typeof document.createEvent === "function") {
            var fakeNode = document.createElement("react");
            invokeGuardedCallbackImpl = function invokeGuardedCallbackDev(name, func, context, a7, b, c, d, e7, f) {
              if (typeof document === "undefined" || document === null) {
                throw new Error("The `document` global was defined when React was initialized, but is not defined anymore. This can happen in a test environment if a component schedules an update from an asynchronous callback, but the test has already finished running. To solve this, you can either unmount the component at the end of your test (and ensure that any asynchronous operations get canceled in `componentWillUnmount`), or you can change the test itself to be asynchronous.");
              }
              var evt = document.createEvent("Event");
              var didCall = false;
              var didError = true;
              var windowEvent = window.event;
              var windowEventDescriptor = Object.getOwnPropertyDescriptor(window, "event");
              function restoreAfterDispatch() {
                fakeNode.removeEventListener(evtType, callCallback2, false);
                if (typeof window.event !== "undefined" && window.hasOwnProperty("event")) {
                  window.event = windowEvent;
                }
              }
              var funcArgs = Array.prototype.slice.call(arguments, 3);
              function callCallback2() {
                didCall = true;
                restoreAfterDispatch();
                func.apply(context, funcArgs);
                didError = false;
              }
              var error2;
              var didSetError = false;
              var isCrossOriginError = false;
              function handleWindowError(event) {
                error2 = event.error;
                didSetError = true;
                if (error2 === null && event.colno === 0 && event.lineno === 0) {
                  isCrossOriginError = true;
                }
                if (event.defaultPrevented) {
                  if (error2 != null && typeof error2 === "object") {
                    try {
                      error2._suppressLogging = true;
                    } catch (inner) {
                    }
                  }
                }
              }
              var evtType = "react-" + (name ? name : "invokeguardedcallback");
              window.addEventListener("error", handleWindowError);
              fakeNode.addEventListener(evtType, callCallback2, false);
              evt.initEvent(evtType, false, false);
              fakeNode.dispatchEvent(evt);
              if (windowEventDescriptor) {
                Object.defineProperty(window, "event", windowEventDescriptor);
              }
              if (didCall && didError) {
                if (!didSetError) {
                  error2 = new Error(`An error was thrown inside one of your components, but React doesn't know what it was. This is likely due to browser flakiness. React does its best to preserve the "Pause on exceptions" behavior of the DevTools, which requires some DEV-mode only tricks. It's possible that these don't work in your browser. Try triggering the error in production mode, or switching to a modern browser. If you suspect that this is actually an issue with React, please file an issue.`);
                } else if (isCrossOriginError) {
                  error2 = new Error("A cross-origin error was thrown. React doesn't have access to the actual error object in development. See https://reactjs.org/link/crossorigin-error for more information.");
                }
                this.onError(error2);
              }
              window.removeEventListener("error", handleWindowError);
              if (!didCall) {
                restoreAfterDispatch();
                return invokeGuardedCallbackProd.apply(this, arguments);
              }
            };
          }
        }
        var invokeGuardedCallbackImpl$1 = invokeGuardedCallbackImpl;
        var hasError = false;
        var caughtError = null;
        var hasRethrowError = false;
        var rethrowError = null;
        var reporter = {
          onError: function(error2) {
            hasError = true;
            caughtError = error2;
          }
        };
        function invokeGuardedCallback(name, func, context, a7, b, c, d, e7, f) {
          hasError = false;
          caughtError = null;
          invokeGuardedCallbackImpl$1.apply(reporter, arguments);
        }
        function invokeGuardedCallbackAndCatchFirstError(name, func, context, a7, b, c, d, e7, f) {
          invokeGuardedCallback.apply(this, arguments);
          if (hasError) {
            var error2 = clearCaughtError();
            if (!hasRethrowError) {
              hasRethrowError = true;
              rethrowError = error2;
            }
          }
        }
        function rethrowCaughtError() {
          if (hasRethrowError) {
            var error2 = rethrowError;
            hasRethrowError = false;
            rethrowError = null;
            throw error2;
          }
        }
        function hasCaughtError() {
          return hasError;
        }
        function clearCaughtError() {
          if (hasError) {
            var error2 = caughtError;
            hasError = false;
            caughtError = null;
            return error2;
          } else {
            throw new Error("clearCaughtError was called but no error was captured. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function get(key) {
          return key._reactInternals;
        }
        function has(key) {
          return key._reactInternals !== void 0;
        }
        function set(key, value) {
          key._reactInternals = value;
        }
        var NoFlags = (
          /*                      */
          0
        );
        var PerformedWork = (
          /*                */
          1
        );
        var Placement = (
          /*                    */
          2
        );
        var Update = (
          /*                       */
          4
        );
        var ChildDeletion = (
          /*                */
          16
        );
        var ContentReset = (
          /*                 */
          32
        );
        var Callback = (
          /*                     */
          64
        );
        var DidCapture = (
          /*                   */
          128
        );
        var ForceClientRender = (
          /*            */
          256
        );
        var Ref = (
          /*                          */
          512
        );
        var Snapshot = (
          /*                     */
          1024
        );
        var Passive = (
          /*                      */
          2048
        );
        var Hydrating = (
          /*                    */
          4096
        );
        var Visibility = (
          /*                   */
          8192
        );
        var StoreConsistency = (
          /*             */
          16384
        );
        var LifecycleEffectMask = Passive | Update | Callback | Ref | Snapshot | StoreConsistency;
        var HostEffectMask = (
          /*               */
          32767
        );
        var Incomplete = (
          /*                   */
          32768
        );
        var ShouldCapture = (
          /*                */
          65536
        );
        var ForceUpdateForLegacySuspense = (
          /* */
          131072
        );
        var Forked = (
          /*                       */
          1048576
        );
        var RefStatic = (
          /*                    */
          2097152
        );
        var LayoutStatic = (
          /*                 */
          4194304
        );
        var PassiveStatic = (
          /*                */
          8388608
        );
        var MountLayoutDev = (
          /*               */
          16777216
        );
        var MountPassiveDev = (
          /*              */
          33554432
        );
        var BeforeMutationMask = (
          // TODO: Remove Update flag from before mutation phase by re-landing Visibility
          // flag logic (see #20043)
          Update | Snapshot | 0
        );
        var MutationMask = Placement | Update | ChildDeletion | ContentReset | Ref | Hydrating | Visibility;
        var LayoutMask = Update | Callback | Ref | Visibility;
        var PassiveMask = Passive | ChildDeletion;
        var StaticMask = LayoutStatic | PassiveStatic | RefStatic;
        var ReactCurrentOwner = ReactSharedInternals.ReactCurrentOwner;
        function getNearestMountedFiber(fiber) {
          var node = fiber;
          var nearestMounted = fiber;
          if (!fiber.alternate) {
            var nextNode = node;
            do {
              node = nextNode;
              if ((node.flags & (Placement | Hydrating)) !== NoFlags) {
                nearestMounted = node.return;
              }
              nextNode = node.return;
            } while (nextNode);
          } else {
            while (node.return) {
              node = node.return;
            }
          }
          if (node.tag === HostRoot) {
            return nearestMounted;
          }
          return null;
        }
        function getSuspenseInstanceFromFiber(fiber) {
          if (fiber.tag === SuspenseComponent) {
            var suspenseState = fiber.memoizedState;
            if (suspenseState === null) {
              var current2 = fiber.alternate;
              if (current2 !== null) {
                suspenseState = current2.memoizedState;
              }
            }
            if (suspenseState !== null) {
              return suspenseState.dehydrated;
            }
          }
          return null;
        }
        function getContainerFromFiber(fiber) {
          return fiber.tag === HostRoot ? fiber.stateNode.containerInfo : null;
        }
        function isFiberMounted(fiber) {
          return getNearestMountedFiber(fiber) === fiber;
        }
        function isMounted(component) {
          {
            var owner = ReactCurrentOwner.current;
            if (owner !== null && owner.tag === ClassComponent) {
              var ownerFiber = owner;
              var instance = ownerFiber.stateNode;
              if (!instance._warnedAboutRefsInRender) {
                error("%s is accessing isMounted inside its render() function. render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromFiber(ownerFiber) || "A component");
              }
              instance._warnedAboutRefsInRender = true;
            }
          }
          var fiber = get(component);
          if (!fiber) {
            return false;
          }
          return getNearestMountedFiber(fiber) === fiber;
        }
        function assertIsMounted(fiber) {
          if (getNearestMountedFiber(fiber) !== fiber) {
            throw new Error("Unable to find node on an unmounted component.");
          }
        }
        function findCurrentFiberUsingSlowPath(fiber) {
          var alternate = fiber.alternate;
          if (!alternate) {
            var nearestMounted = getNearestMountedFiber(fiber);
            if (nearestMounted === null) {
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (nearestMounted !== fiber) {
              return null;
            }
            return fiber;
          }
          var a7 = fiber;
          var b = alternate;
          while (true) {
            var parentA = a7.return;
            if (parentA === null) {
              break;
            }
            var parentB = parentA.alternate;
            if (parentB === null) {
              var nextParent = parentA.return;
              if (nextParent !== null) {
                a7 = b = nextParent;
                continue;
              }
              break;
            }
            if (parentA.child === parentB.child) {
              var child = parentA.child;
              while (child) {
                if (child === a7) {
                  assertIsMounted(parentA);
                  return fiber;
                }
                if (child === b) {
                  assertIsMounted(parentA);
                  return alternate;
                }
                child = child.sibling;
              }
              throw new Error("Unable to find node on an unmounted component.");
            }
            if (a7.return !== b.return) {
              a7 = parentA;
              b = parentB;
            } else {
              var didFindChild = false;
              var _child = parentA.child;
              while (_child) {
                if (_child === a7) {
                  didFindChild = true;
                  a7 = parentA;
                  b = parentB;
                  break;
                }
                if (_child === b) {
                  didFindChild = true;
                  b = parentA;
                  a7 = parentB;
                  break;
                }
                _child = _child.sibling;
              }
              if (!didFindChild) {
                _child = parentB.child;
                while (_child) {
                  if (_child === a7) {
                    didFindChild = true;
                    a7 = parentB;
                    b = parentA;
                    break;
                  }
                  if (_child === b) {
                    didFindChild = true;
                    b = parentB;
                    a7 = parentA;
                    break;
                  }
                  _child = _child.sibling;
                }
                if (!didFindChild) {
                  throw new Error("Child was not found in either parent set. This indicates a bug in React related to the return pointer. Please file an issue.");
                }
              }
            }
            if (a7.alternate !== b) {
              throw new Error("Return fibers should always be each others' alternates. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (a7.tag !== HostRoot) {
            throw new Error("Unable to find node on an unmounted component.");
          }
          if (a7.stateNode.current === a7) {
            return fiber;
          }
          return alternate;
        }
        function findCurrentHostFiber(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberImpl(currentParent) : null;
        }
        function findCurrentHostFiberImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            var match = findCurrentHostFiberImpl(child);
            if (match !== null) {
              return match;
            }
            child = child.sibling;
          }
          return null;
        }
        function findCurrentHostFiberWithNoPortals(parent) {
          var currentParent = findCurrentFiberUsingSlowPath(parent);
          return currentParent !== null ? findCurrentHostFiberWithNoPortalsImpl(currentParent) : null;
        }
        function findCurrentHostFiberWithNoPortalsImpl(node) {
          if (node.tag === HostComponent || node.tag === HostText) {
            return node;
          }
          var child = node.child;
          while (child !== null) {
            if (child.tag !== HostPortal) {
              var match = findCurrentHostFiberWithNoPortalsImpl(child);
              if (match !== null) {
                return match;
              }
            }
            child = child.sibling;
          }
          return null;
        }
        var scheduleCallback = Scheduler.unstable_scheduleCallback;
        var cancelCallback = Scheduler.unstable_cancelCallback;
        var shouldYield = Scheduler.unstable_shouldYield;
        var requestPaint = Scheduler.unstable_requestPaint;
        var now = Scheduler.unstable_now;
        var getCurrentPriorityLevel = Scheduler.unstable_getCurrentPriorityLevel;
        var ImmediatePriority = Scheduler.unstable_ImmediatePriority;
        var UserBlockingPriority = Scheduler.unstable_UserBlockingPriority;
        var NormalPriority = Scheduler.unstable_NormalPriority;
        var LowPriority = Scheduler.unstable_LowPriority;
        var IdlePriority = Scheduler.unstable_IdlePriority;
        var unstable_yieldValue = Scheduler.unstable_yieldValue;
        var unstable_setDisableYieldValue = Scheduler.unstable_setDisableYieldValue;
        var rendererID = null;
        var injectedHook = null;
        var injectedProfilingHooks = null;
        var hasLoggedError = false;
        var isDevToolsPresent = typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined";
        function injectInternals(internals) {
          if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ === "undefined") {
            return false;
          }
          var hook = __REACT_DEVTOOLS_GLOBAL_HOOK__;
          if (hook.isDisabled) {
            return true;
          }
          if (!hook.supportsFiber) {
            {
              error("The installed version of React DevTools is too old and will not work with the current version of React. Please update React DevTools. https://reactjs.org/link/react-devtools");
            }
            return true;
          }
          try {
            if (enableSchedulingProfiler) {
              internals = assign({}, internals, {
                getLaneLabelMap,
                injectProfilingHooks
              });
            }
            rendererID = hook.inject(internals);
            injectedHook = hook;
          } catch (err) {
            {
              error("React instrumentation encountered an error: %s.", err);
            }
          }
          if (hook.checkDCE) {
            return true;
          } else {
            return false;
          }
        }
        function onScheduleRoot(root2, children) {
          {
            if (injectedHook && typeof injectedHook.onScheduleFiberRoot === "function") {
              try {
                injectedHook.onScheduleFiberRoot(rendererID, root2, children);
              } catch (err) {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitRoot(root2, eventPriority) {
          if (injectedHook && typeof injectedHook.onCommitFiberRoot === "function") {
            try {
              var didError = (root2.current.flags & DidCapture) === DidCapture;
              if (enableProfilerTimer) {
                var schedulerPriority;
                switch (eventPriority) {
                  case DiscreteEventPriority:
                    schedulerPriority = ImmediatePriority;
                    break;
                  case ContinuousEventPriority:
                    schedulerPriority = UserBlockingPriority;
                    break;
                  case DefaultEventPriority:
                    schedulerPriority = NormalPriority;
                    break;
                  case IdleEventPriority:
                    schedulerPriority = IdlePriority;
                    break;
                  default:
                    schedulerPriority = NormalPriority;
                    break;
                }
                injectedHook.onCommitFiberRoot(rendererID, root2, schedulerPriority, didError);
              } else {
                injectedHook.onCommitFiberRoot(rendererID, root2, void 0, didError);
              }
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onPostCommitRoot(root2) {
          if (injectedHook && typeof injectedHook.onPostCommitFiberRoot === "function") {
            try {
              injectedHook.onPostCommitFiberRoot(rendererID, root2);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function onCommitUnmount(fiber) {
          if (injectedHook && typeof injectedHook.onCommitFiberUnmount === "function") {
            try {
              injectedHook.onCommitFiberUnmount(rendererID, fiber);
            } catch (err) {
              {
                if (!hasLoggedError) {
                  hasLoggedError = true;
                  error("React instrumentation encountered an error: %s", err);
                }
              }
            }
          }
        }
        function setIsStrictModeForDevtools(newIsStrictMode) {
          {
            if (typeof unstable_yieldValue === "function") {
              unstable_setDisableYieldValue(newIsStrictMode);
              setSuppressWarning(newIsStrictMode);
            }
            if (injectedHook && typeof injectedHook.setStrictMode === "function") {
              try {
                injectedHook.setStrictMode(rendererID, newIsStrictMode);
              } catch (err) {
                {
                  if (!hasLoggedError) {
                    hasLoggedError = true;
                    error("React instrumentation encountered an error: %s", err);
                  }
                }
              }
            }
          }
        }
        function injectProfilingHooks(profilingHooks) {
          injectedProfilingHooks = profilingHooks;
        }
        function getLaneLabelMap() {
          {
            var map = /* @__PURE__ */ new Map();
            var lane = 1;
            for (var index2 = 0; index2 < TotalLanes; index2++) {
              var label = getLabelForLane(lane);
              map.set(lane, label);
              lane *= 2;
            }
            return map;
          }
        }
        function markCommitStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStarted === "function") {
              injectedProfilingHooks.markCommitStarted(lanes);
            }
          }
        }
        function markCommitStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markCommitStopped === "function") {
              injectedProfilingHooks.markCommitStopped();
            }
          }
        }
        function markComponentRenderStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStarted === "function") {
              injectedProfilingHooks.markComponentRenderStarted(fiber);
            }
          }
        }
        function markComponentRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentRenderStopped === "function") {
              injectedProfilingHooks.markComponentRenderStopped();
            }
          }
        }
        function markComponentPassiveEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectMountStopped();
            }
          }
        }
        function markComponentPassiveEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentPassiveEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentPassiveEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentPassiveEffectUnmountStopped();
            }
          }
        }
        function markComponentLayoutEffectMountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectMountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectMountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectMountStopped();
            }
          }
        }
        function markComponentLayoutEffectUnmountStarted(fiber) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStarted === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStarted(fiber);
            }
          }
        }
        function markComponentLayoutEffectUnmountStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentLayoutEffectUnmountStopped === "function") {
              injectedProfilingHooks.markComponentLayoutEffectUnmountStopped();
            }
          }
        }
        function markComponentErrored(fiber, thrownValue, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentErrored === "function") {
              injectedProfilingHooks.markComponentErrored(fiber, thrownValue, lanes);
            }
          }
        }
        function markComponentSuspended(fiber, wakeable, lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markComponentSuspended === "function") {
              injectedProfilingHooks.markComponentSuspended(fiber, wakeable, lanes);
            }
          }
        }
        function markLayoutEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStarted === "function") {
              injectedProfilingHooks.markLayoutEffectsStarted(lanes);
            }
          }
        }
        function markLayoutEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markLayoutEffectsStopped === "function") {
              injectedProfilingHooks.markLayoutEffectsStopped();
            }
          }
        }
        function markPassiveEffectsStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStarted === "function") {
              injectedProfilingHooks.markPassiveEffectsStarted(lanes);
            }
          }
        }
        function markPassiveEffectsStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markPassiveEffectsStopped === "function") {
              injectedProfilingHooks.markPassiveEffectsStopped();
            }
          }
        }
        function markRenderStarted(lanes) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStarted === "function") {
              injectedProfilingHooks.markRenderStarted(lanes);
            }
          }
        }
        function markRenderYielded() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderYielded === "function") {
              injectedProfilingHooks.markRenderYielded();
            }
          }
        }
        function markRenderStopped() {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderStopped === "function") {
              injectedProfilingHooks.markRenderStopped();
            }
          }
        }
        function markRenderScheduled(lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markRenderScheduled === "function") {
              injectedProfilingHooks.markRenderScheduled(lane);
            }
          }
        }
        function markForceUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markForceUpdateScheduled === "function") {
              injectedProfilingHooks.markForceUpdateScheduled(fiber, lane);
            }
          }
        }
        function markStateUpdateScheduled(fiber, lane) {
          {
            if (injectedProfilingHooks !== null && typeof injectedProfilingHooks.markStateUpdateScheduled === "function") {
              injectedProfilingHooks.markStateUpdateScheduled(fiber, lane);
            }
          }
        }
        var NoMode = (
          /*                         */
          0
        );
        var ConcurrentMode = (
          /*                 */
          1
        );
        var ProfileMode = (
          /*                    */
          2
        );
        var StrictLegacyMode = (
          /*               */
          8
        );
        var StrictEffectsMode = (
          /*              */
          16
        );
        var clz32 = Math.clz32 ? Math.clz32 : clz32Fallback;
        var log = Math.log;
        var LN2 = Math.LN2;
        function clz32Fallback(x7) {
          var asUint = x7 >>> 0;
          if (asUint === 0) {
            return 32;
          }
          return 31 - (log(asUint) / LN2 | 0) | 0;
        }
        var TotalLanes = 31;
        var NoLanes = (
          /*                        */
          0
        );
        var NoLane = (
          /*                          */
          0
        );
        var SyncLane = (
          /*                        */
          1
        );
        var InputContinuousHydrationLane = (
          /*    */
          2
        );
        var InputContinuousLane = (
          /*             */
          4
        );
        var DefaultHydrationLane = (
          /*            */
          8
        );
        var DefaultLane = (
          /*                     */
          16
        );
        var TransitionHydrationLane = (
          /*                */
          32
        );
        var TransitionLanes = (
          /*                       */
          4194240
        );
        var TransitionLane1 = (
          /*                        */
          64
        );
        var TransitionLane2 = (
          /*                        */
          128
        );
        var TransitionLane3 = (
          /*                        */
          256
        );
        var TransitionLane4 = (
          /*                        */
          512
        );
        var TransitionLane5 = (
          /*                        */
          1024
        );
        var TransitionLane6 = (
          /*                        */
          2048
        );
        var TransitionLane7 = (
          /*                        */
          4096
        );
        var TransitionLane8 = (
          /*                        */
          8192
        );
        var TransitionLane9 = (
          /*                        */
          16384
        );
        var TransitionLane10 = (
          /*                       */
          32768
        );
        var TransitionLane11 = (
          /*                       */
          65536
        );
        var TransitionLane12 = (
          /*                       */
          131072
        );
        var TransitionLane13 = (
          /*                       */
          262144
        );
        var TransitionLane14 = (
          /*                       */
          524288
        );
        var TransitionLane15 = (
          /*                       */
          1048576
        );
        var TransitionLane16 = (
          /*                       */
          2097152
        );
        var RetryLanes = (
          /*                            */
          130023424
        );
        var RetryLane1 = (
          /*                             */
          4194304
        );
        var RetryLane2 = (
          /*                             */
          8388608
        );
        var RetryLane3 = (
          /*                             */
          16777216
        );
        var RetryLane4 = (
          /*                             */
          33554432
        );
        var RetryLane5 = (
          /*                             */
          67108864
        );
        var SomeRetryLane = RetryLane1;
        var SelectiveHydrationLane = (
          /*          */
          134217728
        );
        var NonIdleLanes = (
          /*                          */
          268435455
        );
        var IdleHydrationLane = (
          /*               */
          268435456
        );
        var IdleLane = (
          /*                        */
          536870912
        );
        var OffscreenLane = (
          /*                   */
          1073741824
        );
        function getLabelForLane(lane) {
          {
            if (lane & SyncLane) {
              return "Sync";
            }
            if (lane & InputContinuousHydrationLane) {
              return "InputContinuousHydration";
            }
            if (lane & InputContinuousLane) {
              return "InputContinuous";
            }
            if (lane & DefaultHydrationLane) {
              return "DefaultHydration";
            }
            if (lane & DefaultLane) {
              return "Default";
            }
            if (lane & TransitionHydrationLane) {
              return "TransitionHydration";
            }
            if (lane & TransitionLanes) {
              return "Transition";
            }
            if (lane & RetryLanes) {
              return "Retry";
            }
            if (lane & SelectiveHydrationLane) {
              return "SelectiveHydration";
            }
            if (lane & IdleHydrationLane) {
              return "IdleHydration";
            }
            if (lane & IdleLane) {
              return "Idle";
            }
            if (lane & OffscreenLane) {
              return "Offscreen";
            }
          }
        }
        var NoTimestamp = -1;
        var nextTransitionLane = TransitionLane1;
        var nextRetryLane = RetryLane1;
        function getHighestPriorityLanes(lanes) {
          switch (getHighestPriorityLane(lanes)) {
            case SyncLane:
              return SyncLane;
            case InputContinuousHydrationLane:
              return InputContinuousHydrationLane;
            case InputContinuousLane:
              return InputContinuousLane;
            case DefaultHydrationLane:
              return DefaultHydrationLane;
            case DefaultLane:
              return DefaultLane;
            case TransitionHydrationLane:
              return TransitionHydrationLane;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return lanes & TransitionLanes;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return lanes & RetryLanes;
            case SelectiveHydrationLane:
              return SelectiveHydrationLane;
            case IdleHydrationLane:
              return IdleHydrationLane;
            case IdleLane:
              return IdleLane;
            case OffscreenLane:
              return OffscreenLane;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return lanes;
          }
        }
        function getNextLanes(root2, wipLanes) {
          var pendingLanes = root2.pendingLanes;
          if (pendingLanes === NoLanes) {
            return NoLanes;
          }
          var nextLanes = NoLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var nonIdlePendingLanes = pendingLanes & NonIdleLanes;
          if (nonIdlePendingLanes !== NoLanes) {
            var nonIdleUnblockedLanes = nonIdlePendingLanes & ~suspendedLanes;
            if (nonIdleUnblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(nonIdleUnblockedLanes);
            } else {
              var nonIdlePingedLanes = nonIdlePendingLanes & pingedLanes;
              if (nonIdlePingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(nonIdlePingedLanes);
              }
            }
          } else {
            var unblockedLanes = pendingLanes & ~suspendedLanes;
            if (unblockedLanes !== NoLanes) {
              nextLanes = getHighestPriorityLanes(unblockedLanes);
            } else {
              if (pingedLanes !== NoLanes) {
                nextLanes = getHighestPriorityLanes(pingedLanes);
              }
            }
          }
          if (nextLanes === NoLanes) {
            return NoLanes;
          }
          if (wipLanes !== NoLanes && wipLanes !== nextLanes && // If we already suspended with a delay, then interrupting is fine. Don't
          // bother waiting until the root is complete.
          (wipLanes & suspendedLanes) === NoLanes) {
            var nextLane = getHighestPriorityLane(nextLanes);
            var wipLane = getHighestPriorityLane(wipLanes);
            if (
              // Tests whether the next lane is equal or lower priority than the wip
              // one. This works because the bits decrease in priority as you go left.
              nextLane >= wipLane || // Default priority updates should not interrupt transition updates. The
              // only difference between default updates and transition updates is that
              // default updates do not support refresh transitions.
              nextLane === DefaultLane && (wipLane & TransitionLanes) !== NoLanes
            ) {
              return wipLanes;
            }
          }
          if ((nextLanes & InputContinuousLane) !== NoLanes) {
            nextLanes |= pendingLanes & DefaultLane;
          }
          var entangledLanes = root2.entangledLanes;
          if (entangledLanes !== NoLanes) {
            var entanglements = root2.entanglements;
            var lanes = nextLanes & entangledLanes;
            while (lanes > 0) {
              var index2 = pickArbitraryLaneIndex(lanes);
              var lane = 1 << index2;
              nextLanes |= entanglements[index2];
              lanes &= ~lane;
            }
          }
          return nextLanes;
        }
        function getMostRecentEventTime(root2, lanes) {
          var eventTimes = root2.eventTimes;
          var mostRecentEventTime = NoTimestamp;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var eventTime = eventTimes[index2];
            if (eventTime > mostRecentEventTime) {
              mostRecentEventTime = eventTime;
            }
            lanes &= ~lane;
          }
          return mostRecentEventTime;
        }
        function computeExpirationTime(lane, currentTime) {
          switch (lane) {
            case SyncLane:
            case InputContinuousHydrationLane:
            case InputContinuousLane:
              return currentTime + 250;
            case DefaultHydrationLane:
            case DefaultLane:
            case TransitionHydrationLane:
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
              return currentTime + 5e3;
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              return NoTimestamp;
            case SelectiveHydrationLane:
            case IdleHydrationLane:
            case IdleLane:
            case OffscreenLane:
              return NoTimestamp;
            default:
              {
                error("Should have found matching lanes. This is a bug in React.");
              }
              return NoTimestamp;
          }
        }
        function markStarvedLanesAsExpired(root2, currentTime) {
          var pendingLanes = root2.pendingLanes;
          var suspendedLanes = root2.suspendedLanes;
          var pingedLanes = root2.pingedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = pendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            var expirationTime = expirationTimes[index2];
            if (expirationTime === NoTimestamp) {
              if ((lane & suspendedLanes) === NoLanes || (lane & pingedLanes) !== NoLanes) {
                expirationTimes[index2] = computeExpirationTime(lane, currentTime);
              }
            } else if (expirationTime <= currentTime) {
              root2.expiredLanes |= lane;
            }
            lanes &= ~lane;
          }
        }
        function getHighestPriorityPendingLanes(root2) {
          return getHighestPriorityLanes(root2.pendingLanes);
        }
        function getLanesToRetrySynchronouslyOnError(root2) {
          var everythingButOffscreen = root2.pendingLanes & ~OffscreenLane;
          if (everythingButOffscreen !== NoLanes) {
            return everythingButOffscreen;
          }
          if (everythingButOffscreen & OffscreenLane) {
            return OffscreenLane;
          }
          return NoLanes;
        }
        function includesSyncLane(lanes) {
          return (lanes & SyncLane) !== NoLanes;
        }
        function includesNonIdleWork(lanes) {
          return (lanes & NonIdleLanes) !== NoLanes;
        }
        function includesOnlyRetries(lanes) {
          return (lanes & RetryLanes) === lanes;
        }
        function includesOnlyNonUrgentLanes(lanes) {
          var UrgentLanes = SyncLane | InputContinuousLane | DefaultLane;
          return (lanes & UrgentLanes) === NoLanes;
        }
        function includesOnlyTransitions(lanes) {
          return (lanes & TransitionLanes) === lanes;
        }
        function includesBlockingLane(root2, lanes) {
          var SyncDefaultLanes = InputContinuousHydrationLane | InputContinuousLane | DefaultHydrationLane | DefaultLane;
          return (lanes & SyncDefaultLanes) !== NoLanes;
        }
        function includesExpiredLane(root2, lanes) {
          return (lanes & root2.expiredLanes) !== NoLanes;
        }
        function isTransitionLane(lane) {
          return (lane & TransitionLanes) !== NoLanes;
        }
        function claimNextTransitionLane() {
          var lane = nextTransitionLane;
          nextTransitionLane <<= 1;
          if ((nextTransitionLane & TransitionLanes) === NoLanes) {
            nextTransitionLane = TransitionLane1;
          }
          return lane;
        }
        function claimNextRetryLane() {
          var lane = nextRetryLane;
          nextRetryLane <<= 1;
          if ((nextRetryLane & RetryLanes) === NoLanes) {
            nextRetryLane = RetryLane1;
          }
          return lane;
        }
        function getHighestPriorityLane(lanes) {
          return lanes & -lanes;
        }
        function pickArbitraryLane(lanes) {
          return getHighestPriorityLane(lanes);
        }
        function pickArbitraryLaneIndex(lanes) {
          return 31 - clz32(lanes);
        }
        function laneToIndex(lane) {
          return pickArbitraryLaneIndex(lane);
        }
        function includesSomeLane(a7, b) {
          return (a7 & b) !== NoLanes;
        }
        function isSubsetOfLanes(set2, subset) {
          return (set2 & subset) === subset;
        }
        function mergeLanes(a7, b) {
          return a7 | b;
        }
        function removeLanes(set2, subset) {
          return set2 & ~subset;
        }
        function intersectLanes(a7, b) {
          return a7 & b;
        }
        function laneToLanes(lane) {
          return lane;
        }
        function higherPriorityLane(a7, b) {
          return a7 !== NoLane && a7 < b ? a7 : b;
        }
        function createLaneMap(initial) {
          var laneMap = [];
          for (var i = 0; i < TotalLanes; i++) {
            laneMap.push(initial);
          }
          return laneMap;
        }
        function markRootUpdated(root2, updateLane, eventTime) {
          root2.pendingLanes |= updateLane;
          if (updateLane !== IdleLane) {
            root2.suspendedLanes = NoLanes;
            root2.pingedLanes = NoLanes;
          }
          var eventTimes = root2.eventTimes;
          var index2 = laneToIndex(updateLane);
          eventTimes[index2] = eventTime;
        }
        function markRootSuspended(root2, suspendedLanes) {
          root2.suspendedLanes |= suspendedLanes;
          root2.pingedLanes &= ~suspendedLanes;
          var expirationTimes = root2.expirationTimes;
          var lanes = suspendedLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootPinged(root2, pingedLanes, eventTime) {
          root2.pingedLanes |= root2.suspendedLanes & pingedLanes;
        }
        function markRootFinished(root2, remainingLanes) {
          var noLongerPendingLanes = root2.pendingLanes & ~remainingLanes;
          root2.pendingLanes = remainingLanes;
          root2.suspendedLanes = NoLanes;
          root2.pingedLanes = NoLanes;
          root2.expiredLanes &= remainingLanes;
          root2.mutableReadLanes &= remainingLanes;
          root2.entangledLanes &= remainingLanes;
          var entanglements = root2.entanglements;
          var eventTimes = root2.eventTimes;
          var expirationTimes = root2.expirationTimes;
          var lanes = noLongerPendingLanes;
          while (lanes > 0) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            entanglements[index2] = NoLanes;
            eventTimes[index2] = NoTimestamp;
            expirationTimes[index2] = NoTimestamp;
            lanes &= ~lane;
          }
        }
        function markRootEntangled(root2, entangledLanes) {
          var rootEntangledLanes = root2.entangledLanes |= entangledLanes;
          var entanglements = root2.entanglements;
          var lanes = rootEntangledLanes;
          while (lanes) {
            var index2 = pickArbitraryLaneIndex(lanes);
            var lane = 1 << index2;
            if (
              // Is this one of the newly entangled lanes?
              lane & entangledLanes | // Is this lane transitively entangled with the newly entangled lanes?
              entanglements[index2] & entangledLanes
            ) {
              entanglements[index2] |= entangledLanes;
            }
            lanes &= ~lane;
          }
        }
        function getBumpedLaneForHydration(root2, renderLanes2) {
          var renderLane = getHighestPriorityLane(renderLanes2);
          var lane;
          switch (renderLane) {
            case InputContinuousLane:
              lane = InputContinuousHydrationLane;
              break;
            case DefaultLane:
              lane = DefaultHydrationLane;
              break;
            case TransitionLane1:
            case TransitionLane2:
            case TransitionLane3:
            case TransitionLane4:
            case TransitionLane5:
            case TransitionLane6:
            case TransitionLane7:
            case TransitionLane8:
            case TransitionLane9:
            case TransitionLane10:
            case TransitionLane11:
            case TransitionLane12:
            case TransitionLane13:
            case TransitionLane14:
            case TransitionLane15:
            case TransitionLane16:
            case RetryLane1:
            case RetryLane2:
            case RetryLane3:
            case RetryLane4:
            case RetryLane5:
              lane = TransitionHydrationLane;
              break;
            case IdleLane:
              lane = IdleHydrationLane;
              break;
            default:
              lane = NoLane;
              break;
          }
          if ((lane & (root2.suspendedLanes | renderLanes2)) !== NoLane) {
            return NoLane;
          }
          return lane;
        }
        function addFiberToLanesMap(root2, fiber, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            updaters.add(fiber);
            lanes &= ~lane;
          }
        }
        function movePendingFibersToMemoized(root2, lanes) {
          if (!isDevToolsPresent) {
            return;
          }
          var pendingUpdatersLaneMap = root2.pendingUpdatersLaneMap;
          var memoizedUpdaters = root2.memoizedUpdaters;
          while (lanes > 0) {
            var index2 = laneToIndex(lanes);
            var lane = 1 << index2;
            var updaters = pendingUpdatersLaneMap[index2];
            if (updaters.size > 0) {
              updaters.forEach(function(fiber) {
                var alternate = fiber.alternate;
                if (alternate === null || !memoizedUpdaters.has(alternate)) {
                  memoizedUpdaters.add(fiber);
                }
              });
              updaters.clear();
            }
            lanes &= ~lane;
          }
        }
        function getTransitionsForLanes(root2, lanes) {
          {
            return null;
          }
        }
        var DiscreteEventPriority = SyncLane;
        var ContinuousEventPriority = InputContinuousLane;
        var DefaultEventPriority = DefaultLane;
        var IdleEventPriority = IdleLane;
        var currentUpdatePriority = NoLane;
        function getCurrentUpdatePriority() {
          return currentUpdatePriority;
        }
        function setCurrentUpdatePriority(newPriority) {
          currentUpdatePriority = newPriority;
        }
        function runWithPriority(priority, fn) {
          var previousPriority = currentUpdatePriority;
          try {
            currentUpdatePriority = priority;
            return fn();
          } finally {
            currentUpdatePriority = previousPriority;
          }
        }
        function higherEventPriority(a7, b) {
          return a7 !== 0 && a7 < b ? a7 : b;
        }
        function lowerEventPriority(a7, b) {
          return a7 === 0 || a7 > b ? a7 : b;
        }
        function isHigherEventPriority(a7, b) {
          return a7 !== 0 && a7 < b;
        }
        function lanesToEventPriority(lanes) {
          var lane = getHighestPriorityLane(lanes);
          if (!isHigherEventPriority(DiscreteEventPriority, lane)) {
            return DiscreteEventPriority;
          }
          if (!isHigherEventPriority(ContinuousEventPriority, lane)) {
            return ContinuousEventPriority;
          }
          if (includesNonIdleWork(lane)) {
            return DefaultEventPriority;
          }
          return IdleEventPriority;
        }
        function isRootDehydrated(root2) {
          var currentState = root2.current.memoizedState;
          return currentState.isDehydrated;
        }
        var _attemptSynchronousHydration;
        function setAttemptSynchronousHydration(fn) {
          _attemptSynchronousHydration = fn;
        }
        function attemptSynchronousHydration(fiber) {
          _attemptSynchronousHydration(fiber);
        }
        var attemptContinuousHydration;
        function setAttemptContinuousHydration(fn) {
          attemptContinuousHydration = fn;
        }
        var attemptHydrationAtCurrentPriority;
        function setAttemptHydrationAtCurrentPriority(fn) {
          attemptHydrationAtCurrentPriority = fn;
        }
        var getCurrentUpdatePriority$1;
        function setGetCurrentUpdatePriority(fn) {
          getCurrentUpdatePriority$1 = fn;
        }
        var attemptHydrationAtPriority;
        function setAttemptHydrationAtPriority(fn) {
          attemptHydrationAtPriority = fn;
        }
        var hasScheduledReplayAttempt = false;
        var queuedDiscreteEvents = [];
        var queuedFocus = null;
        var queuedDrag = null;
        var queuedMouse = null;
        var queuedPointers = /* @__PURE__ */ new Map();
        var queuedPointerCaptures = /* @__PURE__ */ new Map();
        var queuedExplicitHydrationTargets = [];
        var discreteReplayableEvents = [
          "mousedown",
          "mouseup",
          "touchcancel",
          "touchend",
          "touchstart",
          "auxclick",
          "dblclick",
          "pointercancel",
          "pointerdown",
          "pointerup",
          "dragend",
          "dragstart",
          "drop",
          "compositionend",
          "compositionstart",
          "keydown",
          "keypress",
          "keyup",
          "input",
          "textInput",
          // Intentionally camelCase
          "copy",
          "cut",
          "paste",
          "click",
          "change",
          "contextmenu",
          "reset",
          "submit"
        ];
        function isDiscreteEventThatRequiresHydration(eventType) {
          return discreteReplayableEvents.indexOf(eventType) > -1;
        }
        function createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return {
            blockedOn,
            domEventName,
            eventSystemFlags,
            nativeEvent,
            targetContainers: [targetContainer]
          };
        }
        function clearIfContinuousEvent(domEventName, nativeEvent) {
          switch (domEventName) {
            case "focusin":
            case "focusout":
              queuedFocus = null;
              break;
            case "dragenter":
            case "dragleave":
              queuedDrag = null;
              break;
            case "mouseover":
            case "mouseout":
              queuedMouse = null;
              break;
            case "pointerover":
            case "pointerout": {
              var pointerId = nativeEvent.pointerId;
              queuedPointers.delete(pointerId);
              break;
            }
            case "gotpointercapture":
            case "lostpointercapture": {
              var _pointerId = nativeEvent.pointerId;
              queuedPointerCaptures.delete(_pointerId);
              break;
            }
          }
        }
        function accumulateOrCreateContinuousQueuedReplayableEvent(existingQueuedEvent, blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (existingQueuedEvent === null || existingQueuedEvent.nativeEvent !== nativeEvent) {
            var queuedEvent = createQueuedReplayableEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent);
            if (blockedOn !== null) {
              var _fiber2 = getInstanceFromNode(blockedOn);
              if (_fiber2 !== null) {
                attemptContinuousHydration(_fiber2);
              }
            }
            return queuedEvent;
          }
          existingQueuedEvent.eventSystemFlags |= eventSystemFlags;
          var targetContainers = existingQueuedEvent.targetContainers;
          if (targetContainer !== null && targetContainers.indexOf(targetContainer) === -1) {
            targetContainers.push(targetContainer);
          }
          return existingQueuedEvent;
        }
        function queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          switch (domEventName) {
            case "focusin": {
              var focusEvent = nativeEvent;
              queuedFocus = accumulateOrCreateContinuousQueuedReplayableEvent(queuedFocus, blockedOn, domEventName, eventSystemFlags, targetContainer, focusEvent);
              return true;
            }
            case "dragenter": {
              var dragEvent = nativeEvent;
              queuedDrag = accumulateOrCreateContinuousQueuedReplayableEvent(queuedDrag, blockedOn, domEventName, eventSystemFlags, targetContainer, dragEvent);
              return true;
            }
            case "mouseover": {
              var mouseEvent = nativeEvent;
              queuedMouse = accumulateOrCreateContinuousQueuedReplayableEvent(queuedMouse, blockedOn, domEventName, eventSystemFlags, targetContainer, mouseEvent);
              return true;
            }
            case "pointerover": {
              var pointerEvent = nativeEvent;
              var pointerId = pointerEvent.pointerId;
              queuedPointers.set(pointerId, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointers.get(pointerId) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, pointerEvent));
              return true;
            }
            case "gotpointercapture": {
              var _pointerEvent = nativeEvent;
              var _pointerId2 = _pointerEvent.pointerId;
              queuedPointerCaptures.set(_pointerId2, accumulateOrCreateContinuousQueuedReplayableEvent(queuedPointerCaptures.get(_pointerId2) || null, blockedOn, domEventName, eventSystemFlags, targetContainer, _pointerEvent));
              return true;
            }
          }
          return false;
        }
        function attemptExplicitHydrationTarget(queuedTarget) {
          var targetInst = getClosestInstanceFromNode(queuedTarget.target);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted !== null) {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  queuedTarget.blockedOn = instance;
                  attemptHydrationAtPriority(queuedTarget.priority, function() {
                    attemptHydrationAtCurrentPriority(nearestMounted);
                  });
                  return;
                }
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  queuedTarget.blockedOn = getContainerFromFiber(nearestMounted);
                  return;
                }
              }
            }
          }
          queuedTarget.blockedOn = null;
        }
        function queueExplicitHydrationTarget(target) {
          var updatePriority = getCurrentUpdatePriority$1();
          var queuedTarget = {
            blockedOn: null,
            target,
            priority: updatePriority
          };
          var i = 0;
          for (; i < queuedExplicitHydrationTargets.length; i++) {
            if (!isHigherEventPriority(updatePriority, queuedExplicitHydrationTargets[i].priority)) {
              break;
            }
          }
          queuedExplicitHydrationTargets.splice(i, 0, queuedTarget);
          if (i === 0) {
            attemptExplicitHydrationTarget(queuedTarget);
          }
        }
        function attemptReplayContinuousQueuedEvent(queuedEvent) {
          if (queuedEvent.blockedOn !== null) {
            return false;
          }
          var targetContainers = queuedEvent.targetContainers;
          while (targetContainers.length > 0) {
            var targetContainer = targetContainers[0];
            var nextBlockedOn = findInstanceBlockingEvent(queuedEvent.domEventName, queuedEvent.eventSystemFlags, targetContainer, queuedEvent.nativeEvent);
            if (nextBlockedOn === null) {
              {
                var nativeEvent = queuedEvent.nativeEvent;
                var nativeEventClone = new nativeEvent.constructor(nativeEvent.type, nativeEvent);
                setReplayingEvent(nativeEventClone);
                nativeEvent.target.dispatchEvent(nativeEventClone);
                resetReplayingEvent();
              }
            } else {
              var _fiber3 = getInstanceFromNode(nextBlockedOn);
              if (_fiber3 !== null) {
                attemptContinuousHydration(_fiber3);
              }
              queuedEvent.blockedOn = nextBlockedOn;
              return false;
            }
            targetContainers.shift();
          }
          return true;
        }
        function attemptReplayContinuousQueuedEventInMap(queuedEvent, key, map) {
          if (attemptReplayContinuousQueuedEvent(queuedEvent)) {
            map.delete(key);
          }
        }
        function replayUnblockedEvents() {
          hasScheduledReplayAttempt = false;
          if (queuedFocus !== null && attemptReplayContinuousQueuedEvent(queuedFocus)) {
            queuedFocus = null;
          }
          if (queuedDrag !== null && attemptReplayContinuousQueuedEvent(queuedDrag)) {
            queuedDrag = null;
          }
          if (queuedMouse !== null && attemptReplayContinuousQueuedEvent(queuedMouse)) {
            queuedMouse = null;
          }
          queuedPointers.forEach(attemptReplayContinuousQueuedEventInMap);
          queuedPointerCaptures.forEach(attemptReplayContinuousQueuedEventInMap);
        }
        function scheduleCallbackIfUnblocked(queuedEvent, unblocked) {
          if (queuedEvent.blockedOn === unblocked) {
            queuedEvent.blockedOn = null;
            if (!hasScheduledReplayAttempt) {
              hasScheduledReplayAttempt = true;
              Scheduler.unstable_scheduleCallback(Scheduler.unstable_NormalPriority, replayUnblockedEvents);
            }
          }
        }
        function retryIfBlockedOn(unblocked) {
          if (queuedDiscreteEvents.length > 0) {
            scheduleCallbackIfUnblocked(queuedDiscreteEvents[0], unblocked);
            for (var i = 1; i < queuedDiscreteEvents.length; i++) {
              var queuedEvent = queuedDiscreteEvents[i];
              if (queuedEvent.blockedOn === unblocked) {
                queuedEvent.blockedOn = null;
              }
            }
          }
          if (queuedFocus !== null) {
            scheduleCallbackIfUnblocked(queuedFocus, unblocked);
          }
          if (queuedDrag !== null) {
            scheduleCallbackIfUnblocked(queuedDrag, unblocked);
          }
          if (queuedMouse !== null) {
            scheduleCallbackIfUnblocked(queuedMouse, unblocked);
          }
          var unblock = function(queuedEvent2) {
            return scheduleCallbackIfUnblocked(queuedEvent2, unblocked);
          };
          queuedPointers.forEach(unblock);
          queuedPointerCaptures.forEach(unblock);
          for (var _i2 = 0; _i2 < queuedExplicitHydrationTargets.length; _i2++) {
            var queuedTarget = queuedExplicitHydrationTargets[_i2];
            if (queuedTarget.blockedOn === unblocked) {
              queuedTarget.blockedOn = null;
            }
          }
          while (queuedExplicitHydrationTargets.length > 0) {
            var nextExplicitTarget = queuedExplicitHydrationTargets[0];
            if (nextExplicitTarget.blockedOn !== null) {
              break;
            } else {
              attemptExplicitHydrationTarget(nextExplicitTarget);
              if (nextExplicitTarget.blockedOn === null) {
                queuedExplicitHydrationTargets.shift();
              }
            }
          }
        }
        var ReactCurrentBatchConfig = ReactSharedInternals.ReactCurrentBatchConfig;
        var _enabled = true;
        function setEnabled(enabled) {
          _enabled = !!enabled;
        }
        function isEnabled() {
          return _enabled;
        }
        function createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags) {
          var eventPriority = getEventPriority(domEventName);
          var listenerWrapper;
          switch (eventPriority) {
            case DiscreteEventPriority:
              listenerWrapper = dispatchDiscreteEvent;
              break;
            case ContinuousEventPriority:
              listenerWrapper = dispatchContinuousEvent;
              break;
            case DefaultEventPriority:
            default:
              listenerWrapper = dispatchEvent;
              break;
          }
          return listenerWrapper.bind(null, domEventName, eventSystemFlags, targetContainer);
        }
        function dispatchDiscreteEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(DiscreteEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchContinuousEvent(domEventName, eventSystemFlags, container, nativeEvent) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig.transition;
          ReactCurrentBatchConfig.transition = null;
          try {
            setCurrentUpdatePriority(ContinuousEventPriority);
            dispatchEvent(domEventName, eventSystemFlags, container, nativeEvent);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig.transition = prevTransition;
          }
        }
        function dispatchEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          if (!_enabled) {
            return;
          }
          {
            dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          }
        }
        function dispatchEventWithEnableCapturePhaseSelectiveHydrationWithoutDiscreteEventReplay(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          var blockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
          if (blockedOn === null) {
            dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
            clearIfContinuousEvent(domEventName, nativeEvent);
            return;
          }
          if (queueIfContinuousEvent(blockedOn, domEventName, eventSystemFlags, targetContainer, nativeEvent)) {
            nativeEvent.stopPropagation();
            return;
          }
          clearIfContinuousEvent(domEventName, nativeEvent);
          if (eventSystemFlags & IS_CAPTURE_PHASE && isDiscreteEventThatRequiresHydration(domEventName)) {
            while (blockedOn !== null) {
              var fiber = getInstanceFromNode(blockedOn);
              if (fiber !== null) {
                attemptSynchronousHydration(fiber);
              }
              var nextBlockedOn = findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent);
              if (nextBlockedOn === null) {
                dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, return_targetInst, targetContainer);
              }
              if (nextBlockedOn === blockedOn) {
                break;
              }
              blockedOn = nextBlockedOn;
            }
            if (blockedOn !== null) {
              nativeEvent.stopPropagation();
            }
            return;
          }
          dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, null, targetContainer);
        }
        var return_targetInst = null;
        function findInstanceBlockingEvent(domEventName, eventSystemFlags, targetContainer, nativeEvent) {
          return_targetInst = null;
          var nativeEventTarget = getEventTarget(nativeEvent);
          var targetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (targetInst !== null) {
            var nearestMounted = getNearestMountedFiber(targetInst);
            if (nearestMounted === null) {
              targetInst = null;
            } else {
              var tag = nearestMounted.tag;
              if (tag === SuspenseComponent) {
                var instance = getSuspenseInstanceFromFiber(nearestMounted);
                if (instance !== null) {
                  return instance;
                }
                targetInst = null;
              } else if (tag === HostRoot) {
                var root2 = nearestMounted.stateNode;
                if (isRootDehydrated(root2)) {
                  return getContainerFromFiber(nearestMounted);
                }
                targetInst = null;
              } else if (nearestMounted !== targetInst) {
                targetInst = null;
              }
            }
          }
          return_targetInst = targetInst;
          return null;
        }
        function getEventPriority(domEventName) {
          switch (domEventName) {
            // Used by SimpleEventPlugin:
            case "cancel":
            case "click":
            case "close":
            case "contextmenu":
            case "copy":
            case "cut":
            case "auxclick":
            case "dblclick":
            case "dragend":
            case "dragstart":
            case "drop":
            case "focusin":
            case "focusout":
            case "input":
            case "invalid":
            case "keydown":
            case "keypress":
            case "keyup":
            case "mousedown":
            case "mouseup":
            case "paste":
            case "pause":
            case "play":
            case "pointercancel":
            case "pointerdown":
            case "pointerup":
            case "ratechange":
            case "reset":
            case "resize":
            case "seeked":
            case "submit":
            case "touchcancel":
            case "touchend":
            case "touchstart":
            case "volumechange":
            // Used by polyfills:
            // eslint-disable-next-line no-fallthrough
            case "change":
            case "selectionchange":
            case "textInput":
            case "compositionstart":
            case "compositionend":
            case "compositionupdate":
            // Only enableCreateEventHandleAPI:
            // eslint-disable-next-line no-fallthrough
            case "beforeblur":
            case "afterblur":
            // Not used by React but could be by user code:
            // eslint-disable-next-line no-fallthrough
            case "beforeinput":
            case "blur":
            case "fullscreenchange":
            case "focus":
            case "hashchange":
            case "popstate":
            case "select":
            case "selectstart":
              return DiscreteEventPriority;
            case "drag":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "mousemove":
            case "mouseout":
            case "mouseover":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "scroll":
            case "toggle":
            case "touchmove":
            case "wheel":
            // Not used by React but could be by user code:
            // eslint-disable-next-line no-fallthrough
            case "mouseenter":
            case "mouseleave":
            case "pointerenter":
            case "pointerleave":
              return ContinuousEventPriority;
            case "message": {
              var schedulerPriority = getCurrentPriorityLevel();
              switch (schedulerPriority) {
                case ImmediatePriority:
                  return DiscreteEventPriority;
                case UserBlockingPriority:
                  return ContinuousEventPriority;
                case NormalPriority:
                case LowPriority:
                  return DefaultEventPriority;
                case IdlePriority:
                  return IdleEventPriority;
                default:
                  return DefaultEventPriority;
              }
            }
            default:
              return DefaultEventPriority;
          }
        }
        function addEventBubbleListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, false);
          return listener;
        }
        function addEventCaptureListener(target, eventType, listener) {
          target.addEventListener(eventType, listener, true);
          return listener;
        }
        function addEventCaptureListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            capture: true,
            passive
          });
          return listener;
        }
        function addEventBubbleListenerWithPassiveFlag(target, eventType, listener, passive) {
          target.addEventListener(eventType, listener, {
            passive
          });
          return listener;
        }
        var root = null;
        var startText = null;
        var fallbackText = null;
        function initialize(nativeEventTarget) {
          root = nativeEventTarget;
          startText = getText();
          return true;
        }
        function reset() {
          root = null;
          startText = null;
          fallbackText = null;
        }
        function getData() {
          if (fallbackText) {
            return fallbackText;
          }
          var start;
          var startValue = startText;
          var startLength = startValue.length;
          var end;
          var endValue = getText();
          var endLength = endValue.length;
          for (start = 0; start < startLength; start++) {
            if (startValue[start] !== endValue[start]) {
              break;
            }
          }
          var minEnd = startLength - start;
          for (end = 1; end <= minEnd; end++) {
            if (startValue[startLength - end] !== endValue[endLength - end]) {
              break;
            }
          }
          var sliceTail = end > 1 ? 1 - end : void 0;
          fallbackText = endValue.slice(start, sliceTail);
          return fallbackText;
        }
        function getText() {
          if ("value" in root) {
            return root.value;
          }
          return root.textContent;
        }
        function getEventCharCode(nativeEvent) {
          var charCode;
          var keyCode = nativeEvent.keyCode;
          if ("charCode" in nativeEvent) {
            charCode = nativeEvent.charCode;
            if (charCode === 0 && keyCode === 13) {
              charCode = 13;
            }
          } else {
            charCode = keyCode;
          }
          if (charCode === 10) {
            charCode = 13;
          }
          if (charCode >= 32 || charCode === 13) {
            return charCode;
          }
          return 0;
        }
        function functionThatReturnsTrue() {
          return true;
        }
        function functionThatReturnsFalse() {
          return false;
        }
        function createSyntheticEvent(Interface) {
          function SyntheticBaseEvent(reactName, reactEventType, targetInst, nativeEvent, nativeEventTarget) {
            this._reactName = reactName;
            this._targetInst = targetInst;
            this.type = reactEventType;
            this.nativeEvent = nativeEvent;
            this.target = nativeEventTarget;
            this.currentTarget = null;
            for (var _propName in Interface) {
              if (!Interface.hasOwnProperty(_propName)) {
                continue;
              }
              var normalize = Interface[_propName];
              if (normalize) {
                this[_propName] = normalize(nativeEvent);
              } else {
                this[_propName] = nativeEvent[_propName];
              }
            }
            var defaultPrevented = nativeEvent.defaultPrevented != null ? nativeEvent.defaultPrevented : nativeEvent.returnValue === false;
            if (defaultPrevented) {
              this.isDefaultPrevented = functionThatReturnsTrue;
            } else {
              this.isDefaultPrevented = functionThatReturnsFalse;
            }
            this.isPropagationStopped = functionThatReturnsFalse;
            return this;
          }
          assign(SyntheticBaseEvent.prototype, {
            preventDefault: function() {
              this.defaultPrevented = true;
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.preventDefault) {
                event.preventDefault();
              } else if (typeof event.returnValue !== "unknown") {
                event.returnValue = false;
              }
              this.isDefaultPrevented = functionThatReturnsTrue;
            },
            stopPropagation: function() {
              var event = this.nativeEvent;
              if (!event) {
                return;
              }
              if (event.stopPropagation) {
                event.stopPropagation();
              } else if (typeof event.cancelBubble !== "unknown") {
                event.cancelBubble = true;
              }
              this.isPropagationStopped = functionThatReturnsTrue;
            },
            /**
             * We release all dispatched `SyntheticEvent`s after each event loop, adding
             * them back into the pool. This allows a way to hold onto a reference that
             * won't be added back into the pool.
             */
            persist: function() {
            },
            /**
             * Checks if this event should be released back into the pool.
             *
             * @return {boolean} True if this should not be released, false otherwise.
             */
            isPersistent: functionThatReturnsTrue
          });
          return SyntheticBaseEvent;
        }
        var EventInterface = {
          eventPhase: 0,
          bubbles: 0,
          cancelable: 0,
          timeStamp: function(event) {
            return event.timeStamp || Date.now();
          },
          defaultPrevented: 0,
          isTrusted: 0
        };
        var SyntheticEvent = createSyntheticEvent(EventInterface);
        var UIEventInterface = assign({}, EventInterface, {
          view: 0,
          detail: 0
        });
        var SyntheticUIEvent = createSyntheticEvent(UIEventInterface);
        var lastMovementX;
        var lastMovementY;
        var lastMouseEvent;
        function updateMouseMovementPolyfillState(event) {
          if (event !== lastMouseEvent) {
            if (lastMouseEvent && event.type === "mousemove") {
              lastMovementX = event.screenX - lastMouseEvent.screenX;
              lastMovementY = event.screenY - lastMouseEvent.screenY;
            } else {
              lastMovementX = 0;
              lastMovementY = 0;
            }
            lastMouseEvent = event;
          }
        }
        var MouseEventInterface = assign({}, UIEventInterface, {
          screenX: 0,
          screenY: 0,
          clientX: 0,
          clientY: 0,
          pageX: 0,
          pageY: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          getModifierState: getEventModifierState,
          button: 0,
          buttons: 0,
          relatedTarget: function(event) {
            if (event.relatedTarget === void 0) return event.fromElement === event.srcElement ? event.toElement : event.fromElement;
            return event.relatedTarget;
          },
          movementX: function(event) {
            if ("movementX" in event) {
              return event.movementX;
            }
            updateMouseMovementPolyfillState(event);
            return lastMovementX;
          },
          movementY: function(event) {
            if ("movementY" in event) {
              return event.movementY;
            }
            return lastMovementY;
          }
        });
        var SyntheticMouseEvent = createSyntheticEvent(MouseEventInterface);
        var DragEventInterface = assign({}, MouseEventInterface, {
          dataTransfer: 0
        });
        var SyntheticDragEvent = createSyntheticEvent(DragEventInterface);
        var FocusEventInterface = assign({}, UIEventInterface, {
          relatedTarget: 0
        });
        var SyntheticFocusEvent = createSyntheticEvent(FocusEventInterface);
        var AnimationEventInterface = assign({}, EventInterface, {
          animationName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticAnimationEvent = createSyntheticEvent(AnimationEventInterface);
        var ClipboardEventInterface = assign({}, EventInterface, {
          clipboardData: function(event) {
            return "clipboardData" in event ? event.clipboardData : window.clipboardData;
          }
        });
        var SyntheticClipboardEvent = createSyntheticEvent(ClipboardEventInterface);
        var CompositionEventInterface = assign({}, EventInterface, {
          data: 0
        });
        var SyntheticCompositionEvent = createSyntheticEvent(CompositionEventInterface);
        var SyntheticInputEvent = SyntheticCompositionEvent;
        var normalizeKey = {
          Esc: "Escape",
          Spacebar: " ",
          Left: "ArrowLeft",
          Up: "ArrowUp",
          Right: "ArrowRight",
          Down: "ArrowDown",
          Del: "Delete",
          Win: "OS",
          Menu: "ContextMenu",
          Apps: "ContextMenu",
          Scroll: "ScrollLock",
          MozPrintableKey: "Unidentified"
        };
        var translateToKey = {
          "8": "Backspace",
          "9": "Tab",
          "12": "Clear",
          "13": "Enter",
          "16": "Shift",
          "17": "Control",
          "18": "Alt",
          "19": "Pause",
          "20": "CapsLock",
          "27": "Escape",
          "32": " ",
          "33": "PageUp",
          "34": "PageDown",
          "35": "End",
          "36": "Home",
          "37": "ArrowLeft",
          "38": "ArrowUp",
          "39": "ArrowRight",
          "40": "ArrowDown",
          "45": "Insert",
          "46": "Delete",
          "112": "F1",
          "113": "F2",
          "114": "F3",
          "115": "F4",
          "116": "F5",
          "117": "F6",
          "118": "F7",
          "119": "F8",
          "120": "F9",
          "121": "F10",
          "122": "F11",
          "123": "F12",
          "144": "NumLock",
          "145": "ScrollLock",
          "224": "Meta"
        };
        function getEventKey(nativeEvent) {
          if (nativeEvent.key) {
            var key = normalizeKey[nativeEvent.key] || nativeEvent.key;
            if (key !== "Unidentified") {
              return key;
            }
          }
          if (nativeEvent.type === "keypress") {
            var charCode = getEventCharCode(nativeEvent);
            return charCode === 13 ? "Enter" : String.fromCharCode(charCode);
          }
          if (nativeEvent.type === "keydown" || nativeEvent.type === "keyup") {
            return translateToKey[nativeEvent.keyCode] || "Unidentified";
          }
          return "";
        }
        var modifierKeyToProp = {
          Alt: "altKey",
          Control: "ctrlKey",
          Meta: "metaKey",
          Shift: "shiftKey"
        };
        function modifierStateGetter(keyArg) {
          var syntheticEvent = this;
          var nativeEvent = syntheticEvent.nativeEvent;
          if (nativeEvent.getModifierState) {
            return nativeEvent.getModifierState(keyArg);
          }
          var keyProp = modifierKeyToProp[keyArg];
          return keyProp ? !!nativeEvent[keyProp] : false;
        }
        function getEventModifierState(nativeEvent) {
          return modifierStateGetter;
        }
        var KeyboardEventInterface = assign({}, UIEventInterface, {
          key: getEventKey,
          code: 0,
          location: 0,
          ctrlKey: 0,
          shiftKey: 0,
          altKey: 0,
          metaKey: 0,
          repeat: 0,
          locale: 0,
          getModifierState: getEventModifierState,
          // Legacy Interface
          charCode: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            return 0;
          },
          keyCode: function(event) {
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          },
          which: function(event) {
            if (event.type === "keypress") {
              return getEventCharCode(event);
            }
            if (event.type === "keydown" || event.type === "keyup") {
              return event.keyCode;
            }
            return 0;
          }
        });
        var SyntheticKeyboardEvent = createSyntheticEvent(KeyboardEventInterface);
        var PointerEventInterface = assign({}, MouseEventInterface, {
          pointerId: 0,
          width: 0,
          height: 0,
          pressure: 0,
          tangentialPressure: 0,
          tiltX: 0,
          tiltY: 0,
          twist: 0,
          pointerType: 0,
          isPrimary: 0
        });
        var SyntheticPointerEvent = createSyntheticEvent(PointerEventInterface);
        var TouchEventInterface = assign({}, UIEventInterface, {
          touches: 0,
          targetTouches: 0,
          changedTouches: 0,
          altKey: 0,
          metaKey: 0,
          ctrlKey: 0,
          shiftKey: 0,
          getModifierState: getEventModifierState
        });
        var SyntheticTouchEvent = createSyntheticEvent(TouchEventInterface);
        var TransitionEventInterface = assign({}, EventInterface, {
          propertyName: 0,
          elapsedTime: 0,
          pseudoElement: 0
        });
        var SyntheticTransitionEvent = createSyntheticEvent(TransitionEventInterface);
        var WheelEventInterface = assign({}, MouseEventInterface, {
          deltaX: function(event) {
            return "deltaX" in event ? event.deltaX : (
              // Fallback to `wheelDeltaX` for Webkit and normalize (right is positive).
              "wheelDeltaX" in event ? -event.wheelDeltaX : 0
            );
          },
          deltaY: function(event) {
            return "deltaY" in event ? event.deltaY : (
              // Fallback to `wheelDeltaY` for Webkit and normalize (down is positive).
              "wheelDeltaY" in event ? -event.wheelDeltaY : (
                // Fallback to `wheelDelta` for IE<9 and normalize (down is positive).
                "wheelDelta" in event ? -event.wheelDelta : 0
              )
            );
          },
          deltaZ: 0,
          // Browsers without "deltaMode" is reporting in raw wheel delta where one
          // notch on the scroll is always +/- 120, roughly equivalent to pixels.
          // A good approximation of DOM_DELTA_LINE (1) is 5% of viewport size or
          // ~40 pixels, for DOM_DELTA_SCREEN (2) it is 87.5% of viewport size.
          deltaMode: 0
        });
        var SyntheticWheelEvent = createSyntheticEvent(WheelEventInterface);
        var END_KEYCODES = [9, 13, 27, 32];
        var START_KEYCODE = 229;
        var canUseCompositionEvent = canUseDOM && "CompositionEvent" in window;
        var documentMode = null;
        if (canUseDOM && "documentMode" in document) {
          documentMode = document.documentMode;
        }
        var canUseTextInputEvent = canUseDOM && "TextEvent" in window && !documentMode;
        var useFallbackCompositionData = canUseDOM && (!canUseCompositionEvent || documentMode && documentMode > 8 && documentMode <= 11);
        var SPACEBAR_CODE = 32;
        var SPACEBAR_CHAR = String.fromCharCode(SPACEBAR_CODE);
        function registerEvents() {
          registerTwoPhaseEvent("onBeforeInput", ["compositionend", "keypress", "textInput", "paste"]);
          registerTwoPhaseEvent("onCompositionEnd", ["compositionend", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionStart", ["compositionstart", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
          registerTwoPhaseEvent("onCompositionUpdate", ["compositionupdate", "focusout", "keydown", "keypress", "keyup", "mousedown"]);
        }
        var hasSpaceKeypress = false;
        function isKeypressCommand(nativeEvent) {
          return (nativeEvent.ctrlKey || nativeEvent.altKey || nativeEvent.metaKey) && // ctrlKey && altKey is equivalent to AltGr, and is not a command.
          !(nativeEvent.ctrlKey && nativeEvent.altKey);
        }
        function getCompositionEventType(domEventName) {
          switch (domEventName) {
            case "compositionstart":
              return "onCompositionStart";
            case "compositionend":
              return "onCompositionEnd";
            case "compositionupdate":
              return "onCompositionUpdate";
          }
        }
        function isFallbackCompositionStart(domEventName, nativeEvent) {
          return domEventName === "keydown" && nativeEvent.keyCode === START_KEYCODE;
        }
        function isFallbackCompositionEnd(domEventName, nativeEvent) {
          switch (domEventName) {
            case "keyup":
              return END_KEYCODES.indexOf(nativeEvent.keyCode) !== -1;
            case "keydown":
              return nativeEvent.keyCode !== START_KEYCODE;
            case "keypress":
            case "mousedown":
            case "focusout":
              return true;
            default:
              return false;
          }
        }
        function getDataFromCustomEvent(nativeEvent) {
          var detail = nativeEvent.detail;
          if (typeof detail === "object" && "data" in detail) {
            return detail.data;
          }
          return null;
        }
        function isUsingKoreanIME(nativeEvent) {
          return nativeEvent.locale === "ko";
        }
        var isComposing = false;
        function extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var eventType;
          var fallbackData;
          if (canUseCompositionEvent) {
            eventType = getCompositionEventType(domEventName);
          } else if (!isComposing) {
            if (isFallbackCompositionStart(domEventName, nativeEvent)) {
              eventType = "onCompositionStart";
            }
          } else if (isFallbackCompositionEnd(domEventName, nativeEvent)) {
            eventType = "onCompositionEnd";
          }
          if (!eventType) {
            return null;
          }
          if (useFallbackCompositionData && !isUsingKoreanIME(nativeEvent)) {
            if (!isComposing && eventType === "onCompositionStart") {
              isComposing = initialize(nativeEventTarget);
            } else if (eventType === "onCompositionEnd") {
              if (isComposing) {
                fallbackData = getData();
              }
            }
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, eventType);
          if (listeners.length > 0) {
            var event = new SyntheticCompositionEvent(eventType, domEventName, null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            if (fallbackData) {
              event.data = fallbackData;
            } else {
              var customData = getDataFromCustomEvent(nativeEvent);
              if (customData !== null) {
                event.data = customData;
              }
            }
          }
        }
        function getNativeBeforeInputChars(domEventName, nativeEvent) {
          switch (domEventName) {
            case "compositionend":
              return getDataFromCustomEvent(nativeEvent);
            case "keypress":
              var which = nativeEvent.which;
              if (which !== SPACEBAR_CODE) {
                return null;
              }
              hasSpaceKeypress = true;
              return SPACEBAR_CHAR;
            case "textInput":
              var chars = nativeEvent.data;
              if (chars === SPACEBAR_CHAR && hasSpaceKeypress) {
                return null;
              }
              return chars;
            default:
              return null;
          }
        }
        function getFallbackBeforeInputChars(domEventName, nativeEvent) {
          if (isComposing) {
            if (domEventName === "compositionend" || !canUseCompositionEvent && isFallbackCompositionEnd(domEventName, nativeEvent)) {
              var chars = getData();
              reset();
              isComposing = false;
              return chars;
            }
            return null;
          }
          switch (domEventName) {
            case "paste":
              return null;
            case "keypress":
              if (!isKeypressCommand(nativeEvent)) {
                if (nativeEvent.char && nativeEvent.char.length > 1) {
                  return nativeEvent.char;
                } else if (nativeEvent.which) {
                  return String.fromCharCode(nativeEvent.which);
                }
              }
              return null;
            case "compositionend":
              return useFallbackCompositionData && !isUsingKoreanIME(nativeEvent) ? null : nativeEvent.data;
            default:
              return null;
          }
        }
        function extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget) {
          var chars;
          if (canUseTextInputEvent) {
            chars = getNativeBeforeInputChars(domEventName, nativeEvent);
          } else {
            chars = getFallbackBeforeInputChars(domEventName, nativeEvent);
          }
          if (!chars) {
            return null;
          }
          var listeners = accumulateTwoPhaseListeners(targetInst, "onBeforeInput");
          if (listeners.length > 0) {
            var event = new SyntheticInputEvent("onBeforeInput", "beforeinput", null, nativeEvent, nativeEventTarget);
            dispatchQueue.push({
              event,
              listeners
            });
            event.data = chars;
          }
        }
        function extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractCompositionEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          extractBeforeInputEvent(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
        }
        var supportedInputTypes = {
          color: true,
          date: true,
          datetime: true,
          "datetime-local": true,
          email: true,
          month: true,
          number: true,
          password: true,
          range: true,
          search: true,
          tel: true,
          text: true,
          time: true,
          url: true,
          week: true
        };
        function isTextInputElement(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          if (nodeName === "input") {
            return !!supportedInputTypes[elem.type];
          }
          if (nodeName === "textarea") {
            return true;
          }
          return false;
        }
        function isEventSupported(eventNameSuffix) {
          if (!canUseDOM) {
            return false;
          }
          var eventName = "on" + eventNameSuffix;
          var isSupported = eventName in document;
          if (!isSupported) {
            var element = document.createElement("div");
            element.setAttribute(eventName, "return;");
            isSupported = typeof element[eventName] === "function";
          }
          return isSupported;
        }
        function registerEvents$1() {
          registerTwoPhaseEvent("onChange", ["change", "click", "focusin", "focusout", "input", "keydown", "keyup", "selectionchange"]);
        }
        function createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, target) {
          enqueueStateRestore(target);
          var listeners = accumulateTwoPhaseListeners(inst, "onChange");
          if (listeners.length > 0) {
            var event = new SyntheticEvent("onChange", "change", null, nativeEvent, target);
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        var activeElement = null;
        var activeElementInst = null;
        function shouldUseChangeEvent(elem) {
          var nodeName = elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName === "select" || nodeName === "input" && elem.type === "file";
        }
        function manualDispatchChangeEvent(nativeEvent) {
          var dispatchQueue = [];
          createAndAccumulateChangeEvent(dispatchQueue, activeElementInst, nativeEvent, getEventTarget(nativeEvent));
          batchedUpdates(runEventInBatch, dispatchQueue);
        }
        function runEventInBatch(dispatchQueue) {
          processDispatchQueue(dispatchQueue, 0);
        }
        function getInstIfValueChanged(targetInst) {
          var targetNode = getNodeFromInstance(targetInst);
          if (updateValueIfChanged(targetNode)) {
            return targetInst;
          }
        }
        function getTargetInstForChangeEvent(domEventName, targetInst) {
          if (domEventName === "change") {
            return targetInst;
          }
        }
        var isInputEventSupported = false;
        if (canUseDOM) {
          isInputEventSupported = isEventSupported("input") && (!document.documentMode || document.documentMode > 9);
        }
        function startWatchingForValueChange(target, targetInst) {
          activeElement = target;
          activeElementInst = targetInst;
          activeElement.attachEvent("onpropertychange", handlePropertyChange);
        }
        function stopWatchingForValueChange() {
          if (!activeElement) {
            return;
          }
          activeElement.detachEvent("onpropertychange", handlePropertyChange);
          activeElement = null;
          activeElementInst = null;
        }
        function handlePropertyChange(nativeEvent) {
          if (nativeEvent.propertyName !== "value") {
            return;
          }
          if (getInstIfValueChanged(activeElementInst)) {
            manualDispatchChangeEvent(nativeEvent);
          }
        }
        function handleEventsForInputEventPolyfill(domEventName, target, targetInst) {
          if (domEventName === "focusin") {
            stopWatchingForValueChange();
            startWatchingForValueChange(target, targetInst);
          } else if (domEventName === "focusout") {
            stopWatchingForValueChange();
          }
        }
        function getTargetInstForInputEventPolyfill(domEventName, targetInst) {
          if (domEventName === "selectionchange" || domEventName === "keyup" || domEventName === "keydown") {
            return getInstIfValueChanged(activeElementInst);
          }
        }
        function shouldUseClickEvent(elem) {
          var nodeName = elem.nodeName;
          return nodeName && nodeName.toLowerCase() === "input" && (elem.type === "checkbox" || elem.type === "radio");
        }
        function getTargetInstForClickEvent(domEventName, targetInst) {
          if (domEventName === "click") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function getTargetInstForInputOrChangeEvent(domEventName, targetInst) {
          if (domEventName === "input" || domEventName === "change") {
            return getInstIfValueChanged(targetInst);
          }
        }
        function handleControlledInputBlur(node) {
          var state = node._wrapperState;
          if (!state || !state.controlled || node.type !== "number") {
            return;
          }
          {
            setDefaultValue(node, "number", node.value);
          }
        }
        function extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          var getTargetInstFunc, handleEventFunc;
          if (shouldUseChangeEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForChangeEvent;
          } else if (isTextInputElement(targetNode)) {
            if (isInputEventSupported) {
              getTargetInstFunc = getTargetInstForInputOrChangeEvent;
            } else {
              getTargetInstFunc = getTargetInstForInputEventPolyfill;
              handleEventFunc = handleEventsForInputEventPolyfill;
            }
          } else if (shouldUseClickEvent(targetNode)) {
            getTargetInstFunc = getTargetInstForClickEvent;
          }
          if (getTargetInstFunc) {
            var inst = getTargetInstFunc(domEventName, targetInst);
            if (inst) {
              createAndAccumulateChangeEvent(dispatchQueue, inst, nativeEvent, nativeEventTarget);
              return;
            }
          }
          if (handleEventFunc) {
            handleEventFunc(domEventName, targetNode, targetInst);
          }
          if (domEventName === "focusout") {
            handleControlledInputBlur(targetNode);
          }
        }
        function registerEvents$2() {
          registerDirectEvent("onMouseEnter", ["mouseout", "mouseover"]);
          registerDirectEvent("onMouseLeave", ["mouseout", "mouseover"]);
          registerDirectEvent("onPointerEnter", ["pointerout", "pointerover"]);
          registerDirectEvent("onPointerLeave", ["pointerout", "pointerover"]);
        }
        function extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var isOverEvent = domEventName === "mouseover" || domEventName === "pointerover";
          var isOutEvent = domEventName === "mouseout" || domEventName === "pointerout";
          if (isOverEvent && !isReplayingEvent(nativeEvent)) {
            var related = nativeEvent.relatedTarget || nativeEvent.fromElement;
            if (related) {
              if (getClosestInstanceFromNode(related) || isContainerMarkedAsRoot(related)) {
                return;
              }
            }
          }
          if (!isOutEvent && !isOverEvent) {
            return;
          }
          var win;
          if (nativeEventTarget.window === nativeEventTarget) {
            win = nativeEventTarget;
          } else {
            var doc = nativeEventTarget.ownerDocument;
            if (doc) {
              win = doc.defaultView || doc.parentWindow;
            } else {
              win = window;
            }
          }
          var from;
          var to3;
          if (isOutEvent) {
            var _related = nativeEvent.relatedTarget || nativeEvent.toElement;
            from = targetInst;
            to3 = _related ? getClosestInstanceFromNode(_related) : null;
            if (to3 !== null) {
              var nearestMounted = getNearestMountedFiber(to3);
              if (to3 !== nearestMounted || to3.tag !== HostComponent && to3.tag !== HostText) {
                to3 = null;
              }
            }
          } else {
            from = null;
            to3 = targetInst;
          }
          if (from === to3) {
            return;
          }
          var SyntheticEventCtor = SyntheticMouseEvent;
          var leaveEventType = "onMouseLeave";
          var enterEventType = "onMouseEnter";
          var eventTypePrefix = "mouse";
          if (domEventName === "pointerout" || domEventName === "pointerover") {
            SyntheticEventCtor = SyntheticPointerEvent;
            leaveEventType = "onPointerLeave";
            enterEventType = "onPointerEnter";
            eventTypePrefix = "pointer";
          }
          var fromNode = from == null ? win : getNodeFromInstance(from);
          var toNode = to3 == null ? win : getNodeFromInstance(to3);
          var leave = new SyntheticEventCtor(leaveEventType, eventTypePrefix + "leave", from, nativeEvent, nativeEventTarget);
          leave.target = fromNode;
          leave.relatedTarget = toNode;
          var enter = null;
          var nativeTargetInst = getClosestInstanceFromNode(nativeEventTarget);
          if (nativeTargetInst === targetInst) {
            var enterEvent = new SyntheticEventCtor(enterEventType, eventTypePrefix + "enter", to3, nativeEvent, nativeEventTarget);
            enterEvent.target = toNode;
            enterEvent.relatedTarget = fromNode;
            enter = enterEvent;
          }
          accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leave, enter, from, to3);
        }
        function is2(x7, y) {
          return x7 === y && (x7 !== 0 || 1 / x7 === 1 / y) || x7 !== x7 && y !== y;
        }
        var objectIs = typeof Object.is === "function" ? Object.is : is2;
        function shallowEqual(objA, objB) {
          if (objectIs(objA, objB)) {
            return true;
          }
          if (typeof objA !== "object" || objA === null || typeof objB !== "object" || objB === null) {
            return false;
          }
          var keysA = Object.keys(objA);
          var keysB = Object.keys(objB);
          if (keysA.length !== keysB.length) {
            return false;
          }
          for (var i = 0; i < keysA.length; i++) {
            var currentKey = keysA[i];
            if (!hasOwnProperty.call(objB, currentKey) || !objectIs(objA[currentKey], objB[currentKey])) {
              return false;
            }
          }
          return true;
        }
        function getLeafNode(node) {
          while (node && node.firstChild) {
            node = node.firstChild;
          }
          return node;
        }
        function getSiblingNode(node) {
          while (node) {
            if (node.nextSibling) {
              return node.nextSibling;
            }
            node = node.parentNode;
          }
        }
        function getNodeForCharacterOffset(root2, offset) {
          var node = getLeafNode(root2);
          var nodeStart = 0;
          var nodeEnd = 0;
          while (node) {
            if (node.nodeType === TEXT_NODE) {
              nodeEnd = nodeStart + node.textContent.length;
              if (nodeStart <= offset && nodeEnd >= offset) {
                return {
                  node,
                  offset: offset - nodeStart
                };
              }
              nodeStart = nodeEnd;
            }
            node = getLeafNode(getSiblingNode(node));
          }
        }
        function getOffsets(outerNode) {
          var ownerDocument = outerNode.ownerDocument;
          var win = ownerDocument && ownerDocument.defaultView || window;
          var selection = win.getSelection && win.getSelection();
          if (!selection || selection.rangeCount === 0) {
            return null;
          }
          var anchorNode = selection.anchorNode, anchorOffset = selection.anchorOffset, focusNode = selection.focusNode, focusOffset = selection.focusOffset;
          try {
            anchorNode.nodeType;
            focusNode.nodeType;
          } catch (e7) {
            return null;
          }
          return getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset);
        }
        function getModernOffsetsFromPoints(outerNode, anchorNode, anchorOffset, focusNode, focusOffset) {
          var length = 0;
          var start = -1;
          var end = -1;
          var indexWithinAnchor = 0;
          var indexWithinFocus = 0;
          var node = outerNode;
          var parentNode = null;
          outer: while (true) {
            var next = null;
            while (true) {
              if (node === anchorNode && (anchorOffset === 0 || node.nodeType === TEXT_NODE)) {
                start = length + anchorOffset;
              }
              if (node === focusNode && (focusOffset === 0 || node.nodeType === TEXT_NODE)) {
                end = length + focusOffset;
              }
              if (node.nodeType === TEXT_NODE) {
                length += node.nodeValue.length;
              }
              if ((next = node.firstChild) === null) {
                break;
              }
              parentNode = node;
              node = next;
            }
            while (true) {
              if (node === outerNode) {
                break outer;
              }
              if (parentNode === anchorNode && ++indexWithinAnchor === anchorOffset) {
                start = length;
              }
              if (parentNode === focusNode && ++indexWithinFocus === focusOffset) {
                end = length;
              }
              if ((next = node.nextSibling) !== null) {
                break;
              }
              node = parentNode;
              parentNode = node.parentNode;
            }
            node = next;
          }
          if (start === -1 || end === -1) {
            return null;
          }
          return {
            start,
            end
          };
        }
        function setOffsets(node, offsets) {
          var doc = node.ownerDocument || document;
          var win = doc && doc.defaultView || window;
          if (!win.getSelection) {
            return;
          }
          var selection = win.getSelection();
          var length = node.textContent.length;
          var start = Math.min(offsets.start, length);
          var end = offsets.end === void 0 ? start : Math.min(offsets.end, length);
          if (!selection.extend && start > end) {
            var temp = end;
            end = start;
            start = temp;
          }
          var startMarker = getNodeForCharacterOffset(node, start);
          var endMarker = getNodeForCharacterOffset(node, end);
          if (startMarker && endMarker) {
            if (selection.rangeCount === 1 && selection.anchorNode === startMarker.node && selection.anchorOffset === startMarker.offset && selection.focusNode === endMarker.node && selection.focusOffset === endMarker.offset) {
              return;
            }
            var range = doc.createRange();
            range.setStart(startMarker.node, startMarker.offset);
            selection.removeAllRanges();
            if (start > end) {
              selection.addRange(range);
              selection.extend(endMarker.node, endMarker.offset);
            } else {
              range.setEnd(endMarker.node, endMarker.offset);
              selection.addRange(range);
            }
          }
        }
        function isTextNode(node) {
          return node && node.nodeType === TEXT_NODE;
        }
        function containsNode(outerNode, innerNode) {
          if (!outerNode || !innerNode) {
            return false;
          } else if (outerNode === innerNode) {
            return true;
          } else if (isTextNode(outerNode)) {
            return false;
          } else if (isTextNode(innerNode)) {
            return containsNode(outerNode, innerNode.parentNode);
          } else if ("contains" in outerNode) {
            return outerNode.contains(innerNode);
          } else if (outerNode.compareDocumentPosition) {
            return !!(outerNode.compareDocumentPosition(innerNode) & 16);
          } else {
            return false;
          }
        }
        function isInDocument(node) {
          return node && node.ownerDocument && containsNode(node.ownerDocument.documentElement, node);
        }
        function isSameOriginFrame(iframe) {
          try {
            return typeof iframe.contentWindow.location.href === "string";
          } catch (err) {
            return false;
          }
        }
        function getActiveElementDeep() {
          var win = window;
          var element = getActiveElement();
          while (element instanceof win.HTMLIFrameElement) {
            if (isSameOriginFrame(element)) {
              win = element.contentWindow;
            } else {
              return element;
            }
            element = getActiveElement(win.document);
          }
          return element;
        }
        function hasSelectionCapabilities(elem) {
          var nodeName = elem && elem.nodeName && elem.nodeName.toLowerCase();
          return nodeName && (nodeName === "input" && (elem.type === "text" || elem.type === "search" || elem.type === "tel" || elem.type === "url" || elem.type === "password") || nodeName === "textarea" || elem.contentEditable === "true");
        }
        function getSelectionInformation() {
          var focusedElem = getActiveElementDeep();
          return {
            focusedElem,
            selectionRange: hasSelectionCapabilities(focusedElem) ? getSelection(focusedElem) : null
          };
        }
        function restoreSelection(priorSelectionInformation) {
          var curFocusedElem = getActiveElementDeep();
          var priorFocusedElem = priorSelectionInformation.focusedElem;
          var priorSelectionRange = priorSelectionInformation.selectionRange;
          if (curFocusedElem !== priorFocusedElem && isInDocument(priorFocusedElem)) {
            if (priorSelectionRange !== null && hasSelectionCapabilities(priorFocusedElem)) {
              setSelection(priorFocusedElem, priorSelectionRange);
            }
            var ancestors = [];
            var ancestor = priorFocusedElem;
            while (ancestor = ancestor.parentNode) {
              if (ancestor.nodeType === ELEMENT_NODE) {
                ancestors.push({
                  element: ancestor,
                  left: ancestor.scrollLeft,
                  top: ancestor.scrollTop
                });
              }
            }
            if (typeof priorFocusedElem.focus === "function") {
              priorFocusedElem.focus();
            }
            for (var i = 0; i < ancestors.length; i++) {
              var info = ancestors[i];
              info.element.scrollLeft = info.left;
              info.element.scrollTop = info.top;
            }
          }
        }
        function getSelection(input) {
          var selection;
          if ("selectionStart" in input) {
            selection = {
              start: input.selectionStart,
              end: input.selectionEnd
            };
          } else {
            selection = getOffsets(input);
          }
          return selection || {
            start: 0,
            end: 0
          };
        }
        function setSelection(input, offsets) {
          var start = offsets.start;
          var end = offsets.end;
          if (end === void 0) {
            end = start;
          }
          if ("selectionStart" in input) {
            input.selectionStart = start;
            input.selectionEnd = Math.min(end, input.value.length);
          } else {
            setOffsets(input, offsets);
          }
        }
        var skipSelectionChangeEvent = canUseDOM && "documentMode" in document && document.documentMode <= 11;
        function registerEvents$3() {
          registerTwoPhaseEvent("onSelect", ["focusout", "contextmenu", "dragend", "focusin", "keydown", "keyup", "mousedown", "mouseup", "selectionchange"]);
        }
        var activeElement$1 = null;
        var activeElementInst$1 = null;
        var lastSelection = null;
        var mouseDown = false;
        function getSelection$1(node) {
          if ("selectionStart" in node && hasSelectionCapabilities(node)) {
            return {
              start: node.selectionStart,
              end: node.selectionEnd
            };
          } else {
            var win = node.ownerDocument && node.ownerDocument.defaultView || window;
            var selection = win.getSelection();
            return {
              anchorNode: selection.anchorNode,
              anchorOffset: selection.anchorOffset,
              focusNode: selection.focusNode,
              focusOffset: selection.focusOffset
            };
          }
        }
        function getEventTargetDocument(eventTarget) {
          return eventTarget.window === eventTarget ? eventTarget.document : eventTarget.nodeType === DOCUMENT_NODE ? eventTarget : eventTarget.ownerDocument;
        }
        function constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget) {
          var doc = getEventTargetDocument(nativeEventTarget);
          if (mouseDown || activeElement$1 == null || activeElement$1 !== getActiveElement(doc)) {
            return;
          }
          var currentSelection = getSelection$1(activeElement$1);
          if (!lastSelection || !shallowEqual(lastSelection, currentSelection)) {
            lastSelection = currentSelection;
            var listeners = accumulateTwoPhaseListeners(activeElementInst$1, "onSelect");
            if (listeners.length > 0) {
              var event = new SyntheticEvent("onSelect", "select", null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event,
                listeners
              });
              event.target = activeElement$1;
            }
          }
        }
        function extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var targetNode = targetInst ? getNodeFromInstance(targetInst) : window;
          switch (domEventName) {
            // Track the input node that has focus.
            case "focusin":
              if (isTextInputElement(targetNode) || targetNode.contentEditable === "true") {
                activeElement$1 = targetNode;
                activeElementInst$1 = targetInst;
                lastSelection = null;
              }
              break;
            case "focusout":
              activeElement$1 = null;
              activeElementInst$1 = null;
              lastSelection = null;
              break;
            // Don't fire the event while the user is dragging. This matches the
            // semantics of the native select event.
            case "mousedown":
              mouseDown = true;
              break;
            case "contextmenu":
            case "mouseup":
            case "dragend":
              mouseDown = false;
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
              break;
            // Chrome and IE fire non-standard event when selection is changed (and
            // sometimes when it hasn't). IE's event fires out of order with respect
            // to key and input events on deletion, so we discard it.
            //
            // Firefox doesn't support selectionchange, so check selection status
            // after each key entry. The selection changes after keydown and before
            // keyup, but we check on keydown as well in the case of holding down a
            // key, when multiple keydown events are fired but only one keyup is.
            // This is also our approach for IE handling, for the reason above.
            case "selectionchange":
              if (skipSelectionChangeEvent) {
                break;
              }
            // falls through
            case "keydown":
            case "keyup":
              constructSelectEvent(dispatchQueue, nativeEvent, nativeEventTarget);
          }
        }
        function makePrefixMap(styleProp, eventName) {
          var prefixes2 = {};
          prefixes2[styleProp.toLowerCase()] = eventName.toLowerCase();
          prefixes2["Webkit" + styleProp] = "webkit" + eventName;
          prefixes2["Moz" + styleProp] = "moz" + eventName;
          return prefixes2;
        }
        var vendorPrefixes = {
          animationend: makePrefixMap("Animation", "AnimationEnd"),
          animationiteration: makePrefixMap("Animation", "AnimationIteration"),
          animationstart: makePrefixMap("Animation", "AnimationStart"),
          transitionend: makePrefixMap("Transition", "TransitionEnd")
        };
        var prefixedEventNames = {};
        var style = {};
        if (canUseDOM) {
          style = document.createElement("div").style;
          if (!("AnimationEvent" in window)) {
            delete vendorPrefixes.animationend.animation;
            delete vendorPrefixes.animationiteration.animation;
            delete vendorPrefixes.animationstart.animation;
          }
          if (!("TransitionEvent" in window)) {
            delete vendorPrefixes.transitionend.transition;
          }
        }
        function getVendorPrefixedEventName(eventName) {
          if (prefixedEventNames[eventName]) {
            return prefixedEventNames[eventName];
          } else if (!vendorPrefixes[eventName]) {
            return eventName;
          }
          var prefixMap = vendorPrefixes[eventName];
          for (var styleProp in prefixMap) {
            if (prefixMap.hasOwnProperty(styleProp) && styleProp in style) {
              return prefixedEventNames[eventName] = prefixMap[styleProp];
            }
          }
          return eventName;
        }
        var ANIMATION_END = getVendorPrefixedEventName("animationend");
        var ANIMATION_ITERATION = getVendorPrefixedEventName("animationiteration");
        var ANIMATION_START = getVendorPrefixedEventName("animationstart");
        var TRANSITION_END = getVendorPrefixedEventName("transitionend");
        var topLevelEventsToReactNames = /* @__PURE__ */ new Map();
        var simpleEventPluginEvents = ["abort", "auxClick", "cancel", "canPlay", "canPlayThrough", "click", "close", "contextMenu", "copy", "cut", "drag", "dragEnd", "dragEnter", "dragExit", "dragLeave", "dragOver", "dragStart", "drop", "durationChange", "emptied", "encrypted", "ended", "error", "gotPointerCapture", "input", "invalid", "keyDown", "keyPress", "keyUp", "load", "loadedData", "loadedMetadata", "loadStart", "lostPointerCapture", "mouseDown", "mouseMove", "mouseOut", "mouseOver", "mouseUp", "paste", "pause", "play", "playing", "pointerCancel", "pointerDown", "pointerMove", "pointerOut", "pointerOver", "pointerUp", "progress", "rateChange", "reset", "resize", "seeked", "seeking", "stalled", "submit", "suspend", "timeUpdate", "touchCancel", "touchEnd", "touchStart", "volumeChange", "scroll", "toggle", "touchMove", "waiting", "wheel"];
        function registerSimpleEvent(domEventName, reactName) {
          topLevelEventsToReactNames.set(domEventName, reactName);
          registerTwoPhaseEvent(reactName, [domEventName]);
        }
        function registerSimpleEvents() {
          for (var i = 0; i < simpleEventPluginEvents.length; i++) {
            var eventName = simpleEventPluginEvents[i];
            var domEventName = eventName.toLowerCase();
            var capitalizedEvent = eventName[0].toUpperCase() + eventName.slice(1);
            registerSimpleEvent(domEventName, "on" + capitalizedEvent);
          }
          registerSimpleEvent(ANIMATION_END, "onAnimationEnd");
          registerSimpleEvent(ANIMATION_ITERATION, "onAnimationIteration");
          registerSimpleEvent(ANIMATION_START, "onAnimationStart");
          registerSimpleEvent("dblclick", "onDoubleClick");
          registerSimpleEvent("focusin", "onFocus");
          registerSimpleEvent("focusout", "onBlur");
          registerSimpleEvent(TRANSITION_END, "onTransitionEnd");
        }
        function extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          var reactName = topLevelEventsToReactNames.get(domEventName);
          if (reactName === void 0) {
            return;
          }
          var SyntheticEventCtor = SyntheticEvent;
          var reactEventType = domEventName;
          switch (domEventName) {
            case "keypress":
              if (getEventCharCode(nativeEvent) === 0) {
                return;
              }
            /* falls through */
            case "keydown":
            case "keyup":
              SyntheticEventCtor = SyntheticKeyboardEvent;
              break;
            case "focusin":
              reactEventType = "focus";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "focusout":
              reactEventType = "blur";
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "beforeblur":
            case "afterblur":
              SyntheticEventCtor = SyntheticFocusEvent;
              break;
            case "click":
              if (nativeEvent.button === 2) {
                return;
              }
            /* falls through */
            case "auxclick":
            case "dblclick":
            case "mousedown":
            case "mousemove":
            case "mouseup":
            // TODO: Disabled elements should not respond to mouse events
            /* falls through */
            case "mouseout":
            case "mouseover":
            case "contextmenu":
              SyntheticEventCtor = SyntheticMouseEvent;
              break;
            case "drag":
            case "dragend":
            case "dragenter":
            case "dragexit":
            case "dragleave":
            case "dragover":
            case "dragstart":
            case "drop":
              SyntheticEventCtor = SyntheticDragEvent;
              break;
            case "touchcancel":
            case "touchend":
            case "touchmove":
            case "touchstart":
              SyntheticEventCtor = SyntheticTouchEvent;
              break;
            case ANIMATION_END:
            case ANIMATION_ITERATION:
            case ANIMATION_START:
              SyntheticEventCtor = SyntheticAnimationEvent;
              break;
            case TRANSITION_END:
              SyntheticEventCtor = SyntheticTransitionEvent;
              break;
            case "scroll":
              SyntheticEventCtor = SyntheticUIEvent;
              break;
            case "wheel":
              SyntheticEventCtor = SyntheticWheelEvent;
              break;
            case "copy":
            case "cut":
            case "paste":
              SyntheticEventCtor = SyntheticClipboardEvent;
              break;
            case "gotpointercapture":
            case "lostpointercapture":
            case "pointercancel":
            case "pointerdown":
            case "pointermove":
            case "pointerout":
            case "pointerover":
            case "pointerup":
              SyntheticEventCtor = SyntheticPointerEvent;
              break;
          }
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          {
            var accumulateTargetOnly = !inCapturePhase && // TODO: ideally, we'd eventually add all events from
            // nonDelegatedEvents list in DOMPluginEventSystem.
            // Then we can remove this special list.
            // This is a breaking change that can wait until React 18.
            domEventName === "scroll";
            var _listeners = accumulateSinglePhaseListeners(targetInst, reactName, nativeEvent.type, inCapturePhase, accumulateTargetOnly);
            if (_listeners.length > 0) {
              var _event = new SyntheticEventCtor(reactName, reactEventType, null, nativeEvent, nativeEventTarget);
              dispatchQueue.push({
                event: _event,
                listeners: _listeners
              });
            }
          }
        }
        registerSimpleEvents();
        registerEvents$2();
        registerEvents$1();
        registerEvents$3();
        registerEvents();
        function extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags, targetContainer) {
          extractEvents$4(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          var shouldProcessPolyfillPlugins = (eventSystemFlags & SHOULD_NOT_PROCESS_POLYFILL_EVENT_PLUGINS) === 0;
          if (shouldProcessPolyfillPlugins) {
            extractEvents$2(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$1(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents$3(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
            extractEvents(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget);
          }
        }
        var mediaEventTypes = ["abort", "canplay", "canplaythrough", "durationchange", "emptied", "encrypted", "ended", "error", "loadeddata", "loadedmetadata", "loadstart", "pause", "play", "playing", "progress", "ratechange", "resize", "seeked", "seeking", "stalled", "suspend", "timeupdate", "volumechange", "waiting"];
        var nonDelegatedEvents = new Set(["cancel", "close", "invalid", "load", "scroll", "toggle"].concat(mediaEventTypes));
        function executeDispatch(event, listener, currentTarget) {
          var type = event.type || "unknown-event";
          event.currentTarget = currentTarget;
          invokeGuardedCallbackAndCatchFirstError(type, listener, void 0, event);
          event.currentTarget = null;
        }
        function processDispatchQueueItemsInOrder(event, dispatchListeners, inCapturePhase) {
          var previousInstance;
          if (inCapturePhase) {
            for (var i = dispatchListeners.length - 1; i >= 0; i--) {
              var _dispatchListeners$i = dispatchListeners[i], instance = _dispatchListeners$i.instance, currentTarget = _dispatchListeners$i.currentTarget, listener = _dispatchListeners$i.listener;
              if (instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, listener, currentTarget);
              previousInstance = instance;
            }
          } else {
            for (var _i2 = 0; _i2 < dispatchListeners.length; _i2++) {
              var _dispatchListeners$_i = dispatchListeners[_i2], _instance = _dispatchListeners$_i.instance, _currentTarget = _dispatchListeners$_i.currentTarget, _listener = _dispatchListeners$_i.listener;
              if (_instance !== previousInstance && event.isPropagationStopped()) {
                return;
              }
              executeDispatch(event, _listener, _currentTarget);
              previousInstance = _instance;
            }
          }
        }
        function processDispatchQueue(dispatchQueue, eventSystemFlags) {
          var inCapturePhase = (eventSystemFlags & IS_CAPTURE_PHASE) !== 0;
          for (var i = 0; i < dispatchQueue.length; i++) {
            var _dispatchQueue$i = dispatchQueue[i], event = _dispatchQueue$i.event, listeners = _dispatchQueue$i.listeners;
            processDispatchQueueItemsInOrder(event, listeners, inCapturePhase);
          }
          rethrowCaughtError();
        }
        function dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var nativeEventTarget = getEventTarget(nativeEvent);
          var dispatchQueue = [];
          extractEvents$5(dispatchQueue, domEventName, targetInst, nativeEvent, nativeEventTarget, eventSystemFlags);
          processDispatchQueue(dispatchQueue, eventSystemFlags);
        }
        function listenToNonDelegatedEvent(domEventName, targetElement) {
          {
            if (!nonDelegatedEvents.has(domEventName)) {
              error('Did not expect a listenToNonDelegatedEvent() call for "%s". This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var isCapturePhaseListener = false;
          var listenerSet = getEventListenerSet(targetElement);
          var listenerSetKey = getListenerSetKey(domEventName, isCapturePhaseListener);
          if (!listenerSet.has(listenerSetKey)) {
            addTrappedEventListener(targetElement, domEventName, IS_NON_DELEGATED, isCapturePhaseListener);
            listenerSet.add(listenerSetKey);
          }
        }
        function listenToNativeEvent(domEventName, isCapturePhaseListener, target) {
          {
            if (nonDelegatedEvents.has(domEventName) && !isCapturePhaseListener) {
              error('Did not expect a listenToNativeEvent() call for "%s" in the bubble phase. This is a bug in React. Please file an issue.', domEventName);
            }
          }
          var eventSystemFlags = 0;
          if (isCapturePhaseListener) {
            eventSystemFlags |= IS_CAPTURE_PHASE;
          }
          addTrappedEventListener(target, domEventName, eventSystemFlags, isCapturePhaseListener);
        }
        var listeningMarker = "_reactListening" + Math.random().toString(36).slice(2);
        function listenToAllSupportedEvents(rootContainerElement) {
          if (!rootContainerElement[listeningMarker]) {
            rootContainerElement[listeningMarker] = true;
            allNativeEvents.forEach(function(domEventName) {
              if (domEventName !== "selectionchange") {
                if (!nonDelegatedEvents.has(domEventName)) {
                  listenToNativeEvent(domEventName, false, rootContainerElement);
                }
                listenToNativeEvent(domEventName, true, rootContainerElement);
              }
            });
            var ownerDocument = rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
            if (ownerDocument !== null) {
              if (!ownerDocument[listeningMarker]) {
                ownerDocument[listeningMarker] = true;
                listenToNativeEvent("selectionchange", false, ownerDocument);
              }
            }
          }
        }
        function addTrappedEventListener(targetContainer, domEventName, eventSystemFlags, isCapturePhaseListener, isDeferredListenerForLegacyFBSupport) {
          var listener = createEventListenerWrapperWithPriority(targetContainer, domEventName, eventSystemFlags);
          var isPassiveListener = void 0;
          if (passiveBrowserEventsSupported) {
            if (domEventName === "touchstart" || domEventName === "touchmove" || domEventName === "wheel") {
              isPassiveListener = true;
            }
          }
          targetContainer = targetContainer;
          var unsubscribeListener;
          if (isCapturePhaseListener) {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventCaptureListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventCaptureListener(targetContainer, domEventName, listener);
            }
          } else {
            if (isPassiveListener !== void 0) {
              unsubscribeListener = addEventBubbleListenerWithPassiveFlag(targetContainer, domEventName, listener, isPassiveListener);
            } else {
              unsubscribeListener = addEventBubbleListener(targetContainer, domEventName, listener);
            }
          }
        }
        function isMatchingRootContainer(grandContainer, targetContainer) {
          return grandContainer === targetContainer || grandContainer.nodeType === COMMENT_NODE && grandContainer.parentNode === targetContainer;
        }
        function dispatchEventForPluginEventSystem(domEventName, eventSystemFlags, nativeEvent, targetInst, targetContainer) {
          var ancestorInst = targetInst;
          if ((eventSystemFlags & IS_EVENT_HANDLE_NON_MANAGED_NODE) === 0 && (eventSystemFlags & IS_NON_DELEGATED) === 0) {
            var targetContainerNode = targetContainer;
            if (targetInst !== null) {
              var node = targetInst;
              mainLoop: while (true) {
                if (node === null) {
                  return;
                }
                var nodeTag = node.tag;
                if (nodeTag === HostRoot || nodeTag === HostPortal) {
                  var container = node.stateNode.containerInfo;
                  if (isMatchingRootContainer(container, targetContainerNode)) {
                    break;
                  }
                  if (nodeTag === HostPortal) {
                    var grandNode = node.return;
                    while (grandNode !== null) {
                      var grandTag = grandNode.tag;
                      if (grandTag === HostRoot || grandTag === HostPortal) {
                        var grandContainer = grandNode.stateNode.containerInfo;
                        if (isMatchingRootContainer(grandContainer, targetContainerNode)) {
                          return;
                        }
                      }
                      grandNode = grandNode.return;
                    }
                  }
                  while (container !== null) {
                    var parentNode = getClosestInstanceFromNode(container);
                    if (parentNode === null) {
                      return;
                    }
                    var parentTag = parentNode.tag;
                    if (parentTag === HostComponent || parentTag === HostText) {
                      node = ancestorInst = parentNode;
                      continue mainLoop;
                    }
                    container = container.parentNode;
                  }
                }
                node = node.return;
              }
            }
          }
          batchedUpdates(function() {
            return dispatchEventsForPlugins(domEventName, eventSystemFlags, nativeEvent, ancestorInst);
          });
        }
        function createDispatchListener(instance, listener, currentTarget) {
          return {
            instance,
            listener,
            currentTarget
          };
        }
        function accumulateSinglePhaseListeners(targetFiber, reactName, nativeEventType, inCapturePhase, accumulateTargetOnly, nativeEvent) {
          var captureName = reactName !== null ? reactName + "Capture" : null;
          var reactEventName = inCapturePhase ? captureName : reactName;
          var listeners = [];
          var instance = targetFiber;
          var lastHostComponent = null;
          while (instance !== null) {
            var _instance2 = instance, stateNode = _instance2.stateNode, tag = _instance2.tag;
            if (tag === HostComponent && stateNode !== null) {
              lastHostComponent = stateNode;
              if (reactEventName !== null) {
                var listener = getListener(instance, reactEventName);
                if (listener != null) {
                  listeners.push(createDispatchListener(instance, listener, lastHostComponent));
                }
              }
            }
            if (accumulateTargetOnly) {
              break;
            }
            instance = instance.return;
          }
          return listeners;
        }
        function accumulateTwoPhaseListeners(targetFiber, reactName) {
          var captureName = reactName + "Capture";
          var listeners = [];
          var instance = targetFiber;
          while (instance !== null) {
            var _instance3 = instance, stateNode = _instance3.stateNode, tag = _instance3.tag;
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              var captureListener = getListener(instance, captureName);
              if (captureListener != null) {
                listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
              }
              var bubbleListener = getListener(instance, reactName);
              if (bubbleListener != null) {
                listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
              }
            }
            instance = instance.return;
          }
          return listeners;
        }
        function getParent(inst) {
          if (inst === null) {
            return null;
          }
          do {
            inst = inst.return;
          } while (inst && inst.tag !== HostComponent);
          if (inst) {
            return inst;
          }
          return null;
        }
        function getLowestCommonAncestor(instA, instB) {
          var nodeA = instA;
          var nodeB = instB;
          var depthA = 0;
          for (var tempA = nodeA; tempA; tempA = getParent(tempA)) {
            depthA++;
          }
          var depthB = 0;
          for (var tempB = nodeB; tempB; tempB = getParent(tempB)) {
            depthB++;
          }
          while (depthA - depthB > 0) {
            nodeA = getParent(nodeA);
            depthA--;
          }
          while (depthB - depthA > 0) {
            nodeB = getParent(nodeB);
            depthB--;
          }
          var depth = depthA;
          while (depth--) {
            if (nodeA === nodeB || nodeB !== null && nodeA === nodeB.alternate) {
              return nodeA;
            }
            nodeA = getParent(nodeA);
            nodeB = getParent(nodeB);
          }
          return null;
        }
        function accumulateEnterLeaveListenersForEvent(dispatchQueue, event, target, common, inCapturePhase) {
          var registrationName = event._reactName;
          var listeners = [];
          var instance = target;
          while (instance !== null) {
            if (instance === common) {
              break;
            }
            var _instance4 = instance, alternate = _instance4.alternate, stateNode = _instance4.stateNode, tag = _instance4.tag;
            if (alternate !== null && alternate === common) {
              break;
            }
            if (tag === HostComponent && stateNode !== null) {
              var currentTarget = stateNode;
              if (inCapturePhase) {
                var captureListener = getListener(instance, registrationName);
                if (captureListener != null) {
                  listeners.unshift(createDispatchListener(instance, captureListener, currentTarget));
                }
              } else if (!inCapturePhase) {
                var bubbleListener = getListener(instance, registrationName);
                if (bubbleListener != null) {
                  listeners.push(createDispatchListener(instance, bubbleListener, currentTarget));
                }
              }
            }
            instance = instance.return;
          }
          if (listeners.length !== 0) {
            dispatchQueue.push({
              event,
              listeners
            });
          }
        }
        function accumulateEnterLeaveTwoPhaseListeners(dispatchQueue, leaveEvent, enterEvent, from, to3) {
          var common = from && to3 ? getLowestCommonAncestor(from, to3) : null;
          if (from !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, leaveEvent, from, common, false);
          }
          if (to3 !== null && enterEvent !== null) {
            accumulateEnterLeaveListenersForEvent(dispatchQueue, enterEvent, to3, common, true);
          }
        }
        function getListenerSetKey(domEventName, capture) {
          return domEventName + "__" + (capture ? "capture" : "bubble");
        }
        var didWarnInvalidHydration = false;
        var DANGEROUSLY_SET_INNER_HTML = "dangerouslySetInnerHTML";
        var SUPPRESS_CONTENT_EDITABLE_WARNING = "suppressContentEditableWarning";
        var SUPPRESS_HYDRATION_WARNING = "suppressHydrationWarning";
        var AUTOFOCUS = "autoFocus";
        var CHILDREN = "children";
        var STYLE = "style";
        var HTML$1 = "__html";
        var warnedUnknownTags;
        var validatePropertiesInDevelopment;
        var warnForPropDifference;
        var warnForExtraAttributes;
        var warnForInvalidEventListener;
        var canDiffStyleForHydrationWarning;
        var normalizeHTML;
        {
          warnedUnknownTags = {
            // There are working polyfills for <dialog>. Let people use it.
            dialog: true,
            // Electron ships a custom <webview> tag to display external web content in
            // an isolated frame and process.
            // This tag is not present in non Electron environments such as JSDom which
            // is often used for testing purposes.
            // @see https://electronjs.org/docs/api/webview-tag
            webview: true
          };
          validatePropertiesInDevelopment = function(type, props) {
            validateProperties(type, props);
            validateProperties$1(type, props);
            validateProperties$2(type, props, {
              registrationNameDependencies,
              possibleRegistrationNames
            });
          };
          canDiffStyleForHydrationWarning = canUseDOM && !document.documentMode;
          warnForPropDifference = function(propName, serverValue, clientValue) {
            if (didWarnInvalidHydration) {
              return;
            }
            var normalizedClientValue = normalizeMarkupForTextOrAttribute(clientValue);
            var normalizedServerValue = normalizeMarkupForTextOrAttribute(serverValue);
            if (normalizedServerValue === normalizedClientValue) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Prop `%s` did not match. Server: %s Client: %s", propName, JSON.stringify(normalizedServerValue), JSON.stringify(normalizedClientValue));
          };
          warnForExtraAttributes = function(attributeNames) {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            var names = [];
            attributeNames.forEach(function(name) {
              names.push(name);
            });
            error("Extra attributes from the server: %s", names);
          };
          warnForInvalidEventListener = function(registrationName, listener) {
            if (listener === false) {
              error("Expected `%s` listener to be a function, instead got `false`.\n\nIf you used to conditionally omit it with %s={condition && value}, pass %s={condition ? value : undefined} instead.", registrationName, registrationName, registrationName);
            } else {
              error("Expected `%s` listener to be a function, instead got a value of `%s` type.", registrationName, typeof listener);
            }
          };
          normalizeHTML = function(parent, html) {
            var testElement = parent.namespaceURI === HTML_NAMESPACE ? parent.ownerDocument.createElement(parent.tagName) : parent.ownerDocument.createElementNS(parent.namespaceURI, parent.tagName);
            testElement.innerHTML = html;
            return testElement.innerHTML;
          };
        }
        var NORMALIZE_NEWLINES_REGEX = /\r\n?/g;
        var NORMALIZE_NULL_AND_REPLACEMENT_REGEX = /\u0000|\uFFFD/g;
        function normalizeMarkupForTextOrAttribute(markup) {
          {
            checkHtmlStringCoercion(markup);
          }
          var markupString = typeof markup === "string" ? markup : "" + markup;
          return markupString.replace(NORMALIZE_NEWLINES_REGEX, "\n").replace(NORMALIZE_NULL_AND_REPLACEMENT_REGEX, "");
        }
        function checkForUnmatchedText(serverText, clientText, isConcurrentMode, shouldWarnDev) {
          var normalizedClientText = normalizeMarkupForTextOrAttribute(clientText);
          var normalizedServerText = normalizeMarkupForTextOrAttribute(serverText);
          if (normalizedServerText === normalizedClientText) {
            return;
          }
          if (shouldWarnDev) {
            {
              if (!didWarnInvalidHydration) {
                didWarnInvalidHydration = true;
                error('Text content did not match. Server: "%s" Client: "%s"', normalizedServerText, normalizedClientText);
              }
            }
          }
          if (isConcurrentMode && enableClientRenderFallbackOnTextMismatch) {
            throw new Error("Text content does not match server-rendered HTML.");
          }
        }
        function getOwnerDocumentFromRootContainer(rootContainerElement) {
          return rootContainerElement.nodeType === DOCUMENT_NODE ? rootContainerElement : rootContainerElement.ownerDocument;
        }
        function noop() {
        }
        function trapClickOnNonInteractiveElement(node) {
          node.onclick = noop;
        }
        function setInitialDOMProperties(tag, domElement, rootContainerElement, nextProps, isCustomComponentTag) {
          for (var propKey in nextProps) {
            if (!nextProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = nextProps[propKey];
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              setValueForStyles(domElement, nextProp);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              if (nextHtml != null) {
                setInnerHTML(domElement, nextHtml);
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                var canSetTextContent = tag !== "textarea" || nextProp !== "";
                if (canSetTextContent) {
                  setTextContent(domElement, nextProp);
                }
              } else if (typeof nextProp === "number") {
                setTextContent(domElement, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (nextProp != null) {
              setValueForProperty(domElement, propKey, nextProp, isCustomComponentTag);
            }
          }
        }
        function updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag) {
          for (var i = 0; i < updatePayload.length; i += 2) {
            var propKey = updatePayload[i];
            var propValue = updatePayload[i + 1];
            if (propKey === STYLE) {
              setValueForStyles(domElement, propValue);
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              setInnerHTML(domElement, propValue);
            } else if (propKey === CHILDREN) {
              setTextContent(domElement, propValue);
            } else {
              setValueForProperty(domElement, propKey, propValue, isCustomComponentTag);
            }
          }
        }
        function createElement11(type, props, rootContainerElement, parentNamespace) {
          var isCustomComponentTag;
          var ownerDocument = getOwnerDocumentFromRootContainer(rootContainerElement);
          var domElement;
          var namespaceURI = parentNamespace;
          if (namespaceURI === HTML_NAMESPACE) {
            namespaceURI = getIntrinsicNamespace(type);
          }
          if (namespaceURI === HTML_NAMESPACE) {
            {
              isCustomComponentTag = isCustomComponent(type, props);
              if (!isCustomComponentTag && type !== type.toLowerCase()) {
                error("<%s /> is using incorrect casing. Use PascalCase for React components, or lowercase for HTML elements.", type);
              }
            }
            if (type === "script") {
              var div = ownerDocument.createElement("div");
              div.innerHTML = "<script><\/script>";
              var firstChild = div.firstChild;
              domElement = div.removeChild(firstChild);
            } else if (typeof props.is === "string") {
              domElement = ownerDocument.createElement(type, {
                is: props.is
              });
            } else {
              domElement = ownerDocument.createElement(type);
              if (type === "select") {
                var node = domElement;
                if (props.multiple) {
                  node.multiple = true;
                } else if (props.size) {
                  node.size = props.size;
                }
              }
            }
          } else {
            domElement = ownerDocument.createElementNS(namespaceURI, type);
          }
          {
            if (namespaceURI === HTML_NAMESPACE) {
              if (!isCustomComponentTag && Object.prototype.toString.call(domElement) === "[object HTMLUnknownElement]" && !hasOwnProperty.call(warnedUnknownTags, type)) {
                warnedUnknownTags[type] = true;
                error("The tag <%s> is unrecognized in this browser. If you meant to render a React component, start its name with an uppercase letter.", type);
              }
            }
          }
          return domElement;
        }
        function createTextNode(text, rootContainerElement) {
          return getOwnerDocumentFromRootContainer(rootContainerElement).createTextNode(text);
        }
        function setInitialProperties(domElement, tag, rawProps, rootContainerElement) {
          var isCustomComponentTag = isCustomComponent(tag, rawProps);
          {
            validatePropertiesInDevelopment(tag, rawProps);
          }
          var props;
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              props = rawProps;
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              props = rawProps;
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              props = rawProps;
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              props = rawProps;
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              props = rawProps;
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              props = getHostProps(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              props = rawProps;
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              props = getHostProps$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              props = getHostProps$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            default:
              props = rawProps;
          }
          assertValidProps(tag, props);
          setInitialDOMProperties(tag, domElement, rootContainerElement, props, isCustomComponentTag);
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, false);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "option":
              postMountWrapper$1(domElement, rawProps);
              break;
            case "select":
              postMountWrapper$2(domElement, rawProps);
              break;
            default:
              if (typeof props.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
        }
        function diffProperties(domElement, tag, lastRawProps, nextRawProps, rootContainerElement) {
          {
            validatePropertiesInDevelopment(tag, nextRawProps);
          }
          var updatePayload = null;
          var lastProps;
          var nextProps;
          switch (tag) {
            case "input":
              lastProps = getHostProps(domElement, lastRawProps);
              nextProps = getHostProps(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "select":
              lastProps = getHostProps$1(domElement, lastRawProps);
              nextProps = getHostProps$1(domElement, nextRawProps);
              updatePayload = [];
              break;
            case "textarea":
              lastProps = getHostProps$2(domElement, lastRawProps);
              nextProps = getHostProps$2(domElement, nextRawProps);
              updatePayload = [];
              break;
            default:
              lastProps = lastRawProps;
              nextProps = nextRawProps;
              if (typeof lastProps.onClick !== "function" && typeof nextProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          assertValidProps(tag, nextProps);
          var propKey;
          var styleName;
          var styleUpdates = null;
          for (propKey in lastProps) {
            if (nextProps.hasOwnProperty(propKey) || !lastProps.hasOwnProperty(propKey) || lastProps[propKey] == null) {
              continue;
            }
            if (propKey === STYLE) {
              var lastStyle = lastProps[propKey];
              for (styleName in lastStyle) {
                if (lastStyle.hasOwnProperty(styleName)) {
                  if (!styleUpdates) {
                    styleUpdates = {};
                  }
                  styleUpdates[styleName] = "";
                }
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML || propKey === CHILDREN) ;
            else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (propKey === AUTOFOCUS) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (!updatePayload) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, null);
            }
          }
          for (propKey in nextProps) {
            var nextProp = nextProps[propKey];
            var lastProp = lastProps != null ? lastProps[propKey] : void 0;
            if (!nextProps.hasOwnProperty(propKey) || nextProp === lastProp || nextProp == null && lastProp == null) {
              continue;
            }
            if (propKey === STYLE) {
              {
                if (nextProp) {
                  Object.freeze(nextProp);
                }
              }
              if (lastProp) {
                for (styleName in lastProp) {
                  if (lastProp.hasOwnProperty(styleName) && (!nextProp || !nextProp.hasOwnProperty(styleName))) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = "";
                  }
                }
                for (styleName in nextProp) {
                  if (nextProp.hasOwnProperty(styleName) && lastProp[styleName] !== nextProp[styleName]) {
                    if (!styleUpdates) {
                      styleUpdates = {};
                    }
                    styleUpdates[styleName] = nextProp[styleName];
                  }
                }
              } else {
                if (!styleUpdates) {
                  if (!updatePayload) {
                    updatePayload = [];
                  }
                  updatePayload.push(propKey, styleUpdates);
                }
                styleUpdates = nextProp;
              }
            } else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
              var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
              var lastHtml = lastProp ? lastProp[HTML$1] : void 0;
              if (nextHtml != null) {
                if (lastHtml !== nextHtml) {
                  (updatePayload = updatePayload || []).push(propKey, nextHtml);
                }
              }
            } else if (propKey === CHILDREN) {
              if (typeof nextProp === "string" || typeof nextProp === "number") {
                (updatePayload = updatePayload || []).push(propKey, "" + nextProp);
              }
            } else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING) ;
            else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
              if (!updatePayload && lastProp !== nextProp) {
                updatePayload = [];
              }
            } else {
              (updatePayload = updatePayload || []).push(propKey, nextProp);
            }
          }
          if (styleUpdates) {
            {
              validateShorthandPropertyCollisionInDev(styleUpdates, nextProps[STYLE]);
            }
            (updatePayload = updatePayload || []).push(STYLE, styleUpdates);
          }
          return updatePayload;
        }
        function updateProperties(domElement, updatePayload, tag, lastRawProps, nextRawProps) {
          if (tag === "input" && nextRawProps.type === "radio" && nextRawProps.name != null) {
            updateChecked(domElement, nextRawProps);
          }
          var wasCustomComponentTag = isCustomComponent(tag, lastRawProps);
          var isCustomComponentTag = isCustomComponent(tag, nextRawProps);
          updateDOMProperties(domElement, updatePayload, wasCustomComponentTag, isCustomComponentTag);
          switch (tag) {
            case "input":
              updateWrapper(domElement, nextRawProps);
              break;
            case "textarea":
              updateWrapper$1(domElement, nextRawProps);
              break;
            case "select":
              postUpdateWrapper(domElement, nextRawProps);
              break;
          }
        }
        function getPossibleStandardName(propName) {
          {
            var lowerCasedName = propName.toLowerCase();
            if (!possibleStandardNames.hasOwnProperty(lowerCasedName)) {
              return null;
            }
            return possibleStandardNames[lowerCasedName] || null;
          }
        }
        function diffHydratedProperties(domElement, tag, rawProps, parentNamespace, rootContainerElement, isConcurrentMode, shouldWarnDev) {
          var isCustomComponentTag;
          var extraAttributeNames;
          {
            isCustomComponentTag = isCustomComponent(tag, rawProps);
            validatePropertiesInDevelopment(tag, rawProps);
          }
          switch (tag) {
            case "dialog":
              listenToNonDelegatedEvent("cancel", domElement);
              listenToNonDelegatedEvent("close", domElement);
              break;
            case "iframe":
            case "object":
            case "embed":
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "video":
            case "audio":
              for (var i = 0; i < mediaEventTypes.length; i++) {
                listenToNonDelegatedEvent(mediaEventTypes[i], domElement);
              }
              break;
            case "source":
              listenToNonDelegatedEvent("error", domElement);
              break;
            case "img":
            case "image":
            case "link":
              listenToNonDelegatedEvent("error", domElement);
              listenToNonDelegatedEvent("load", domElement);
              break;
            case "details":
              listenToNonDelegatedEvent("toggle", domElement);
              break;
            case "input":
              initWrapperState(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "option":
              validateProps(domElement, rawProps);
              break;
            case "select":
              initWrapperState$1(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
            case "textarea":
              initWrapperState$2(domElement, rawProps);
              listenToNonDelegatedEvent("invalid", domElement);
              break;
          }
          assertValidProps(tag, rawProps);
          {
            extraAttributeNames = /* @__PURE__ */ new Set();
            var attributes = domElement.attributes;
            for (var _i2 = 0; _i2 < attributes.length; _i2++) {
              var name = attributes[_i2].name.toLowerCase();
              switch (name) {
                // Controlled attributes are not validated
                // TODO: Only ignore them on controlled tags.
                case "value":
                  break;
                case "checked":
                  break;
                case "selected":
                  break;
                default:
                  extraAttributeNames.add(attributes[_i2].name);
              }
            }
          }
          var updatePayload = null;
          for (var propKey in rawProps) {
            if (!rawProps.hasOwnProperty(propKey)) {
              continue;
            }
            var nextProp = rawProps[propKey];
            if (propKey === CHILDREN) {
              if (typeof nextProp === "string") {
                if (domElement.textContent !== nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, nextProp];
                }
              } else if (typeof nextProp === "number") {
                if (domElement.textContent !== "" + nextProp) {
                  if (rawProps[SUPPRESS_HYDRATION_WARNING] !== true) {
                    checkForUnmatchedText(domElement.textContent, nextProp, isConcurrentMode, shouldWarnDev);
                  }
                  updatePayload = [CHILDREN, "" + nextProp];
                }
              }
            } else if (registrationNameDependencies.hasOwnProperty(propKey)) {
              if (nextProp != null) {
                if (typeof nextProp !== "function") {
                  warnForInvalidEventListener(propKey, nextProp);
                }
                if (propKey === "onScroll") {
                  listenToNonDelegatedEvent("scroll", domElement);
                }
              }
            } else if (shouldWarnDev && true && // Convince Flow we've calculated it (it's DEV-only in this method.)
            typeof isCustomComponentTag === "boolean") {
              var serverValue = void 0;
              var propertyInfo = isCustomComponentTag && enableCustomElementPropertySupport ? null : getPropertyInfo(propKey);
              if (rawProps[SUPPRESS_HYDRATION_WARNING] === true) ;
              else if (propKey === SUPPRESS_CONTENT_EDITABLE_WARNING || propKey === SUPPRESS_HYDRATION_WARNING || // Controlled attributes are not validated
              // TODO: Only ignore them on controlled tags.
              propKey === "value" || propKey === "checked" || propKey === "selected") ;
              else if (propKey === DANGEROUSLY_SET_INNER_HTML) {
                var serverHTML = domElement.innerHTML;
                var nextHtml = nextProp ? nextProp[HTML$1] : void 0;
                if (nextHtml != null) {
                  var expectedHTML = normalizeHTML(domElement, nextHtml);
                  if (expectedHTML !== serverHTML) {
                    warnForPropDifference(propKey, serverHTML, expectedHTML);
                  }
                }
              } else if (propKey === STYLE) {
                extraAttributeNames.delete(propKey);
                if (canDiffStyleForHydrationWarning) {
                  var expectedStyle = createDangerousStringForStyles(nextProp);
                  serverValue = domElement.getAttribute("style");
                  if (expectedStyle !== serverValue) {
                    warnForPropDifference(propKey, serverValue, expectedStyle);
                  }
                }
              } else if (isCustomComponentTag && !enableCustomElementPropertySupport) {
                extraAttributeNames.delete(propKey.toLowerCase());
                serverValue = getValueForAttribute(domElement, propKey, nextProp);
                if (nextProp !== serverValue) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              } else if (!shouldIgnoreAttribute(propKey, propertyInfo, isCustomComponentTag) && !shouldRemoveAttribute(propKey, nextProp, propertyInfo, isCustomComponentTag)) {
                var isMismatchDueToBadCasing = false;
                if (propertyInfo !== null) {
                  extraAttributeNames.delete(propertyInfo.attributeName);
                  serverValue = getValueForProperty(domElement, propKey, nextProp, propertyInfo);
                } else {
                  var ownNamespace = parentNamespace;
                  if (ownNamespace === HTML_NAMESPACE) {
                    ownNamespace = getIntrinsicNamespace(tag);
                  }
                  if (ownNamespace === HTML_NAMESPACE) {
                    extraAttributeNames.delete(propKey.toLowerCase());
                  } else {
                    var standardName = getPossibleStandardName(propKey);
                    if (standardName !== null && standardName !== propKey) {
                      isMismatchDueToBadCasing = true;
                      extraAttributeNames.delete(standardName);
                    }
                    extraAttributeNames.delete(propKey);
                  }
                  serverValue = getValueForAttribute(domElement, propKey, nextProp);
                }
                var dontWarnCustomElement = enableCustomElementPropertySupport;
                if (!dontWarnCustomElement && nextProp !== serverValue && !isMismatchDueToBadCasing) {
                  warnForPropDifference(propKey, serverValue, nextProp);
                }
              }
            }
          }
          {
            if (shouldWarnDev) {
              if (
                // $FlowFixMe - Should be inferred as not undefined.
                extraAttributeNames.size > 0 && rawProps[SUPPRESS_HYDRATION_WARNING] !== true
              ) {
                warnForExtraAttributes(extraAttributeNames);
              }
            }
          }
          switch (tag) {
            case "input":
              track(domElement);
              postMountWrapper(domElement, rawProps, true);
              break;
            case "textarea":
              track(domElement);
              postMountWrapper$3(domElement);
              break;
            case "select":
            case "option":
              break;
            default:
              if (typeof rawProps.onClick === "function") {
                trapClickOnNonInteractiveElement(domElement);
              }
              break;
          }
          return updatePayload;
        }
        function diffHydratedText(textNode, text, isConcurrentMode) {
          var isDifferent = textNode.nodeValue !== text;
          return isDifferent;
        }
        function warnForDeletedHydratableElement(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Did not expect server HTML to contain a <%s> in <%s>.", child.nodeName.toLowerCase(), parentNode.nodeName.toLowerCase());
          }
        }
        function warnForDeletedHydratableText(parentNode, child) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Did not expect server HTML to contain the text node "%s" in <%s>.', child.nodeValue, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedElement(parentNode, tag, props) {
          {
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error("Expected server HTML to contain a matching <%s> in <%s>.", tag, parentNode.nodeName.toLowerCase());
          }
        }
        function warnForInsertedHydratedText(parentNode, text) {
          {
            if (text === "") {
              return;
            }
            if (didWarnInvalidHydration) {
              return;
            }
            didWarnInvalidHydration = true;
            error('Expected server HTML to contain a matching text node for "%s" in <%s>.', text, parentNode.nodeName.toLowerCase());
          }
        }
        function restoreControlledState$3(domElement, tag, props) {
          switch (tag) {
            case "input":
              restoreControlledState(domElement, props);
              return;
            case "textarea":
              restoreControlledState$2(domElement, props);
              return;
            case "select":
              restoreControlledState$1(domElement, props);
              return;
          }
        }
        var validateDOMNesting = function() {
        };
        var updatedAncestorInfo = function() {
        };
        {
          var specialTags = ["address", "applet", "area", "article", "aside", "base", "basefont", "bgsound", "blockquote", "body", "br", "button", "caption", "center", "col", "colgroup", "dd", "details", "dir", "div", "dl", "dt", "embed", "fieldset", "figcaption", "figure", "footer", "form", "frame", "frameset", "h1", "h2", "h3", "h4", "h5", "h6", "head", "header", "hgroup", "hr", "html", "iframe", "img", "input", "isindex", "li", "link", "listing", "main", "marquee", "menu", "menuitem", "meta", "nav", "noembed", "noframes", "noscript", "object", "ol", "p", "param", "plaintext", "pre", "script", "section", "select", "source", "style", "summary", "table", "tbody", "td", "template", "textarea", "tfoot", "th", "thead", "title", "tr", "track", "ul", "wbr", "xmp"];
          var inScopeTags = [
            "applet",
            "caption",
            "html",
            "table",
            "td",
            "th",
            "marquee",
            "object",
            "template",
            // https://html.spec.whatwg.org/multipage/syntax.html#html-integration-point
            // TODO: Distinguish by namespace here -- for <title>, including it here
            // errs on the side of fewer warnings
            "foreignObject",
            "desc",
            "title"
          ];
          var buttonScopeTags = inScopeTags.concat(["button"]);
          var impliedEndTags = ["dd", "dt", "li", "option", "optgroup", "p", "rp", "rt"];
          var emptyAncestorInfo = {
            current: null,
            formTag: null,
            aTagInScope: null,
            buttonTagInScope: null,
            nobrTagInScope: null,
            pTagInButtonScope: null,
            listItemTagAutoclosing: null,
            dlItemTagAutoclosing: null
          };
          updatedAncestorInfo = function(oldInfo, tag) {
            var ancestorInfo = assign({}, oldInfo || emptyAncestorInfo);
            var info = {
              tag
            };
            if (inScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.aTagInScope = null;
              ancestorInfo.buttonTagInScope = null;
              ancestorInfo.nobrTagInScope = null;
            }
            if (buttonScopeTags.indexOf(tag) !== -1) {
              ancestorInfo.pTagInButtonScope = null;
            }
            if (specialTags.indexOf(tag) !== -1 && tag !== "address" && tag !== "div" && tag !== "p") {
              ancestorInfo.listItemTagAutoclosing = null;
              ancestorInfo.dlItemTagAutoclosing = null;
            }
            ancestorInfo.current = info;
            if (tag === "form") {
              ancestorInfo.formTag = info;
            }
            if (tag === "a") {
              ancestorInfo.aTagInScope = info;
            }
            if (tag === "button") {
              ancestorInfo.buttonTagInScope = info;
            }
            if (tag === "nobr") {
              ancestorInfo.nobrTagInScope = info;
            }
            if (tag === "p") {
              ancestorInfo.pTagInButtonScope = info;
            }
            if (tag === "li") {
              ancestorInfo.listItemTagAutoclosing = info;
            }
            if (tag === "dd" || tag === "dt") {
              ancestorInfo.dlItemTagAutoclosing = info;
            }
            return ancestorInfo;
          };
          var isTagValidWithParent = function(tag, parentTag) {
            switch (parentTag) {
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inselect
              case "select":
                return tag === "option" || tag === "optgroup" || tag === "#text";
              case "optgroup":
                return tag === "option" || tag === "#text";
              // Strictly speaking, seeing an <option> doesn't mean we're in a <select>
              // but
              case "option":
                return tag === "#text";
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intd
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incaption
              // No special behavior since these rules fall back to "in body" mode for
              // all except special table nodes which cause bad parsing behavior anyway.
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intr
              case "tr":
                return tag === "th" || tag === "td" || tag === "style" || tag === "script" || tag === "template";
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intbody
              case "tbody":
              case "thead":
              case "tfoot":
                return tag === "tr" || tag === "style" || tag === "script" || tag === "template";
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-incolgroup
              case "colgroup":
                return tag === "col" || tag === "template";
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-intable
              case "table":
                return tag === "caption" || tag === "colgroup" || tag === "tbody" || tag === "tfoot" || tag === "thead" || tag === "style" || tag === "script" || tag === "template";
              // https://html.spec.whatwg.org/multipage/syntax.html#parsing-main-inhead
              case "head":
                return tag === "base" || tag === "basefont" || tag === "bgsound" || tag === "link" || tag === "meta" || tag === "title" || tag === "noscript" || tag === "noframes" || tag === "style" || tag === "script" || tag === "template";
              // https://html.spec.whatwg.org/multipage/semantics.html#the-html-element
              case "html":
                return tag === "head" || tag === "body" || tag === "frameset";
              case "frameset":
                return tag === "frame";
              case "#document":
                return tag === "html";
            }
            switch (tag) {
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return parentTag !== "h1" && parentTag !== "h2" && parentTag !== "h3" && parentTag !== "h4" && parentTag !== "h5" && parentTag !== "h6";
              case "rp":
              case "rt":
                return impliedEndTags.indexOf(parentTag) === -1;
              case "body":
              case "caption":
              case "col":
              case "colgroup":
              case "frameset":
              case "frame":
              case "head":
              case "html":
              case "tbody":
              case "td":
              case "tfoot":
              case "th":
              case "thead":
              case "tr":
                return parentTag == null;
            }
            return true;
          };
          var findInvalidAncestorForTag = function(tag, ancestorInfo) {
            switch (tag) {
              case "address":
              case "article":
              case "aside":
              case "blockquote":
              case "center":
              case "details":
              case "dialog":
              case "dir":
              case "div":
              case "dl":
              case "fieldset":
              case "figcaption":
              case "figure":
              case "footer":
              case "header":
              case "hgroup":
              case "main":
              case "menu":
              case "nav":
              case "ol":
              case "p":
              case "section":
              case "summary":
              case "ul":
              case "pre":
              case "listing":
              case "table":
              case "hr":
              case "xmp":
              case "h1":
              case "h2":
              case "h3":
              case "h4":
              case "h5":
              case "h6":
                return ancestorInfo.pTagInButtonScope;
              case "form":
                return ancestorInfo.formTag || ancestorInfo.pTagInButtonScope;
              case "li":
                return ancestorInfo.listItemTagAutoclosing;
              case "dd":
              case "dt":
                return ancestorInfo.dlItemTagAutoclosing;
              case "button":
                return ancestorInfo.buttonTagInScope;
              case "a":
                return ancestorInfo.aTagInScope;
              case "nobr":
                return ancestorInfo.nobrTagInScope;
            }
            return null;
          };
          var didWarn$1 = {};
          validateDOMNesting = function(childTag, childText, ancestorInfo) {
            ancestorInfo = ancestorInfo || emptyAncestorInfo;
            var parentInfo = ancestorInfo.current;
            var parentTag = parentInfo && parentInfo.tag;
            if (childText != null) {
              if (childTag != null) {
                error("validateDOMNesting: when childText is passed, childTag should be null");
              }
              childTag = "#text";
            }
            var invalidParent = isTagValidWithParent(childTag, parentTag) ? null : parentInfo;
            var invalidAncestor = invalidParent ? null : findInvalidAncestorForTag(childTag, ancestorInfo);
            var invalidParentOrAncestor = invalidParent || invalidAncestor;
            if (!invalidParentOrAncestor) {
              return;
            }
            var ancestorTag = invalidParentOrAncestor.tag;
            var warnKey = !!invalidParent + "|" + childTag + "|" + ancestorTag;
            if (didWarn$1[warnKey]) {
              return;
            }
            didWarn$1[warnKey] = true;
            var tagDisplayName = childTag;
            var whitespaceInfo = "";
            if (childTag === "#text") {
              if (/\S/.test(childText)) {
                tagDisplayName = "Text nodes";
              } else {
                tagDisplayName = "Whitespace text nodes";
                whitespaceInfo = " Make sure you don't have any extra whitespace between tags on each line of your source code.";
              }
            } else {
              tagDisplayName = "<" + childTag + ">";
            }
            if (invalidParent) {
              var info = "";
              if (ancestorTag === "table" && childTag === "tr") {
                info += " Add a <tbody>, <thead> or <tfoot> to your code to match the DOM tree generated by the browser.";
              }
              error("validateDOMNesting(...): %s cannot appear as a child of <%s>.%s%s", tagDisplayName, ancestorTag, whitespaceInfo, info);
            } else {
              error("validateDOMNesting(...): %s cannot appear as a descendant of <%s>.", tagDisplayName, ancestorTag);
            }
          };
        }
        var SUPPRESS_HYDRATION_WARNING$1 = "suppressHydrationWarning";
        var SUSPENSE_START_DATA = "$";
        var SUSPENSE_END_DATA = "/$";
        var SUSPENSE_PENDING_START_DATA = "$?";
        var SUSPENSE_FALLBACK_START_DATA = "$!";
        var STYLE$1 = "style";
        var eventsEnabled = null;
        var selectionInformation = null;
        function getRootHostContext(rootContainerInstance) {
          var type;
          var namespace;
          var nodeType = rootContainerInstance.nodeType;
          switch (nodeType) {
            case DOCUMENT_NODE:
            case DOCUMENT_FRAGMENT_NODE: {
              type = nodeType === DOCUMENT_NODE ? "#document" : "#fragment";
              var root2 = rootContainerInstance.documentElement;
              namespace = root2 ? root2.namespaceURI : getChildNamespace(null, "");
              break;
            }
            default: {
              var container = nodeType === COMMENT_NODE ? rootContainerInstance.parentNode : rootContainerInstance;
              var ownNamespace = container.namespaceURI || null;
              type = container.tagName;
              namespace = getChildNamespace(ownNamespace, type);
              break;
            }
          }
          {
            var validatedTag = type.toLowerCase();
            var ancestorInfo = updatedAncestorInfo(null, validatedTag);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getChildHostContext(parentHostContext, type, rootContainerInstance) {
          {
            var parentHostContextDev = parentHostContext;
            var namespace = getChildNamespace(parentHostContextDev.namespace, type);
            var ancestorInfo = updatedAncestorInfo(parentHostContextDev.ancestorInfo, type);
            return {
              namespace,
              ancestorInfo
            };
          }
        }
        function getPublicInstance(instance) {
          return instance;
        }
        function prepareForCommit(containerInfo) {
          eventsEnabled = isEnabled();
          selectionInformation = getSelectionInformation();
          var activeInstance = null;
          setEnabled(false);
          return activeInstance;
        }
        function resetAfterCommit(containerInfo) {
          restoreSelection(selectionInformation);
          setEnabled(eventsEnabled);
          eventsEnabled = null;
          selectionInformation = null;
        }
        function createInstance(type, props, rootContainerInstance, hostContext, internalInstanceHandle) {
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            validateDOMNesting(type, null, hostContextDev.ancestorInfo);
            if (typeof props.children === "string" || typeof props.children === "number") {
              var string = "" + props.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
            parentNamespace = hostContextDev.namespace;
          }
          var domElement = createElement11(type, props, rootContainerInstance, parentNamespace);
          precacheFiberNode(internalInstanceHandle, domElement);
          updateFiberProps(domElement, props);
          return domElement;
        }
        function appendInitialChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function finalizeInitialChildren(domElement, type, props, rootContainerInstance, hostContext) {
          setInitialProperties(domElement, type, props, rootContainerInstance);
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              return !!props.autoFocus;
            case "img":
              return true;
            default:
              return false;
          }
        }
        function prepareUpdate(domElement, type, oldProps, newProps, rootContainerInstance, hostContext) {
          {
            var hostContextDev = hostContext;
            if (typeof newProps.children !== typeof oldProps.children && (typeof newProps.children === "string" || typeof newProps.children === "number")) {
              var string = "" + newProps.children;
              var ownAncestorInfo = updatedAncestorInfo(hostContextDev.ancestorInfo, type);
              validateDOMNesting(null, string, ownAncestorInfo);
            }
          }
          return diffProperties(domElement, type, oldProps, newProps);
        }
        function shouldSetTextContent(type, props) {
          return type === "textarea" || type === "noscript" || typeof props.children === "string" || typeof props.children === "number" || typeof props.dangerouslySetInnerHTML === "object" && props.dangerouslySetInnerHTML !== null && props.dangerouslySetInnerHTML.__html != null;
        }
        function createTextInstance(text, rootContainerInstance, hostContext, internalInstanceHandle) {
          {
            var hostContextDev = hostContext;
            validateDOMNesting(null, text, hostContextDev.ancestorInfo);
          }
          var textNode = createTextNode(text, rootContainerInstance);
          precacheFiberNode(internalInstanceHandle, textNode);
          return textNode;
        }
        function getCurrentEventPriority() {
          var currentEvent = window.event;
          if (currentEvent === void 0) {
            return DefaultEventPriority;
          }
          return getEventPriority(currentEvent.type);
        }
        var scheduleTimeout = typeof setTimeout === "function" ? setTimeout : void 0;
        var cancelTimeout = typeof clearTimeout === "function" ? clearTimeout : void 0;
        var noTimeout = -1;
        var localPromise = typeof Promise === "function" ? Promise : void 0;
        var scheduleMicrotask = typeof queueMicrotask === "function" ? queueMicrotask : typeof localPromise !== "undefined" ? function(callback) {
          return localPromise.resolve(null).then(callback).catch(handleErrorInNextTick);
        } : scheduleTimeout;
        function handleErrorInNextTick(error2) {
          setTimeout(function() {
            throw error2;
          });
        }
        function commitMount(domElement, type, newProps, internalInstanceHandle) {
          switch (type) {
            case "button":
            case "input":
            case "select":
            case "textarea":
              if (newProps.autoFocus) {
                domElement.focus();
              }
              return;
            case "img": {
              if (newProps.src) {
                domElement.src = newProps.src;
              }
              return;
            }
          }
        }
        function commitUpdate(domElement, updatePayload, type, oldProps, newProps, internalInstanceHandle) {
          updateProperties(domElement, updatePayload, type, oldProps, newProps);
          updateFiberProps(domElement, newProps);
        }
        function resetTextContent(domElement) {
          setTextContent(domElement, "");
        }
        function commitTextUpdate(textInstance, oldText, newText) {
          textInstance.nodeValue = newText;
        }
        function appendChild(parentInstance, child) {
          parentInstance.appendChild(child);
        }
        function appendChildToContainer(container, child) {
          var parentNode;
          if (container.nodeType === COMMENT_NODE) {
            parentNode = container.parentNode;
            parentNode.insertBefore(child, container);
          } else {
            parentNode = container;
            parentNode.appendChild(child);
          }
          var reactRootContainer = container._reactRootContainer;
          if ((reactRootContainer === null || reactRootContainer === void 0) && parentNode.onclick === null) {
            trapClickOnNonInteractiveElement(parentNode);
          }
        }
        function insertBefore(parentInstance, child, beforeChild) {
          parentInstance.insertBefore(child, beforeChild);
        }
        function insertInContainerBefore(container, child, beforeChild) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.insertBefore(child, beforeChild);
          } else {
            container.insertBefore(child, beforeChild);
          }
        }
        function removeChild(parentInstance, child) {
          parentInstance.removeChild(child);
        }
        function removeChildFromContainer(container, child) {
          if (container.nodeType === COMMENT_NODE) {
            container.parentNode.removeChild(child);
          } else {
            container.removeChild(child);
          }
        }
        function clearSuspenseBoundary(parentInstance, suspenseInstance) {
          var node = suspenseInstance;
          var depth = 0;
          do {
            var nextNode = node.nextSibling;
            parentInstance.removeChild(node);
            if (nextNode && nextNode.nodeType === COMMENT_NODE) {
              var data = nextNode.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  parentInstance.removeChild(nextNode);
                  retryIfBlockedOn(suspenseInstance);
                  return;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_PENDING_START_DATA || data === SUSPENSE_FALLBACK_START_DATA) {
                depth++;
              }
            }
            node = nextNode;
          } while (node);
          retryIfBlockedOn(suspenseInstance);
        }
        function clearSuspenseBoundaryFromContainer(container, suspenseInstance) {
          if (container.nodeType === COMMENT_NODE) {
            clearSuspenseBoundary(container.parentNode, suspenseInstance);
          } else if (container.nodeType === ELEMENT_NODE) {
            clearSuspenseBoundary(container, suspenseInstance);
          }
          retryIfBlockedOn(container);
        }
        function hideInstance(instance) {
          instance = instance;
          var style2 = instance.style;
          if (typeof style2.setProperty === "function") {
            style2.setProperty("display", "none", "important");
          } else {
            style2.display = "none";
          }
        }
        function hideTextInstance(textInstance) {
          textInstance.nodeValue = "";
        }
        function unhideInstance(instance, props) {
          instance = instance;
          var styleProp = props[STYLE$1];
          var display = styleProp !== void 0 && styleProp !== null && styleProp.hasOwnProperty("display") ? styleProp.display : null;
          instance.style.display = dangerousStyleValue("display", display);
        }
        function unhideTextInstance(textInstance, text) {
          textInstance.nodeValue = text;
        }
        function clearContainer(container) {
          if (container.nodeType === ELEMENT_NODE) {
            container.textContent = "";
          } else if (container.nodeType === DOCUMENT_NODE) {
            if (container.documentElement) {
              container.removeChild(container.documentElement);
            }
          }
        }
        function canHydrateInstance(instance, type, props) {
          if (instance.nodeType !== ELEMENT_NODE || type.toLowerCase() !== instance.nodeName.toLowerCase()) {
            return null;
          }
          return instance;
        }
        function canHydrateTextInstance(instance, text) {
          if (text === "" || instance.nodeType !== TEXT_NODE) {
            return null;
          }
          return instance;
        }
        function canHydrateSuspenseInstance(instance) {
          if (instance.nodeType !== COMMENT_NODE) {
            return null;
          }
          return instance;
        }
        function isSuspenseInstancePending(instance) {
          return instance.data === SUSPENSE_PENDING_START_DATA;
        }
        function isSuspenseInstanceFallback(instance) {
          return instance.data === SUSPENSE_FALLBACK_START_DATA;
        }
        function getSuspenseInstanceFallbackErrorDetails(instance) {
          var dataset = instance.nextSibling && instance.nextSibling.dataset;
          var digest, message, stack;
          if (dataset) {
            digest = dataset.dgst;
            {
              message = dataset.msg;
              stack = dataset.stck;
            }
          }
          {
            return {
              message,
              digest,
              stack
            };
          }
        }
        function registerSuspenseInstanceRetry(instance, callback) {
          instance._reactRetry = callback;
        }
        function getNextHydratable(node) {
          for (; node != null; node = node.nextSibling) {
            var nodeType = node.nodeType;
            if (nodeType === ELEMENT_NODE || nodeType === TEXT_NODE) {
              break;
            }
            if (nodeType === COMMENT_NODE) {
              var nodeData = node.data;
              if (nodeData === SUSPENSE_START_DATA || nodeData === SUSPENSE_FALLBACK_START_DATA || nodeData === SUSPENSE_PENDING_START_DATA) {
                break;
              }
              if (nodeData === SUSPENSE_END_DATA) {
                return null;
              }
            }
          }
          return node;
        }
        function getNextHydratableSibling(instance) {
          return getNextHydratable(instance.nextSibling);
        }
        function getFirstHydratableChild(parentInstance) {
          return getNextHydratable(parentInstance.firstChild);
        }
        function getFirstHydratableChildWithinContainer(parentContainer) {
          return getNextHydratable(parentContainer.firstChild);
        }
        function getFirstHydratableChildWithinSuspenseInstance(parentInstance) {
          return getNextHydratable(parentInstance.nextSibling);
        }
        function hydrateInstance(instance, type, props, rootContainerInstance, hostContext, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, instance);
          updateFiberProps(instance, props);
          var parentNamespace;
          {
            var hostContextDev = hostContext;
            parentNamespace = hostContextDev.namespace;
          }
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedProperties(instance, type, props, parentNamespace, rootContainerInstance, isConcurrentMode, shouldWarnDev);
        }
        function hydrateTextInstance(textInstance, text, internalInstanceHandle, shouldWarnDev) {
          precacheFiberNode(internalInstanceHandle, textInstance);
          var isConcurrentMode = (internalInstanceHandle.mode & ConcurrentMode) !== NoMode;
          return diffHydratedText(textInstance, text);
        }
        function hydrateSuspenseInstance(suspenseInstance, internalInstanceHandle) {
          precacheFiberNode(internalInstanceHandle, suspenseInstance);
        }
        function getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance) {
          var node = suspenseInstance.nextSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_END_DATA) {
                if (depth === 0) {
                  return getNextHydratableSibling(node);
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                depth++;
              }
            }
            node = node.nextSibling;
          }
          return null;
        }
        function getParentSuspenseInstance(targetInstance) {
          var node = targetInstance.previousSibling;
          var depth = 0;
          while (node) {
            if (node.nodeType === COMMENT_NODE) {
              var data = node.data;
              if (data === SUSPENSE_START_DATA || data === SUSPENSE_FALLBACK_START_DATA || data === SUSPENSE_PENDING_START_DATA) {
                if (depth === 0) {
                  return node;
                } else {
                  depth--;
                }
              } else if (data === SUSPENSE_END_DATA) {
                depth++;
              }
            }
            node = node.previousSibling;
          }
          return null;
        }
        function commitHydratedContainer(container) {
          retryIfBlockedOn(container);
        }
        function commitHydratedSuspenseInstance(suspenseInstance) {
          retryIfBlockedOn(suspenseInstance);
        }
        function shouldDeleteUnhydratedTailInstances(parentType) {
          return parentType !== "head" && parentType !== "body";
        }
        function didNotMatchHydratedContainerTextInstance(parentContainer, textInstance, text, isConcurrentMode) {
          var shouldWarnDev = true;
          checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
        }
        function didNotMatchHydratedTextInstance(parentType, parentProps, parentInstance, textInstance, text, isConcurrentMode) {
          if (parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
            var shouldWarnDev = true;
            checkForUnmatchedText(textInstance.nodeValue, text, isConcurrentMode, shouldWarnDev);
          }
        }
        function didNotHydrateInstanceWithinContainer(parentContainer, instance) {
          {
            if (instance.nodeType === ELEMENT_NODE) {
              warnForDeletedHydratableElement(parentContainer, instance);
            } else if (instance.nodeType === COMMENT_NODE) ;
            else {
              warnForDeletedHydratableText(parentContainer, instance);
            }
          }
        }
        function didNotHydrateInstanceWithinSuspenseInstance(parentInstance, instance) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentNode, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentNode, instance);
              }
            }
          }
        }
        function didNotHydrateInstance(parentType, parentProps, parentInstance, instance, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              if (instance.nodeType === ELEMENT_NODE) {
                warnForDeletedHydratableElement(parentInstance, instance);
              } else if (instance.nodeType === COMMENT_NODE) ;
              else {
                warnForDeletedHydratableText(parentInstance, instance);
              }
            }
          }
        }
        function didNotFindHydratableInstanceWithinContainer(parentContainer, type, props) {
          {
            warnForInsertedHydratedElement(parentContainer, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinContainer(parentContainer, text) {
          {
            warnForInsertedHydratedText(parentContainer, text);
          }
        }
        function didNotFindHydratableInstanceWithinSuspenseInstance(parentInstance, type, props) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) warnForInsertedHydratedElement(parentNode, type);
          }
        }
        function didNotFindHydratableTextInstanceWithinSuspenseInstance(parentInstance, text) {
          {
            var parentNode = parentInstance.parentNode;
            if (parentNode !== null) warnForInsertedHydratedText(parentNode, text);
          }
        }
        function didNotFindHydratableInstance(parentType, parentProps, parentInstance, type, props, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedElement(parentInstance, type);
            }
          }
        }
        function didNotFindHydratableTextInstance(parentType, parentProps, parentInstance, text, isConcurrentMode) {
          {
            if (isConcurrentMode || parentProps[SUPPRESS_HYDRATION_WARNING$1] !== true) {
              warnForInsertedHydratedText(parentInstance, text);
            }
          }
        }
        function errorHydratingContainer(parentContainer) {
          {
            error("An error occurred during hydration. The server HTML was replaced with client content in <%s>.", parentContainer.nodeName.toLowerCase());
          }
        }
        function preparePortalMount(portalInstance) {
          listenToAllSupportedEvents(portalInstance);
        }
        var randomKey = Math.random().toString(36).slice(2);
        var internalInstanceKey = "__reactFiber$" + randomKey;
        var internalPropsKey = "__reactProps$" + randomKey;
        var internalContainerInstanceKey = "__reactContainer$" + randomKey;
        var internalEventHandlersKey = "__reactEvents$" + randomKey;
        var internalEventHandlerListenersKey = "__reactListeners$" + randomKey;
        var internalEventHandlesSetKey = "__reactHandles$" + randomKey;
        function detachDeletedInstance(node) {
          delete node[internalInstanceKey];
          delete node[internalPropsKey];
          delete node[internalEventHandlersKey];
          delete node[internalEventHandlerListenersKey];
          delete node[internalEventHandlesSetKey];
        }
        function precacheFiberNode(hostInst, node) {
          node[internalInstanceKey] = hostInst;
        }
        function markContainerAsRoot(hostRoot, node) {
          node[internalContainerInstanceKey] = hostRoot;
        }
        function unmarkContainerAsRoot(node) {
          node[internalContainerInstanceKey] = null;
        }
        function isContainerMarkedAsRoot(node) {
          return !!node[internalContainerInstanceKey];
        }
        function getClosestInstanceFromNode(targetNode) {
          var targetInst = targetNode[internalInstanceKey];
          if (targetInst) {
            return targetInst;
          }
          var parentNode = targetNode.parentNode;
          while (parentNode) {
            targetInst = parentNode[internalContainerInstanceKey] || parentNode[internalInstanceKey];
            if (targetInst) {
              var alternate = targetInst.alternate;
              if (targetInst.child !== null || alternate !== null && alternate.child !== null) {
                var suspenseInstance = getParentSuspenseInstance(targetNode);
                while (suspenseInstance !== null) {
                  var targetSuspenseInst = suspenseInstance[internalInstanceKey];
                  if (targetSuspenseInst) {
                    return targetSuspenseInst;
                  }
                  suspenseInstance = getParentSuspenseInstance(suspenseInstance);
                }
              }
              return targetInst;
            }
            targetNode = parentNode;
            parentNode = targetNode.parentNode;
          }
          return null;
        }
        function getInstanceFromNode(node) {
          var inst = node[internalInstanceKey] || node[internalContainerInstanceKey];
          if (inst) {
            if (inst.tag === HostComponent || inst.tag === HostText || inst.tag === SuspenseComponent || inst.tag === HostRoot) {
              return inst;
            } else {
              return null;
            }
          }
          return null;
        }
        function getNodeFromInstance(inst) {
          if (inst.tag === HostComponent || inst.tag === HostText) {
            return inst.stateNode;
          }
          throw new Error("getNodeFromInstance: Invalid argument.");
        }
        function getFiberCurrentPropsFromNode(node) {
          return node[internalPropsKey] || null;
        }
        function updateFiberProps(node, props) {
          node[internalPropsKey] = props;
        }
        function getEventListenerSet(node) {
          var elementListenerSet = node[internalEventHandlersKey];
          if (elementListenerSet === void 0) {
            elementListenerSet = node[internalEventHandlersKey] = /* @__PURE__ */ new Set();
          }
          return elementListenerSet;
        }
        var loggedTypeFailures = {};
        var ReactDebugCurrentFrame$1 = ReactSharedInternals.ReactDebugCurrentFrame;
        function setCurrentlyValidatingElement(element) {
          {
            if (element) {
              var owner = element._owner;
              var stack = describeUnknownElementTypeFrameInDEV(element.type, element._source, owner ? owner.type : null);
              ReactDebugCurrentFrame$1.setExtraStackFrame(stack);
            } else {
              ReactDebugCurrentFrame$1.setExtraStackFrame(null);
            }
          }
        }
        function checkPropTypes(typeSpecs, values, location, componentName, element) {
          {
            var has2 = Function.call.bind(hasOwnProperty);
            for (var typeSpecName in typeSpecs) {
              if (has2(typeSpecs, typeSpecName)) {
                var error$1 = void 0;
                try {
                  if (typeof typeSpecs[typeSpecName] !== "function") {
                    var err = Error((componentName || "React class") + ": " + location + " type `" + typeSpecName + "` is invalid; it must be a function, usually from the `prop-types` package, but received `" + typeof typeSpecs[typeSpecName] + "`.This often happens because of typos such as `PropTypes.function` instead of `PropTypes.func`.");
                    err.name = "Invariant Violation";
                    throw err;
                  }
                  error$1 = typeSpecs[typeSpecName](values, typeSpecName, componentName, location, null, "SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED");
                } catch (ex2) {
                  error$1 = ex2;
                }
                if (error$1 && !(error$1 instanceof Error)) {
                  setCurrentlyValidatingElement(element);
                  error("%s: type specification of %s `%s` is invalid; the type checker function must return `null` or an `Error` but returned a %s. You may have forgotten to pass an argument to the type checker creator (arrayOf, instanceOf, objectOf, oneOf, oneOfType, and shape all require an argument).", componentName || "React class", location, typeSpecName, typeof error$1);
                  setCurrentlyValidatingElement(null);
                }
                if (error$1 instanceof Error && !(error$1.message in loggedTypeFailures)) {
                  loggedTypeFailures[error$1.message] = true;
                  setCurrentlyValidatingElement(element);
                  error("Failed %s type: %s", location, error$1.message);
                  setCurrentlyValidatingElement(null);
                }
              }
            }
          }
        }
        var valueStack = [];
        var fiberStack;
        {
          fiberStack = [];
        }
        var index = -1;
        function createCursor(defaultValue) {
          return {
            current: defaultValue
          };
        }
        function pop(cursor, fiber) {
          if (index < 0) {
            {
              error("Unexpected pop.");
            }
            return;
          }
          {
            if (fiber !== fiberStack[index]) {
              error("Unexpected Fiber popped.");
            }
          }
          cursor.current = valueStack[index];
          valueStack[index] = null;
          {
            fiberStack[index] = null;
          }
          index--;
        }
        function push(cursor, value, fiber) {
          index++;
          valueStack[index] = cursor.current;
          {
            fiberStack[index] = fiber;
          }
          cursor.current = value;
        }
        var warnedAboutMissingGetChildContext;
        {
          warnedAboutMissingGetChildContext = {};
        }
        var emptyContextObject = {};
        {
          Object.freeze(emptyContextObject);
        }
        var contextStackCursor = createCursor(emptyContextObject);
        var didPerformWorkStackCursor = createCursor(false);
        var previousContext = emptyContextObject;
        function getUnmaskedContext(workInProgress2, Component, didPushOwnContextIfProvider) {
          {
            if (didPushOwnContextIfProvider && isContextProvider(Component)) {
              return previousContext;
            }
            return contextStackCursor.current;
          }
        }
        function cacheContext(workInProgress2, unmaskedContext, maskedContext) {
          {
            var instance = workInProgress2.stateNode;
            instance.__reactInternalMemoizedUnmaskedChildContext = unmaskedContext;
            instance.__reactInternalMemoizedMaskedChildContext = maskedContext;
          }
        }
        function getMaskedContext(workInProgress2, unmaskedContext) {
          {
            var type = workInProgress2.type;
            var contextTypes = type.contextTypes;
            if (!contextTypes) {
              return emptyContextObject;
            }
            var instance = workInProgress2.stateNode;
            if (instance && instance.__reactInternalMemoizedUnmaskedChildContext === unmaskedContext) {
              return instance.__reactInternalMemoizedMaskedChildContext;
            }
            var context = {};
            for (var key in contextTypes) {
              context[key] = unmaskedContext[key];
            }
            {
              var name = getComponentNameFromFiber(workInProgress2) || "Unknown";
              checkPropTypes(contextTypes, context, "context", name);
            }
            if (instance) {
              cacheContext(workInProgress2, unmaskedContext, context);
            }
            return context;
          }
        }
        function hasContextChanged() {
          {
            return didPerformWorkStackCursor.current;
          }
        }
        function isContextProvider(type) {
          {
            var childContextTypes = type.childContextTypes;
            return childContextTypes !== null && childContextTypes !== void 0;
          }
        }
        function popContext(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function popTopLevelContextObject(fiber) {
          {
            pop(didPerformWorkStackCursor, fiber);
            pop(contextStackCursor, fiber);
          }
        }
        function pushTopLevelContextObject(fiber, context, didChange) {
          {
            if (contextStackCursor.current !== emptyContextObject) {
              throw new Error("Unexpected context found on stack. This error is likely caused by a bug in React. Please file an issue.");
            }
            push(contextStackCursor, context, fiber);
            push(didPerformWorkStackCursor, didChange, fiber);
          }
        }
        function processChildContext(fiber, type, parentContext) {
          {
            var instance = fiber.stateNode;
            var childContextTypes = type.childContextTypes;
            if (typeof instance.getChildContext !== "function") {
              {
                var componentName = getComponentNameFromFiber(fiber) || "Unknown";
                if (!warnedAboutMissingGetChildContext[componentName]) {
                  warnedAboutMissingGetChildContext[componentName] = true;
                  error("%s.childContextTypes is specified but there is no getChildContext() method on the instance. You can either define getChildContext() on %s or remove childContextTypes from it.", componentName, componentName);
                }
              }
              return parentContext;
            }
            var childContext = instance.getChildContext();
            for (var contextKey in childContext) {
              if (!(contextKey in childContextTypes)) {
                throw new Error((getComponentNameFromFiber(fiber) || "Unknown") + '.getChildContext(): key "' + contextKey + '" is not defined in childContextTypes.');
              }
            }
            {
              var name = getComponentNameFromFiber(fiber) || "Unknown";
              checkPropTypes(childContextTypes, childContext, "child context", name);
            }
            return assign({}, parentContext, childContext);
          }
        }
        function pushContextProvider(workInProgress2) {
          {
            var instance = workInProgress2.stateNode;
            var memoizedMergedChildContext = instance && instance.__reactInternalMemoizedMergedChildContext || emptyContextObject;
            previousContext = contextStackCursor.current;
            push(contextStackCursor, memoizedMergedChildContext, workInProgress2);
            push(didPerformWorkStackCursor, didPerformWorkStackCursor.current, workInProgress2);
            return true;
          }
        }
        function invalidateContextProvider(workInProgress2, type, didChange) {
          {
            var instance = workInProgress2.stateNode;
            if (!instance) {
              throw new Error("Expected to have an instance by this point. This error is likely caused by a bug in React. Please file an issue.");
            }
            if (didChange) {
              var mergedContext = processChildContext(workInProgress2, type, previousContext);
              instance.__reactInternalMemoizedMergedChildContext = mergedContext;
              pop(didPerformWorkStackCursor, workInProgress2);
              pop(contextStackCursor, workInProgress2);
              push(contextStackCursor, mergedContext, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            } else {
              pop(didPerformWorkStackCursor, workInProgress2);
              push(didPerformWorkStackCursor, didChange, workInProgress2);
            }
          }
        }
        function findCurrentUnmaskedContext(fiber) {
          {
            if (!isFiberMounted(fiber) || fiber.tag !== ClassComponent) {
              throw new Error("Expected subtree parent to be a mounted class component. This error is likely caused by a bug in React. Please file an issue.");
            }
            var node = fiber;
            do {
              switch (node.tag) {
                case HostRoot:
                  return node.stateNode.context;
                case ClassComponent: {
                  var Component = node.type;
                  if (isContextProvider(Component)) {
                    return node.stateNode.__reactInternalMemoizedMergedChildContext;
                  }
                  break;
                }
              }
              node = node.return;
            } while (node !== null);
            throw new Error("Found unexpected detached subtree parent. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        var LegacyRoot = 0;
        var ConcurrentRoot = 1;
        var syncQueue = null;
        var includesLegacySyncCallbacks = false;
        var isFlushingSyncQueue = false;
        function scheduleSyncCallback(callback) {
          if (syncQueue === null) {
            syncQueue = [callback];
          } else {
            syncQueue.push(callback);
          }
        }
        function scheduleLegacySyncCallback(callback) {
          includesLegacySyncCallbacks = true;
          scheduleSyncCallback(callback);
        }
        function flushSyncCallbacksOnlyInLegacyMode() {
          if (includesLegacySyncCallbacks) {
            flushSyncCallbacks();
          }
        }
        function flushSyncCallbacks() {
          if (!isFlushingSyncQueue && syncQueue !== null) {
            isFlushingSyncQueue = true;
            var i = 0;
            var previousUpdatePriority = getCurrentUpdatePriority();
            try {
              var isSync = true;
              var queue = syncQueue;
              setCurrentUpdatePriority(DiscreteEventPriority);
              for (; i < queue.length; i++) {
                var callback = queue[i];
                do {
                  callback = callback(isSync);
                } while (callback !== null);
              }
              syncQueue = null;
              includesLegacySyncCallbacks = false;
            } catch (error2) {
              if (syncQueue !== null) {
                syncQueue = syncQueue.slice(i + 1);
              }
              scheduleCallback(ImmediatePriority, flushSyncCallbacks);
              throw error2;
            } finally {
              setCurrentUpdatePriority(previousUpdatePriority);
              isFlushingSyncQueue = false;
            }
          }
          return null;
        }
        var forkStack = [];
        var forkStackIndex = 0;
        var treeForkProvider = null;
        var treeForkCount = 0;
        var idStack = [];
        var idStackIndex = 0;
        var treeContextProvider = null;
        var treeContextId = 1;
        var treeContextOverflow = "";
        function isForkedChild(workInProgress2) {
          warnIfNotHydrating();
          return (workInProgress2.flags & Forked) !== NoFlags;
        }
        function getForksAtLevel(workInProgress2) {
          warnIfNotHydrating();
          return treeForkCount;
        }
        function getTreeId() {
          var overflow = treeContextOverflow;
          var idWithLeadingBit = treeContextId;
          var id = idWithLeadingBit & ~getLeadingBit(idWithLeadingBit);
          return id.toString(32) + overflow;
        }
        function pushTreeFork(workInProgress2, totalChildren) {
          warnIfNotHydrating();
          forkStack[forkStackIndex++] = treeForkCount;
          forkStack[forkStackIndex++] = treeForkProvider;
          treeForkProvider = workInProgress2;
          treeForkCount = totalChildren;
        }
        function pushTreeId(workInProgress2, totalChildren, index2) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextProvider = workInProgress2;
          var baseIdWithLeadingBit = treeContextId;
          var baseOverflow = treeContextOverflow;
          var baseLength = getBitLength(baseIdWithLeadingBit) - 1;
          var baseId = baseIdWithLeadingBit & ~(1 << baseLength);
          var slot = index2 + 1;
          var length = getBitLength(totalChildren) + baseLength;
          if (length > 30) {
            var numberOfOverflowBits = baseLength - baseLength % 5;
            var newOverflowBits = (1 << numberOfOverflowBits) - 1;
            var newOverflow = (baseId & newOverflowBits).toString(32);
            var restOfBaseId = baseId >> numberOfOverflowBits;
            var restOfBaseLength = baseLength - numberOfOverflowBits;
            var restOfLength = getBitLength(totalChildren) + restOfBaseLength;
            var restOfNewBits = slot << restOfBaseLength;
            var id = restOfNewBits | restOfBaseId;
            var overflow = newOverflow + baseOverflow;
            treeContextId = 1 << restOfLength | id;
            treeContextOverflow = overflow;
          } else {
            var newBits = slot << baseLength;
            var _id = newBits | baseId;
            var _overflow = baseOverflow;
            treeContextId = 1 << length | _id;
            treeContextOverflow = _overflow;
          }
        }
        function pushMaterializedTreeId(workInProgress2) {
          warnIfNotHydrating();
          var returnFiber = workInProgress2.return;
          if (returnFiber !== null) {
            var numberOfForks = 1;
            var slotIndex = 0;
            pushTreeFork(workInProgress2, numberOfForks);
            pushTreeId(workInProgress2, numberOfForks, slotIndex);
          }
        }
        function getBitLength(number) {
          return 32 - clz32(number);
        }
        function getLeadingBit(id) {
          return 1 << getBitLength(id) - 1;
        }
        function popTreeContext(workInProgress2) {
          while (workInProgress2 === treeForkProvider) {
            treeForkProvider = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
            treeForkCount = forkStack[--forkStackIndex];
            forkStack[forkStackIndex] = null;
          }
          while (workInProgress2 === treeContextProvider) {
            treeContextProvider = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextOverflow = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
            treeContextId = idStack[--idStackIndex];
            idStack[idStackIndex] = null;
          }
        }
        function getSuspendedTreeContext() {
          warnIfNotHydrating();
          if (treeContextProvider !== null) {
            return {
              id: treeContextId,
              overflow: treeContextOverflow
            };
          } else {
            return null;
          }
        }
        function restoreSuspendedTreeContext(workInProgress2, suspendedContext) {
          warnIfNotHydrating();
          idStack[idStackIndex++] = treeContextId;
          idStack[idStackIndex++] = treeContextOverflow;
          idStack[idStackIndex++] = treeContextProvider;
          treeContextId = suspendedContext.id;
          treeContextOverflow = suspendedContext.overflow;
          treeContextProvider = workInProgress2;
        }
        function warnIfNotHydrating() {
          {
            if (!getIsHydrating()) {
              error("Expected to be hydrating. This is a bug in React. Please file an issue.");
            }
          }
        }
        var hydrationParentFiber = null;
        var nextHydratableInstance = null;
        var isHydrating = false;
        var didSuspendOrErrorDEV = false;
        var hydrationErrors = null;
        function warnIfHydrating() {
          {
            if (isHydrating) {
              error("We should not be hydrating here. This is a bug in React. Please file a bug.");
            }
          }
        }
        function markDidThrowWhileHydratingDEV() {
          {
            didSuspendOrErrorDEV = true;
          }
        }
        function didSuspendOrErrorWhileHydratingDEV() {
          {
            return didSuspendOrErrorDEV;
          }
        }
        function enterHydrationState(fiber) {
          var parentInstance = fiber.stateNode.containerInfo;
          nextHydratableInstance = getFirstHydratableChildWithinContainer(parentInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          return true;
        }
        function reenterHydrationStateFromDehydratedSuspenseInstance(fiber, suspenseInstance, treeContext) {
          nextHydratableInstance = getFirstHydratableChildWithinSuspenseInstance(suspenseInstance);
          hydrationParentFiber = fiber;
          isHydrating = true;
          hydrationErrors = null;
          didSuspendOrErrorDEV = false;
          if (treeContext !== null) {
            restoreSuspendedTreeContext(fiber, treeContext);
          }
          return true;
        }
        function warnUnhydratedInstance(returnFiber, instance) {
          {
            switch (returnFiber.tag) {
              case HostRoot: {
                didNotHydrateInstanceWithinContainer(returnFiber.stateNode.containerInfo, instance);
                break;
              }
              case HostComponent: {
                var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                didNotHydrateInstance(
                  returnFiber.type,
                  returnFiber.memoizedProps,
                  returnFiber.stateNode,
                  instance,
                  // TODO: Delete this argument when we remove the legacy root API.
                  isConcurrentMode
                );
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                if (suspenseState.dehydrated !== null) didNotHydrateInstanceWithinSuspenseInstance(suspenseState.dehydrated, instance);
                break;
              }
            }
          }
        }
        function deleteHydratableInstance(returnFiber, instance) {
          warnUnhydratedInstance(returnFiber, instance);
          var childToDelete = createFiberFromHostInstanceForDeletion();
          childToDelete.stateNode = instance;
          childToDelete.return = returnFiber;
          var deletions = returnFiber.deletions;
          if (deletions === null) {
            returnFiber.deletions = [childToDelete];
            returnFiber.flags |= ChildDeletion;
          } else {
            deletions.push(childToDelete);
          }
        }
        function warnNonhydratedInstance(returnFiber, fiber) {
          {
            if (didSuspendOrErrorDEV) {
              return;
            }
            switch (returnFiber.tag) {
              case HostRoot: {
                var parentContainer = returnFiber.stateNode.containerInfo;
                switch (fiber.tag) {
                  case HostComponent:
                    var type = fiber.type;
                    var props = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinContainer(parentContainer, type);
                    break;
                  case HostText:
                    var text = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinContainer(parentContainer, text);
                    break;
                }
                break;
              }
              case HostComponent: {
                var parentType = returnFiber.type;
                var parentProps = returnFiber.memoizedProps;
                var parentInstance = returnFiber.stateNode;
                switch (fiber.tag) {
                  case HostComponent: {
                    var _type = fiber.type;
                    var _props = fiber.pendingProps;
                    var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _type,
                      _props,
                      // TODO: Delete this argument when we remove the legacy root API.
                      isConcurrentMode
                    );
                    break;
                  }
                  case HostText: {
                    var _text = fiber.pendingProps;
                    var _isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                    didNotFindHydratableTextInstance(
                      parentType,
                      parentProps,
                      parentInstance,
                      _text,
                      // TODO: Delete this argument when we remove the legacy root API.
                      _isConcurrentMode
                    );
                    break;
                  }
                }
                break;
              }
              case SuspenseComponent: {
                var suspenseState = returnFiber.memoizedState;
                var _parentInstance = suspenseState.dehydrated;
                if (_parentInstance !== null) switch (fiber.tag) {
                  case HostComponent:
                    var _type2 = fiber.type;
                    var _props2 = fiber.pendingProps;
                    didNotFindHydratableInstanceWithinSuspenseInstance(_parentInstance, _type2);
                    break;
                  case HostText:
                    var _text2 = fiber.pendingProps;
                    didNotFindHydratableTextInstanceWithinSuspenseInstance(_parentInstance, _text2);
                    break;
                }
                break;
              }
              default:
                return;
            }
          }
        }
        function insertNonHydratedInstance(returnFiber, fiber) {
          fiber.flags = fiber.flags & ~Hydrating | Placement;
          warnNonhydratedInstance(returnFiber, fiber);
        }
        function tryHydrate(fiber, nextInstance) {
          switch (fiber.tag) {
            case HostComponent: {
              var type = fiber.type;
              var props = fiber.pendingProps;
              var instance = canHydrateInstance(nextInstance, type);
              if (instance !== null) {
                fiber.stateNode = instance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = getFirstHydratableChild(instance);
                return true;
              }
              return false;
            }
            case HostText: {
              var text = fiber.pendingProps;
              var textInstance = canHydrateTextInstance(nextInstance, text);
              if (textInstance !== null) {
                fiber.stateNode = textInstance;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            case SuspenseComponent: {
              var suspenseInstance = canHydrateSuspenseInstance(nextInstance);
              if (suspenseInstance !== null) {
                var suspenseState = {
                  dehydrated: suspenseInstance,
                  treeContext: getSuspendedTreeContext(),
                  retryLane: OffscreenLane
                };
                fiber.memoizedState = suspenseState;
                var dehydratedFragment = createFiberFromDehydratedFragment(suspenseInstance);
                dehydratedFragment.return = fiber;
                fiber.child = dehydratedFragment;
                hydrationParentFiber = fiber;
                nextHydratableInstance = null;
                return true;
              }
              return false;
            }
            default:
              return false;
          }
        }
        function shouldClientRenderOnMismatch(fiber) {
          return (fiber.mode & ConcurrentMode) !== NoMode && (fiber.flags & DidCapture) === NoFlags;
        }
        function throwOnHydrationMismatch(fiber) {
          throw new Error("Hydration failed because the initial UI does not match what was rendered on the server.");
        }
        function tryToClaimNextHydratableInstance(fiber) {
          if (!isHydrating) {
            return;
          }
          var nextInstance = nextHydratableInstance;
          if (!nextInstance) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            insertNonHydratedInstance(hydrationParentFiber, fiber);
            isHydrating = false;
            hydrationParentFiber = fiber;
            return;
          }
          var firstAttemptedInstance = nextInstance;
          if (!tryHydrate(fiber, nextInstance)) {
            if (shouldClientRenderOnMismatch(fiber)) {
              warnNonhydratedInstance(hydrationParentFiber, fiber);
              throwOnHydrationMismatch();
            }
            nextInstance = getNextHydratableSibling(firstAttemptedInstance);
            var prevHydrationParentFiber = hydrationParentFiber;
            if (!nextInstance || !tryHydrate(fiber, nextInstance)) {
              insertNonHydratedInstance(hydrationParentFiber, fiber);
              isHydrating = false;
              hydrationParentFiber = fiber;
              return;
            }
            deleteHydratableInstance(prevHydrationParentFiber, firstAttemptedInstance);
          }
        }
        function prepareToHydrateHostInstance(fiber, rootContainerInstance, hostContext) {
          var instance = fiber.stateNode;
          var shouldWarnIfMismatchDev = !didSuspendOrErrorDEV;
          var updatePayload = hydrateInstance(instance, fiber.type, fiber.memoizedProps, rootContainerInstance, hostContext, fiber, shouldWarnIfMismatchDev);
          fiber.updateQueue = updatePayload;
          if (updatePayload !== null) {
            return true;
          }
          return false;
        }
        function prepareToHydrateHostTextInstance(fiber) {
          var textInstance = fiber.stateNode;
          var textContent = fiber.memoizedProps;
          var shouldUpdate = hydrateTextInstance(textInstance, textContent, fiber);
          if (shouldUpdate) {
            var returnFiber = hydrationParentFiber;
            if (returnFiber !== null) {
              switch (returnFiber.tag) {
                case HostRoot: {
                  var parentContainer = returnFiber.stateNode.containerInfo;
                  var isConcurrentMode = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedContainerTextInstance(
                    parentContainer,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    isConcurrentMode
                  );
                  break;
                }
                case HostComponent: {
                  var parentType = returnFiber.type;
                  var parentProps = returnFiber.memoizedProps;
                  var parentInstance = returnFiber.stateNode;
                  var _isConcurrentMode2 = (returnFiber.mode & ConcurrentMode) !== NoMode;
                  didNotMatchHydratedTextInstance(
                    parentType,
                    parentProps,
                    parentInstance,
                    textInstance,
                    textContent,
                    // TODO: Delete this argument when we remove the legacy root API.
                    _isConcurrentMode2
                  );
                  break;
                }
              }
            }
          }
          return shouldUpdate;
        }
        function prepareToHydrateHostSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          hydrateSuspenseInstance(suspenseInstance, fiber);
        }
        function skipPastDehydratedSuspenseInstance(fiber) {
          var suspenseState = fiber.memoizedState;
          var suspenseInstance = suspenseState !== null ? suspenseState.dehydrated : null;
          if (!suspenseInstance) {
            throw new Error("Expected to have a hydrated suspense instance. This error is likely caused by a bug in React. Please file an issue.");
          }
          return getNextHydratableInstanceAfterSuspenseInstance(suspenseInstance);
        }
        function popToNextHostParent(fiber) {
          var parent = fiber.return;
          while (parent !== null && parent.tag !== HostComponent && parent.tag !== HostRoot && parent.tag !== SuspenseComponent) {
            parent = parent.return;
          }
          hydrationParentFiber = parent;
        }
        function popHydrationState(fiber) {
          if (fiber !== hydrationParentFiber) {
            return false;
          }
          if (!isHydrating) {
            popToNextHostParent(fiber);
            isHydrating = true;
            return false;
          }
          if (fiber.tag !== HostRoot && (fiber.tag !== HostComponent || shouldDeleteUnhydratedTailInstances(fiber.type) && !shouldSetTextContent(fiber.type, fiber.memoizedProps))) {
            var nextInstance = nextHydratableInstance;
            if (nextInstance) {
              if (shouldClientRenderOnMismatch(fiber)) {
                warnIfUnhydratedTailNodes(fiber);
                throwOnHydrationMismatch();
              } else {
                while (nextInstance) {
                  deleteHydratableInstance(fiber, nextInstance);
                  nextInstance = getNextHydratableSibling(nextInstance);
                }
              }
            }
          }
          popToNextHostParent(fiber);
          if (fiber.tag === SuspenseComponent) {
            nextHydratableInstance = skipPastDehydratedSuspenseInstance(fiber);
          } else {
            nextHydratableInstance = hydrationParentFiber ? getNextHydratableSibling(fiber.stateNode) : null;
          }
          return true;
        }
        function hasUnhydratedTailNodes() {
          return isHydrating && nextHydratableInstance !== null;
        }
        function warnIfUnhydratedTailNodes(fiber) {
          var nextInstance = nextHydratableInstance;
          while (nextInstance) {
            warnUnhydratedInstance(fiber, nextInstance);
            nextInstance = getNextHydratableSibling(nextInstance);
          }
        }
        function resetHydrationState() {
          hydrationParentFiber = null;
          nextHydratableInstance = null;
          isHydrating = false;
          didSuspendOrErrorDEV = false;
        }
        function upgradeHydrationErrorsToRecoverable() {
          if (hydrationErrors !== null) {
            queueRecoverableErrors(hydrationErrors);
            hydrationErrors = null;
          }
        }
        function getIsHydrating() {
          return isHydrating;
        }
        function queueHydrationError(error2) {
          if (hydrationErrors === null) {
            hydrationErrors = [error2];
          } else {
            hydrationErrors.push(error2);
          }
        }
        var ReactCurrentBatchConfig$1 = ReactSharedInternals.ReactCurrentBatchConfig;
        var NoTransition = null;
        function requestCurrentTransition() {
          return ReactCurrentBatchConfig$1.transition;
        }
        var ReactStrictModeWarnings = {
          recordUnsafeLifecycleWarnings: function(fiber, instance) {
          },
          flushPendingUnsafeLifecycleWarnings: function() {
          },
          recordLegacyContextWarning: function(fiber, instance) {
          },
          flushLegacyContextWarning: function() {
          },
          discardPendingWarnings: function() {
          }
        };
        {
          var findStrictRoot = function(fiber) {
            var maybeStrictRoot = null;
            var node = fiber;
            while (node !== null) {
              if (node.mode & StrictLegacyMode) {
                maybeStrictRoot = node;
              }
              node = node.return;
            }
            return maybeStrictRoot;
          };
          var setToSortedString = function(set2) {
            var array = [];
            set2.forEach(function(value) {
              array.push(value);
            });
            return array.sort().join(", ");
          };
          var pendingComponentWillMountWarnings = [];
          var pendingUNSAFE_ComponentWillMountWarnings = [];
          var pendingComponentWillReceivePropsWarnings = [];
          var pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
          var pendingComponentWillUpdateWarnings = [];
          var pendingUNSAFE_ComponentWillUpdateWarnings = [];
          var didWarnAboutUnsafeLifecycles = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordUnsafeLifecycleWarnings = function(fiber, instance) {
            if (didWarnAboutUnsafeLifecycles.has(fiber.type)) {
              return;
            }
            if (typeof instance.componentWillMount === "function" && // Don't warn about react-lifecycles-compat polyfilled components.
            instance.componentWillMount.__suppressDeprecationWarning !== true) {
              pendingComponentWillMountWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillMount === "function") {
              pendingUNSAFE_ComponentWillMountWarnings.push(fiber);
            }
            if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
              pendingComponentWillReceivePropsWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillReceiveProps === "function") {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.push(fiber);
            }
            if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
              pendingComponentWillUpdateWarnings.push(fiber);
            }
            if (fiber.mode & StrictLegacyMode && typeof instance.UNSAFE_componentWillUpdate === "function") {
              pendingUNSAFE_ComponentWillUpdateWarnings.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings = function() {
            var componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillMountWarnings.length > 0) {
              pendingComponentWillMountWarnings.forEach(function(fiber) {
                componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillMountWarnings = [];
            }
            var UNSAFE_componentWillMountUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillMountWarnings.length > 0) {
              pendingUNSAFE_ComponentWillMountWarnings.forEach(function(fiber) {
                UNSAFE_componentWillMountUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillMountWarnings = [];
            }
            var componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillReceivePropsWarnings.length > 0) {
              pendingComponentWillReceivePropsWarnings.forEach(function(fiber) {
                componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillReceivePropsWarnings = [];
            }
            var UNSAFE_componentWillReceivePropsUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillReceivePropsWarnings.length > 0) {
              pendingUNSAFE_ComponentWillReceivePropsWarnings.forEach(function(fiber) {
                UNSAFE_componentWillReceivePropsUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            }
            var componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingComponentWillUpdateWarnings.length > 0) {
              pendingComponentWillUpdateWarnings.forEach(function(fiber) {
                componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingComponentWillUpdateWarnings = [];
            }
            var UNSAFE_componentWillUpdateUniqueNames = /* @__PURE__ */ new Set();
            if (pendingUNSAFE_ComponentWillUpdateWarnings.length > 0) {
              pendingUNSAFE_ComponentWillUpdateWarnings.forEach(function(fiber) {
                UNSAFE_componentWillUpdateUniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutUnsafeLifecycles.add(fiber.type);
              });
              pendingUNSAFE_ComponentWillUpdateWarnings = [];
            }
            if (UNSAFE_componentWillMountUniqueNames.size > 0) {
              var sortedNames = setToSortedString(UNSAFE_componentWillMountUniqueNames);
              error("Using UNSAFE_componentWillMount in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n\nPlease update the following components: %s", sortedNames);
            }
            if (UNSAFE_componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames = setToSortedString(UNSAFE_componentWillReceivePropsUniqueNames);
              error("Using UNSAFE_componentWillReceiveProps in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n\nPlease update the following components: %s", _sortedNames);
            }
            if (UNSAFE_componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames2 = setToSortedString(UNSAFE_componentWillUpdateUniqueNames);
              error("Using UNSAFE_componentWillUpdate in strict mode is not recommended and may indicate bugs in your code. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n\nPlease update the following components: %s", _sortedNames2);
            }
            if (componentWillMountUniqueNames.size > 0) {
              var _sortedNames3 = setToSortedString(componentWillMountUniqueNames);
              warn("componentWillMount has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move code with side effects to componentDidMount, and set initial state in the constructor.\n* Rename componentWillMount to UNSAFE_componentWillMount to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames3);
            }
            if (componentWillReceivePropsUniqueNames.size > 0) {
              var _sortedNames4 = setToSortedString(componentWillReceivePropsUniqueNames);
              warn("componentWillReceiveProps has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* If you're updating state whenever props change, refactor your code to use memoization techniques or move it to static getDerivedStateFromProps. Learn more at: https://reactjs.org/link/derived-state\n* Rename componentWillReceiveProps to UNSAFE_componentWillReceiveProps to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames4);
            }
            if (componentWillUpdateUniqueNames.size > 0) {
              var _sortedNames5 = setToSortedString(componentWillUpdateUniqueNames);
              warn("componentWillUpdate has been renamed, and is not recommended for use. See https://reactjs.org/link/unsafe-component-lifecycles for details.\n\n* Move data fetching code or side effects to componentDidUpdate.\n* Rename componentWillUpdate to UNSAFE_componentWillUpdate to suppress this warning in non-strict mode. In React 18.x, only the UNSAFE_ name will work. To rename all deprecated lifecycles to their new names, you can run `npx react-codemod rename-unsafe-lifecycles` in your project source folder.\n\nPlease update the following components: %s", _sortedNames5);
            }
          };
          var pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          var didWarnAboutLegacyContext = /* @__PURE__ */ new Set();
          ReactStrictModeWarnings.recordLegacyContextWarning = function(fiber, instance) {
            var strictRoot = findStrictRoot(fiber);
            if (strictRoot === null) {
              error("Expected to find a StrictMode component in a strict mode tree. This error is likely caused by a bug in React. Please file an issue.");
              return;
            }
            if (didWarnAboutLegacyContext.has(fiber.type)) {
              return;
            }
            var warningsForRoot = pendingLegacyContextWarning.get(strictRoot);
            if (fiber.type.contextTypes != null || fiber.type.childContextTypes != null || instance !== null && typeof instance.getChildContext === "function") {
              if (warningsForRoot === void 0) {
                warningsForRoot = [];
                pendingLegacyContextWarning.set(strictRoot, warningsForRoot);
              }
              warningsForRoot.push(fiber);
            }
          };
          ReactStrictModeWarnings.flushLegacyContextWarning = function() {
            pendingLegacyContextWarning.forEach(function(fiberArray, strictRoot) {
              if (fiberArray.length === 0) {
                return;
              }
              var firstFiber = fiberArray[0];
              var uniqueNames = /* @__PURE__ */ new Set();
              fiberArray.forEach(function(fiber) {
                uniqueNames.add(getComponentNameFromFiber(fiber) || "Component");
                didWarnAboutLegacyContext.add(fiber.type);
              });
              var sortedNames = setToSortedString(uniqueNames);
              try {
                setCurrentFiber(firstFiber);
                error("Legacy context API has been detected within a strict-mode tree.\n\nThe old API will be supported in all 16.x releases, but applications using it should migrate to the new version.\n\nPlease update the following components: %s\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", sortedNames);
              } finally {
                resetCurrentFiber();
              }
            });
          };
          ReactStrictModeWarnings.discardPendingWarnings = function() {
            pendingComponentWillMountWarnings = [];
            pendingUNSAFE_ComponentWillMountWarnings = [];
            pendingComponentWillReceivePropsWarnings = [];
            pendingUNSAFE_ComponentWillReceivePropsWarnings = [];
            pendingComponentWillUpdateWarnings = [];
            pendingUNSAFE_ComponentWillUpdateWarnings = [];
            pendingLegacyContextWarning = /* @__PURE__ */ new Map();
          };
        }
        var didWarnAboutMaps;
        var didWarnAboutGenerators;
        var didWarnAboutStringRefs;
        var ownerHasKeyUseWarning;
        var ownerHasFunctionTypeWarning;
        var warnForMissingKey = function(child, returnFiber) {
        };
        {
          didWarnAboutMaps = false;
          didWarnAboutGenerators = false;
          didWarnAboutStringRefs = {};
          ownerHasKeyUseWarning = {};
          ownerHasFunctionTypeWarning = {};
          warnForMissingKey = function(child, returnFiber) {
            if (child === null || typeof child !== "object") {
              return;
            }
            if (!child._store || child._store.validated || child.key != null) {
              return;
            }
            if (typeof child._store !== "object") {
              throw new Error("React Component in warnForMissingKey should have a _store. This error is likely caused by a bug in React. Please file an issue.");
            }
            child._store.validated = true;
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasKeyUseWarning[componentName]) {
              return;
            }
            ownerHasKeyUseWarning[componentName] = true;
            error('Each child in a list should have a unique "key" prop. See https://reactjs.org/link/warning-keys for more information.');
          };
        }
        function isReactClass(type) {
          return type.prototype && type.prototype.isReactComponent;
        }
        function coerceRef(returnFiber, current2, element) {
          var mixedRef = element.ref;
          if (mixedRef !== null && typeof mixedRef !== "function" && typeof mixedRef !== "object") {
            {
              if ((returnFiber.mode & StrictLegacyMode || warnAboutStringRefs) && // We warn in ReactElement.js if owner and self are equal for string refs
              // because these cannot be automatically converted to an arrow function
              // using a codemod. Therefore, we don't have to warn about string refs again.
              !(element._owner && element._self && element._owner.stateNode !== element._self) && // Will already throw with "Function components cannot have string refs"
              !(element._owner && element._owner.tag !== ClassComponent) && // Will already warn with "Function components cannot be given refs"
              !(typeof element.type === "function" && !isReactClass(element.type)) && // Will already throw with "Element ref was specified as a string (someStringRef) but no owner was set"
              element._owner) {
                var componentName = getComponentNameFromFiber(returnFiber) || "Component";
                if (!didWarnAboutStringRefs[componentName]) {
                  {
                    error('Component "%s" contains the string ref "%s". Support for string refs will be removed in a future major release. We recommend using useRef() or createRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref', componentName, mixedRef);
                  }
                  didWarnAboutStringRefs[componentName] = true;
                }
              }
            }
            if (element._owner) {
              var owner = element._owner;
              var inst;
              if (owner) {
                var ownerFiber = owner;
                if (ownerFiber.tag !== ClassComponent) {
                  throw new Error("Function components cannot have string refs. We recommend using useRef() instead. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-string-ref");
                }
                inst = ownerFiber.stateNode;
              }
              if (!inst) {
                throw new Error("Missing owner for string ref " + mixedRef + ". This error is likely caused by a bug in React. Please file an issue.");
              }
              var resolvedInst = inst;
              {
                checkPropStringCoercion(mixedRef, "ref");
              }
              var stringRef = "" + mixedRef;
              if (current2 !== null && current2.ref !== null && typeof current2.ref === "function" && current2.ref._stringRef === stringRef) {
                return current2.ref;
              }
              var ref = function(value) {
                var refs = resolvedInst.refs;
                if (value === null) {
                  delete refs[stringRef];
                } else {
                  refs[stringRef] = value;
                }
              };
              ref._stringRef = stringRef;
              return ref;
            } else {
              if (typeof mixedRef !== "string") {
                throw new Error("Expected ref to be a function, a string, an object returned by React.createRef(), or null.");
              }
              if (!element._owner) {
                throw new Error("Element ref was specified as a string (" + mixedRef + ") but no owner was set. This could happen for one of the following reasons:\n1. You may be adding a ref to a function component\n2. You may be adding a ref to a component that was not created inside a component's render method\n3. You have multiple copies of React loaded\nSee https://reactjs.org/link/refs-must-have-owner for more information.");
              }
            }
          }
          return mixedRef;
        }
        function throwOnInvalidObjectType(returnFiber, newChild) {
          var childString = Object.prototype.toString.call(newChild);
          throw new Error("Objects are not valid as a React child (found: " + (childString === "[object Object]" ? "object with keys {" + Object.keys(newChild).join(", ") + "}" : childString) + "). If you meant to render a collection of children, use an array instead.");
        }
        function warnOnFunctionType(returnFiber) {
          {
            var componentName = getComponentNameFromFiber(returnFiber) || "Component";
            if (ownerHasFunctionTypeWarning[componentName]) {
              return;
            }
            ownerHasFunctionTypeWarning[componentName] = true;
            error("Functions are not valid as a React child. This may happen if you return a Component instead of <Component /> from render. Or maybe you meant to call this function rather than return it.");
          }
        }
        function resolveLazy(lazyType) {
          var payload = lazyType._payload;
          var init = lazyType._init;
          return init(payload);
        }
        function ChildReconciler(shouldTrackSideEffects) {
          function deleteChild(returnFiber, childToDelete) {
            if (!shouldTrackSideEffects) {
              return;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [childToDelete];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(childToDelete);
            }
          }
          function deleteRemainingChildren(returnFiber, currentFirstChild) {
            if (!shouldTrackSideEffects) {
              return null;
            }
            var childToDelete = currentFirstChild;
            while (childToDelete !== null) {
              deleteChild(returnFiber, childToDelete);
              childToDelete = childToDelete.sibling;
            }
            return null;
          }
          function mapRemainingChildren(returnFiber, currentFirstChild) {
            var existingChildren = /* @__PURE__ */ new Map();
            var existingChild = currentFirstChild;
            while (existingChild !== null) {
              if (existingChild.key !== null) {
                existingChildren.set(existingChild.key, existingChild);
              } else {
                existingChildren.set(existingChild.index, existingChild);
              }
              existingChild = existingChild.sibling;
            }
            return existingChildren;
          }
          function useFiber(fiber, pendingProps) {
            var clone = createWorkInProgress(fiber, pendingProps);
            clone.index = 0;
            clone.sibling = null;
            return clone;
          }
          function placeChild(newFiber, lastPlacedIndex, newIndex) {
            newFiber.index = newIndex;
            if (!shouldTrackSideEffects) {
              newFiber.flags |= Forked;
              return lastPlacedIndex;
            }
            var current2 = newFiber.alternate;
            if (current2 !== null) {
              var oldIndex = current2.index;
              if (oldIndex < lastPlacedIndex) {
                newFiber.flags |= Placement;
                return lastPlacedIndex;
              } else {
                return oldIndex;
              }
            } else {
              newFiber.flags |= Placement;
              return lastPlacedIndex;
            }
          }
          function placeSingleChild(newFiber) {
            if (shouldTrackSideEffects && newFiber.alternate === null) {
              newFiber.flags |= Placement;
            }
            return newFiber;
          }
          function updateTextNode(returnFiber, current2, textContent, lanes) {
            if (current2 === null || current2.tag !== HostText) {
              var created = createFiberFromText(textContent, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, textContent);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateElement(returnFiber, current2, element, lanes) {
            var elementType = element.type;
            if (elementType === REACT_FRAGMENT_TYPE) {
              return updateFragment2(returnFiber, current2, element.props.children, lanes, element.key);
            }
            if (current2 !== null) {
              if (current2.elementType === elementType || // Keep this check inline so it only runs on the false path:
              isCompatibleFamilyForHotReloading(current2, element) || // Lazy types should reconcile their resolved type.
              // We need to do this after the Hot Reloading check above,
              // because hot reloading has different semantics than prod because
              // it doesn't resuspend. So we can't let the call below suspend.
              typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === current2.type) {
                var existing = useFiber(current2, element.props);
                existing.ref = coerceRef(returnFiber, current2, element);
                existing.return = returnFiber;
                {
                  existing._debugSource = element._source;
                  existing._debugOwner = element._owner;
                }
                return existing;
              }
            }
            var created = createFiberFromElement(element, returnFiber.mode, lanes);
            created.ref = coerceRef(returnFiber, current2, element);
            created.return = returnFiber;
            return created;
          }
          function updatePortal(returnFiber, current2, portal, lanes) {
            if (current2 === null || current2.tag !== HostPortal || current2.stateNode.containerInfo !== portal.containerInfo || current2.stateNode.implementation !== portal.implementation) {
              var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, portal.children || []);
              existing.return = returnFiber;
              return existing;
            }
          }
          function updateFragment2(returnFiber, current2, fragment, lanes, key) {
            if (current2 === null || current2.tag !== Fragment6) {
              var created = createFiberFromFragment(fragment, returnFiber.mode, lanes, key);
              created.return = returnFiber;
              return created;
            } else {
              var existing = useFiber(current2, fragment);
              existing.return = returnFiber;
              return existing;
            }
          }
          function createChild(returnFiber, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var created = createFiberFromText("" + newChild, returnFiber.mode, lanes);
              created.return = returnFiber;
              return created;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _created = createFiberFromElement(newChild, returnFiber.mode, lanes);
                  _created.ref = coerceRef(returnFiber, null, newChild);
                  _created.return = returnFiber;
                  return _created;
                }
                case REACT_PORTAL_TYPE: {
                  var _created2 = createFiberFromPortal(newChild, returnFiber.mode, lanes);
                  _created2.return = returnFiber;
                  return _created2;
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return createChild(returnFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _created3 = createFiberFromFragment(newChild, returnFiber.mode, lanes, null);
                _created3.return = returnFiber;
                return _created3;
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateSlot(returnFiber, oldFiber, newChild, lanes) {
            var key = oldFiber !== null ? oldFiber.key : null;
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              if (key !== null) {
                return null;
              }
              return updateTextNode(returnFiber, oldFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  if (newChild.key === key) {
                    return updateElement(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_PORTAL_TYPE: {
                  if (newChild.key === key) {
                    return updatePortal(returnFiber, oldFiber, newChild, lanes);
                  } else {
                    return null;
                  }
                }
                case REACT_LAZY_TYPE: {
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateSlot(returnFiber, oldFiber, init(payload), lanes);
                }
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                if (key !== null) {
                  return null;
                }
                return updateFragment2(returnFiber, oldFiber, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function updateFromMap(existingChildren, returnFiber, newIdx, newChild, lanes) {
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              var matchedFiber = existingChildren.get(newIdx) || null;
              return updateTextNode(returnFiber, matchedFiber, "" + newChild, lanes);
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE: {
                  var _matchedFiber = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updateElement(returnFiber, _matchedFiber, newChild, lanes);
                }
                case REACT_PORTAL_TYPE: {
                  var _matchedFiber2 = existingChildren.get(newChild.key === null ? newIdx : newChild.key) || null;
                  return updatePortal(returnFiber, _matchedFiber2, newChild, lanes);
                }
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return updateFromMap(existingChildren, returnFiber, newIdx, init(payload), lanes);
              }
              if (isArray(newChild) || getIteratorFn(newChild)) {
                var _matchedFiber3 = existingChildren.get(newIdx) || null;
                return updateFragment2(returnFiber, _matchedFiber3, newChild, lanes, null);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return null;
          }
          function warnOnInvalidKey(child, knownKeys, returnFiber) {
            {
              if (typeof child !== "object" || child === null) {
                return knownKeys;
              }
              switch (child.$$typeof) {
                case REACT_ELEMENT_TYPE:
                case REACT_PORTAL_TYPE:
                  warnForMissingKey(child, returnFiber);
                  var key = child.key;
                  if (typeof key !== "string") {
                    break;
                  }
                  if (knownKeys === null) {
                    knownKeys = /* @__PURE__ */ new Set();
                    knownKeys.add(key);
                    break;
                  }
                  if (!knownKeys.has(key)) {
                    knownKeys.add(key);
                    break;
                  }
                  error("Encountered two children with the same key, `%s`. Keys should be unique so that components maintain their identity across updates. Non-unique keys may cause children to be duplicated and/or omitted — the behavior is unsupported and could change in a future version.", key);
                  break;
                case REACT_LAZY_TYPE:
                  var payload = child._payload;
                  var init = child._init;
                  warnOnInvalidKey(init(payload), knownKeys, returnFiber);
                  break;
              }
            }
            return knownKeys;
          }
          function reconcileChildrenArray(returnFiber, currentFirstChild, newChildren, lanes) {
            {
              var knownKeys = null;
              for (var i = 0; i < newChildren.length; i++) {
                var child = newChildren[i];
                knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
              }
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            for (; oldFiber !== null && newIdx < newChildren.length; newIdx++) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, newChildren[newIdx], lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (newIdx === newChildren.length) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; newIdx < newChildren.length; newIdx++) {
                var _newFiber = createChild(returnFiber, newChildren[newIdx], lanes);
                if (_newFiber === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber;
                } else {
                  previousNewFiber.sibling = _newFiber;
                }
                previousNewFiber = _newFiber;
              }
              if (getIsHydrating()) {
                var _numberOfForks = newIdx;
                pushTreeFork(returnFiber, _numberOfForks);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; newIdx < newChildren.length; newIdx++) {
              var _newFiber2 = updateFromMap(existingChildren, returnFiber, newIdx, newChildren[newIdx], lanes);
              if (_newFiber2 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber2.alternate !== null) {
                    existingChildren.delete(_newFiber2.key === null ? newIdx : _newFiber2.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber2, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber2;
                } else {
                  previousNewFiber.sibling = _newFiber2;
                }
                previousNewFiber = _newFiber2;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks2 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks2);
            }
            return resultingFirstChild;
          }
          function reconcileChildrenIterator(returnFiber, currentFirstChild, newChildrenIterable, lanes) {
            var iteratorFn = getIteratorFn(newChildrenIterable);
            if (typeof iteratorFn !== "function") {
              throw new Error("An object is not an iterable. This error is likely caused by a bug in React. Please file an issue.");
            }
            {
              if (typeof Symbol === "function" && // $FlowFixMe Flow doesn't know about toStringTag
              newChildrenIterable[Symbol.toStringTag] === "Generator") {
                if (!didWarnAboutGenerators) {
                  error("Using Generators as children is unsupported and will likely yield unexpected results because enumerating a generator mutates it. You may convert it to an array with `Array.from()` or the `[...spread]` operator before rendering. Keep in mind you might need to polyfill these features for older browsers.");
                }
                didWarnAboutGenerators = true;
              }
              if (newChildrenIterable.entries === iteratorFn) {
                if (!didWarnAboutMaps) {
                  error("Using Maps as children is not supported. Use an array of keyed ReactElements instead.");
                }
                didWarnAboutMaps = true;
              }
              var _newChildren = iteratorFn.call(newChildrenIterable);
              if (_newChildren) {
                var knownKeys = null;
                var _step = _newChildren.next();
                for (; !_step.done; _step = _newChildren.next()) {
                  var child = _step.value;
                  knownKeys = warnOnInvalidKey(child, knownKeys, returnFiber);
                }
              }
            }
            var newChildren = iteratorFn.call(newChildrenIterable);
            if (newChildren == null) {
              throw new Error("An iterable object provided no iterator.");
            }
            var resultingFirstChild = null;
            var previousNewFiber = null;
            var oldFiber = currentFirstChild;
            var lastPlacedIndex = 0;
            var newIdx = 0;
            var nextOldFiber = null;
            var step = newChildren.next();
            for (; oldFiber !== null && !step.done; newIdx++, step = newChildren.next()) {
              if (oldFiber.index > newIdx) {
                nextOldFiber = oldFiber;
                oldFiber = null;
              } else {
                nextOldFiber = oldFiber.sibling;
              }
              var newFiber = updateSlot(returnFiber, oldFiber, step.value, lanes);
              if (newFiber === null) {
                if (oldFiber === null) {
                  oldFiber = nextOldFiber;
                }
                break;
              }
              if (shouldTrackSideEffects) {
                if (oldFiber && newFiber.alternate === null) {
                  deleteChild(returnFiber, oldFiber);
                }
              }
              lastPlacedIndex = placeChild(newFiber, lastPlacedIndex, newIdx);
              if (previousNewFiber === null) {
                resultingFirstChild = newFiber;
              } else {
                previousNewFiber.sibling = newFiber;
              }
              previousNewFiber = newFiber;
              oldFiber = nextOldFiber;
            }
            if (step.done) {
              deleteRemainingChildren(returnFiber, oldFiber);
              if (getIsHydrating()) {
                var numberOfForks = newIdx;
                pushTreeFork(returnFiber, numberOfForks);
              }
              return resultingFirstChild;
            }
            if (oldFiber === null) {
              for (; !step.done; newIdx++, step = newChildren.next()) {
                var _newFiber3 = createChild(returnFiber, step.value, lanes);
                if (_newFiber3 === null) {
                  continue;
                }
                lastPlacedIndex = placeChild(_newFiber3, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber3;
                } else {
                  previousNewFiber.sibling = _newFiber3;
                }
                previousNewFiber = _newFiber3;
              }
              if (getIsHydrating()) {
                var _numberOfForks3 = newIdx;
                pushTreeFork(returnFiber, _numberOfForks3);
              }
              return resultingFirstChild;
            }
            var existingChildren = mapRemainingChildren(returnFiber, oldFiber);
            for (; !step.done; newIdx++, step = newChildren.next()) {
              var _newFiber4 = updateFromMap(existingChildren, returnFiber, newIdx, step.value, lanes);
              if (_newFiber4 !== null) {
                if (shouldTrackSideEffects) {
                  if (_newFiber4.alternate !== null) {
                    existingChildren.delete(_newFiber4.key === null ? newIdx : _newFiber4.key);
                  }
                }
                lastPlacedIndex = placeChild(_newFiber4, lastPlacedIndex, newIdx);
                if (previousNewFiber === null) {
                  resultingFirstChild = _newFiber4;
                } else {
                  previousNewFiber.sibling = _newFiber4;
                }
                previousNewFiber = _newFiber4;
              }
            }
            if (shouldTrackSideEffects) {
              existingChildren.forEach(function(child2) {
                return deleteChild(returnFiber, child2);
              });
            }
            if (getIsHydrating()) {
              var _numberOfForks4 = newIdx;
              pushTreeFork(returnFiber, _numberOfForks4);
            }
            return resultingFirstChild;
          }
          function reconcileSingleTextNode(returnFiber, currentFirstChild, textContent, lanes) {
            if (currentFirstChild !== null && currentFirstChild.tag === HostText) {
              deleteRemainingChildren(returnFiber, currentFirstChild.sibling);
              var existing = useFiber(currentFirstChild, textContent);
              existing.return = returnFiber;
              return existing;
            }
            deleteRemainingChildren(returnFiber, currentFirstChild);
            var created = createFiberFromText(textContent, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileSingleElement(returnFiber, currentFirstChild, element, lanes) {
            var key = element.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                var elementType = element.type;
                if (elementType === REACT_FRAGMENT_TYPE) {
                  if (child.tag === Fragment6) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var existing = useFiber(child, element.props.children);
                    existing.return = returnFiber;
                    {
                      existing._debugSource = element._source;
                      existing._debugOwner = element._owner;
                    }
                    return existing;
                  }
                } else {
                  if (child.elementType === elementType || // Keep this check inline so it only runs on the false path:
                  isCompatibleFamilyForHotReloading(child, element) || // Lazy types should reconcile their resolved type.
                  // We need to do this after the Hot Reloading check above,
                  // because hot reloading has different semantics than prod because
                  // it doesn't resuspend. So we can't let the call below suspend.
                  typeof elementType === "object" && elementType !== null && elementType.$$typeof === REACT_LAZY_TYPE && resolveLazy(elementType) === child.type) {
                    deleteRemainingChildren(returnFiber, child.sibling);
                    var _existing = useFiber(child, element.props);
                    _existing.ref = coerceRef(returnFiber, child, element);
                    _existing.return = returnFiber;
                    {
                      _existing._debugSource = element._source;
                      _existing._debugOwner = element._owner;
                    }
                    return _existing;
                  }
                }
                deleteRemainingChildren(returnFiber, child);
                break;
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            if (element.type === REACT_FRAGMENT_TYPE) {
              var created = createFiberFromFragment(element.props.children, returnFiber.mode, lanes, element.key);
              created.return = returnFiber;
              return created;
            } else {
              var _created4 = createFiberFromElement(element, returnFiber.mode, lanes);
              _created4.ref = coerceRef(returnFiber, currentFirstChild, element);
              _created4.return = returnFiber;
              return _created4;
            }
          }
          function reconcileSinglePortal(returnFiber, currentFirstChild, portal, lanes) {
            var key = portal.key;
            var child = currentFirstChild;
            while (child !== null) {
              if (child.key === key) {
                if (child.tag === HostPortal && child.stateNode.containerInfo === portal.containerInfo && child.stateNode.implementation === portal.implementation) {
                  deleteRemainingChildren(returnFiber, child.sibling);
                  var existing = useFiber(child, portal.children || []);
                  existing.return = returnFiber;
                  return existing;
                } else {
                  deleteRemainingChildren(returnFiber, child);
                  break;
                }
              } else {
                deleteChild(returnFiber, child);
              }
              child = child.sibling;
            }
            var created = createFiberFromPortal(portal, returnFiber.mode, lanes);
            created.return = returnFiber;
            return created;
          }
          function reconcileChildFibers2(returnFiber, currentFirstChild, newChild, lanes) {
            var isUnkeyedTopLevelFragment = typeof newChild === "object" && newChild !== null && newChild.type === REACT_FRAGMENT_TYPE && newChild.key === null;
            if (isUnkeyedTopLevelFragment) {
              newChild = newChild.props.children;
            }
            if (typeof newChild === "object" && newChild !== null) {
              switch (newChild.$$typeof) {
                case REACT_ELEMENT_TYPE:
                  return placeSingleChild(reconcileSingleElement(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_PORTAL_TYPE:
                  return placeSingleChild(reconcileSinglePortal(returnFiber, currentFirstChild, newChild, lanes));
                case REACT_LAZY_TYPE:
                  var payload = newChild._payload;
                  var init = newChild._init;
                  return reconcileChildFibers2(returnFiber, currentFirstChild, init(payload), lanes);
              }
              if (isArray(newChild)) {
                return reconcileChildrenArray(returnFiber, currentFirstChild, newChild, lanes);
              }
              if (getIteratorFn(newChild)) {
                return reconcileChildrenIterator(returnFiber, currentFirstChild, newChild, lanes);
              }
              throwOnInvalidObjectType(returnFiber, newChild);
            }
            if (typeof newChild === "string" && newChild !== "" || typeof newChild === "number") {
              return placeSingleChild(reconcileSingleTextNode(returnFiber, currentFirstChild, "" + newChild, lanes));
            }
            {
              if (typeof newChild === "function") {
                warnOnFunctionType(returnFiber);
              }
            }
            return deleteRemainingChildren(returnFiber, currentFirstChild);
          }
          return reconcileChildFibers2;
        }
        var reconcileChildFibers = ChildReconciler(true);
        var mountChildFibers = ChildReconciler(false);
        function cloneChildFibers(current2, workInProgress2) {
          if (current2 !== null && workInProgress2.child !== current2.child) {
            throw new Error("Resuming work not yet implemented.");
          }
          if (workInProgress2.child === null) {
            return;
          }
          var currentChild = workInProgress2.child;
          var newChild = createWorkInProgress(currentChild, currentChild.pendingProps);
          workInProgress2.child = newChild;
          newChild.return = workInProgress2;
          while (currentChild.sibling !== null) {
            currentChild = currentChild.sibling;
            newChild = newChild.sibling = createWorkInProgress(currentChild, currentChild.pendingProps);
            newChild.return = workInProgress2;
          }
          newChild.sibling = null;
        }
        function resetChildFibers(workInProgress2, lanes) {
          var child = workInProgress2.child;
          while (child !== null) {
            resetWorkInProgress(child, lanes);
            child = child.sibling;
          }
        }
        var valueCursor = createCursor(null);
        var rendererSigil;
        {
          rendererSigil = {};
        }
        var currentlyRenderingFiber = null;
        var lastContextDependency = null;
        var lastFullyObservedContext = null;
        var isDisallowedContextReadInDEV = false;
        function resetContextDependencies() {
          currentlyRenderingFiber = null;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function enterDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = true;
          }
        }
        function exitDisallowedContextReadInDEV() {
          {
            isDisallowedContextReadInDEV = false;
          }
        }
        function pushProvider(providerFiber, context, nextValue) {
          {
            push(valueCursor, context._currentValue, providerFiber);
            context._currentValue = nextValue;
            {
              if (context._currentRenderer !== void 0 && context._currentRenderer !== null && context._currentRenderer !== rendererSigil) {
                error("Detected multiple renderers concurrently rendering the same context provider. This is currently unsupported.");
              }
              context._currentRenderer = rendererSigil;
            }
          }
        }
        function popProvider(context, providerFiber) {
          var currentValue = valueCursor.current;
          pop(valueCursor, providerFiber);
          {
            {
              context._currentValue = currentValue;
            }
          }
        }
        function scheduleContextWorkOnParentPath(parent, renderLanes2, propagationRoot) {
          var node = parent;
          while (node !== null) {
            var alternate = node.alternate;
            if (!isSubsetOfLanes(node.childLanes, renderLanes2)) {
              node.childLanes = mergeLanes(node.childLanes, renderLanes2);
              if (alternate !== null) {
                alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
              }
            } else if (alternate !== null && !isSubsetOfLanes(alternate.childLanes, renderLanes2)) {
              alternate.childLanes = mergeLanes(alternate.childLanes, renderLanes2);
            }
            if (node === propagationRoot) {
              break;
            }
            node = node.return;
          }
          {
            if (node !== propagationRoot) {
              error("Expected to find the propagation root when scheduling context work. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
        }
        function propagateContextChange(workInProgress2, context, renderLanes2) {
          {
            propagateContextChange_eager(workInProgress2, context, renderLanes2);
          }
        }
        function propagateContextChange_eager(workInProgress2, context, renderLanes2) {
          var fiber = workInProgress2.child;
          if (fiber !== null) {
            fiber.return = workInProgress2;
          }
          while (fiber !== null) {
            var nextFiber = void 0;
            var list = fiber.dependencies;
            if (list !== null) {
              nextFiber = fiber.child;
              var dependency = list.firstContext;
              while (dependency !== null) {
                if (dependency.context === context) {
                  if (fiber.tag === ClassComponent) {
                    var lane = pickArbitraryLane(renderLanes2);
                    var update = createUpdate(NoTimestamp, lane);
                    update.tag = ForceUpdate;
                    var updateQueue = fiber.updateQueue;
                    if (updateQueue === null) ;
                    else {
                      var sharedQueue = updateQueue.shared;
                      var pending = sharedQueue.pending;
                      if (pending === null) {
                        update.next = update;
                      } else {
                        update.next = pending.next;
                        pending.next = update;
                      }
                      sharedQueue.pending = update;
                    }
                  }
                  fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
                  var alternate = fiber.alternate;
                  if (alternate !== null) {
                    alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
                  }
                  scheduleContextWorkOnParentPath(fiber.return, renderLanes2, workInProgress2);
                  list.lanes = mergeLanes(list.lanes, renderLanes2);
                  break;
                }
                dependency = dependency.next;
              }
            } else if (fiber.tag === ContextProvider) {
              nextFiber = fiber.type === workInProgress2.type ? null : fiber.child;
            } else if (fiber.tag === DehydratedFragment) {
              var parentSuspense = fiber.return;
              if (parentSuspense === null) {
                throw new Error("We just came from a parent so we must have had a parent. This is a bug in React.");
              }
              parentSuspense.lanes = mergeLanes(parentSuspense.lanes, renderLanes2);
              var _alternate = parentSuspense.alternate;
              if (_alternate !== null) {
                _alternate.lanes = mergeLanes(_alternate.lanes, renderLanes2);
              }
              scheduleContextWorkOnParentPath(parentSuspense, renderLanes2, workInProgress2);
              nextFiber = fiber.sibling;
            } else {
              nextFiber = fiber.child;
            }
            if (nextFiber !== null) {
              nextFiber.return = fiber;
            } else {
              nextFiber = fiber;
              while (nextFiber !== null) {
                if (nextFiber === workInProgress2) {
                  nextFiber = null;
                  break;
                }
                var sibling = nextFiber.sibling;
                if (sibling !== null) {
                  sibling.return = nextFiber.return;
                  nextFiber = sibling;
                  break;
                }
                nextFiber = nextFiber.return;
              }
            }
            fiber = nextFiber;
          }
        }
        function prepareToReadContext(workInProgress2, renderLanes2) {
          currentlyRenderingFiber = workInProgress2;
          lastContextDependency = null;
          lastFullyObservedContext = null;
          var dependencies = workInProgress2.dependencies;
          if (dependencies !== null) {
            {
              var firstContext = dependencies.firstContext;
              if (firstContext !== null) {
                if (includesSomeLane(dependencies.lanes, renderLanes2)) {
                  markWorkInProgressReceivedUpdate();
                }
                dependencies.firstContext = null;
              }
            }
          }
        }
        function readContext(context) {
          {
            if (isDisallowedContextReadInDEV) {
              error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
            }
          }
          var value = context._currentValue;
          if (lastFullyObservedContext === context) ;
          else {
            var contextItem = {
              context,
              memoizedValue: value,
              next: null
            };
            if (lastContextDependency === null) {
              if (currentlyRenderingFiber === null) {
                throw new Error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
              }
              lastContextDependency = contextItem;
              currentlyRenderingFiber.dependencies = {
                lanes: NoLanes,
                firstContext: contextItem
              };
            } else {
              lastContextDependency = lastContextDependency.next = contextItem;
            }
          }
          return value;
        }
        var concurrentQueues = null;
        function pushConcurrentUpdateQueue(queue) {
          if (concurrentQueues === null) {
            concurrentQueues = [queue];
          } else {
            concurrentQueues.push(queue);
          }
        }
        function finishQueueingConcurrentUpdates() {
          if (concurrentQueues !== null) {
            for (var i = 0; i < concurrentQueues.length; i++) {
              var queue = concurrentQueues[i];
              var lastInterleavedUpdate = queue.interleaved;
              if (lastInterleavedUpdate !== null) {
                queue.interleaved = null;
                var firstInterleavedUpdate = lastInterleavedUpdate.next;
                var lastPendingUpdate = queue.pending;
                if (lastPendingUpdate !== null) {
                  var firstPendingUpdate = lastPendingUpdate.next;
                  lastPendingUpdate.next = firstInterleavedUpdate;
                  lastInterleavedUpdate.next = firstPendingUpdate;
                }
                queue.pending = lastInterleavedUpdate;
              }
            }
            concurrentQueues = null;
          }
        }
        function enqueueConcurrentHookUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
        }
        function enqueueConcurrentClassUpdate(fiber, queue, update, lane) {
          var interleaved = queue.interleaved;
          if (interleaved === null) {
            update.next = update;
            pushConcurrentUpdateQueue(queue);
          } else {
            update.next = interleaved.next;
            interleaved.next = update;
          }
          queue.interleaved = update;
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        function enqueueConcurrentRenderForLane(fiber, lane) {
          return markUpdateLaneFromFiberToRoot(fiber, lane);
        }
        var unsafe_markUpdateLaneFromFiberToRoot = markUpdateLaneFromFiberToRoot;
        function markUpdateLaneFromFiberToRoot(sourceFiber, lane) {
          sourceFiber.lanes = mergeLanes(sourceFiber.lanes, lane);
          var alternate = sourceFiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, lane);
          }
          {
            if (alternate === null && (sourceFiber.flags & (Placement | Hydrating)) !== NoFlags) {
              warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
            }
          }
          var node = sourceFiber;
          var parent = sourceFiber.return;
          while (parent !== null) {
            parent.childLanes = mergeLanes(parent.childLanes, lane);
            alternate = parent.alternate;
            if (alternate !== null) {
              alternate.childLanes = mergeLanes(alternate.childLanes, lane);
            } else {
              {
                if ((parent.flags & (Placement | Hydrating)) !== NoFlags) {
                  warnAboutUpdateOnNotYetMountedFiberInDEV(sourceFiber);
                }
              }
            }
            node = parent;
            parent = parent.return;
          }
          if (node.tag === HostRoot) {
            var root2 = node.stateNode;
            return root2;
          } else {
            return null;
          }
        }
        var UpdateState = 0;
        var ReplaceState = 1;
        var ForceUpdate = 2;
        var CaptureUpdate = 3;
        var hasForceUpdate = false;
        var didWarnUpdateInsideUpdate;
        var currentlyProcessingQueue;
        {
          didWarnUpdateInsideUpdate = false;
          currentlyProcessingQueue = null;
        }
        function initializeUpdateQueue(fiber) {
          var queue = {
            baseState: fiber.memoizedState,
            firstBaseUpdate: null,
            lastBaseUpdate: null,
            shared: {
              pending: null,
              interleaved: null,
              lanes: NoLanes
            },
            effects: null
          };
          fiber.updateQueue = queue;
        }
        function cloneUpdateQueue(current2, workInProgress2) {
          var queue = workInProgress2.updateQueue;
          var currentQueue = current2.updateQueue;
          if (queue === currentQueue) {
            var clone = {
              baseState: currentQueue.baseState,
              firstBaseUpdate: currentQueue.firstBaseUpdate,
              lastBaseUpdate: currentQueue.lastBaseUpdate,
              shared: currentQueue.shared,
              effects: currentQueue.effects
            };
            workInProgress2.updateQueue = clone;
          }
        }
        function createUpdate(eventTime, lane) {
          var update = {
            eventTime,
            lane,
            tag: UpdateState,
            payload: null,
            callback: null,
            next: null
          };
          return update;
        }
        function enqueueUpdate(fiber, update, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return null;
          }
          var sharedQueue = updateQueue.shared;
          {
            if (currentlyProcessingQueue === sharedQueue && !didWarnUpdateInsideUpdate) {
              error("An update (setState, replaceState, or forceUpdate) was scheduled from inside an update function. Update functions should be pure, with zero side-effects. Consider using componentDidUpdate or a callback.");
              didWarnUpdateInsideUpdate = true;
            }
          }
          if (isUnsafeClassRenderPhaseUpdate()) {
            var pending = sharedQueue.pending;
            if (pending === null) {
              update.next = update;
            } else {
              update.next = pending.next;
              pending.next = update;
            }
            sharedQueue.pending = update;
            return unsafe_markUpdateLaneFromFiberToRoot(fiber, lane);
          } else {
            return enqueueConcurrentClassUpdate(fiber, sharedQueue, update, lane);
          }
        }
        function entangleTransitions(root2, fiber, lane) {
          var updateQueue = fiber.updateQueue;
          if (updateQueue === null) {
            return;
          }
          var sharedQueue = updateQueue.shared;
          if (isTransitionLane(lane)) {
            var queueLanes = sharedQueue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            sharedQueue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function enqueueCapturedUpdate(workInProgress2, capturedUpdate) {
          var queue = workInProgress2.updateQueue;
          var current2 = workInProgress2.alternate;
          if (current2 !== null) {
            var currentQueue = current2.updateQueue;
            if (queue === currentQueue) {
              var newFirst = null;
              var newLast = null;
              var firstBaseUpdate = queue.firstBaseUpdate;
              if (firstBaseUpdate !== null) {
                var update = firstBaseUpdate;
                do {
                  var clone = {
                    eventTime: update.eventTime,
                    lane: update.lane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  if (newLast === null) {
                    newFirst = newLast = clone;
                  } else {
                    newLast.next = clone;
                    newLast = clone;
                  }
                  update = update.next;
                } while (update !== null);
                if (newLast === null) {
                  newFirst = newLast = capturedUpdate;
                } else {
                  newLast.next = capturedUpdate;
                  newLast = capturedUpdate;
                }
              } else {
                newFirst = newLast = capturedUpdate;
              }
              queue = {
                baseState: currentQueue.baseState,
                firstBaseUpdate: newFirst,
                lastBaseUpdate: newLast,
                shared: currentQueue.shared,
                effects: currentQueue.effects
              };
              workInProgress2.updateQueue = queue;
              return;
            }
          }
          var lastBaseUpdate = queue.lastBaseUpdate;
          if (lastBaseUpdate === null) {
            queue.firstBaseUpdate = capturedUpdate;
          } else {
            lastBaseUpdate.next = capturedUpdate;
          }
          queue.lastBaseUpdate = capturedUpdate;
        }
        function getStateFromUpdate(workInProgress2, queue, update, prevState, nextProps, instance) {
          switch (update.tag) {
            case ReplaceState: {
              var payload = update.payload;
              if (typeof payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                var nextState = payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
                return nextState;
              }
              return payload;
            }
            case CaptureUpdate: {
              workInProgress2.flags = workInProgress2.flags & ~ShouldCapture | DidCapture;
            }
            // Intentional fallthrough
            case UpdateState: {
              var _payload = update.payload;
              var partialState;
              if (typeof _payload === "function") {
                {
                  enterDisallowedContextReadInDEV();
                }
                partialState = _payload.call(instance, prevState, nextProps);
                {
                  if (workInProgress2.mode & StrictLegacyMode) {
                    setIsStrictModeForDevtools(true);
                    try {
                      _payload.call(instance, prevState, nextProps);
                    } finally {
                      setIsStrictModeForDevtools(false);
                    }
                  }
                  exitDisallowedContextReadInDEV();
                }
              } else {
                partialState = _payload;
              }
              if (partialState === null || partialState === void 0) {
                return prevState;
              }
              return assign({}, prevState, partialState);
            }
            case ForceUpdate: {
              hasForceUpdate = true;
              return prevState;
            }
          }
          return prevState;
        }
        function processUpdateQueue(workInProgress2, props, instance, renderLanes2) {
          var queue = workInProgress2.updateQueue;
          hasForceUpdate = false;
          {
            currentlyProcessingQueue = queue.shared;
          }
          var firstBaseUpdate = queue.firstBaseUpdate;
          var lastBaseUpdate = queue.lastBaseUpdate;
          var pendingQueue = queue.shared.pending;
          if (pendingQueue !== null) {
            queue.shared.pending = null;
            var lastPendingUpdate = pendingQueue;
            var firstPendingUpdate = lastPendingUpdate.next;
            lastPendingUpdate.next = null;
            if (lastBaseUpdate === null) {
              firstBaseUpdate = firstPendingUpdate;
            } else {
              lastBaseUpdate.next = firstPendingUpdate;
            }
            lastBaseUpdate = lastPendingUpdate;
            var current2 = workInProgress2.alternate;
            if (current2 !== null) {
              var currentQueue = current2.updateQueue;
              var currentLastBaseUpdate = currentQueue.lastBaseUpdate;
              if (currentLastBaseUpdate !== lastBaseUpdate) {
                if (currentLastBaseUpdate === null) {
                  currentQueue.firstBaseUpdate = firstPendingUpdate;
                } else {
                  currentLastBaseUpdate.next = firstPendingUpdate;
                }
                currentQueue.lastBaseUpdate = lastPendingUpdate;
              }
            }
          }
          if (firstBaseUpdate !== null) {
            var newState = queue.baseState;
            var newLanes = NoLanes;
            var newBaseState = null;
            var newFirstBaseUpdate = null;
            var newLastBaseUpdate = null;
            var update = firstBaseUpdate;
            do {
              var updateLane = update.lane;
              var updateEventTime = update.eventTime;
              if (!isSubsetOfLanes(renderLanes2, updateLane)) {
                var clone = {
                  eventTime: updateEventTime,
                  lane: updateLane,
                  tag: update.tag,
                  payload: update.payload,
                  callback: update.callback,
                  next: null
                };
                if (newLastBaseUpdate === null) {
                  newFirstBaseUpdate = newLastBaseUpdate = clone;
                  newBaseState = newState;
                } else {
                  newLastBaseUpdate = newLastBaseUpdate.next = clone;
                }
                newLanes = mergeLanes(newLanes, updateLane);
              } else {
                if (newLastBaseUpdate !== null) {
                  var _clone = {
                    eventTime: updateEventTime,
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    tag: update.tag,
                    payload: update.payload,
                    callback: update.callback,
                    next: null
                  };
                  newLastBaseUpdate = newLastBaseUpdate.next = _clone;
                }
                newState = getStateFromUpdate(workInProgress2, queue, update, newState, props, instance);
                var callback = update.callback;
                if (callback !== null && // If the update was already committed, we should not queue its
                // callback again.
                update.lane !== NoLane) {
                  workInProgress2.flags |= Callback;
                  var effects = queue.effects;
                  if (effects === null) {
                    queue.effects = [update];
                  } else {
                    effects.push(update);
                  }
                }
              }
              update = update.next;
              if (update === null) {
                pendingQueue = queue.shared.pending;
                if (pendingQueue === null) {
                  break;
                } else {
                  var _lastPendingUpdate = pendingQueue;
                  var _firstPendingUpdate = _lastPendingUpdate.next;
                  _lastPendingUpdate.next = null;
                  update = _firstPendingUpdate;
                  queue.lastBaseUpdate = _lastPendingUpdate;
                  queue.shared.pending = null;
                }
              }
            } while (true);
            if (newLastBaseUpdate === null) {
              newBaseState = newState;
            }
            queue.baseState = newBaseState;
            queue.firstBaseUpdate = newFirstBaseUpdate;
            queue.lastBaseUpdate = newLastBaseUpdate;
            var lastInterleaved = queue.shared.interleaved;
            if (lastInterleaved !== null) {
              var interleaved = lastInterleaved;
              do {
                newLanes = mergeLanes(newLanes, interleaved.lane);
                interleaved = interleaved.next;
              } while (interleaved !== lastInterleaved);
            } else if (firstBaseUpdate === null) {
              queue.shared.lanes = NoLanes;
            }
            markSkippedUpdateLanes(newLanes);
            workInProgress2.lanes = newLanes;
            workInProgress2.memoizedState = newState;
          }
          {
            currentlyProcessingQueue = null;
          }
        }
        function callCallback(callback, context) {
          if (typeof callback !== "function") {
            throw new Error("Invalid argument passed as callback. Expected a function. Instead " + ("received: " + callback));
          }
          callback.call(context);
        }
        function resetHasForceUpdateBeforeProcessing() {
          hasForceUpdate = false;
        }
        function checkHasForceUpdateAfterProcessing() {
          return hasForceUpdate;
        }
        function commitUpdateQueue(finishedWork, finishedQueue, instance) {
          var effects = finishedQueue.effects;
          finishedQueue.effects = null;
          if (effects !== null) {
            for (var i = 0; i < effects.length; i++) {
              var effect = effects[i];
              var callback = effect.callback;
              if (callback !== null) {
                effect.callback = null;
                callCallback(callback, instance);
              }
            }
          }
        }
        var NO_CONTEXT = {};
        var contextStackCursor$1 = createCursor(NO_CONTEXT);
        var contextFiberStackCursor = createCursor(NO_CONTEXT);
        var rootInstanceStackCursor = createCursor(NO_CONTEXT);
        function requiredContext(c) {
          if (c === NO_CONTEXT) {
            throw new Error("Expected host context to exist. This error is likely caused by a bug in React. Please file an issue.");
          }
          return c;
        }
        function getRootHostContainer() {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          return rootInstance;
        }
        function pushHostContainer(fiber, nextRootInstance) {
          push(rootInstanceStackCursor, nextRootInstance, fiber);
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, NO_CONTEXT, fiber);
          var nextRootContext = getRootHostContext(nextRootInstance);
          pop(contextStackCursor$1, fiber);
          push(contextStackCursor$1, nextRootContext, fiber);
        }
        function popHostContainer(fiber) {
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
          pop(rootInstanceStackCursor, fiber);
        }
        function getHostContext() {
          var context = requiredContext(contextStackCursor$1.current);
          return context;
        }
        function pushHostContext(fiber) {
          var rootInstance = requiredContext(rootInstanceStackCursor.current);
          var context = requiredContext(contextStackCursor$1.current);
          var nextContext = getChildHostContext(context, fiber.type);
          if (context === nextContext) {
            return;
          }
          push(contextFiberStackCursor, fiber, fiber);
          push(contextStackCursor$1, nextContext, fiber);
        }
        function popHostContext(fiber) {
          if (contextFiberStackCursor.current !== fiber) {
            return;
          }
          pop(contextStackCursor$1, fiber);
          pop(contextFiberStackCursor, fiber);
        }
        var DefaultSuspenseContext = 0;
        var SubtreeSuspenseContextMask = 1;
        var InvisibleParentSuspenseContext = 1;
        var ForceSuspenseFallback = 2;
        var suspenseStackCursor = createCursor(DefaultSuspenseContext);
        function hasSuspenseContext(parentContext, flag) {
          return (parentContext & flag) !== 0;
        }
        function setDefaultShallowSuspenseContext(parentContext) {
          return parentContext & SubtreeSuspenseContextMask;
        }
        function setShallowSuspenseContext(parentContext, shallowContext) {
          return parentContext & SubtreeSuspenseContextMask | shallowContext;
        }
        function addSubtreeSuspenseContext(parentContext, subtreeContext) {
          return parentContext | subtreeContext;
        }
        function pushSuspenseContext(fiber, newContext) {
          push(suspenseStackCursor, newContext, fiber);
        }
        function popSuspenseContext(fiber) {
          pop(suspenseStackCursor, fiber);
        }
        function shouldCaptureSuspense(workInProgress2, hasInvisibleParent) {
          var nextState = workInProgress2.memoizedState;
          if (nextState !== null) {
            if (nextState.dehydrated !== null) {
              return true;
            }
            return false;
          }
          var props = workInProgress2.memoizedProps;
          {
            return true;
          }
        }
        function findFirstSuspended(row) {
          var node = row;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                var dehydrated = state.dehydrated;
                if (dehydrated === null || isSuspenseInstancePending(dehydrated) || isSuspenseInstanceFallback(dehydrated)) {
                  return node;
                }
              }
            } else if (node.tag === SuspenseListComponent && // revealOrder undefined can't be trusted because it don't
            // keep track of whether it suspended or not.
            node.memoizedProps.revealOrder !== void 0) {
              var didSuspend = (node.flags & DidCapture) !== NoFlags;
              if (didSuspend) {
                return node;
              }
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === row) {
              return null;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === row) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return null;
        }
        var NoFlags$1 = (
          /*   */
          0
        );
        var HasEffect = (
          /* */
          1
        );
        var Insertion = (
          /*  */
          2
        );
        var Layout = (
          /*    */
          4
        );
        var Passive$1 = (
          /*   */
          8
        );
        var workInProgressSources = [];
        function resetWorkInProgressVersions() {
          for (var i = 0; i < workInProgressSources.length; i++) {
            var mutableSource = workInProgressSources[i];
            {
              mutableSource._workInProgressVersionPrimary = null;
            }
          }
          workInProgressSources.length = 0;
        }
        function registerMutableSourceForHydration(root2, mutableSource) {
          var getVersion = mutableSource._getVersion;
          var version = getVersion(mutableSource._source);
          if (root2.mutableSourceEagerHydrationData == null) {
            root2.mutableSourceEagerHydrationData = [mutableSource, version];
          } else {
            root2.mutableSourceEagerHydrationData.push(mutableSource, version);
          }
        }
        var ReactCurrentDispatcher$1 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentBatchConfig$2 = ReactSharedInternals.ReactCurrentBatchConfig;
        var didWarnAboutMismatchedHooksForComponent;
        var didWarnUncachedGetSnapshot;
        {
          didWarnAboutMismatchedHooksForComponent = /* @__PURE__ */ new Set();
        }
        var renderLanes = NoLanes;
        var currentlyRenderingFiber$1 = null;
        var currentHook = null;
        var workInProgressHook = null;
        var didScheduleRenderPhaseUpdate = false;
        var didScheduleRenderPhaseUpdateDuringThisPass = false;
        var localIdCounter = 0;
        var globalClientIdCounter = 0;
        var RE_RENDER_LIMIT = 25;
        var currentHookNameInDev = null;
        var hookTypesDev = null;
        var hookTypesUpdateIndexDev = -1;
        var ignorePreviousDependencies = false;
        function mountHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev === null) {
              hookTypesDev = [hookName];
            } else {
              hookTypesDev.push(hookName);
            }
          }
        }
        function updateHookTypesDev() {
          {
            var hookName = currentHookNameInDev;
            if (hookTypesDev !== null) {
              hookTypesUpdateIndexDev++;
              if (hookTypesDev[hookTypesUpdateIndexDev] !== hookName) {
                warnOnHookMismatchInDev(hookName);
              }
            }
          }
        }
        function checkDepsAreArrayDev(deps) {
          {
            if (deps !== void 0 && deps !== null && !isArray(deps)) {
              error("%s received a final argument that is not an array (instead, received `%s`). When specified, the final argument must be an array.", currentHookNameInDev, typeof deps);
            }
          }
        }
        function warnOnHookMismatchInDev(currentHookName) {
          {
            var componentName = getComponentNameFromFiber(currentlyRenderingFiber$1);
            if (!didWarnAboutMismatchedHooksForComponent.has(componentName)) {
              didWarnAboutMismatchedHooksForComponent.add(componentName);
              if (hookTypesDev !== null) {
                var table = "";
                var secondColumnStart = 30;
                for (var i = 0; i <= hookTypesUpdateIndexDev; i++) {
                  var oldHookName = hookTypesDev[i];
                  var newHookName = i === hookTypesUpdateIndexDev ? currentHookName : oldHookName;
                  var row = i + 1 + ". " + oldHookName;
                  while (row.length < secondColumnStart) {
                    row += " ";
                  }
                  row += newHookName + "\n";
                  table += row;
                }
                error("React has detected a change in the order of Hooks called by %s. This will lead to bugs and errors if not fixed. For more information, read the Rules of Hooks: https://reactjs.org/link/rules-of-hooks\n\n   Previous render            Next render\n   ------------------------------------------------------\n%s   ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^\n", componentName, table);
              }
            }
          }
        }
        function throwInvalidHookError() {
          throw new Error("Invalid hook call. Hooks can only be called inside of the body of a function component. This could happen for one of the following reasons:\n1. You might have mismatching versions of React and the renderer (such as React DOM)\n2. You might be breaking the Rules of Hooks\n3. You might have more than one copy of React in the same app\nSee https://reactjs.org/link/invalid-hook-call for tips about how to debug and fix this problem.");
        }
        function areHookInputsEqual(nextDeps, prevDeps) {
          {
            if (ignorePreviousDependencies) {
              return false;
            }
          }
          if (prevDeps === null) {
            {
              error("%s received a final argument during this render, but not during the previous render. Even though the final argument is optional, its type cannot change between renders.", currentHookNameInDev);
            }
            return false;
          }
          {
            if (nextDeps.length !== prevDeps.length) {
              error("The final argument passed to %s changed size between renders. The order and size of this array must remain constant.\n\nPrevious: %s\nIncoming: %s", currentHookNameInDev, "[" + prevDeps.join(", ") + "]", "[" + nextDeps.join(", ") + "]");
            }
          }
          for (var i = 0; i < prevDeps.length && i < nextDeps.length; i++) {
            if (objectIs(nextDeps[i], prevDeps[i])) {
              continue;
            }
            return false;
          }
          return true;
        }
        function renderWithHooks(current2, workInProgress2, Component, props, secondArg, nextRenderLanes) {
          renderLanes = nextRenderLanes;
          currentlyRenderingFiber$1 = workInProgress2;
          {
            hookTypesDev = current2 !== null ? current2._debugHookTypes : null;
            hookTypesUpdateIndexDev = -1;
            ignorePreviousDependencies = current2 !== null && current2.type !== workInProgress2.type;
          }
          workInProgress2.memoizedState = null;
          workInProgress2.updateQueue = null;
          workInProgress2.lanes = NoLanes;
          {
            if (current2 !== null && current2.memoizedState !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnUpdateInDEV;
            } else if (hookTypesDev !== null) {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountWithHookTypesInDEV;
            } else {
              ReactCurrentDispatcher$1.current = HooksDispatcherOnMountInDEV;
            }
          }
          var children = Component(props, secondArg);
          if (didScheduleRenderPhaseUpdateDuringThisPass) {
            var numberOfReRenders = 0;
            do {
              didScheduleRenderPhaseUpdateDuringThisPass = false;
              localIdCounter = 0;
              if (numberOfReRenders >= RE_RENDER_LIMIT) {
                throw new Error("Too many re-renders. React limits the number of renders to prevent an infinite loop.");
              }
              numberOfReRenders += 1;
              {
                ignorePreviousDependencies = false;
              }
              currentHook = null;
              workInProgressHook = null;
              workInProgress2.updateQueue = null;
              {
                hookTypesUpdateIndexDev = -1;
              }
              ReactCurrentDispatcher$1.current = HooksDispatcherOnRerenderInDEV;
              children = Component(props, secondArg);
            } while (didScheduleRenderPhaseUpdateDuringThisPass);
          }
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          {
            workInProgress2._debugHookTypes = hookTypesDev;
          }
          var didRenderTooFewHooks = currentHook !== null && currentHook.next !== null;
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            currentHookNameInDev = null;
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            if (current2 !== null && (current2.flags & StaticMask) !== (workInProgress2.flags & StaticMask) && // Disable this warning in legacy mode, because legacy Suspense is weird
            // and creates false positives. To make this work in legacy mode, we'd
            // need to mark fibers that commit in an incomplete state, somehow. For
            // now I'll disable the warning that most of the bugs that would trigger
            // it are either exclusive to concurrent mode or exist in both.
            (current2.mode & ConcurrentMode) !== NoMode) {
              error("Internal React error: Expected static flag was missing. Please notify the React team.");
            }
          }
          didScheduleRenderPhaseUpdate = false;
          if (didRenderTooFewHooks) {
            throw new Error("Rendered fewer hooks than expected. This may be caused by an accidental early return statement.");
          }
          return children;
        }
        function checkDidRenderIdHook() {
          var didRenderIdHook = localIdCounter !== 0;
          localIdCounter = 0;
          return didRenderIdHook;
        }
        function bailoutHooks(current2, workInProgress2, lanes) {
          workInProgress2.updateQueue = current2.updateQueue;
          if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
            workInProgress2.flags &= ~(MountPassiveDev | MountLayoutDev | Passive | Update);
          } else {
            workInProgress2.flags &= ~(Passive | Update);
          }
          current2.lanes = removeLanes(current2.lanes, lanes);
        }
        function resetHooksAfterThrow() {
          ReactCurrentDispatcher$1.current = ContextOnlyDispatcher;
          if (didScheduleRenderPhaseUpdate) {
            var hook = currentlyRenderingFiber$1.memoizedState;
            while (hook !== null) {
              var queue = hook.queue;
              if (queue !== null) {
                queue.pending = null;
              }
              hook = hook.next;
            }
            didScheduleRenderPhaseUpdate = false;
          }
          renderLanes = NoLanes;
          currentlyRenderingFiber$1 = null;
          currentHook = null;
          workInProgressHook = null;
          {
            hookTypesDev = null;
            hookTypesUpdateIndexDev = -1;
            currentHookNameInDev = null;
            isUpdatingOpaqueValueInRenderPhase = false;
          }
          didScheduleRenderPhaseUpdateDuringThisPass = false;
          localIdCounter = 0;
        }
        function mountWorkInProgressHook() {
          var hook = {
            memoizedState: null,
            baseState: null,
            baseQueue: null,
            queue: null,
            next: null
          };
          if (workInProgressHook === null) {
            currentlyRenderingFiber$1.memoizedState = workInProgressHook = hook;
          } else {
            workInProgressHook = workInProgressHook.next = hook;
          }
          return workInProgressHook;
        }
        function updateWorkInProgressHook() {
          var nextCurrentHook;
          if (currentHook === null) {
            var current2 = currentlyRenderingFiber$1.alternate;
            if (current2 !== null) {
              nextCurrentHook = current2.memoizedState;
            } else {
              nextCurrentHook = null;
            }
          } else {
            nextCurrentHook = currentHook.next;
          }
          var nextWorkInProgressHook;
          if (workInProgressHook === null) {
            nextWorkInProgressHook = currentlyRenderingFiber$1.memoizedState;
          } else {
            nextWorkInProgressHook = workInProgressHook.next;
          }
          if (nextWorkInProgressHook !== null) {
            workInProgressHook = nextWorkInProgressHook;
            nextWorkInProgressHook = workInProgressHook.next;
            currentHook = nextCurrentHook;
          } else {
            if (nextCurrentHook === null) {
              throw new Error("Rendered more hooks than during the previous render.");
            }
            currentHook = nextCurrentHook;
            var newHook = {
              memoizedState: currentHook.memoizedState,
              baseState: currentHook.baseState,
              baseQueue: currentHook.baseQueue,
              queue: currentHook.queue,
              next: null
            };
            if (workInProgressHook === null) {
              currentlyRenderingFiber$1.memoizedState = workInProgressHook = newHook;
            } else {
              workInProgressHook = workInProgressHook.next = newHook;
            }
          }
          return workInProgressHook;
        }
        function createFunctionComponentUpdateQueue() {
          return {
            lastEffect: null,
            stores: null
          };
        }
        function basicStateReducer(state, action) {
          return typeof action === "function" ? action(state) : action;
        }
        function mountReducer(reducer, initialArg, init) {
          var hook = mountWorkInProgressHook();
          var initialState;
          if (init !== void 0) {
            initialState = init(initialArg);
          } else {
            initialState = initialArg;
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: reducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchReducerAction.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var current2 = currentHook;
          var baseQueue = current2.baseQueue;
          var pendingQueue = queue.pending;
          if (pendingQueue !== null) {
            if (baseQueue !== null) {
              var baseFirst = baseQueue.next;
              var pendingFirst = pendingQueue.next;
              baseQueue.next = pendingFirst;
              pendingQueue.next = baseFirst;
            }
            {
              if (current2.baseQueue !== baseQueue) {
                error("Internal error: Expected work-in-progress queue to be a clone. This is a bug in React.");
              }
            }
            current2.baseQueue = baseQueue = pendingQueue;
            queue.pending = null;
          }
          if (baseQueue !== null) {
            var first = baseQueue.next;
            var newState = current2.baseState;
            var newBaseState = null;
            var newBaseQueueFirst = null;
            var newBaseQueueLast = null;
            var update = first;
            do {
              var updateLane = update.lane;
              if (!isSubsetOfLanes(renderLanes, updateLane)) {
                var clone = {
                  lane: updateLane,
                  action: update.action,
                  hasEagerState: update.hasEagerState,
                  eagerState: update.eagerState,
                  next: null
                };
                if (newBaseQueueLast === null) {
                  newBaseQueueFirst = newBaseQueueLast = clone;
                  newBaseState = newState;
                } else {
                  newBaseQueueLast = newBaseQueueLast.next = clone;
                }
                currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, updateLane);
                markSkippedUpdateLanes(updateLane);
              } else {
                if (newBaseQueueLast !== null) {
                  var _clone = {
                    // This update is going to be committed so we never want uncommit
                    // it. Using NoLane works because 0 is a subset of all bitmasks, so
                    // this will never be skipped by the check above.
                    lane: NoLane,
                    action: update.action,
                    hasEagerState: update.hasEagerState,
                    eagerState: update.eagerState,
                    next: null
                  };
                  newBaseQueueLast = newBaseQueueLast.next = _clone;
                }
                if (update.hasEagerState) {
                  newState = update.eagerState;
                } else {
                  var action = update.action;
                  newState = reducer(newState, action);
                }
              }
              update = update.next;
            } while (update !== null && update !== first);
            if (newBaseQueueLast === null) {
              newBaseState = newState;
            } else {
              newBaseQueueLast.next = newBaseQueueFirst;
            }
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            hook.baseState = newBaseState;
            hook.baseQueue = newBaseQueueLast;
            queue.lastRenderedState = newState;
          }
          var lastInterleaved = queue.interleaved;
          if (lastInterleaved !== null) {
            var interleaved = lastInterleaved;
            do {
              var interleavedLane = interleaved.lane;
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, interleavedLane);
              markSkippedUpdateLanes(interleavedLane);
              interleaved = interleaved.next;
            } while (interleaved !== lastInterleaved);
          } else if (baseQueue === null) {
            queue.lanes = NoLanes;
          }
          var dispatch = queue.dispatch;
          return [hook.memoizedState, dispatch];
        }
        function rerenderReducer(reducer, initialArg, init) {
          var hook = updateWorkInProgressHook();
          var queue = hook.queue;
          if (queue === null) {
            throw new Error("Should have a queue. This is likely a bug in React. Please file an issue.");
          }
          queue.lastRenderedReducer = reducer;
          var dispatch = queue.dispatch;
          var lastRenderPhaseUpdate = queue.pending;
          var newState = hook.memoizedState;
          if (lastRenderPhaseUpdate !== null) {
            queue.pending = null;
            var firstRenderPhaseUpdate = lastRenderPhaseUpdate.next;
            var update = firstRenderPhaseUpdate;
            do {
              var action = update.action;
              newState = reducer(newState, action);
              update = update.next;
            } while (update !== firstRenderPhaseUpdate);
            if (!objectIs(newState, hook.memoizedState)) {
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = newState;
            if (hook.baseQueue === null) {
              hook.baseState = newState;
            }
            queue.lastRenderedState = newState;
          }
          return [newState, dispatch];
        }
        function mountMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function updateMutableSource(source, getSnapshot, subscribe) {
          {
            return void 0;
          }
        }
        function mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = mountWorkInProgressHook();
          var nextSnapshot;
          var isHydrating2 = getIsHydrating();
          if (isHydrating2) {
            if (getServerSnapshot === void 0) {
              throw new Error("Missing getServerSnapshot, which is required for server-rendered content. Will revert to client rendering.");
            }
            nextSnapshot = getServerSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                if (nextSnapshot !== getServerSnapshot()) {
                  error("The result of getServerSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
          } else {
            nextSnapshot = getSnapshot();
            {
              if (!didWarnUncachedGetSnapshot) {
                var cachedSnapshot = getSnapshot();
                if (!objectIs(nextSnapshot, cachedSnapshot)) {
                  error("The result of getSnapshot should be cached to avoid an infinite loop");
                  didWarnUncachedGetSnapshot = true;
                }
              }
            }
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          hook.memoizedState = nextSnapshot;
          var inst = {
            value: nextSnapshot,
            getSnapshot
          };
          hook.queue = inst;
          mountEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          fiber.flags |= Passive;
          pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
          return nextSnapshot;
        }
        function updateSyncExternalStore(subscribe, getSnapshot, getServerSnapshot) {
          var fiber = currentlyRenderingFiber$1;
          var hook = updateWorkInProgressHook();
          var nextSnapshot = getSnapshot();
          {
            if (!didWarnUncachedGetSnapshot) {
              var cachedSnapshot = getSnapshot();
              if (!objectIs(nextSnapshot, cachedSnapshot)) {
                error("The result of getSnapshot should be cached to avoid an infinite loop");
                didWarnUncachedGetSnapshot = true;
              }
            }
          }
          var prevSnapshot = hook.memoizedState;
          var snapshotChanged = !objectIs(prevSnapshot, nextSnapshot);
          if (snapshotChanged) {
            hook.memoizedState = nextSnapshot;
            markWorkInProgressReceivedUpdate();
          }
          var inst = hook.queue;
          updateEffect(subscribeToStore.bind(null, fiber, inst, subscribe), [subscribe]);
          if (inst.getSnapshot !== getSnapshot || snapshotChanged || // Check if the susbcribe function changed. We can save some memory by
          // checking whether we scheduled a subscription effect above.
          workInProgressHook !== null && workInProgressHook.memoizedState.tag & HasEffect) {
            fiber.flags |= Passive;
            pushEffect(HasEffect | Passive$1, updateStoreInstance.bind(null, fiber, inst, nextSnapshot, getSnapshot), void 0, null);
            var root2 = getWorkInProgressRoot();
            if (root2 === null) {
              throw new Error("Expected a work-in-progress root. This is a bug in React. Please file an issue.");
            }
            if (!includesBlockingLane(root2, renderLanes)) {
              pushStoreConsistencyCheck(fiber, getSnapshot, nextSnapshot);
            }
          }
          return nextSnapshot;
        }
        function pushStoreConsistencyCheck(fiber, getSnapshot, renderedSnapshot) {
          fiber.flags |= StoreConsistency;
          var check = {
            getSnapshot,
            value: renderedSnapshot
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.stores = [check];
          } else {
            var stores = componentUpdateQueue.stores;
            if (stores === null) {
              componentUpdateQueue.stores = [check];
            } else {
              stores.push(check);
            }
          }
        }
        function updateStoreInstance(fiber, inst, nextSnapshot, getSnapshot) {
          inst.value = nextSnapshot;
          inst.getSnapshot = getSnapshot;
          if (checkIfSnapshotChanged(inst)) {
            forceStoreRerender(fiber);
          }
        }
        function subscribeToStore(fiber, inst, subscribe) {
          var handleStoreChange = function() {
            if (checkIfSnapshotChanged(inst)) {
              forceStoreRerender(fiber);
            }
          };
          return subscribe(handleStoreChange);
        }
        function checkIfSnapshotChanged(inst) {
          var latestGetSnapshot = inst.getSnapshot;
          var prevValue = inst.value;
          try {
            var nextValue = latestGetSnapshot();
            return !objectIs(prevValue, nextValue);
          } catch (error2) {
            return true;
          }
        }
        function forceStoreRerender(fiber) {
          var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
          }
        }
        function mountState(initialState) {
          var hook = mountWorkInProgressHook();
          if (typeof initialState === "function") {
            initialState = initialState();
          }
          hook.memoizedState = hook.baseState = initialState;
          var queue = {
            pending: null,
            interleaved: null,
            lanes: NoLanes,
            dispatch: null,
            lastRenderedReducer: basicStateReducer,
            lastRenderedState: initialState
          };
          hook.queue = queue;
          var dispatch = queue.dispatch = dispatchSetState.bind(null, currentlyRenderingFiber$1, queue);
          return [hook.memoizedState, dispatch];
        }
        function updateState(initialState) {
          return updateReducer(basicStateReducer);
        }
        function rerenderState(initialState) {
          return rerenderReducer(basicStateReducer);
        }
        function pushEffect(tag, create, destroy, deps) {
          var effect = {
            tag,
            create,
            destroy,
            deps,
            // Circular
            next: null
          };
          var componentUpdateQueue = currentlyRenderingFiber$1.updateQueue;
          if (componentUpdateQueue === null) {
            componentUpdateQueue = createFunctionComponentUpdateQueue();
            currentlyRenderingFiber$1.updateQueue = componentUpdateQueue;
            componentUpdateQueue.lastEffect = effect.next = effect;
          } else {
            var lastEffect = componentUpdateQueue.lastEffect;
            if (lastEffect === null) {
              componentUpdateQueue.lastEffect = effect.next = effect;
            } else {
              var firstEffect = lastEffect.next;
              lastEffect.next = effect;
              effect.next = firstEffect;
              componentUpdateQueue.lastEffect = effect;
            }
          }
          return effect;
        }
        function mountRef(initialValue) {
          var hook = mountWorkInProgressHook();
          {
            var _ref2 = {
              current: initialValue
            };
            hook.memoizedState = _ref2;
            return _ref2;
          }
        }
        function updateRef(initialValue) {
          var hook = updateWorkInProgressHook();
          return hook.memoizedState;
        }
        function mountEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, void 0, nextDeps);
        }
        function updateEffectImpl(fiberFlags, hookFlags, create, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var destroy = void 0;
          if (currentHook !== null) {
            var prevEffect = currentHook.memoizedState;
            destroy = prevEffect.destroy;
            if (nextDeps !== null) {
              var prevDeps = prevEffect.deps;
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                hook.memoizedState = pushEffect(hookFlags, create, destroy, nextDeps);
                return;
              }
            }
          }
          currentlyRenderingFiber$1.flags |= fiberFlags;
          hook.memoizedState = pushEffect(HasEffect | hookFlags, create, destroy, nextDeps);
        }
        function mountEffect(create, deps) {
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            return mountEffectImpl(MountPassiveDev | Passive | PassiveStatic, Passive$1, create, deps);
          } else {
            return mountEffectImpl(Passive | PassiveStatic, Passive$1, create, deps);
          }
        }
        function updateEffect(create, deps) {
          return updateEffectImpl(Passive, Passive$1, create, deps);
        }
        function mountInsertionEffect(create, deps) {
          return mountEffectImpl(Update, Insertion, create, deps);
        }
        function updateInsertionEffect(create, deps) {
          return updateEffectImpl(Update, Insertion, create, deps);
        }
        function mountLayoutEffect(create, deps) {
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, create, deps);
        }
        function updateLayoutEffect(create, deps) {
          return updateEffectImpl(Update, Layout, create, deps);
        }
        function imperativeHandleEffect(create, ref) {
          if (typeof ref === "function") {
            var refCallback = ref;
            var _inst = create();
            refCallback(_inst);
            return function() {
              refCallback(null);
            };
          } else if (ref !== null && ref !== void 0) {
            var refObject = ref;
            {
              if (!refObject.hasOwnProperty("current")) {
                error("Expected useImperativeHandle() first argument to either be a ref callback or React.createRef() object. Instead received: %s.", "an object with keys {" + Object.keys(refObject).join(", ") + "}");
              }
            }
            var _inst2 = create();
            refObject.current = _inst2;
            return function() {
              refObject.current = null;
            };
          }
        }
        function mountImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          var fiberFlags = Update;
          {
            fiberFlags |= LayoutStatic;
          }
          if ((currentlyRenderingFiber$1.mode & StrictEffectsMode) !== NoMode) {
            fiberFlags |= MountLayoutDev;
          }
          return mountEffectImpl(fiberFlags, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function updateImperativeHandle(ref, create, deps) {
          {
            if (typeof create !== "function") {
              error("Expected useImperativeHandle() second argument to be a function that creates a handle. Instead received: %s.", create !== null ? typeof create : "null");
            }
          }
          var effectDeps = deps !== null && deps !== void 0 ? deps.concat([ref]) : null;
          return updateEffectImpl(Update, Layout, imperativeHandleEffect.bind(null, create, ref), effectDeps);
        }
        function mountDebugValue(value, formatterFn) {
        }
        var updateDebugValue = mountDebugValue;
        function mountCallback(callback, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function updateCallback(callback, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          hook.memoizedState = [callback, nextDeps];
          return callback;
        }
        function mountMemo(nextCreate, deps) {
          var hook = mountWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function updateMemo(nextCreate, deps) {
          var hook = updateWorkInProgressHook();
          var nextDeps = deps === void 0 ? null : deps;
          var prevState = hook.memoizedState;
          if (prevState !== null) {
            if (nextDeps !== null) {
              var prevDeps = prevState[1];
              if (areHookInputsEqual(nextDeps, prevDeps)) {
                return prevState[0];
              }
            }
          }
          var nextValue = nextCreate();
          hook.memoizedState = [nextValue, nextDeps];
          return nextValue;
        }
        function mountDeferredValue(value) {
          var hook = mountWorkInProgressHook();
          hook.memoizedState = value;
          return value;
        }
        function updateDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          var resolvedCurrentHook = currentHook;
          var prevValue = resolvedCurrentHook.memoizedState;
          return updateDeferredValueImpl(hook, prevValue, value);
        }
        function rerenderDeferredValue(value) {
          var hook = updateWorkInProgressHook();
          if (currentHook === null) {
            hook.memoizedState = value;
            return value;
          } else {
            var prevValue = currentHook.memoizedState;
            return updateDeferredValueImpl(hook, prevValue, value);
          }
        }
        function updateDeferredValueImpl(hook, prevValue, value) {
          var shouldDeferValue = !includesOnlyNonUrgentLanes(renderLanes);
          if (shouldDeferValue) {
            if (!objectIs(value, prevValue)) {
              var deferredLane = claimNextTransitionLane();
              currentlyRenderingFiber$1.lanes = mergeLanes(currentlyRenderingFiber$1.lanes, deferredLane);
              markSkippedUpdateLanes(deferredLane);
              hook.baseState = true;
            }
            return prevValue;
          } else {
            if (hook.baseState) {
              hook.baseState = false;
              markWorkInProgressReceivedUpdate();
            }
            hook.memoizedState = value;
            return value;
          }
        }
        function startTransition(setPending, callback, options2) {
          var previousPriority = getCurrentUpdatePriority();
          setCurrentUpdatePriority(higherEventPriority(previousPriority, ContinuousEventPriority));
          setPending(true);
          var prevTransition = ReactCurrentBatchConfig$2.transition;
          ReactCurrentBatchConfig$2.transition = {};
          var currentTransition = ReactCurrentBatchConfig$2.transition;
          {
            ReactCurrentBatchConfig$2.transition._updatedFibers = /* @__PURE__ */ new Set();
          }
          try {
            setPending(false);
            callback();
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$2.transition = prevTransition;
            {
              if (prevTransition === null && currentTransition._updatedFibers) {
                var updatedFibersCount = currentTransition._updatedFibers.size;
                if (updatedFibersCount > 10) {
                  warn("Detected a large number of updates inside startTransition. If this is due to a subscription please re-write it to use React provided hooks. Otherwise concurrent mode guarantees are off the table.");
                }
                currentTransition._updatedFibers.clear();
              }
            }
          }
        }
        function mountTransition() {
          var _mountState = mountState(false), isPending = _mountState[0], setPending = _mountState[1];
          var start = startTransition.bind(null, setPending);
          var hook = mountWorkInProgressHook();
          hook.memoizedState = start;
          return [isPending, start];
        }
        function updateTransition() {
          var _updateState = updateState(), isPending = _updateState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        function rerenderTransition() {
          var _rerenderState = rerenderState(), isPending = _rerenderState[0];
          var hook = updateWorkInProgressHook();
          var start = hook.memoizedState;
          return [isPending, start];
        }
        var isUpdatingOpaqueValueInRenderPhase = false;
        function getIsUpdatingOpaqueValueInRenderPhaseInDEV() {
          {
            return isUpdatingOpaqueValueInRenderPhase;
          }
        }
        function mountId() {
          var hook = mountWorkInProgressHook();
          var root2 = getWorkInProgressRoot();
          var identifierPrefix = root2.identifierPrefix;
          var id;
          if (getIsHydrating()) {
            var treeId = getTreeId();
            id = ":" + identifierPrefix + "R" + treeId;
            var localId = localIdCounter++;
            if (localId > 0) {
              id += "H" + localId.toString(32);
            }
            id += ":";
          } else {
            var globalClientId = globalClientIdCounter++;
            id = ":" + identifierPrefix + "r" + globalClientId.toString(32) + ":";
          }
          hook.memoizedState = id;
          return id;
        }
        function updateId() {
          var hook = updateWorkInProgressHook();
          var id = hook.memoizedState;
          return id;
        }
        function dispatchReducerAction(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function dispatchSetState(fiber, queue, action) {
          {
            if (typeof arguments[3] === "function") {
              error("State updates from the useState() and useReducer() Hooks don't support the second callback argument. To execute a side effect after rendering, declare it in the component body with useEffect().");
            }
          }
          var lane = requestUpdateLane(fiber);
          var update = {
            lane,
            action,
            hasEagerState: false,
            eagerState: null,
            next: null
          };
          if (isRenderPhaseUpdate(fiber)) {
            enqueueRenderPhaseUpdate(queue, update);
          } else {
            var alternate = fiber.alternate;
            if (fiber.lanes === NoLanes && (alternate === null || alternate.lanes === NoLanes)) {
              var lastRenderedReducer = queue.lastRenderedReducer;
              if (lastRenderedReducer !== null) {
                var prevDispatcher;
                {
                  prevDispatcher = ReactCurrentDispatcher$1.current;
                  ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
                }
                try {
                  var currentState = queue.lastRenderedState;
                  var eagerState = lastRenderedReducer(currentState, action);
                  update.hasEagerState = true;
                  update.eagerState = eagerState;
                  if (objectIs(eagerState, currentState)) {
                    enqueueConcurrentHookUpdateAndEagerlyBailout(fiber, queue, update, lane);
                    return;
                  }
                } catch (error2) {
                } finally {
                  {
                    ReactCurrentDispatcher$1.current = prevDispatcher;
                  }
                }
              }
            }
            var root2 = enqueueConcurrentHookUpdate(fiber, queue, update, lane);
            if (root2 !== null) {
              var eventTime = requestEventTime();
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitionUpdate(root2, queue, lane);
            }
          }
          markUpdateInDevTools(fiber, lane);
        }
        function isRenderPhaseUpdate(fiber) {
          var alternate = fiber.alternate;
          return fiber === currentlyRenderingFiber$1 || alternate !== null && alternate === currentlyRenderingFiber$1;
        }
        function enqueueRenderPhaseUpdate(queue, update) {
          didScheduleRenderPhaseUpdateDuringThisPass = didScheduleRenderPhaseUpdate = true;
          var pending = queue.pending;
          if (pending === null) {
            update.next = update;
          } else {
            update.next = pending.next;
            pending.next = update;
          }
          queue.pending = update;
        }
        function entangleTransitionUpdate(root2, queue, lane) {
          if (isTransitionLane(lane)) {
            var queueLanes = queue.lanes;
            queueLanes = intersectLanes(queueLanes, root2.pendingLanes);
            var newQueueLanes = mergeLanes(queueLanes, lane);
            queue.lanes = newQueueLanes;
            markRootEntangled(root2, newQueueLanes);
          }
        }
        function markUpdateInDevTools(fiber, lane, action) {
          {
            markStateUpdateScheduled(fiber, lane);
          }
        }
        var ContextOnlyDispatcher = {
          readContext,
          useCallback: throwInvalidHookError,
          useContext: throwInvalidHookError,
          useEffect: throwInvalidHookError,
          useImperativeHandle: throwInvalidHookError,
          useInsertionEffect: throwInvalidHookError,
          useLayoutEffect: throwInvalidHookError,
          useMemo: throwInvalidHookError,
          useReducer: throwInvalidHookError,
          useRef: throwInvalidHookError,
          useState: throwInvalidHookError,
          useDebugValue: throwInvalidHookError,
          useDeferredValue: throwInvalidHookError,
          useTransition: throwInvalidHookError,
          useMutableSource: throwInvalidHookError,
          useSyncExternalStore: throwInvalidHookError,
          useId: throwInvalidHookError,
          unstable_isNewReconciler: enableNewReconciler
        };
        var HooksDispatcherOnMountInDEV = null;
        var HooksDispatcherOnMountWithHookTypesInDEV = null;
        var HooksDispatcherOnUpdateInDEV = null;
        var HooksDispatcherOnRerenderInDEV = null;
        var InvalidNestedHooksDispatcherOnMountInDEV = null;
        var InvalidNestedHooksDispatcherOnUpdateInDEV = null;
        var InvalidNestedHooksDispatcherOnRerenderInDEV = null;
        {
          var warnInvalidContextAccess = function() {
            error("Context can only be read while React is rendering. In classes, you can read it in the render method or getDerivedStateFromProps. In function components, you can read it directly in the function body, but not inside Hooks like useReducer() or useMemo().");
          };
          var warnInvalidHookAccess = function() {
            error("Do not call Hooks inside useEffect(...), useMemo(...), or other built-in Hooks. You can only call Hooks at the top level of your React function. For more information, see https://reactjs.org/link/rules-of-hooks");
          };
          HooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              mountHookTypesDev();
              checkDepsAreArrayDev(deps);
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnMountWithHookTypesInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          HooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnRerenderInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnMountInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountRef(initialValue);
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              mountHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnMountInDEV;
              try {
                return mountState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountSyncExternalStore(subscribe, getSnapshot, getServerSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              mountHookTypesDev();
              return mountId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnUpdateInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
          InvalidNestedHooksDispatcherOnRerenderInDEV = {
            readContext: function(context) {
              warnInvalidContextAccess();
              return readContext(context);
            },
            useCallback: function(callback, deps) {
              currentHookNameInDev = "useCallback";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateCallback(callback, deps);
            },
            useContext: function(context) {
              currentHookNameInDev = "useContext";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return readContext(context);
            },
            useEffect: function(create, deps) {
              currentHookNameInDev = "useEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateEffect(create, deps);
            },
            useImperativeHandle: function(ref, create, deps) {
              currentHookNameInDev = "useImperativeHandle";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateImperativeHandle(ref, create, deps);
            },
            useInsertionEffect: function(create, deps) {
              currentHookNameInDev = "useInsertionEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateInsertionEffect(create, deps);
            },
            useLayoutEffect: function(create, deps) {
              currentHookNameInDev = "useLayoutEffect";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateLayoutEffect(create, deps);
            },
            useMemo: function(create, deps) {
              currentHookNameInDev = "useMemo";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return updateMemo(create, deps);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useReducer: function(reducer, initialArg, init) {
              currentHookNameInDev = "useReducer";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderReducer(reducer, initialArg, init);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useRef: function(initialValue) {
              currentHookNameInDev = "useRef";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateRef();
            },
            useState: function(initialState) {
              currentHookNameInDev = "useState";
              warnInvalidHookAccess();
              updateHookTypesDev();
              var prevDispatcher = ReactCurrentDispatcher$1.current;
              ReactCurrentDispatcher$1.current = InvalidNestedHooksDispatcherOnUpdateInDEV;
              try {
                return rerenderState(initialState);
              } finally {
                ReactCurrentDispatcher$1.current = prevDispatcher;
              }
            },
            useDebugValue: function(value, formatterFn) {
              currentHookNameInDev = "useDebugValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateDebugValue();
            },
            useDeferredValue: function(value) {
              currentHookNameInDev = "useDeferredValue";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderDeferredValue(value);
            },
            useTransition: function() {
              currentHookNameInDev = "useTransition";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return rerenderTransition();
            },
            useMutableSource: function(source, getSnapshot, subscribe) {
              currentHookNameInDev = "useMutableSource";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateMutableSource();
            },
            useSyncExternalStore: function(subscribe, getSnapshot, getServerSnapshot) {
              currentHookNameInDev = "useSyncExternalStore";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateSyncExternalStore(subscribe, getSnapshot);
            },
            useId: function() {
              currentHookNameInDev = "useId";
              warnInvalidHookAccess();
              updateHookTypesDev();
              return updateId();
            },
            unstable_isNewReconciler: enableNewReconciler
          };
        }
        var now$1 = Scheduler.unstable_now;
        var commitTime = 0;
        var layoutEffectStartTime = -1;
        var profilerStartTime = -1;
        var passiveEffectStartTime = -1;
        var currentUpdateIsNested = false;
        var nestedUpdateScheduled = false;
        function isCurrentUpdateNested() {
          return currentUpdateIsNested;
        }
        function markNestedUpdateScheduled() {
          {
            nestedUpdateScheduled = true;
          }
        }
        function resetNestedUpdateFlag() {
          {
            currentUpdateIsNested = false;
            nestedUpdateScheduled = false;
          }
        }
        function syncNestedUpdateFlag() {
          {
            currentUpdateIsNested = nestedUpdateScheduled;
            nestedUpdateScheduled = false;
          }
        }
        function getCommitTime() {
          return commitTime;
        }
        function recordCommitTime() {
          commitTime = now$1();
        }
        function startProfilerTimer(fiber) {
          profilerStartTime = now$1();
          if (fiber.actualStartTime < 0) {
            fiber.actualStartTime = now$1();
          }
        }
        function stopProfilerTimerIfRunning(fiber) {
          profilerStartTime = -1;
        }
        function stopProfilerTimerIfRunningAndRecordDelta(fiber, overrideBaseTime) {
          if (profilerStartTime >= 0) {
            var elapsedTime = now$1() - profilerStartTime;
            fiber.actualDuration += elapsedTime;
            if (overrideBaseTime) {
              fiber.selfBaseDuration = elapsedTime;
            }
            profilerStartTime = -1;
          }
        }
        function recordLayoutEffectDuration(fiber) {
          if (layoutEffectStartTime >= 0) {
            var elapsedTime = now$1() - layoutEffectStartTime;
            layoutEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  root2.effectDuration += elapsedTime;
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  parentStateNode.effectDuration += elapsedTime;
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function recordPassiveEffectDuration(fiber) {
          if (passiveEffectStartTime >= 0) {
            var elapsedTime = now$1() - passiveEffectStartTime;
            passiveEffectStartTime = -1;
            var parentFiber = fiber.return;
            while (parentFiber !== null) {
              switch (parentFiber.tag) {
                case HostRoot:
                  var root2 = parentFiber.stateNode;
                  if (root2 !== null) {
                    root2.passiveEffectDuration += elapsedTime;
                  }
                  return;
                case Profiler:
                  var parentStateNode = parentFiber.stateNode;
                  if (parentStateNode !== null) {
                    parentStateNode.passiveEffectDuration += elapsedTime;
                  }
                  return;
              }
              parentFiber = parentFiber.return;
            }
          }
        }
        function startLayoutEffectTimer() {
          layoutEffectStartTime = now$1();
        }
        function startPassiveEffectTimer() {
          passiveEffectStartTime = now$1();
        }
        function transferActualDuration(fiber) {
          var child = fiber.child;
          while (child) {
            fiber.actualDuration += child.actualDuration;
            child = child.sibling;
          }
        }
        function resolveDefaultProps(Component, baseProps) {
          if (Component && Component.defaultProps) {
            var props = assign({}, baseProps);
            var defaultProps = Component.defaultProps;
            for (var propName in defaultProps) {
              if (props[propName] === void 0) {
                props[propName] = defaultProps[propName];
              }
            }
            return props;
          }
          return baseProps;
        }
        var fakeInternalInstance = {};
        var didWarnAboutStateAssignmentForComponent;
        var didWarnAboutUninitializedState;
        var didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate;
        var didWarnAboutLegacyLifecyclesAndDerivedState;
        var didWarnAboutUndefinedDerivedState;
        var warnOnUndefinedDerivedState;
        var warnOnInvalidCallback;
        var didWarnAboutDirectlyAssigningPropsToState;
        var didWarnAboutContextTypeAndContextTypes;
        var didWarnAboutInvalidateContextType;
        var didWarnAboutLegacyContext$1;
        {
          didWarnAboutStateAssignmentForComponent = /* @__PURE__ */ new Set();
          didWarnAboutUninitializedState = /* @__PURE__ */ new Set();
          didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate = /* @__PURE__ */ new Set();
          didWarnAboutLegacyLifecyclesAndDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutDirectlyAssigningPropsToState = /* @__PURE__ */ new Set();
          didWarnAboutUndefinedDerivedState = /* @__PURE__ */ new Set();
          didWarnAboutContextTypeAndContextTypes = /* @__PURE__ */ new Set();
          didWarnAboutInvalidateContextType = /* @__PURE__ */ new Set();
          didWarnAboutLegacyContext$1 = /* @__PURE__ */ new Set();
          var didWarnOnInvalidCallback = /* @__PURE__ */ new Set();
          warnOnInvalidCallback = function(callback, callerName) {
            if (callback === null || typeof callback === "function") {
              return;
            }
            var key = callerName + "_" + callback;
            if (!didWarnOnInvalidCallback.has(key)) {
              didWarnOnInvalidCallback.add(key);
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          };
          warnOnUndefinedDerivedState = function(type, partialState) {
            if (partialState === void 0) {
              var componentName = getComponentNameFromType(type) || "Component";
              if (!didWarnAboutUndefinedDerivedState.has(componentName)) {
                didWarnAboutUndefinedDerivedState.add(componentName);
                error("%s.getDerivedStateFromProps(): A valid state object (or null) must be returned. You have returned undefined.", componentName);
              }
            }
          };
          Object.defineProperty(fakeInternalInstance, "_processChildContext", {
            enumerable: false,
            value: function() {
              throw new Error("_processChildContext is not available in React 16+. This likely means you have multiple copies of React and are attempting to nest a React 15 tree inside a React 16 tree using unstable_renderSubtreeIntoContainer, which isn't supported. Try to make sure you have only one copy of React (and ideally, switch to ReactDOM.createPortal).");
            }
          });
          Object.freeze(fakeInternalInstance);
        }
        function applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, nextProps) {
          var prevState = workInProgress2.memoizedState;
          var partialState = getDerivedStateFromProps(nextProps, prevState);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                partialState = getDerivedStateFromProps(nextProps, prevState);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            warnOnUndefinedDerivedState(ctor, partialState);
          }
          var memoizedState = partialState === null || partialState === void 0 ? prevState : assign({}, prevState, partialState);
          workInProgress2.memoizedState = memoizedState;
          if (workInProgress2.lanes === NoLanes) {
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = memoizedState;
          }
        }
        var classComponentUpdater = {
          isMounted,
          enqueueSetState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "setState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueReplaceState: function(inst, payload, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ReplaceState;
            update.payload = payload;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "replaceState");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markStateUpdateScheduled(fiber, lane);
            }
          },
          enqueueForceUpdate: function(inst, callback) {
            var fiber = get(inst);
            var eventTime = requestEventTime();
            var lane = requestUpdateLane(fiber);
            var update = createUpdate(eventTime, lane);
            update.tag = ForceUpdate;
            if (callback !== void 0 && callback !== null) {
              {
                warnOnInvalidCallback(callback, "forceUpdate");
              }
              update.callback = callback;
            }
            var root2 = enqueueUpdate(fiber, update, lane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
              entangleTransitions(root2, fiber, lane);
            }
            {
              markForceUpdateScheduled(fiber, lane);
            }
          }
        };
        function checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) {
          var instance = workInProgress2.stateNode;
          if (typeof instance.shouldComponentUpdate === "function") {
            var shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  shouldUpdate = instance.shouldComponentUpdate(newProps, newState, nextContext);
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              if (shouldUpdate === void 0) {
                error("%s.shouldComponentUpdate(): Returned undefined instead of a boolean value. Make sure to return true or false.", getComponentNameFromType(ctor) || "Component");
              }
            }
            return shouldUpdate;
          }
          if (ctor.prototype && ctor.prototype.isPureReactComponent) {
            return !shallowEqual(oldProps, newProps) || !shallowEqual(oldState, newState);
          }
          return true;
        }
        function checkClassInstance(workInProgress2, ctor, newProps) {
          var instance = workInProgress2.stateNode;
          {
            var name = getComponentNameFromType(ctor) || "Component";
            var renderPresent = instance.render;
            if (!renderPresent) {
              if (ctor.prototype && typeof ctor.prototype.render === "function") {
                error("%s(...): No `render` method found on the returned component instance: did you accidentally return an object from the constructor?", name);
              } else {
                error("%s(...): No `render` method found on the returned component instance: you may have forgotten to define `render`.", name);
              }
            }
            if (instance.getInitialState && !instance.getInitialState.isReactClassApproved && !instance.state) {
              error("getInitialState was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Did you mean to define a state property instead?", name);
            }
            if (instance.getDefaultProps && !instance.getDefaultProps.isReactClassApproved) {
              error("getDefaultProps was defined on %s, a plain JavaScript class. This is only supported for classes created using React.createClass. Use a static property to define defaultProps instead.", name);
            }
            if (instance.propTypes) {
              error("propTypes was defined as an instance property on %s. Use a static property to define propTypes instead.", name);
            }
            if (instance.contextType) {
              error("contextType was defined as an instance property on %s. Use a static property to define contextType instead.", name);
            }
            {
              if (ctor.childContextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
              // this one.
              (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                didWarnAboutLegacyContext$1.add(ctor);
                error("%s uses the legacy childContextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() instead\n\n.Learn more about this warning here: https://reactjs.org/link/legacy-context", name);
              }
              if (ctor.contextTypes && !didWarnAboutLegacyContext$1.has(ctor) && // Strict Mode has its own warning for legacy context, so we can skip
              // this one.
              (workInProgress2.mode & StrictLegacyMode) === NoMode) {
                didWarnAboutLegacyContext$1.add(ctor);
                error("%s uses the legacy contextTypes API which is no longer supported and will be removed in the next major release. Use React.createContext() with static contextType instead.\n\nLearn more about this warning here: https://reactjs.org/link/legacy-context", name);
              }
              if (instance.contextTypes) {
                error("contextTypes was defined as an instance property on %s. Use a static property to define contextTypes instead.", name);
              }
              if (ctor.contextType && ctor.contextTypes && !didWarnAboutContextTypeAndContextTypes.has(ctor)) {
                didWarnAboutContextTypeAndContextTypes.add(ctor);
                error("%s declares both contextTypes and contextType static properties. The legacy contextTypes property will be ignored.", name);
              }
            }
            if (typeof instance.componentShouldUpdate === "function") {
              error("%s has a method called componentShouldUpdate(). Did you mean shouldComponentUpdate()? The name is phrased as a question because the function is expected to return a value.", name);
            }
            if (ctor.prototype && ctor.prototype.isPureReactComponent && typeof instance.shouldComponentUpdate !== "undefined") {
              error("%s has a method called shouldComponentUpdate(). shouldComponentUpdate should not be used when extending React.PureComponent. Please extend React.Component if shouldComponentUpdate is used.", getComponentNameFromType(ctor) || "A pure component");
            }
            if (typeof instance.componentDidUnmount === "function") {
              error("%s has a method called componentDidUnmount(). But there is no such lifecycle method. Did you mean componentWillUnmount()?", name);
            }
            if (typeof instance.componentDidReceiveProps === "function") {
              error("%s has a method called componentDidReceiveProps(). But there is no such lifecycle method. If you meant to update the state in response to changing props, use componentWillReceiveProps(). If you meant to fetch data or run side-effects or mutations after React has updated the UI, use componentDidUpdate().", name);
            }
            if (typeof instance.componentWillRecieveProps === "function") {
              error("%s has a method called componentWillRecieveProps(). Did you mean componentWillReceiveProps()?", name);
            }
            if (typeof instance.UNSAFE_componentWillRecieveProps === "function") {
              error("%s has a method called UNSAFE_componentWillRecieveProps(). Did you mean UNSAFE_componentWillReceiveProps()?", name);
            }
            var hasMutatedProps = instance.props !== newProps;
            if (instance.props !== void 0 && hasMutatedProps) {
              error("%s(...): When calling super() in `%s`, make sure to pass up the same props that your component's constructor was passed.", name, name);
            }
            if (instance.defaultProps) {
              error("Setting defaultProps as an instance property on %s is not supported and will be ignored. Instead, define defaultProps as a static property on %s.", name, name);
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function" && typeof instance.componentDidUpdate !== "function" && !didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.has(ctor)) {
              didWarnAboutGetSnapshotBeforeUpdateWithoutDidUpdate.add(ctor);
              error("%s: getSnapshotBeforeUpdate() should be used with componentDidUpdate(). This component defines getSnapshotBeforeUpdate() only.", getComponentNameFromType(ctor));
            }
            if (typeof instance.getDerivedStateFromProps === "function") {
              error("%s: getDerivedStateFromProps() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof instance.getDerivedStateFromError === "function") {
              error("%s: getDerivedStateFromError() is defined as an instance method and will be ignored. Instead, declare it as a static method.", name);
            }
            if (typeof ctor.getSnapshotBeforeUpdate === "function") {
              error("%s: getSnapshotBeforeUpdate() is defined as a static method and will be ignored. Instead, declare it as an instance method.", name);
            }
            var _state = instance.state;
            if (_state && (typeof _state !== "object" || isArray(_state))) {
              error("%s.state: must be set to an object or null", name);
            }
            if (typeof instance.getChildContext === "function" && typeof ctor.childContextTypes !== "object") {
              error("%s.getChildContext(): childContextTypes must be defined in order to use getChildContext().", name);
            }
          }
        }
        function adoptClassInstance(workInProgress2, instance) {
          instance.updater = classComponentUpdater;
          workInProgress2.stateNode = instance;
          set(instance, workInProgress2);
          {
            instance._reactInternalInstance = fakeInternalInstance;
          }
        }
        function constructClassInstance(workInProgress2, ctor, props) {
          var isLegacyContextConsumer = false;
          var unmaskedContext = emptyContextObject;
          var context = emptyContextObject;
          var contextType = ctor.contextType;
          {
            if ("contextType" in ctor) {
              var isValid = (
                // Allow null for conditional declaration
                contextType === null || contextType !== void 0 && contextType.$$typeof === REACT_CONTEXT_TYPE && contextType._context === void 0
              );
              if (!isValid && !didWarnAboutInvalidateContextType.has(ctor)) {
                didWarnAboutInvalidateContextType.add(ctor);
                var addendum = "";
                if (contextType === void 0) {
                  addendum = " However, it is set to undefined. This can be caused by a typo or by mixing up named and default imports. This can also happen due to a circular dependency, so try moving the createContext() call to a separate file.";
                } else if (typeof contextType !== "object") {
                  addendum = " However, it is set to a " + typeof contextType + ".";
                } else if (contextType.$$typeof === REACT_PROVIDER_TYPE) {
                  addendum = " Did you accidentally pass the Context.Provider instead?";
                } else if (contextType._context !== void 0) {
                  addendum = " Did you accidentally pass the Context.Consumer instead?";
                } else {
                  addendum = " However, it is set to an object with keys {" + Object.keys(contextType).join(", ") + "}.";
                }
                error("%s defines an invalid contextType. contextType should point to the Context object returned by React.createContext().%s", getComponentNameFromType(ctor) || "Component", addendum);
              }
            }
          }
          if (typeof contextType === "object" && contextType !== null) {
            context = readContext(contextType);
          } else {
            unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            var contextTypes = ctor.contextTypes;
            isLegacyContextConsumer = contextTypes !== null && contextTypes !== void 0;
            context = isLegacyContextConsumer ? getMaskedContext(workInProgress2, unmaskedContext) : emptyContextObject;
          }
          var instance = new ctor(props, context);
          {
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                instance = new ctor(props, context);
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
          }
          var state = workInProgress2.memoizedState = instance.state !== null && instance.state !== void 0 ? instance.state : null;
          adoptClassInstance(workInProgress2, instance);
          {
            if (typeof ctor.getDerivedStateFromProps === "function" && state === null) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutUninitializedState.has(componentName)) {
                didWarnAboutUninitializedState.add(componentName);
                error("`%s` uses `getDerivedStateFromProps` but its initial state is %s. This is not recommended. Instead, define the initial state by assigning an object to `this.state` in the constructor of `%s`. This ensures that `getDerivedStateFromProps` arguments have a consistent shape.", componentName, instance.state === null ? "null" : "undefined", componentName);
              }
            }
            if (typeof ctor.getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function") {
              var foundWillMountName = null;
              var foundWillReceivePropsName = null;
              var foundWillUpdateName = null;
              if (typeof instance.componentWillMount === "function" && instance.componentWillMount.__suppressDeprecationWarning !== true) {
                foundWillMountName = "componentWillMount";
              } else if (typeof instance.UNSAFE_componentWillMount === "function") {
                foundWillMountName = "UNSAFE_componentWillMount";
              }
              if (typeof instance.componentWillReceiveProps === "function" && instance.componentWillReceiveProps.__suppressDeprecationWarning !== true) {
                foundWillReceivePropsName = "componentWillReceiveProps";
              } else if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
                foundWillReceivePropsName = "UNSAFE_componentWillReceiveProps";
              }
              if (typeof instance.componentWillUpdate === "function" && instance.componentWillUpdate.__suppressDeprecationWarning !== true) {
                foundWillUpdateName = "componentWillUpdate";
              } else if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                foundWillUpdateName = "UNSAFE_componentWillUpdate";
              }
              if (foundWillMountName !== null || foundWillReceivePropsName !== null || foundWillUpdateName !== null) {
                var _componentName = getComponentNameFromType(ctor) || "Component";
                var newApiName = typeof ctor.getDerivedStateFromProps === "function" ? "getDerivedStateFromProps()" : "getSnapshotBeforeUpdate()";
                if (!didWarnAboutLegacyLifecyclesAndDerivedState.has(_componentName)) {
                  didWarnAboutLegacyLifecyclesAndDerivedState.add(_componentName);
                  error("Unsafe legacy lifecycles will not be called for components using new component APIs.\n\n%s uses %s but also contains the following legacy lifecycles:%s%s%s\n\nThe above lifecycles should be removed. Learn more about this warning here:\nhttps://reactjs.org/link/unsafe-component-lifecycles", _componentName, newApiName, foundWillMountName !== null ? "\n  " + foundWillMountName : "", foundWillReceivePropsName !== null ? "\n  " + foundWillReceivePropsName : "", foundWillUpdateName !== null ? "\n  " + foundWillUpdateName : "");
                }
              }
            }
          }
          if (isLegacyContextConsumer) {
            cacheContext(workInProgress2, unmaskedContext, context);
          }
          return instance;
        }
        function callComponentWillMount(workInProgress2, instance) {
          var oldState = instance.state;
          if (typeof instance.componentWillMount === "function") {
            instance.componentWillMount();
          }
          if (typeof instance.UNSAFE_componentWillMount === "function") {
            instance.UNSAFE_componentWillMount();
          }
          if (oldState !== instance.state) {
            {
              error("%s.componentWillMount(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", getComponentNameFromFiber(workInProgress2) || "Component");
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext) {
          var oldState = instance.state;
          if (typeof instance.componentWillReceiveProps === "function") {
            instance.componentWillReceiveProps(newProps, nextContext);
          }
          if (typeof instance.UNSAFE_componentWillReceiveProps === "function") {
            instance.UNSAFE_componentWillReceiveProps(newProps, nextContext);
          }
          if (instance.state !== oldState) {
            {
              var componentName = getComponentNameFromFiber(workInProgress2) || "Component";
              if (!didWarnAboutStateAssignmentForComponent.has(componentName)) {
                didWarnAboutStateAssignmentForComponent.add(componentName);
                error("%s.componentWillReceiveProps(): Assigning directly to this.state is deprecated (except inside a component's constructor). Use setState instead.", componentName);
              }
            }
            classComponentUpdater.enqueueReplaceState(instance, instance.state, null);
          }
        }
        function mountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          {
            checkClassInstance(workInProgress2, ctor, newProps);
          }
          var instance = workInProgress2.stateNode;
          instance.props = newProps;
          instance.state = workInProgress2.memoizedState;
          instance.refs = {};
          initializeUpdateQueue(workInProgress2);
          var contextType = ctor.contextType;
          if (typeof contextType === "object" && contextType !== null) {
            instance.context = readContext(contextType);
          } else {
            var unmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            instance.context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          {
            if (instance.state === newProps) {
              var componentName = getComponentNameFromType(ctor) || "Component";
              if (!didWarnAboutDirectlyAssigningPropsToState.has(componentName)) {
                didWarnAboutDirectlyAssigningPropsToState.add(componentName);
                error("%s: It is not recommended to assign props directly to state because updates to props won't be reflected in state. In most cases, it is better to use props directly.", componentName);
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, instance);
            }
            {
              ReactStrictModeWarnings.recordUnsafeLifecycleWarnings(workInProgress2, instance);
            }
          }
          instance.state = workInProgress2.memoizedState;
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof ctor.getDerivedStateFromProps !== "function" && typeof instance.getSnapshotBeforeUpdate !== "function" && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
            callComponentWillMount(workInProgress2, instance);
            processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
            instance.state = workInProgress2.memoizedState;
          }
          if (typeof instance.componentDidMount === "function") {
            var fiberFlags = Update;
            {
              fiberFlags |= LayoutStatic;
            }
            if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
              fiberFlags |= MountLayoutDev;
            }
            workInProgress2.flags |= fiberFlags;
          }
        }
        function resumeMountClassInstance(workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          var oldProps = workInProgress2.memoizedProps;
          instance.props = oldProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextLegacyUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextLegacyUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (oldProps !== newProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (oldProps === newProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing()) {
            if (typeof instance.componentDidMount === "function") {
              var fiberFlags = Update;
              {
                fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= fiberFlags;
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext);
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillMount === "function" || typeof instance.componentWillMount === "function")) {
              if (typeof instance.componentWillMount === "function") {
                instance.componentWillMount();
              }
              if (typeof instance.UNSAFE_componentWillMount === "function") {
                instance.UNSAFE_componentWillMount();
              }
            }
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags = Update;
              {
                _fiberFlags |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags;
            }
          } else {
            if (typeof instance.componentDidMount === "function") {
              var _fiberFlags2 = Update;
              {
                _fiberFlags2 |= LayoutStatic;
              }
              if ((workInProgress2.mode & StrictEffectsMode) !== NoMode) {
                _fiberFlags2 |= MountLayoutDev;
              }
              workInProgress2.flags |= _fiberFlags2;
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function updateClassInstance(current2, workInProgress2, ctor, newProps, renderLanes2) {
          var instance = workInProgress2.stateNode;
          cloneUpdateQueue(current2, workInProgress2);
          var unresolvedOldProps = workInProgress2.memoizedProps;
          var oldProps = workInProgress2.type === workInProgress2.elementType ? unresolvedOldProps : resolveDefaultProps(workInProgress2.type, unresolvedOldProps);
          instance.props = oldProps;
          var unresolvedNewProps = workInProgress2.pendingProps;
          var oldContext = instance.context;
          var contextType = ctor.contextType;
          var nextContext = emptyContextObject;
          if (typeof contextType === "object" && contextType !== null) {
            nextContext = readContext(contextType);
          } else {
            var nextUnmaskedContext = getUnmaskedContext(workInProgress2, ctor, true);
            nextContext = getMaskedContext(workInProgress2, nextUnmaskedContext);
          }
          var getDerivedStateFromProps = ctor.getDerivedStateFromProps;
          var hasNewLifecycles = typeof getDerivedStateFromProps === "function" || typeof instance.getSnapshotBeforeUpdate === "function";
          if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillReceiveProps === "function" || typeof instance.componentWillReceiveProps === "function")) {
            if (unresolvedOldProps !== unresolvedNewProps || oldContext !== nextContext) {
              callComponentWillReceiveProps(workInProgress2, instance, newProps, nextContext);
            }
          }
          resetHasForceUpdateBeforeProcessing();
          var oldState = workInProgress2.memoizedState;
          var newState = instance.state = oldState;
          processUpdateQueue(workInProgress2, newProps, instance, renderLanes2);
          newState = workInProgress2.memoizedState;
          if (unresolvedOldProps === unresolvedNewProps && oldState === newState && !hasContextChanged() && !checkHasForceUpdateAfterProcessing() && !enableLazyContextPropagation) {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            return false;
          }
          if (typeof getDerivedStateFromProps === "function") {
            applyDerivedStateFromProps(workInProgress2, ctor, getDerivedStateFromProps, newProps);
            newState = workInProgress2.memoizedState;
          }
          var shouldUpdate = checkHasForceUpdateAfterProcessing() || checkShouldComponentUpdate(workInProgress2, ctor, oldProps, newProps, oldState, newState, nextContext) || // TODO: In some cases, we'll end up checking if context has changed twice,
          // both before and after `shouldComponentUpdate` has been called. Not ideal,
          // but I'm loath to refactor this function. This only happens for memoized
          // components so it's not that common.
          enableLazyContextPropagation;
          if (shouldUpdate) {
            if (!hasNewLifecycles && (typeof instance.UNSAFE_componentWillUpdate === "function" || typeof instance.componentWillUpdate === "function")) {
              if (typeof instance.componentWillUpdate === "function") {
                instance.componentWillUpdate(newProps, newState, nextContext);
              }
              if (typeof instance.UNSAFE_componentWillUpdate === "function") {
                instance.UNSAFE_componentWillUpdate(newProps, newState, nextContext);
              }
            }
            if (typeof instance.componentDidUpdate === "function") {
              workInProgress2.flags |= Update;
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              workInProgress2.flags |= Snapshot;
            }
          } else {
            if (typeof instance.componentDidUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Update;
              }
            }
            if (typeof instance.getSnapshotBeforeUpdate === "function") {
              if (unresolvedOldProps !== current2.memoizedProps || oldState !== current2.memoizedState) {
                workInProgress2.flags |= Snapshot;
              }
            }
            workInProgress2.memoizedProps = newProps;
            workInProgress2.memoizedState = newState;
          }
          instance.props = newProps;
          instance.state = newState;
          instance.context = nextContext;
          return shouldUpdate;
        }
        function createCapturedValueAtFiber(value, source) {
          return {
            value,
            source,
            stack: getStackByFiberInDevAndProd(source),
            digest: null
          };
        }
        function createCapturedValue(value, digest, stack) {
          return {
            value,
            source: null,
            stack: stack != null ? stack : null,
            digest: digest != null ? digest : null
          };
        }
        function showErrorDialog(boundary, errorInfo) {
          return true;
        }
        function logCapturedError(boundary, errorInfo) {
          try {
            var logError = showErrorDialog(boundary, errorInfo);
            if (logError === false) {
              return;
            }
            var error2 = errorInfo.value;
            if (true) {
              var source = errorInfo.source;
              var stack = errorInfo.stack;
              var componentStack = stack !== null ? stack : "";
              if (error2 != null && error2._suppressLogging) {
                if (boundary.tag === ClassComponent) {
                  return;
                }
                console["error"](error2);
              }
              var componentName = source ? getComponentNameFromFiber(source) : null;
              var componentNameMessage = componentName ? "The above error occurred in the <" + componentName + "> component:" : "The above error occurred in one of your React components:";
              var errorBoundaryMessage;
              if (boundary.tag === HostRoot) {
                errorBoundaryMessage = "Consider adding an error boundary to your tree to customize error handling behavior.\nVisit https://reactjs.org/link/error-boundaries to learn more about error boundaries.";
              } else {
                var errorBoundaryName = getComponentNameFromFiber(boundary) || "Anonymous";
                errorBoundaryMessage = "React will try to recreate this component tree from scratch " + ("using the error boundary you provided, " + errorBoundaryName + ".");
              }
              var combinedMessage = componentNameMessage + "\n" + componentStack + "\n\n" + ("" + errorBoundaryMessage);
              console["error"](combinedMessage);
            } else {
              console["error"](error2);
            }
          } catch (e7) {
            setTimeout(function() {
              throw e7;
            });
          }
        }
        var PossiblyWeakMap$1 = typeof WeakMap === "function" ? WeakMap : Map;
        function createRootErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          update.payload = {
            element: null
          };
          var error2 = errorInfo.value;
          update.callback = function() {
            onUncaughtError(error2);
            logCapturedError(fiber, errorInfo);
          };
          return update;
        }
        function createClassErrorUpdate(fiber, errorInfo, lane) {
          var update = createUpdate(NoTimestamp, lane);
          update.tag = CaptureUpdate;
          var getDerivedStateFromError = fiber.type.getDerivedStateFromError;
          if (typeof getDerivedStateFromError === "function") {
            var error$1 = errorInfo.value;
            update.payload = function() {
              return getDerivedStateFromError(error$1);
            };
            update.callback = function() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
            };
          }
          var inst = fiber.stateNode;
          if (inst !== null && typeof inst.componentDidCatch === "function") {
            update.callback = function callback() {
              {
                markFailedErrorBoundaryForHotReloading(fiber);
              }
              logCapturedError(fiber, errorInfo);
              if (typeof getDerivedStateFromError !== "function") {
                markLegacyErrorBoundaryAsFailed(this);
              }
              var error$12 = errorInfo.value;
              var stack = errorInfo.stack;
              this.componentDidCatch(error$12, {
                componentStack: stack !== null ? stack : ""
              });
              {
                if (typeof getDerivedStateFromError !== "function") {
                  if (!includesSomeLane(fiber.lanes, SyncLane)) {
                    error("%s: Error boundaries should implement getDerivedStateFromError(). In that method, return a state update to display an error message or fallback UI.", getComponentNameFromFiber(fiber) || "Unknown");
                  }
                }
              }
            };
          }
          return update;
        }
        function attachPingListener(root2, wakeable, lanes) {
          var pingCache = root2.pingCache;
          var threadIDs;
          if (pingCache === null) {
            pingCache = root2.pingCache = new PossiblyWeakMap$1();
            threadIDs = /* @__PURE__ */ new Set();
            pingCache.set(wakeable, threadIDs);
          } else {
            threadIDs = pingCache.get(wakeable);
            if (threadIDs === void 0) {
              threadIDs = /* @__PURE__ */ new Set();
              pingCache.set(wakeable, threadIDs);
            }
          }
          if (!threadIDs.has(lanes)) {
            threadIDs.add(lanes);
            var ping = pingSuspendedRoot.bind(null, root2, wakeable, lanes);
            {
              if (isDevToolsPresent) {
                restorePendingUpdaters(root2, lanes);
              }
            }
            wakeable.then(ping, ping);
          }
        }
        function attachRetryListener(suspenseBoundary, root2, wakeable, lanes) {
          var wakeables = suspenseBoundary.updateQueue;
          if (wakeables === null) {
            var updateQueue = /* @__PURE__ */ new Set();
            updateQueue.add(wakeable);
            suspenseBoundary.updateQueue = updateQueue;
          } else {
            wakeables.add(wakeable);
          }
        }
        function resetSuspendedComponent(sourceFiber, rootRenderLanes) {
          var tag = sourceFiber.tag;
          if ((sourceFiber.mode & ConcurrentMode) === NoMode && (tag === FunctionComponent || tag === ForwardRef || tag === SimpleMemoComponent)) {
            var currentSource = sourceFiber.alternate;
            if (currentSource) {
              sourceFiber.updateQueue = currentSource.updateQueue;
              sourceFiber.memoizedState = currentSource.memoizedState;
              sourceFiber.lanes = currentSource.lanes;
            } else {
              sourceFiber.updateQueue = null;
              sourceFiber.memoizedState = null;
            }
          }
        }
        function getNearestSuspenseBoundaryToCapture(returnFiber) {
          var node = returnFiber;
          do {
            if (node.tag === SuspenseComponent && shouldCaptureSuspense(node)) {
              return node;
            }
            node = node.return;
          } while (node !== null);
          return null;
        }
        function markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes) {
          if ((suspenseBoundary.mode & ConcurrentMode) === NoMode) {
            if (suspenseBoundary === returnFiber) {
              suspenseBoundary.flags |= ShouldCapture;
            } else {
              suspenseBoundary.flags |= DidCapture;
              sourceFiber.flags |= ForceUpdateForLegacySuspense;
              sourceFiber.flags &= ~(LifecycleEffectMask | Incomplete);
              if (sourceFiber.tag === ClassComponent) {
                var currentSourceFiber = sourceFiber.alternate;
                if (currentSourceFiber === null) {
                  sourceFiber.tag = IncompleteClassComponent;
                } else {
                  var update = createUpdate(NoTimestamp, SyncLane);
                  update.tag = ForceUpdate;
                  enqueueUpdate(sourceFiber, update, SyncLane);
                }
              }
              sourceFiber.lanes = mergeLanes(sourceFiber.lanes, SyncLane);
            }
            return suspenseBoundary;
          }
          suspenseBoundary.flags |= ShouldCapture;
          suspenseBoundary.lanes = rootRenderLanes;
          return suspenseBoundary;
        }
        function throwException(root2, returnFiber, sourceFiber, value, rootRenderLanes) {
          sourceFiber.flags |= Incomplete;
          {
            if (isDevToolsPresent) {
              restorePendingUpdaters(root2, rootRenderLanes);
            }
          }
          if (value !== null && typeof value === "object" && typeof value.then === "function") {
            var wakeable = value;
            resetSuspendedComponent(sourceFiber);
            {
              if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
                markDidThrowWhileHydratingDEV();
              }
            }
            var suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
            if (suspenseBoundary !== null) {
              suspenseBoundary.flags &= ~ForceClientRender;
              markSuspenseBoundaryShouldCapture(suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
              if (suspenseBoundary.mode & ConcurrentMode) {
                attachPingListener(root2, wakeable, rootRenderLanes);
              }
              attachRetryListener(suspenseBoundary, root2, wakeable);
              return;
            } else {
              if (!includesSyncLane(rootRenderLanes)) {
                attachPingListener(root2, wakeable, rootRenderLanes);
                renderDidSuspendDelayIfPossible();
                return;
              }
              var uncaughtSuspenseError = new Error("A component suspended while responding to synchronous input. This will cause the UI to be replaced with a loading indicator. To fix, updates that suspend should be wrapped with startTransition.");
              value = uncaughtSuspenseError;
            }
          } else {
            if (getIsHydrating() && sourceFiber.mode & ConcurrentMode) {
              markDidThrowWhileHydratingDEV();
              var _suspenseBoundary = getNearestSuspenseBoundaryToCapture(returnFiber);
              if (_suspenseBoundary !== null) {
                if ((_suspenseBoundary.flags & ShouldCapture) === NoFlags) {
                  _suspenseBoundary.flags |= ForceClientRender;
                }
                markSuspenseBoundaryShouldCapture(_suspenseBoundary, returnFiber, sourceFiber, root2, rootRenderLanes);
                queueHydrationError(createCapturedValueAtFiber(value, sourceFiber));
                return;
              }
            }
          }
          value = createCapturedValueAtFiber(value, sourceFiber);
          renderDidError(value);
          var workInProgress2 = returnFiber;
          do {
            switch (workInProgress2.tag) {
              case HostRoot: {
                var _errorInfo = value;
                workInProgress2.flags |= ShouldCapture;
                var lane = pickArbitraryLane(rootRenderLanes);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createRootErrorUpdate(workInProgress2, _errorInfo, lane);
                enqueueCapturedUpdate(workInProgress2, update);
                return;
              }
              case ClassComponent:
                var errorInfo = value;
                var ctor = workInProgress2.type;
                var instance = workInProgress2.stateNode;
                if ((workInProgress2.flags & DidCapture) === NoFlags && (typeof ctor.getDerivedStateFromError === "function" || instance !== null && typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance))) {
                  workInProgress2.flags |= ShouldCapture;
                  var _lane = pickArbitraryLane(rootRenderLanes);
                  workInProgress2.lanes = mergeLanes(workInProgress2.lanes, _lane);
                  var _update = createClassErrorUpdate(workInProgress2, errorInfo, _lane);
                  enqueueCapturedUpdate(workInProgress2, _update);
                  return;
                }
                break;
            }
            workInProgress2 = workInProgress2.return;
          } while (workInProgress2 !== null);
        }
        function getSuspendedCache() {
          {
            return null;
          }
        }
        var ReactCurrentOwner$1 = ReactSharedInternals.ReactCurrentOwner;
        var didReceiveUpdate = false;
        var didWarnAboutBadClass;
        var didWarnAboutModulePatternComponent;
        var didWarnAboutContextTypeOnFunctionComponent;
        var didWarnAboutGetDerivedStateOnFunctionComponent;
        var didWarnAboutFunctionRefs;
        var didWarnAboutReassigningProps;
        var didWarnAboutRevealOrder;
        var didWarnAboutTailOptions;
        var didWarnAboutDefaultPropsOnFunctionComponent;
        {
          didWarnAboutBadClass = {};
          didWarnAboutModulePatternComponent = {};
          didWarnAboutContextTypeOnFunctionComponent = {};
          didWarnAboutGetDerivedStateOnFunctionComponent = {};
          didWarnAboutFunctionRefs = {};
          didWarnAboutReassigningProps = false;
          didWarnAboutRevealOrder = {};
          didWarnAboutTailOptions = {};
          didWarnAboutDefaultPropsOnFunctionComponent = {};
        }
        function reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2) {
          if (current2 === null) {
            workInProgress2.child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, nextChildren, renderLanes2);
          }
        }
        function forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2) {
          workInProgress2.child = reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
        }
        function updateForwardRef(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var render2 = Component.render;
          var ref = workInProgress2.ref;
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, render2, nextProps, ref, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          if (current2 === null) {
            var type = Component.type;
            if (isSimpleFunctionComponent(type) && Component.compare === null && // SimpleMemoComponent codepath doesn't resolve outer props either.
            Component.defaultProps === void 0) {
              var resolvedType = type;
              {
                resolvedType = resolveFunctionForHotReloading(type);
              }
              workInProgress2.tag = SimpleMemoComponent;
              workInProgress2.type = resolvedType;
              {
                validateFunctionComponentInDev(workInProgress2, type);
              }
              return updateSimpleMemoComponent(current2, workInProgress2, resolvedType, nextProps, renderLanes2);
            }
            {
              var innerPropTypes = type.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(type)
                );
              }
              if (Component.defaultProps !== void 0) {
                var componentName = getComponentNameFromType(type) || "Unknown";
                if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                  error("%s: Support for defaultProps will be removed from memo components in a future major release. Use JavaScript default parameters instead.", componentName);
                  didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
                }
              }
            }
            var child = createFiberFromTypeAndProps(Component.type, null, nextProps, workInProgress2, workInProgress2.mode, renderLanes2);
            child.ref = workInProgress2.ref;
            child.return = workInProgress2;
            workInProgress2.child = child;
            return child;
          }
          {
            var _type = Component.type;
            var _innerPropTypes = _type.propTypes;
            if (_innerPropTypes) {
              checkPropTypes(
                _innerPropTypes,
                nextProps,
                // Resolved props
                "prop",
                getComponentNameFromType(_type)
              );
            }
          }
          var currentChild = current2.child;
          var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
          if (!hasScheduledUpdateOrContext) {
            var prevProps = currentChild.memoizedProps;
            var compare = Component.compare;
            compare = compare !== null ? compare : shallowEqual;
            if (compare(prevProps, nextProps) && current2.ref === workInProgress2.ref) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
          }
          workInProgress2.flags |= PerformedWork;
          var newChild = createWorkInProgress(currentChild, nextProps);
          newChild.ref = workInProgress2.ref;
          newChild.return = workInProgress2;
          workInProgress2.child = newChild;
          return newChild;
        }
        function updateSimpleMemoComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var outerMemoType = workInProgress2.elementType;
              if (outerMemoType.$$typeof === REACT_LAZY_TYPE) {
                var lazyComponent = outerMemoType;
                var payload = lazyComponent._payload;
                var init = lazyComponent._init;
                try {
                  outerMemoType = init(payload);
                } catch (x7) {
                  outerMemoType = null;
                }
                var outerPropTypes = outerMemoType && outerMemoType.propTypes;
                if (outerPropTypes) {
                  checkPropTypes(
                    outerPropTypes,
                    nextProps,
                    // Resolved (SimpleMemoComponent has no defaultProps)
                    "prop",
                    getComponentNameFromType(outerMemoType)
                  );
                }
              }
            }
          }
          if (current2 !== null) {
            var prevProps = current2.memoizedProps;
            if (shallowEqual(prevProps, nextProps) && current2.ref === workInProgress2.ref && // Prevent bailout if the implementation changed due to hot reload.
            workInProgress2.type === current2.type) {
              didReceiveUpdate = false;
              workInProgress2.pendingProps = nextProps = prevProps;
              if (!checkScheduledUpdateOrContext(current2, renderLanes2)) {
                workInProgress2.lanes = current2.lanes;
                return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
              } else if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              }
            }
          }
          return updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2);
        }
        function updateOffscreenComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          var prevState = current2 !== null ? current2.memoizedState : null;
          if (nextProps.mode === "hidden" || enableLegacyHidden) {
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              var nextState = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = nextState;
              pushRenderLanes(workInProgress2, renderLanes2);
            } else if (!includesSomeLane(renderLanes2, OffscreenLane)) {
              var spawnedCachePool = null;
              var nextBaseLanes;
              if (prevState !== null) {
                var prevBaseLanes = prevState.baseLanes;
                nextBaseLanes = mergeLanes(prevBaseLanes, renderLanes2);
              } else {
                nextBaseLanes = renderLanes2;
              }
              workInProgress2.lanes = workInProgress2.childLanes = laneToLanes(OffscreenLane);
              var _nextState = {
                baseLanes: nextBaseLanes,
                cachePool: spawnedCachePool,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState;
              workInProgress2.updateQueue = null;
              pushRenderLanes(workInProgress2, nextBaseLanes);
              return null;
            } else {
              var _nextState2 = {
                baseLanes: NoLanes,
                cachePool: null,
                transitions: null
              };
              workInProgress2.memoizedState = _nextState2;
              var subtreeRenderLanes2 = prevState !== null ? prevState.baseLanes : renderLanes2;
              pushRenderLanes(workInProgress2, subtreeRenderLanes2);
            }
          } else {
            var _subtreeRenderLanes;
            if (prevState !== null) {
              _subtreeRenderLanes = mergeLanes(prevState.baseLanes, renderLanes2);
              workInProgress2.memoizedState = null;
            } else {
              _subtreeRenderLanes = renderLanes2;
            }
            pushRenderLanes(workInProgress2, _subtreeRenderLanes);
          }
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateFragment(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateMode(current2, workInProgress2, renderLanes2) {
          var nextChildren = workInProgress2.pendingProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateProfiler(current2, workInProgress2, renderLanes2) {
          {
            workInProgress2.flags |= Update;
            {
              var stateNode = workInProgress2.stateNode;
              stateNode.effectDuration = 0;
              stateNode.passiveEffectDuration = 0;
            }
          }
          var nextProps = workInProgress2.pendingProps;
          var nextChildren = nextProps.children;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markRef(current2, workInProgress2) {
          var ref = workInProgress2.ref;
          if (current2 === null && ref !== null || current2 !== null && current2.ref !== ref) {
            workInProgress2.flags |= Ref;
            {
              workInProgress2.flags |= RefStatic;
            }
          }
        }
        function updateFunctionComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, true);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          var nextChildren;
          var hasId;
          prepareToReadContext(workInProgress2, renderLanes2);
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            if (workInProgress2.mode & StrictLegacyMode) {
              setIsStrictModeForDevtools(true);
              try {
                nextChildren = renderWithHooks(current2, workInProgress2, Component, nextProps, context, renderLanes2);
                hasId = checkDidRenderIdHook();
              } finally {
                setIsStrictModeForDevtools(false);
              }
            }
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          if (current2 !== null && !didReceiveUpdate) {
            bailoutHooks(current2, workInProgress2, renderLanes2);
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          if (getIsHydrating() && hasId) {
            pushMaterializedTreeId(workInProgress2);
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateClassComponent(current2, workInProgress2, Component, nextProps, renderLanes2) {
          {
            switch (shouldError(workInProgress2)) {
              case false: {
                var _instance = workInProgress2.stateNode;
                var ctor = workInProgress2.type;
                var tempInstance = new ctor(workInProgress2.memoizedProps, _instance.context);
                var state = tempInstance.state;
                _instance.updater.enqueueSetState(_instance, state, null);
                break;
              }
              case true: {
                workInProgress2.flags |= DidCapture;
                workInProgress2.flags |= ShouldCapture;
                var error$1 = new Error("Simulated error coming from DevTools");
                var lane = pickArbitraryLane(renderLanes2);
                workInProgress2.lanes = mergeLanes(workInProgress2.lanes, lane);
                var update = createClassErrorUpdate(workInProgress2, createCapturedValueAtFiber(error$1, workInProgress2), lane);
                enqueueCapturedUpdate(workInProgress2, update);
                break;
              }
            }
            if (workInProgress2.type !== workInProgress2.elementType) {
              var innerPropTypes = Component.propTypes;
              if (innerPropTypes) {
                checkPropTypes(
                  innerPropTypes,
                  nextProps,
                  // Resolved props
                  "prop",
                  getComponentNameFromType(Component)
                );
              }
            }
          }
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var instance = workInProgress2.stateNode;
          var shouldUpdate;
          if (instance === null) {
            resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2);
            constructClassInstance(workInProgress2, Component, nextProps);
            mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
            shouldUpdate = true;
          } else if (current2 === null) {
            shouldUpdate = resumeMountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          } else {
            shouldUpdate = updateClassInstance(current2, workInProgress2, Component, nextProps, renderLanes2);
          }
          var nextUnitOfWork = finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2);
          {
            var inst = workInProgress2.stateNode;
            if (shouldUpdate && inst.props !== nextProps) {
              if (!didWarnAboutReassigningProps) {
                error("It looks like %s is reassigning its own `this.props` while rendering. This is not supported and can lead to confusing bugs.", getComponentNameFromFiber(workInProgress2) || "a component");
              }
              didWarnAboutReassigningProps = true;
            }
          }
          return nextUnitOfWork;
        }
        function finishClassComponent(current2, workInProgress2, Component, shouldUpdate, hasContext, renderLanes2) {
          markRef(current2, workInProgress2);
          var didCaptureError = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (!shouldUpdate && !didCaptureError) {
            if (hasContext) {
              invalidateContextProvider(workInProgress2, Component, false);
            }
            return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
          }
          var instance = workInProgress2.stateNode;
          ReactCurrentOwner$1.current = workInProgress2;
          var nextChildren;
          if (didCaptureError && typeof Component.getDerivedStateFromError !== "function") {
            nextChildren = null;
            {
              stopProfilerTimerIfRunning();
            }
          } else {
            {
              markComponentRenderStarted(workInProgress2);
            }
            {
              setIsRendering(true);
              nextChildren = instance.render();
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  instance.render();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
              setIsRendering(false);
            }
            {
              markComponentRenderStopped();
            }
          }
          workInProgress2.flags |= PerformedWork;
          if (current2 !== null && didCaptureError) {
            forceUnmountCurrentAndReconcile(current2, workInProgress2, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          workInProgress2.memoizedState = instance.state;
          if (hasContext) {
            invalidateContextProvider(workInProgress2, Component, true);
          }
          return workInProgress2.child;
        }
        function pushHostRootContext(workInProgress2) {
          var root2 = workInProgress2.stateNode;
          if (root2.pendingContext) {
            pushTopLevelContextObject(workInProgress2, root2.pendingContext, root2.pendingContext !== root2.context);
          } else if (root2.context) {
            pushTopLevelContextObject(workInProgress2, root2.context, false);
          }
          pushHostContainer(workInProgress2, root2.containerInfo);
        }
        function updateHostRoot(current2, workInProgress2, renderLanes2) {
          pushHostRootContext(workInProgress2);
          if (current2 === null) {
            throw new Error("Should have a current fiber. This is a bug in React.");
          }
          var nextProps = workInProgress2.pendingProps;
          var prevState = workInProgress2.memoizedState;
          var prevChildren = prevState.element;
          cloneUpdateQueue(current2, workInProgress2);
          processUpdateQueue(workInProgress2, nextProps, null, renderLanes2);
          var nextState = workInProgress2.memoizedState;
          var root2 = workInProgress2.stateNode;
          var nextChildren = nextState.element;
          if (prevState.isDehydrated) {
            var overrideState = {
              element: nextChildren,
              isDehydrated: false,
              cache: nextState.cache,
              pendingSuspenseBoundaries: nextState.pendingSuspenseBoundaries,
              transitions: nextState.transitions
            };
            var updateQueue = workInProgress2.updateQueue;
            updateQueue.baseState = overrideState;
            workInProgress2.memoizedState = overrideState;
            if (workInProgress2.flags & ForceClientRender) {
              var recoverableError = createCapturedValueAtFiber(new Error("There was an error while hydrating. Because the error happened outside of a Suspense boundary, the entire root will switch to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError);
            } else if (nextChildren !== prevChildren) {
              var _recoverableError = createCapturedValueAtFiber(new Error("This root received an early update, before anything was able hydrate. Switched the entire root to client rendering."), workInProgress2);
              return mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, _recoverableError);
            } else {
              enterHydrationState(workInProgress2);
              var child = mountChildFibers(workInProgress2, null, nextChildren, renderLanes2);
              workInProgress2.child = child;
              var node = child;
              while (node) {
                node.flags = node.flags & ~Placement | Hydrating;
                node = node.sibling;
              }
            }
          } else {
            resetHydrationState();
            if (nextChildren === prevChildren) {
              return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
            }
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        function mountHostRootWithoutHydrating(current2, workInProgress2, nextChildren, renderLanes2, recoverableError) {
          resetHydrationState();
          queueHydrationError(recoverableError);
          workInProgress2.flags |= ForceClientRender;
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostComponent(current2, workInProgress2, renderLanes2) {
          pushHostContext(workInProgress2);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          var type = workInProgress2.type;
          var nextProps = workInProgress2.pendingProps;
          var prevProps = current2 !== null ? current2.memoizedProps : null;
          var nextChildren = nextProps.children;
          var isDirectTextChild = shouldSetTextContent(type, nextProps);
          if (isDirectTextChild) {
            nextChildren = null;
          } else if (prevProps !== null && shouldSetTextContent(type, prevProps)) {
            workInProgress2.flags |= ContentReset;
          }
          markRef(current2, workInProgress2);
          reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          return workInProgress2.child;
        }
        function updateHostText(current2, workInProgress2) {
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
          }
          return null;
        }
        function mountLazyComponent(_current, workInProgress2, elementType, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var lazyComponent = elementType;
          var payload = lazyComponent._payload;
          var init = lazyComponent._init;
          var Component = init(payload);
          workInProgress2.type = Component;
          var resolvedTag = workInProgress2.tag = resolveLazyComponentTag(Component);
          var resolvedProps = resolveDefaultProps(Component, props);
          var child;
          switch (resolvedTag) {
            case FunctionComponent: {
              {
                validateFunctionComponentInDev(workInProgress2, Component);
                workInProgress2.type = Component = resolveFunctionForHotReloading(Component);
              }
              child = updateFunctionComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ClassComponent: {
              {
                workInProgress2.type = Component = resolveClassForHotReloading(Component);
              }
              child = updateClassComponent(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case ForwardRef: {
              {
                workInProgress2.type = Component = resolveForwardRefForHotReloading(Component);
              }
              child = updateForwardRef(null, workInProgress2, Component, resolvedProps, renderLanes2);
              return child;
            }
            case MemoComponent: {
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = Component.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      resolvedProps,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(Component)
                    );
                  }
                }
              }
              child = updateMemoComponent(
                null,
                workInProgress2,
                Component,
                resolveDefaultProps(Component.type, resolvedProps),
                // The inner type can have defaults too
                renderLanes2
              );
              return child;
            }
          }
          var hint = "";
          {
            if (Component !== null && typeof Component === "object" && Component.$$typeof === REACT_LAZY_TYPE) {
              hint = " Did you wrap a component in React.lazy() more than once?";
            }
          }
          throw new Error("Element type is invalid. Received a promise that resolves to: " + Component + ". " + ("Lazy element type must resolve to a class or function." + hint));
        }
        function mountIncompleteClassComponent(_current, workInProgress2, Component, nextProps, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          workInProgress2.tag = ClassComponent;
          var hasContext;
          if (isContextProvider(Component)) {
            hasContext = true;
            pushContextProvider(workInProgress2);
          } else {
            hasContext = false;
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          constructClassInstance(workInProgress2, Component, nextProps);
          mountClassInstance(workInProgress2, Component, nextProps, renderLanes2);
          return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
        }
        function mountIndeterminateComponent(_current, workInProgress2, Component, renderLanes2) {
          resetSuspendedCurrentOnMountInLegacyMode(_current, workInProgress2);
          var props = workInProgress2.pendingProps;
          var context;
          {
            var unmaskedContext = getUnmaskedContext(workInProgress2, Component, false);
            context = getMaskedContext(workInProgress2, unmaskedContext);
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var value;
          var hasId;
          {
            markComponentRenderStarted(workInProgress2);
          }
          {
            if (Component.prototype && typeof Component.prototype.render === "function") {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutBadClass[componentName]) {
                error("The <%s /> component appears to have a render method, but doesn't extend React.Component. This is likely to cause errors. Change %s to extend React.Component instead.", componentName, componentName);
                didWarnAboutBadClass[componentName] = true;
              }
            }
            if (workInProgress2.mode & StrictLegacyMode) {
              ReactStrictModeWarnings.recordLegacyContextWarning(workInProgress2, null);
            }
            setIsRendering(true);
            ReactCurrentOwner$1.current = workInProgress2;
            value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
            hasId = checkDidRenderIdHook();
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          {
            if (typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0) {
              var _componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName, _componentName, _componentName);
                didWarnAboutModulePatternComponent[_componentName] = true;
              }
            }
          }
          if (
            // Run these checks in production only if the flag is off.
            // Eventually we'll delete this branch altogether.
            typeof value === "object" && value !== null && typeof value.render === "function" && value.$$typeof === void 0
          ) {
            {
              var _componentName2 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutModulePatternComponent[_componentName2]) {
                error("The <%s /> component appears to be a function component that returns a class instance. Change %s to a class that extends React.Component instead. If you can't use a class try assigning the prototype on the function as a workaround. `%s.prototype = React.Component.prototype`. Don't use an arrow function since it cannot be called with `new` by React.", _componentName2, _componentName2, _componentName2);
                didWarnAboutModulePatternComponent[_componentName2] = true;
              }
            }
            workInProgress2.tag = ClassComponent;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            var hasContext = false;
            if (isContextProvider(Component)) {
              hasContext = true;
              pushContextProvider(workInProgress2);
            } else {
              hasContext = false;
            }
            workInProgress2.memoizedState = value.state !== null && value.state !== void 0 ? value.state : null;
            initializeUpdateQueue(workInProgress2);
            adoptClassInstance(workInProgress2, value);
            mountClassInstance(workInProgress2, Component, props, renderLanes2);
            return finishClassComponent(null, workInProgress2, Component, true, hasContext, renderLanes2);
          } else {
            workInProgress2.tag = FunctionComponent;
            {
              if (workInProgress2.mode & StrictLegacyMode) {
                setIsStrictModeForDevtools(true);
                try {
                  value = renderWithHooks(null, workInProgress2, Component, props, context, renderLanes2);
                  hasId = checkDidRenderIdHook();
                } finally {
                  setIsStrictModeForDevtools(false);
                }
              }
            }
            if (getIsHydrating() && hasId) {
              pushMaterializedTreeId(workInProgress2);
            }
            reconcileChildren(null, workInProgress2, value, renderLanes2);
            {
              validateFunctionComponentInDev(workInProgress2, Component);
            }
            return workInProgress2.child;
          }
        }
        function validateFunctionComponentInDev(workInProgress2, Component) {
          {
            if (Component) {
              if (Component.childContextTypes) {
                error("%s(...): childContextTypes cannot be defined on a function component.", Component.displayName || Component.name || "Component");
              }
            }
            if (workInProgress2.ref !== null) {
              var info = "";
              var ownerName = getCurrentFiberOwnerNameInDevOrNull();
              if (ownerName) {
                info += "\n\nCheck the render method of `" + ownerName + "`.";
              }
              var warningKey = ownerName || "";
              var debugSource = workInProgress2._debugSource;
              if (debugSource) {
                warningKey = debugSource.fileName + ":" + debugSource.lineNumber;
              }
              if (!didWarnAboutFunctionRefs[warningKey]) {
                didWarnAboutFunctionRefs[warningKey] = true;
                error("Function components cannot be given refs. Attempts to access this ref will fail. Did you mean to use React.forwardRef()?%s", info);
              }
            }
            if (Component.defaultProps !== void 0) {
              var componentName = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutDefaultPropsOnFunctionComponent[componentName]) {
                error("%s: Support for defaultProps will be removed from function components in a future major release. Use JavaScript default parameters instead.", componentName);
                didWarnAboutDefaultPropsOnFunctionComponent[componentName] = true;
              }
            }
            if (typeof Component.getDerivedStateFromProps === "function") {
              var _componentName3 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3]) {
                error("%s: Function components do not support getDerivedStateFromProps.", _componentName3);
                didWarnAboutGetDerivedStateOnFunctionComponent[_componentName3] = true;
              }
            }
            if (typeof Component.contextType === "object" && Component.contextType !== null) {
              var _componentName4 = getComponentNameFromType(Component) || "Unknown";
              if (!didWarnAboutContextTypeOnFunctionComponent[_componentName4]) {
                error("%s: Function components do not support contextType.", _componentName4);
                didWarnAboutContextTypeOnFunctionComponent[_componentName4] = true;
              }
            }
          }
        }
        var SUSPENDED_MARKER = {
          dehydrated: null,
          treeContext: null,
          retryLane: NoLane
        };
        function mountSuspenseOffscreenState(renderLanes2) {
          return {
            baseLanes: renderLanes2,
            cachePool: getSuspendedCache(),
            transitions: null
          };
        }
        function updateSuspenseOffscreenState(prevOffscreenState, renderLanes2) {
          var cachePool = null;
          return {
            baseLanes: mergeLanes(prevOffscreenState.baseLanes, renderLanes2),
            cachePool,
            transitions: prevOffscreenState.transitions
          };
        }
        function shouldRemainOnFallback(suspenseContext, current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            var suspenseState = current2.memoizedState;
            if (suspenseState === null) {
              return false;
            }
          }
          return hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
        }
        function getRemainingWorkInPrimaryTree(current2, renderLanes2) {
          return removeLanes(current2.childLanes, renderLanes2);
        }
        function updateSuspenseComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          {
            if (shouldSuspend(workInProgress2)) {
              workInProgress2.flags |= DidCapture;
            }
          }
          var suspenseContext = suspenseStackCursor.current;
          var showFallback = false;
          var didSuspend = (workInProgress2.flags & DidCapture) !== NoFlags;
          if (didSuspend || shouldRemainOnFallback(suspenseContext, current2)) {
            showFallback = true;
            workInProgress2.flags &= ~DidCapture;
          } else {
            if (current2 === null || current2.memoizedState !== null) {
              {
                suspenseContext = addSubtreeSuspenseContext(suspenseContext, InvisibleParentSuspenseContext);
              }
            }
          }
          suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          pushSuspenseContext(workInProgress2, suspenseContext);
          if (current2 === null) {
            tryToClaimNextHydratableInstance(workInProgress2);
            var suspenseState = workInProgress2.memoizedState;
            if (suspenseState !== null) {
              var dehydrated = suspenseState.dehydrated;
              if (dehydrated !== null) {
                return mountDehydratedSuspenseComponent(workInProgress2, dehydrated);
              }
            }
            var nextPrimaryChildren = nextProps.children;
            var nextFallbackChildren = nextProps.fallback;
            if (showFallback) {
              var fallbackFragment = mountSuspenseFallbackChildren(workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var primaryChildFragment = workInProgress2.child;
              primaryChildFragment.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackFragment;
            } else {
              return mountSuspensePrimaryChildren(workInProgress2, nextPrimaryChildren);
            }
          } else {
            var prevState = current2.memoizedState;
            if (prevState !== null) {
              var _dehydrated = prevState.dehydrated;
              if (_dehydrated !== null) {
                return updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, _dehydrated, prevState, renderLanes2);
              }
            }
            if (showFallback) {
              var _nextFallbackChildren = nextProps.fallback;
              var _nextPrimaryChildren = nextProps.children;
              var fallbackChildFragment = updateSuspenseFallbackChildren(current2, workInProgress2, _nextPrimaryChildren, _nextFallbackChildren, renderLanes2);
              var _primaryChildFragment2 = workInProgress2.child;
              var prevOffscreenState = current2.child.memoizedState;
              _primaryChildFragment2.memoizedState = prevOffscreenState === null ? mountSuspenseOffscreenState(renderLanes2) : updateSuspenseOffscreenState(prevOffscreenState, renderLanes2);
              _primaryChildFragment2.childLanes = getRemainingWorkInPrimaryTree(current2, renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            } else {
              var _nextPrimaryChildren2 = nextProps.children;
              var _primaryChildFragment3 = updateSuspensePrimaryChildren(current2, workInProgress2, _nextPrimaryChildren2, renderLanes2);
              workInProgress2.memoizedState = null;
              return _primaryChildFragment3;
            }
          }
        }
        function mountSuspensePrimaryChildren(workInProgress2, primaryChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
          primaryChildFragment.return = workInProgress2;
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackChildren(workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var progressedPrimaryFragment = workInProgress2.child;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          var fallbackChildFragment;
          if ((mode & ConcurrentMode) === NoMode && progressedPrimaryFragment !== null) {
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = 0;
              primaryChildFragment.treeBaseDuration = 0;
            }
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          } else {
            primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, mode);
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
          }
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function mountWorkInProgressOffscreenFiber(offscreenProps, mode, renderLanes2) {
          return createFiberFromOffscreen(offscreenProps, mode, NoLanes, null);
        }
        function updateWorkInProgressOffscreenFiber(current2, offscreenProps) {
          return createWorkInProgress(current2, offscreenProps);
        }
        function updateSuspensePrimaryChildren(current2, workInProgress2, primaryChildren, renderLanes2) {
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, {
            mode: "visible",
            children: primaryChildren
          });
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            primaryChildFragment.lanes = renderLanes2;
          }
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = null;
          if (currentFallbackChildFragment !== null) {
            var deletions = workInProgress2.deletions;
            if (deletions === null) {
              workInProgress2.deletions = [currentFallbackChildFragment];
              workInProgress2.flags |= ChildDeletion;
            } else {
              deletions.push(currentFallbackChildFragment);
            }
          }
          workInProgress2.child = primaryChildFragment;
          return primaryChildFragment;
        }
        function updateSuspenseFallbackChildren(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var mode = workInProgress2.mode;
          var currentPrimaryChildFragment = current2.child;
          var currentFallbackChildFragment = currentPrimaryChildFragment.sibling;
          var primaryChildProps = {
            mode: "hidden",
            children: primaryChildren
          };
          var primaryChildFragment;
          if (
            // In legacy mode, we commit the primary tree as if it successfully
            // completed, even though it's in an inconsistent state.
            (mode & ConcurrentMode) === NoMode && // Make sure we're on the second pass, i.e. the primary child fragment was
            // already cloned. In legacy mode, the only case where this isn't true is
            // when DevTools forces us to display a fallback; we skip the first render
            // pass entirely and go straight to rendering the fallback. (In Concurrent
            // Mode, SuspenseList can also trigger this scenario, but this is a legacy-
            // only codepath.)
            workInProgress2.child !== currentPrimaryChildFragment
          ) {
            var progressedPrimaryFragment = workInProgress2.child;
            primaryChildFragment = progressedPrimaryFragment;
            primaryChildFragment.childLanes = NoLanes;
            primaryChildFragment.pendingProps = primaryChildProps;
            if (workInProgress2.mode & ProfileMode) {
              primaryChildFragment.actualDuration = 0;
              primaryChildFragment.actualStartTime = -1;
              primaryChildFragment.selfBaseDuration = currentPrimaryChildFragment.selfBaseDuration;
              primaryChildFragment.treeBaseDuration = currentPrimaryChildFragment.treeBaseDuration;
            }
            workInProgress2.deletions = null;
          } else {
            primaryChildFragment = updateWorkInProgressOffscreenFiber(currentPrimaryChildFragment, primaryChildProps);
            primaryChildFragment.subtreeFlags = currentPrimaryChildFragment.subtreeFlags & StaticMask;
          }
          var fallbackChildFragment;
          if (currentFallbackChildFragment !== null) {
            fallbackChildFragment = createWorkInProgress(currentFallbackChildFragment, fallbackChildren);
          } else {
            fallbackChildFragment = createFiberFromFragment(fallbackChildren, mode, renderLanes2, null);
            fallbackChildFragment.flags |= Placement;
          }
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          return fallbackChildFragment;
        }
        function retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, recoverableError) {
          if (recoverableError !== null) {
            queueHydrationError(recoverableError);
          }
          reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          var nextProps = workInProgress2.pendingProps;
          var primaryChildren = nextProps.children;
          var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
          primaryChildFragment.flags |= Placement;
          workInProgress2.memoizedState = null;
          return primaryChildFragment;
        }
        function mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, primaryChildren, fallbackChildren, renderLanes2) {
          var fiberMode = workInProgress2.mode;
          var primaryChildProps = {
            mode: "visible",
            children: primaryChildren
          };
          var primaryChildFragment = mountWorkInProgressOffscreenFiber(primaryChildProps, fiberMode);
          var fallbackChildFragment = createFiberFromFragment(fallbackChildren, fiberMode, renderLanes2, null);
          fallbackChildFragment.flags |= Placement;
          primaryChildFragment.return = workInProgress2;
          fallbackChildFragment.return = workInProgress2;
          primaryChildFragment.sibling = fallbackChildFragment;
          workInProgress2.child = primaryChildFragment;
          if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
            reconcileChildFibers(workInProgress2, current2.child, null, renderLanes2);
          }
          return fallbackChildFragment;
        }
        function mountDehydratedSuspenseComponent(workInProgress2, suspenseInstance, renderLanes2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            {
              error("Cannot hydrate Suspense in legacy mode. Switch from ReactDOM.hydrate(element, container) to ReactDOMClient.hydrateRoot(container, <App />).render(element) or remove the Suspense components from the server rendered components.");
            }
            workInProgress2.lanes = laneToLanes(SyncLane);
          } else if (isSuspenseInstanceFallback(suspenseInstance)) {
            workInProgress2.lanes = laneToLanes(DefaultHydrationLane);
          } else {
            workInProgress2.lanes = laneToLanes(OffscreenLane);
          }
          return null;
        }
        function updateDehydratedSuspenseComponent(current2, workInProgress2, didSuspend, nextProps, suspenseInstance, suspenseState, renderLanes2) {
          if (!didSuspend) {
            warnIfHydrating();
            if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
              return retrySuspenseComponentWithoutHydrating(
                current2,
                workInProgress2,
                renderLanes2,
                // TODO: When we delete legacy mode, we should make this error argument
                // required — every concurrent mode path that causes hydration to
                // de-opt to client rendering should have an error message.
                null
              );
            }
            if (isSuspenseInstanceFallback(suspenseInstance)) {
              var digest, message, stack;
              {
                var _getSuspenseInstanceF = getSuspenseInstanceFallbackErrorDetails(suspenseInstance);
                digest = _getSuspenseInstanceF.digest;
                message = _getSuspenseInstanceF.message;
                stack = _getSuspenseInstanceF.stack;
              }
              var error2;
              if (message) {
                error2 = new Error(message);
              } else {
                error2 = new Error("The server could not finish this Suspense boundary, likely due to an error during server rendering. Switched to client rendering.");
              }
              var capturedValue = createCapturedValue(error2, digest, stack);
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, capturedValue);
            }
            var hasContextChanged2 = includesSomeLane(renderLanes2, current2.childLanes);
            if (didReceiveUpdate || hasContextChanged2) {
              var root2 = getWorkInProgressRoot();
              if (root2 !== null) {
                var attemptHydrationAtLane = getBumpedLaneForHydration(root2, renderLanes2);
                if (attemptHydrationAtLane !== NoLane && attemptHydrationAtLane !== suspenseState.retryLane) {
                  suspenseState.retryLane = attemptHydrationAtLane;
                  var eventTime = NoTimestamp;
                  enqueueConcurrentRenderForLane(current2, attemptHydrationAtLane);
                  scheduleUpdateOnFiber(root2, current2, attemptHydrationAtLane, eventTime);
                }
              }
              renderDidSuspendDelayIfPossible();
              var _capturedValue = createCapturedValue(new Error("This Suspense boundary received an update before it finished hydrating. This caused the boundary to switch to client rendering. The usual way to fix this is to wrap the original update in startTransition."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue);
            } else if (isSuspenseInstancePending(suspenseInstance)) {
              workInProgress2.flags |= DidCapture;
              workInProgress2.child = current2.child;
              var retry = retryDehydratedSuspenseBoundary.bind(null, current2);
              registerSuspenseInstanceRetry(suspenseInstance, retry);
              return null;
            } else {
              reenterHydrationStateFromDehydratedSuspenseInstance(workInProgress2, suspenseInstance, suspenseState.treeContext);
              var primaryChildren = nextProps.children;
              var primaryChildFragment = mountSuspensePrimaryChildren(workInProgress2, primaryChildren);
              primaryChildFragment.flags |= Hydrating;
              return primaryChildFragment;
            }
          } else {
            if (workInProgress2.flags & ForceClientRender) {
              workInProgress2.flags &= ~ForceClientRender;
              var _capturedValue2 = createCapturedValue(new Error("There was an error while hydrating this Suspense boundary. Switched to client rendering."));
              return retrySuspenseComponentWithoutHydrating(current2, workInProgress2, renderLanes2, _capturedValue2);
            } else if (workInProgress2.memoizedState !== null) {
              workInProgress2.child = current2.child;
              workInProgress2.flags |= DidCapture;
              return null;
            } else {
              var nextPrimaryChildren = nextProps.children;
              var nextFallbackChildren = nextProps.fallback;
              var fallbackChildFragment = mountSuspenseFallbackAfterRetryWithoutHydrating(current2, workInProgress2, nextPrimaryChildren, nextFallbackChildren, renderLanes2);
              var _primaryChildFragment4 = workInProgress2.child;
              _primaryChildFragment4.memoizedState = mountSuspenseOffscreenState(renderLanes2);
              workInProgress2.memoizedState = SUSPENDED_MARKER;
              return fallbackChildFragment;
            }
          }
        }
        function scheduleSuspenseWorkOnFiber(fiber, renderLanes2, propagationRoot) {
          fiber.lanes = mergeLanes(fiber.lanes, renderLanes2);
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.lanes = mergeLanes(alternate.lanes, renderLanes2);
          }
          scheduleContextWorkOnParentPath(fiber.return, renderLanes2, propagationRoot);
        }
        function propagateSuspenseContextChange(workInProgress2, firstChild, renderLanes2) {
          var node = firstChild;
          while (node !== null) {
            if (node.tag === SuspenseComponent) {
              var state = node.memoizedState;
              if (state !== null) {
                scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
              }
            } else if (node.tag === SuspenseListComponent) {
              scheduleSuspenseWorkOnFiber(node, renderLanes2, workInProgress2);
            } else if (node.child !== null) {
              node.child.return = node;
              node = node.child;
              continue;
            }
            if (node === workInProgress2) {
              return;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === workInProgress2) {
                return;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
        }
        function findLastContentRow(firstChild) {
          var row = firstChild;
          var lastContentRow = null;
          while (row !== null) {
            var currentRow = row.alternate;
            if (currentRow !== null && findFirstSuspended(currentRow) === null) {
              lastContentRow = row;
            }
            row = row.sibling;
          }
          return lastContentRow;
        }
        function validateRevealOrder(revealOrder) {
          {
            if (revealOrder !== void 0 && revealOrder !== "forwards" && revealOrder !== "backwards" && revealOrder !== "together" && !didWarnAboutRevealOrder[revealOrder]) {
              didWarnAboutRevealOrder[revealOrder] = true;
              if (typeof revealOrder === "string") {
                switch (revealOrder.toLowerCase()) {
                  case "together":
                  case "forwards":
                  case "backwards": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. Use lowercase "%s" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  case "forward":
                  case "backward": {
                    error('"%s" is not a valid value for revealOrder on <SuspenseList />. React uses the -s suffix in the spelling. Use "%ss" instead.', revealOrder, revealOrder.toLowerCase());
                    break;
                  }
                  default:
                    error('"%s" is not a supported revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
                    break;
                }
              } else {
                error('%s is not a supported value for revealOrder on <SuspenseList />. Did you mean "together", "forwards" or "backwards"?', revealOrder);
              }
            }
          }
        }
        function validateTailOptions(tailMode, revealOrder) {
          {
            if (tailMode !== void 0 && !didWarnAboutTailOptions[tailMode]) {
              if (tailMode !== "collapsed" && tailMode !== "hidden") {
                didWarnAboutTailOptions[tailMode] = true;
                error('"%s" is not a supported value for tail on <SuspenseList />. Did you mean "collapsed" or "hidden"?', tailMode);
              } else if (revealOrder !== "forwards" && revealOrder !== "backwards") {
                didWarnAboutTailOptions[tailMode] = true;
                error('<SuspenseList tail="%s" /> is only valid if revealOrder is "forwards" or "backwards". Did you mean to specify revealOrder="forwards"?', tailMode);
              }
            }
          }
        }
        function validateSuspenseListNestedChild(childSlot, index2) {
          {
            var isAnArray = isArray(childSlot);
            var isIterable = !isAnArray && typeof getIteratorFn(childSlot) === "function";
            if (isAnArray || isIterable) {
              var type = isAnArray ? "array" : "iterable";
              error("A nested %s was passed to row #%s in <SuspenseList />. Wrap it in an additional SuspenseList to configure its revealOrder: <SuspenseList revealOrder=...> ... <SuspenseList revealOrder=...>{%s}</SuspenseList> ... </SuspenseList>", type, index2, type);
              return false;
            }
          }
          return true;
        }
        function validateSuspenseListChildren(children, revealOrder) {
          {
            if ((revealOrder === "forwards" || revealOrder === "backwards") && children !== void 0 && children !== null && children !== false) {
              if (isArray(children)) {
                for (var i = 0; i < children.length; i++) {
                  if (!validateSuspenseListNestedChild(children[i], i)) {
                    return;
                  }
                }
              } else {
                var iteratorFn = getIteratorFn(children);
                if (typeof iteratorFn === "function") {
                  var childrenIterator = iteratorFn.call(children);
                  if (childrenIterator) {
                    var step = childrenIterator.next();
                    var _i2 = 0;
                    for (; !step.done; step = childrenIterator.next()) {
                      if (!validateSuspenseListNestedChild(step.value, _i2)) {
                        return;
                      }
                      _i2++;
                    }
                  }
                } else {
                  error('A single row was passed to a <SuspenseList revealOrder="%s" />. This is not useful since it needs multiple rows. Did you mean to pass multiple children or an array?', revealOrder);
                }
              }
            }
          }
        }
        function initSuspenseListRenderState(workInProgress2, isBackwards, tail, lastContentRow, tailMode) {
          var renderState = workInProgress2.memoizedState;
          if (renderState === null) {
            workInProgress2.memoizedState = {
              isBackwards,
              rendering: null,
              renderingStartTime: 0,
              last: lastContentRow,
              tail,
              tailMode
            };
          } else {
            renderState.isBackwards = isBackwards;
            renderState.rendering = null;
            renderState.renderingStartTime = 0;
            renderState.last = lastContentRow;
            renderState.tail = tail;
            renderState.tailMode = tailMode;
          }
        }
        function updateSuspenseListComponent(current2, workInProgress2, renderLanes2) {
          var nextProps = workInProgress2.pendingProps;
          var revealOrder = nextProps.revealOrder;
          var tailMode = nextProps.tail;
          var newChildren = nextProps.children;
          validateRevealOrder(revealOrder);
          validateTailOptions(tailMode, revealOrder);
          validateSuspenseListChildren(newChildren, revealOrder);
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          var suspenseContext = suspenseStackCursor.current;
          var shouldForceFallback = hasSuspenseContext(suspenseContext, ForceSuspenseFallback);
          if (shouldForceFallback) {
            suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
            workInProgress2.flags |= DidCapture;
          } else {
            var didSuspendBefore = current2 !== null && (current2.flags & DidCapture) !== NoFlags;
            if (didSuspendBefore) {
              propagateSuspenseContextChange(workInProgress2, workInProgress2.child, renderLanes2);
            }
            suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
          }
          pushSuspenseContext(workInProgress2, suspenseContext);
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            workInProgress2.memoizedState = null;
          } else {
            switch (revealOrder) {
              case "forwards": {
                var lastContentRow = findLastContentRow(workInProgress2.child);
                var tail;
                if (lastContentRow === null) {
                  tail = workInProgress2.child;
                  workInProgress2.child = null;
                } else {
                  tail = lastContentRow.sibling;
                  lastContentRow.sibling = null;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  tail,
                  lastContentRow,
                  tailMode
                );
                break;
              }
              case "backwards": {
                var _tail = null;
                var row = workInProgress2.child;
                workInProgress2.child = null;
                while (row !== null) {
                  var currentRow = row.alternate;
                  if (currentRow !== null && findFirstSuspended(currentRow) === null) {
                    workInProgress2.child = row;
                    break;
                  }
                  var nextRow = row.sibling;
                  row.sibling = _tail;
                  _tail = row;
                  row = nextRow;
                }
                initSuspenseListRenderState(
                  workInProgress2,
                  true,
                  // isBackwards
                  _tail,
                  null,
                  // last
                  tailMode
                );
                break;
              }
              case "together": {
                initSuspenseListRenderState(
                  workInProgress2,
                  false,
                  // isBackwards
                  null,
                  // tail
                  null,
                  // last
                  void 0
                );
                break;
              }
              default: {
                workInProgress2.memoizedState = null;
              }
            }
          }
          return workInProgress2.child;
        }
        function updatePortalComponent(current2, workInProgress2, renderLanes2) {
          pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
          var nextChildren = workInProgress2.pendingProps;
          if (current2 === null) {
            workInProgress2.child = reconcileChildFibers(workInProgress2, null, nextChildren, renderLanes2);
          } else {
            reconcileChildren(current2, workInProgress2, nextChildren, renderLanes2);
          }
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingNoValuePropOnContextProvider = false;
        function updateContextProvider(current2, workInProgress2, renderLanes2) {
          var providerType = workInProgress2.type;
          var context = providerType._context;
          var newProps = workInProgress2.pendingProps;
          var oldProps = workInProgress2.memoizedProps;
          var newValue = newProps.value;
          {
            if (!("value" in newProps)) {
              if (!hasWarnedAboutUsingNoValuePropOnContextProvider) {
                hasWarnedAboutUsingNoValuePropOnContextProvider = true;
                error("The `value` prop is required for the `<Context.Provider>`. Did you misspell it or forget to pass it?");
              }
            }
            var providerPropTypes = workInProgress2.type.propTypes;
            if (providerPropTypes) {
              checkPropTypes(providerPropTypes, newProps, "prop", "Context.Provider");
            }
          }
          pushProvider(workInProgress2, context, newValue);
          {
            if (oldProps !== null) {
              var oldValue = oldProps.value;
              if (objectIs(oldValue, newValue)) {
                if (oldProps.children === newProps.children && !hasContextChanged()) {
                  return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                }
              } else {
                propagateContextChange(workInProgress2, context, renderLanes2);
              }
            }
          }
          var newChildren = newProps.children;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        var hasWarnedAboutUsingContextAsConsumer = false;
        function updateContextConsumer(current2, workInProgress2, renderLanes2) {
          var context = workInProgress2.type;
          {
            if (context._context === void 0) {
              if (context !== context.Consumer) {
                if (!hasWarnedAboutUsingContextAsConsumer) {
                  hasWarnedAboutUsingContextAsConsumer = true;
                  error("Rendering <Context> directly is not supported and will be removed in a future major release. Did you mean to render <Context.Consumer> instead?");
                }
              }
            } else {
              context = context._context;
            }
          }
          var newProps = workInProgress2.pendingProps;
          var render2 = newProps.children;
          {
            if (typeof render2 !== "function") {
              error("A context consumer was rendered with multiple children, or a child that isn't a function. A context consumer expects a single child that is a function. If you did pass a function, make sure there is no trailing or leading whitespace around it.");
            }
          }
          prepareToReadContext(workInProgress2, renderLanes2);
          var newValue = readContext(context);
          {
            markComponentRenderStarted(workInProgress2);
          }
          var newChildren;
          {
            ReactCurrentOwner$1.current = workInProgress2;
            setIsRendering(true);
            newChildren = render2(newValue);
            setIsRendering(false);
          }
          {
            markComponentRenderStopped();
          }
          workInProgress2.flags |= PerformedWork;
          reconcileChildren(current2, workInProgress2, newChildren, renderLanes2);
          return workInProgress2.child;
        }
        function markWorkInProgressReceivedUpdate() {
          didReceiveUpdate = true;
        }
        function resetSuspendedCurrentOnMountInLegacyMode(current2, workInProgress2) {
          if ((workInProgress2.mode & ConcurrentMode) === NoMode) {
            if (current2 !== null) {
              current2.alternate = null;
              workInProgress2.alternate = null;
              workInProgress2.flags |= Placement;
            }
          }
        }
        function bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2) {
          if (current2 !== null) {
            workInProgress2.dependencies = current2.dependencies;
          }
          {
            stopProfilerTimerIfRunning();
          }
          markSkippedUpdateLanes(workInProgress2.lanes);
          if (!includesSomeLane(renderLanes2, workInProgress2.childLanes)) {
            {
              return null;
            }
          }
          cloneChildFibers(current2, workInProgress2);
          return workInProgress2.child;
        }
        function remountFiber(current2, oldWorkInProgress, newWorkInProgress) {
          {
            var returnFiber = oldWorkInProgress.return;
            if (returnFiber === null) {
              throw new Error("Cannot swap the root fiber.");
            }
            current2.alternate = null;
            oldWorkInProgress.alternate = null;
            newWorkInProgress.index = oldWorkInProgress.index;
            newWorkInProgress.sibling = oldWorkInProgress.sibling;
            newWorkInProgress.return = oldWorkInProgress.return;
            newWorkInProgress.ref = oldWorkInProgress.ref;
            if (oldWorkInProgress === returnFiber.child) {
              returnFiber.child = newWorkInProgress;
            } else {
              var prevSibling = returnFiber.child;
              if (prevSibling === null) {
                throw new Error("Expected parent to have a child.");
              }
              while (prevSibling.sibling !== oldWorkInProgress) {
                prevSibling = prevSibling.sibling;
                if (prevSibling === null) {
                  throw new Error("Expected to find the previous sibling.");
                }
              }
              prevSibling.sibling = newWorkInProgress;
            }
            var deletions = returnFiber.deletions;
            if (deletions === null) {
              returnFiber.deletions = [current2];
              returnFiber.flags |= ChildDeletion;
            } else {
              deletions.push(current2);
            }
            newWorkInProgress.flags |= Placement;
            return newWorkInProgress;
          }
        }
        function checkScheduledUpdateOrContext(current2, renderLanes2) {
          var updateLanes = current2.lanes;
          if (includesSomeLane(updateLanes, renderLanes2)) {
            return true;
          }
          return false;
        }
        function attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2) {
          switch (workInProgress2.tag) {
            case HostRoot:
              pushHostRootContext(workInProgress2);
              var root2 = workInProgress2.stateNode;
              resetHydrationState();
              break;
            case HostComponent:
              pushHostContext(workInProgress2);
              break;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                pushContextProvider(workInProgress2);
              }
              break;
            }
            case HostPortal:
              pushHostContainer(workInProgress2, workInProgress2.stateNode.containerInfo);
              break;
            case ContextProvider: {
              var newValue = workInProgress2.memoizedProps.value;
              var context = workInProgress2.type._context;
              pushProvider(workInProgress2, context, newValue);
              break;
            }
            case Profiler:
              {
                var hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
                if (hasChildWork) {
                  workInProgress2.flags |= Update;
                }
                {
                  var stateNode = workInProgress2.stateNode;
                  stateNode.effectDuration = 0;
                  stateNode.passiveEffectDuration = 0;
                }
              }
              break;
            case SuspenseComponent: {
              var state = workInProgress2.memoizedState;
              if (state !== null) {
                if (state.dehydrated !== null) {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  workInProgress2.flags |= DidCapture;
                  return null;
                }
                var primaryChildFragment = workInProgress2.child;
                var primaryChildLanes = primaryChildFragment.childLanes;
                if (includesSomeLane(renderLanes2, primaryChildLanes)) {
                  return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
                } else {
                  pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
                  var child = bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
                  if (child !== null) {
                    return child.sibling;
                  } else {
                    return null;
                  }
                }
              } else {
                pushSuspenseContext(workInProgress2, setDefaultShallowSuspenseContext(suspenseStackCursor.current));
              }
              break;
            }
            case SuspenseListComponent: {
              var didSuspendBefore = (current2.flags & DidCapture) !== NoFlags;
              var _hasChildWork = includesSomeLane(renderLanes2, workInProgress2.childLanes);
              if (didSuspendBefore) {
                if (_hasChildWork) {
                  return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
                }
                workInProgress2.flags |= DidCapture;
              }
              var renderState = workInProgress2.memoizedState;
              if (renderState !== null) {
                renderState.rendering = null;
                renderState.tail = null;
                renderState.lastEffect = null;
              }
              pushSuspenseContext(workInProgress2, suspenseStackCursor.current);
              if (_hasChildWork) {
                break;
              } else {
                return null;
              }
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              workInProgress2.lanes = NoLanes;
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          return bailoutOnAlreadyFinishedWork(current2, workInProgress2, renderLanes2);
        }
        function beginWork(current2, workInProgress2, renderLanes2) {
          {
            if (workInProgress2._debugNeedsRemount && current2 !== null) {
              return remountFiber(current2, workInProgress2, createFiberFromTypeAndProps(workInProgress2.type, workInProgress2.key, workInProgress2.pendingProps, workInProgress2._debugOwner || null, workInProgress2.mode, workInProgress2.lanes));
            }
          }
          if (current2 !== null) {
            var oldProps = current2.memoizedProps;
            var newProps = workInProgress2.pendingProps;
            if (oldProps !== newProps || hasContextChanged() || // Force a re-render if the implementation changed due to hot reload:
            workInProgress2.type !== current2.type) {
              didReceiveUpdate = true;
            } else {
              var hasScheduledUpdateOrContext = checkScheduledUpdateOrContext(current2, renderLanes2);
              if (!hasScheduledUpdateOrContext && // If this is the second pass of an error or suspense boundary, there
              // may not be work scheduled on `current`, so we check for this flag.
              (workInProgress2.flags & DidCapture) === NoFlags) {
                didReceiveUpdate = false;
                return attemptEarlyBailoutIfNoScheduledUpdate(current2, workInProgress2, renderLanes2);
              }
              if ((current2.flags & ForceUpdateForLegacySuspense) !== NoFlags) {
                didReceiveUpdate = true;
              } else {
                didReceiveUpdate = false;
              }
            }
          } else {
            didReceiveUpdate = false;
            if (getIsHydrating() && isForkedChild(workInProgress2)) {
              var slotIndex = workInProgress2.index;
              var numberOfForks = getForksAtLevel();
              pushTreeId(workInProgress2, numberOfForks, slotIndex);
            }
          }
          workInProgress2.lanes = NoLanes;
          switch (workInProgress2.tag) {
            case IndeterminateComponent: {
              return mountIndeterminateComponent(current2, workInProgress2, workInProgress2.type, renderLanes2);
            }
            case LazyComponent: {
              var elementType = workInProgress2.elementType;
              return mountLazyComponent(current2, workInProgress2, elementType, renderLanes2);
            }
            case FunctionComponent: {
              var Component = workInProgress2.type;
              var unresolvedProps = workInProgress2.pendingProps;
              var resolvedProps = workInProgress2.elementType === Component ? unresolvedProps : resolveDefaultProps(Component, unresolvedProps);
              return updateFunctionComponent(current2, workInProgress2, Component, resolvedProps, renderLanes2);
            }
            case ClassComponent: {
              var _Component = workInProgress2.type;
              var _unresolvedProps = workInProgress2.pendingProps;
              var _resolvedProps = workInProgress2.elementType === _Component ? _unresolvedProps : resolveDefaultProps(_Component, _unresolvedProps);
              return updateClassComponent(current2, workInProgress2, _Component, _resolvedProps, renderLanes2);
            }
            case HostRoot:
              return updateHostRoot(current2, workInProgress2, renderLanes2);
            case HostComponent:
              return updateHostComponent(current2, workInProgress2, renderLanes2);
            case HostText:
              return updateHostText(current2, workInProgress2);
            case SuspenseComponent:
              return updateSuspenseComponent(current2, workInProgress2, renderLanes2);
            case HostPortal:
              return updatePortalComponent(current2, workInProgress2, renderLanes2);
            case ForwardRef: {
              var type = workInProgress2.type;
              var _unresolvedProps2 = workInProgress2.pendingProps;
              var _resolvedProps2 = workInProgress2.elementType === type ? _unresolvedProps2 : resolveDefaultProps(type, _unresolvedProps2);
              return updateForwardRef(current2, workInProgress2, type, _resolvedProps2, renderLanes2);
            }
            case Fragment6:
              return updateFragment(current2, workInProgress2, renderLanes2);
            case Mode:
              return updateMode(current2, workInProgress2, renderLanes2);
            case Profiler:
              return updateProfiler(current2, workInProgress2, renderLanes2);
            case ContextProvider:
              return updateContextProvider(current2, workInProgress2, renderLanes2);
            case ContextConsumer:
              return updateContextConsumer(current2, workInProgress2, renderLanes2);
            case MemoComponent: {
              var _type2 = workInProgress2.type;
              var _unresolvedProps3 = workInProgress2.pendingProps;
              var _resolvedProps3 = resolveDefaultProps(_type2, _unresolvedProps3);
              {
                if (workInProgress2.type !== workInProgress2.elementType) {
                  var outerPropTypes = _type2.propTypes;
                  if (outerPropTypes) {
                    checkPropTypes(
                      outerPropTypes,
                      _resolvedProps3,
                      // Resolved for outer only
                      "prop",
                      getComponentNameFromType(_type2)
                    );
                  }
                }
              }
              _resolvedProps3 = resolveDefaultProps(_type2.type, _resolvedProps3);
              return updateMemoComponent(current2, workInProgress2, _type2, _resolvedProps3, renderLanes2);
            }
            case SimpleMemoComponent: {
              return updateSimpleMemoComponent(current2, workInProgress2, workInProgress2.type, workInProgress2.pendingProps, renderLanes2);
            }
            case IncompleteClassComponent: {
              var _Component2 = workInProgress2.type;
              var _unresolvedProps4 = workInProgress2.pendingProps;
              var _resolvedProps4 = workInProgress2.elementType === _Component2 ? _unresolvedProps4 : resolveDefaultProps(_Component2, _unresolvedProps4);
              return mountIncompleteClassComponent(current2, workInProgress2, _Component2, _resolvedProps4, renderLanes2);
            }
            case SuspenseListComponent: {
              return updateSuspenseListComponent(current2, workInProgress2, renderLanes2);
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent: {
              return updateOffscreenComponent(current2, workInProgress2, renderLanes2);
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function markUpdate(workInProgress2) {
          workInProgress2.flags |= Update;
        }
        function markRef$1(workInProgress2) {
          workInProgress2.flags |= Ref;
          {
            workInProgress2.flags |= RefStatic;
          }
        }
        var appendAllChildren;
        var updateHostContainer;
        var updateHostComponent$1;
        var updateHostText$1;
        {
          appendAllChildren = function(parent, workInProgress2, needsVisibilityToggle, isHidden) {
            var node = workInProgress2.child;
            while (node !== null) {
              if (node.tag === HostComponent || node.tag === HostText) {
                appendInitialChild(parent, node.stateNode);
              } else if (node.tag === HostPortal) ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === workInProgress2) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === workInProgress2) {
                  return;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          };
          updateHostContainer = function(current2, workInProgress2) {
          };
          updateHostComponent$1 = function(current2, workInProgress2, type, newProps, rootContainerInstance) {
            var oldProps = current2.memoizedProps;
            if (oldProps === newProps) {
              return;
            }
            var instance = workInProgress2.stateNode;
            var currentHostContext = getHostContext();
            var updatePayload = prepareUpdate(instance, type, oldProps, newProps, rootContainerInstance, currentHostContext);
            workInProgress2.updateQueue = updatePayload;
            if (updatePayload) {
              markUpdate(workInProgress2);
            }
          };
          updateHostText$1 = function(current2, workInProgress2, oldText, newText) {
            if (oldText !== newText) {
              markUpdate(workInProgress2);
            }
          };
        }
        function cutOffTailIfNeeded(renderState, hasRenderedATailFallback) {
          if (getIsHydrating()) {
            return;
          }
          switch (renderState.tailMode) {
            case "hidden": {
              var tailNode = renderState.tail;
              var lastTailNode = null;
              while (tailNode !== null) {
                if (tailNode.alternate !== null) {
                  lastTailNode = tailNode;
                }
                tailNode = tailNode.sibling;
              }
              if (lastTailNode === null) {
                renderState.tail = null;
              } else {
                lastTailNode.sibling = null;
              }
              break;
            }
            case "collapsed": {
              var _tailNode = renderState.tail;
              var _lastTailNode = null;
              while (_tailNode !== null) {
                if (_tailNode.alternate !== null) {
                  _lastTailNode = _tailNode;
                }
                _tailNode = _tailNode.sibling;
              }
              if (_lastTailNode === null) {
                if (!hasRenderedATailFallback && renderState.tail !== null) {
                  renderState.tail.sibling = null;
                } else {
                  renderState.tail = null;
                }
              } else {
                _lastTailNode.sibling = null;
              }
              break;
            }
          }
        }
        function bubbleProperties(completedWork) {
          var didBailout = completedWork.alternate !== null && completedWork.alternate.child === completedWork.child;
          var newChildLanes = NoLanes;
          var subtreeFlags = NoFlags;
          if (!didBailout) {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var actualDuration = completedWork.actualDuration;
              var treeBaseDuration = completedWork.selfBaseDuration;
              var child = completedWork.child;
              while (child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(child.lanes, child.childLanes));
                subtreeFlags |= child.subtreeFlags;
                subtreeFlags |= child.flags;
                actualDuration += child.actualDuration;
                treeBaseDuration += child.treeBaseDuration;
                child = child.sibling;
              }
              completedWork.actualDuration = actualDuration;
              completedWork.treeBaseDuration = treeBaseDuration;
            } else {
              var _child = completedWork.child;
              while (_child !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child.lanes, _child.childLanes));
                subtreeFlags |= _child.subtreeFlags;
                subtreeFlags |= _child.flags;
                _child.return = completedWork;
                _child = _child.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          } else {
            if ((completedWork.mode & ProfileMode) !== NoMode) {
              var _treeBaseDuration = completedWork.selfBaseDuration;
              var _child2 = completedWork.child;
              while (_child2 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child2.lanes, _child2.childLanes));
                subtreeFlags |= _child2.subtreeFlags & StaticMask;
                subtreeFlags |= _child2.flags & StaticMask;
                _treeBaseDuration += _child2.treeBaseDuration;
                _child2 = _child2.sibling;
              }
              completedWork.treeBaseDuration = _treeBaseDuration;
            } else {
              var _child3 = completedWork.child;
              while (_child3 !== null) {
                newChildLanes = mergeLanes(newChildLanes, mergeLanes(_child3.lanes, _child3.childLanes));
                subtreeFlags |= _child3.subtreeFlags & StaticMask;
                subtreeFlags |= _child3.flags & StaticMask;
                _child3.return = completedWork;
                _child3 = _child3.sibling;
              }
            }
            completedWork.subtreeFlags |= subtreeFlags;
          }
          completedWork.childLanes = newChildLanes;
          return didBailout;
        }
        function completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState) {
          if (hasUnhydratedTailNodes() && (workInProgress2.mode & ConcurrentMode) !== NoMode && (workInProgress2.flags & DidCapture) === NoFlags) {
            warnIfUnhydratedTailNodes(workInProgress2);
            resetHydrationState();
            workInProgress2.flags |= ForceClientRender | Incomplete | ShouldCapture;
            return false;
          }
          var wasHydrated = popHydrationState(workInProgress2);
          if (nextState !== null && nextState.dehydrated !== null) {
            if (current2 === null) {
              if (!wasHydrated) {
                throw new Error("A dehydrated suspense component was completed without a hydrated node. This is probably a bug in React.");
              }
              prepareToHydrateHostSuspenseInstance(workInProgress2);
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var isTimedOutSuspense = nextState !== null;
                  if (isTimedOutSuspense) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            } else {
              resetHydrationState();
              if ((workInProgress2.flags & DidCapture) === NoFlags) {
                workInProgress2.memoizedState = null;
              }
              workInProgress2.flags |= Update;
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  var _isTimedOutSuspense = nextState !== null;
                  if (_isTimedOutSuspense) {
                    var _primaryChildFragment = workInProgress2.child;
                    if (_primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= _primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return false;
            }
          } else {
            upgradeHydrationErrorsToRecoverable();
            return true;
          }
        }
        function completeWork(current2, workInProgress2, renderLanes2) {
          var newProps = workInProgress2.pendingProps;
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case IndeterminateComponent:
            case LazyComponent:
            case SimpleMemoComponent:
            case FunctionComponent:
            case ForwardRef:
            case Fragment6:
            case Mode:
            case Profiler:
            case ContextConsumer:
            case MemoComponent:
              bubbleProperties(workInProgress2);
              return null;
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostRoot: {
              var fiberRoot = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              if (fiberRoot.pendingContext) {
                fiberRoot.context = fiberRoot.pendingContext;
                fiberRoot.pendingContext = null;
              }
              if (current2 === null || current2.child === null) {
                var wasHydrated = popHydrationState(workInProgress2);
                if (wasHydrated) {
                  markUpdate(workInProgress2);
                } else {
                  if (current2 !== null) {
                    var prevState = current2.memoizedState;
                    if (
                      // Check if this is a client root
                      !prevState.isDehydrated || // Check if we reverted to client rendering (e.g. due to an error)
                      (workInProgress2.flags & ForceClientRender) !== NoFlags
                    ) {
                      workInProgress2.flags |= Snapshot;
                      upgradeHydrationErrorsToRecoverable();
                    }
                  }
                }
              }
              updateHostContainer(current2, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              var rootContainerInstance = getRootHostContainer();
              var type = workInProgress2.type;
              if (current2 !== null && workInProgress2.stateNode != null) {
                updateHostComponent$1(current2, workInProgress2, type, newProps, rootContainerInstance);
                if (current2.ref !== workInProgress2.ref) {
                  markRef$1(workInProgress2);
                }
              } else {
                if (!newProps) {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  bubbleProperties(workInProgress2);
                  return null;
                }
                var currentHostContext = getHostContext();
                var _wasHydrated = popHydrationState(workInProgress2);
                if (_wasHydrated) {
                  if (prepareToHydrateHostInstance(workInProgress2, rootContainerInstance, currentHostContext)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  var instance = createInstance(type, newProps, rootContainerInstance, currentHostContext, workInProgress2);
                  appendAllChildren(instance, workInProgress2, false, false);
                  workInProgress2.stateNode = instance;
                  if (finalizeInitialChildren(instance, type, newProps, rootContainerInstance)) {
                    markUpdate(workInProgress2);
                  }
                }
                if (workInProgress2.ref !== null) {
                  markRef$1(workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case HostText: {
              var newText = newProps;
              if (current2 && workInProgress2.stateNode != null) {
                var oldText = current2.memoizedProps;
                updateHostText$1(current2, workInProgress2, oldText, newText);
              } else {
                if (typeof newText !== "string") {
                  if (workInProgress2.stateNode === null) {
                    throw new Error("We must have new props for new mounts. This error is likely caused by a bug in React. Please file an issue.");
                  }
                }
                var _rootContainerInstance = getRootHostContainer();
                var _currentHostContext = getHostContext();
                var _wasHydrated2 = popHydrationState(workInProgress2);
                if (_wasHydrated2) {
                  if (prepareToHydrateHostTextInstance(workInProgress2)) {
                    markUpdate(workInProgress2);
                  }
                } else {
                  workInProgress2.stateNode = createTextInstance(newText, _rootContainerInstance, _currentHostContext, workInProgress2);
                }
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var nextState = workInProgress2.memoizedState;
              if (current2 === null || current2.memoizedState !== null && current2.memoizedState.dehydrated !== null) {
                var fallthroughToNormalSuspensePath = completeDehydratedSuspenseBoundary(current2, workInProgress2, nextState);
                if (!fallthroughToNormalSuspensePath) {
                  if (workInProgress2.flags & ShouldCapture) {
                    return workInProgress2;
                  } else {
                    return null;
                  }
                }
              }
              if ((workInProgress2.flags & DidCapture) !== NoFlags) {
                workInProgress2.lanes = renderLanes2;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              var nextDidTimeout = nextState !== null;
              var prevDidTimeout = current2 !== null && current2.memoizedState !== null;
              if (nextDidTimeout !== prevDidTimeout) {
                if (nextDidTimeout) {
                  var _offscreenFiber2 = workInProgress2.child;
                  _offscreenFiber2.flags |= Visibility;
                  if ((workInProgress2.mode & ConcurrentMode) !== NoMode) {
                    var hasInvisibleChildContext = current2 === null && (workInProgress2.memoizedProps.unstable_avoidThisFallback !== true || !enableSuspenseAvoidThisFallback);
                    if (hasInvisibleChildContext || hasSuspenseContext(suspenseStackCursor.current, InvisibleParentSuspenseContext)) {
                      renderDidSuspend();
                    } else {
                      renderDidSuspendDelayIfPossible();
                    }
                  }
                }
              }
              var wakeables = workInProgress2.updateQueue;
              if (wakeables !== null) {
                workInProgress2.flags |= Update;
              }
              bubbleProperties(workInProgress2);
              {
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  if (nextDidTimeout) {
                    var primaryChildFragment = workInProgress2.child;
                    if (primaryChildFragment !== null) {
                      workInProgress2.treeBaseDuration -= primaryChildFragment.treeBaseDuration;
                    }
                  }
                }
              }
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              updateHostContainer(current2, workInProgress2);
              if (current2 === null) {
                preparePortalMount(workInProgress2.stateNode.containerInfo);
              }
              bubbleProperties(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              bubbleProperties(workInProgress2);
              return null;
            case IncompleteClassComponent: {
              var _Component = workInProgress2.type;
              if (isContextProvider(_Component)) {
                popContext(workInProgress2);
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              var renderState = workInProgress2.memoizedState;
              if (renderState === null) {
                bubbleProperties(workInProgress2);
                return null;
              }
              var didSuspendAlready = (workInProgress2.flags & DidCapture) !== NoFlags;
              var renderedTail = renderState.rendering;
              if (renderedTail === null) {
                if (!didSuspendAlready) {
                  var cannotBeSuspended = renderHasNotSuspendedYet() && (current2 === null || (current2.flags & DidCapture) === NoFlags);
                  if (!cannotBeSuspended) {
                    var row = workInProgress2.child;
                    while (row !== null) {
                      var suspended = findFirstSuspended(row);
                      if (suspended !== null) {
                        didSuspendAlready = true;
                        workInProgress2.flags |= DidCapture;
                        cutOffTailIfNeeded(renderState, false);
                        var newThenables = suspended.updateQueue;
                        if (newThenables !== null) {
                          workInProgress2.updateQueue = newThenables;
                          workInProgress2.flags |= Update;
                        }
                        workInProgress2.subtreeFlags = NoFlags;
                        resetChildFibers(workInProgress2, renderLanes2);
                        pushSuspenseContext(workInProgress2, setShallowSuspenseContext(suspenseStackCursor.current, ForceSuspenseFallback));
                        return workInProgress2.child;
                      }
                      row = row.sibling;
                    }
                  }
                  if (renderState.tail !== null && now() > getRenderTargetTime()) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                } else {
                  cutOffTailIfNeeded(renderState, false);
                }
              } else {
                if (!didSuspendAlready) {
                  var _suspended = findFirstSuspended(renderedTail);
                  if (_suspended !== null) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    var _newThenables = _suspended.updateQueue;
                    if (_newThenables !== null) {
                      workInProgress2.updateQueue = _newThenables;
                      workInProgress2.flags |= Update;
                    }
                    cutOffTailIfNeeded(renderState, true);
                    if (renderState.tail === null && renderState.tailMode === "hidden" && !renderedTail.alternate && !getIsHydrating()) {
                      bubbleProperties(workInProgress2);
                      return null;
                    }
                  } else if (
                    // The time it took to render last row is greater than the remaining
                    // time we have to render. So rendering one more row would likely
                    // exceed it.
                    now() * 2 - renderState.renderingStartTime > getRenderTargetTime() && renderLanes2 !== OffscreenLane
                  ) {
                    workInProgress2.flags |= DidCapture;
                    didSuspendAlready = true;
                    cutOffTailIfNeeded(renderState, false);
                    workInProgress2.lanes = SomeRetryLane;
                  }
                }
                if (renderState.isBackwards) {
                  renderedTail.sibling = workInProgress2.child;
                  workInProgress2.child = renderedTail;
                } else {
                  var previousSibling = renderState.last;
                  if (previousSibling !== null) {
                    previousSibling.sibling = renderedTail;
                  } else {
                    workInProgress2.child = renderedTail;
                  }
                  renderState.last = renderedTail;
                }
              }
              if (renderState.tail !== null) {
                var next = renderState.tail;
                renderState.rendering = next;
                renderState.tail = next.sibling;
                renderState.renderingStartTime = now();
                next.sibling = null;
                var suspenseContext = suspenseStackCursor.current;
                if (didSuspendAlready) {
                  suspenseContext = setShallowSuspenseContext(suspenseContext, ForceSuspenseFallback);
                } else {
                  suspenseContext = setDefaultShallowSuspenseContext(suspenseContext);
                }
                pushSuspenseContext(workInProgress2, suspenseContext);
                return next;
              }
              bubbleProperties(workInProgress2);
              return null;
            }
            case ScopeComponent: {
              break;
            }
            case OffscreenComponent:
            case LegacyHiddenComponent: {
              popRenderLanes(workInProgress2);
              var _nextState = workInProgress2.memoizedState;
              var nextIsHidden = _nextState !== null;
              if (current2 !== null) {
                var _prevState = current2.memoizedState;
                var prevIsHidden = _prevState !== null;
                if (prevIsHidden !== nextIsHidden && // LegacyHidden doesn't do any hiding — it only pre-renders.
                !enableLegacyHidden) {
                  workInProgress2.flags |= Visibility;
                }
              }
              if (!nextIsHidden || (workInProgress2.mode & ConcurrentMode) === NoMode) {
                bubbleProperties(workInProgress2);
              } else {
                if (includesSomeLane(subtreeRenderLanes, OffscreenLane)) {
                  bubbleProperties(workInProgress2);
                  {
                    if (workInProgress2.subtreeFlags & (Placement | Update)) {
                      workInProgress2.flags |= Visibility;
                    }
                  }
                }
              }
              return null;
            }
            case CacheComponent: {
              return null;
            }
            case TracingMarkerComponent: {
              return null;
            }
          }
          throw new Error("Unknown unit of work tag (" + workInProgress2.tag + "). This error is likely caused by a bug in React. Please file an issue.");
        }
        function unwindWork(current2, workInProgress2, renderLanes2) {
          popTreeContext(workInProgress2);
          switch (workInProgress2.tag) {
            case ClassComponent: {
              var Component = workInProgress2.type;
              if (isContextProvider(Component)) {
                popContext(workInProgress2);
              }
              var flags = workInProgress2.flags;
              if (flags & ShouldCapture) {
                workInProgress2.flags = flags & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case HostRoot: {
              var root2 = workInProgress2.stateNode;
              popHostContainer(workInProgress2);
              popTopLevelContextObject(workInProgress2);
              resetWorkInProgressVersions();
              var _flags = workInProgress2.flags;
              if ((_flags & ShouldCapture) !== NoFlags && (_flags & DidCapture) === NoFlags) {
                workInProgress2.flags = _flags & ~ShouldCapture | DidCapture;
                return workInProgress2;
              }
              return null;
            }
            case HostComponent: {
              popHostContext(workInProgress2);
              return null;
            }
            case SuspenseComponent: {
              popSuspenseContext(workInProgress2);
              var suspenseState = workInProgress2.memoizedState;
              if (suspenseState !== null && suspenseState.dehydrated !== null) {
                if (workInProgress2.alternate === null) {
                  throw new Error("Threw in newly mounted dehydrated component. This is likely a bug in React. Please file an issue.");
                }
                resetHydrationState();
              }
              var _flags2 = workInProgress2.flags;
              if (_flags2 & ShouldCapture) {
                workInProgress2.flags = _flags2 & ~ShouldCapture | DidCapture;
                if ((workInProgress2.mode & ProfileMode) !== NoMode) {
                  transferActualDuration(workInProgress2);
                }
                return workInProgress2;
              }
              return null;
            }
            case SuspenseListComponent: {
              popSuspenseContext(workInProgress2);
              return null;
            }
            case HostPortal:
              popHostContainer(workInProgress2);
              return null;
            case ContextProvider:
              var context = workInProgress2.type._context;
              popProvider(context, workInProgress2);
              return null;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(workInProgress2);
              return null;
            case CacheComponent:
              return null;
            default:
              return null;
          }
        }
        function unwindInterruptedWork(current2, interruptedWork, renderLanes2) {
          popTreeContext(interruptedWork);
          switch (interruptedWork.tag) {
            case ClassComponent: {
              var childContextTypes = interruptedWork.type.childContextTypes;
              if (childContextTypes !== null && childContextTypes !== void 0) {
                popContext(interruptedWork);
              }
              break;
            }
            case HostRoot: {
              var root2 = interruptedWork.stateNode;
              popHostContainer(interruptedWork);
              popTopLevelContextObject(interruptedWork);
              resetWorkInProgressVersions();
              break;
            }
            case HostComponent: {
              popHostContext(interruptedWork);
              break;
            }
            case HostPortal:
              popHostContainer(interruptedWork);
              break;
            case SuspenseComponent:
              popSuspenseContext(interruptedWork);
              break;
            case SuspenseListComponent:
              popSuspenseContext(interruptedWork);
              break;
            case ContextProvider:
              var context = interruptedWork.type._context;
              popProvider(context, interruptedWork);
              break;
            case OffscreenComponent:
            case LegacyHiddenComponent:
              popRenderLanes(interruptedWork);
              break;
          }
        }
        var didWarnAboutUndefinedSnapshotBeforeUpdate = null;
        {
          didWarnAboutUndefinedSnapshotBeforeUpdate = /* @__PURE__ */ new Set();
        }
        var offscreenSubtreeIsHidden = false;
        var offscreenSubtreeWasHidden = false;
        var PossiblyWeakSet = typeof WeakSet === "function" ? WeakSet : Set;
        var nextEffect = null;
        var inProgressLanes = null;
        var inProgressRoot = null;
        function reportUncaughtErrorInDEV(error2) {
          {
            invokeGuardedCallback(null, function() {
              throw error2;
            });
            clearCaughtError();
          }
        }
        var callComponentWillUnmountWithTimer = function(current2, instance) {
          instance.props = current2.memoizedProps;
          instance.state = current2.memoizedState;
          if (current2.mode & ProfileMode) {
            try {
              startLayoutEffectTimer();
              instance.componentWillUnmount();
            } finally {
              recordLayoutEffectDuration(current2);
            }
          } else {
            instance.componentWillUnmount();
          }
        };
        function safelyCallCommitHookLayoutEffectListMount(current2, nearestMountedAncestor) {
          try {
            commitHookEffectListMount(Layout, current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentWillUnmount(current2, nearestMountedAncestor, instance) {
          try {
            callComponentWillUnmountWithTimer(current2, instance);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyCallComponentDidMount(current2, nearestMountedAncestor, instance) {
          try {
            instance.componentDidMount();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyAttachRef(current2, nearestMountedAncestor) {
          try {
            commitAttachRef(current2);
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        function safelyDetachRef(current2, nearestMountedAncestor) {
          var ref = current2.ref;
          if (ref !== null) {
            if (typeof ref === "function") {
              var retVal;
              try {
                if (enableProfilerTimer && enableProfilerCommitHooks && current2.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    retVal = ref(null);
                  } finally {
                    recordLayoutEffectDuration(current2);
                  }
                } else {
                  retVal = ref(null);
                }
              } catch (error2) {
                captureCommitPhaseError(current2, nearestMountedAncestor, error2);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(current2));
                }
              }
            } else {
              ref.current = null;
            }
          }
        }
        function safelyCallDestroy(current2, nearestMountedAncestor, destroy) {
          try {
            destroy();
          } catch (error2) {
            captureCommitPhaseError(current2, nearestMountedAncestor, error2);
          }
        }
        var focusedInstanceHandle = null;
        var shouldFireAfterActiveInstanceBlur = false;
        function commitBeforeMutationEffects(root2, firstChild) {
          focusedInstanceHandle = prepareForCommit(root2.containerInfo);
          nextEffect = firstChild;
          commitBeforeMutationEffects_begin();
          var shouldFire = shouldFireAfterActiveInstanceBlur;
          shouldFireAfterActiveInstanceBlur = false;
          focusedInstanceHandle = null;
          return shouldFire;
        }
        function commitBeforeMutationEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((fiber.subtreeFlags & BeforeMutationMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitBeforeMutationEffects_complete();
            }
          }
        }
        function commitBeforeMutationEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              commitBeforeMutationEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitBeforeMutationEffectsOnFiber(finishedWork) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          if ((flags & Snapshot) !== NoFlags) {
            setCurrentFiber(finishedWork);
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                break;
              }
              case ClassComponent: {
                if (current2 !== null) {
                  var prevProps = current2.memoizedProps;
                  var prevState = current2.memoizedState;
                  var instance = finishedWork.stateNode;
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before getSnapshotBeforeUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  var snapshot = instance.getSnapshotBeforeUpdate(finishedWork.elementType === finishedWork.type ? prevProps : resolveDefaultProps(finishedWork.type, prevProps), prevState);
                  {
                    var didWarnSet = didWarnAboutUndefinedSnapshotBeforeUpdate;
                    if (snapshot === void 0 && !didWarnSet.has(finishedWork.type)) {
                      didWarnSet.add(finishedWork.type);
                      error("%s.getSnapshotBeforeUpdate(): A snapshot value (or null) must be returned. You have returned undefined.", getComponentNameFromFiber(finishedWork));
                    }
                  }
                  instance.__reactInternalSnapshotBeforeUpdate = snapshot;
                }
                break;
              }
              case HostRoot: {
                {
                  var root2 = finishedWork.stateNode;
                  clearContainer(root2.containerInfo);
                }
                break;
              }
              case HostComponent:
              case HostText:
              case HostPortal:
              case IncompleteClassComponent:
                break;
              default: {
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            resetCurrentFiber();
          }
        }
        function commitHookEffectListUnmount(flags, finishedWork, nearestMountedAncestor) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                var destroy = effect.destroy;
                effect.destroy = void 0;
                if (destroy !== void 0) {
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStarted(finishedWork);
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStarted(finishedWork);
                    }
                  }
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(true);
                    }
                  }
                  safelyCallDestroy(finishedWork, nearestMountedAncestor, destroy);
                  {
                    if ((flags & Insertion) !== NoFlags$1) {
                      setIsRunningInsertionEffect(false);
                    }
                  }
                  {
                    if ((flags & Passive$1) !== NoFlags$1) {
                      markComponentPassiveEffectUnmountStopped();
                    } else if ((flags & Layout) !== NoFlags$1) {
                      markComponentLayoutEffectUnmountStopped();
                    }
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitHookEffectListMount(flags, finishedWork) {
          var updateQueue = finishedWork.updateQueue;
          var lastEffect = updateQueue !== null ? updateQueue.lastEffect : null;
          if (lastEffect !== null) {
            var firstEffect = lastEffect.next;
            var effect = firstEffect;
            do {
              if ((effect.tag & flags) === flags) {
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStarted(finishedWork);
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStarted(finishedWork);
                  }
                }
                var create = effect.create;
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(true);
                  }
                }
                effect.destroy = create();
                {
                  if ((flags & Insertion) !== NoFlags$1) {
                    setIsRunningInsertionEffect(false);
                  }
                }
                {
                  if ((flags & Passive$1) !== NoFlags$1) {
                    markComponentPassiveEffectMountStopped();
                  } else if ((flags & Layout) !== NoFlags$1) {
                    markComponentLayoutEffectMountStopped();
                  }
                }
                {
                  var destroy = effect.destroy;
                  if (destroy !== void 0 && typeof destroy !== "function") {
                    var hookName = void 0;
                    if ((effect.tag & Layout) !== NoFlags) {
                      hookName = "useLayoutEffect";
                    } else if ((effect.tag & Insertion) !== NoFlags) {
                      hookName = "useInsertionEffect";
                    } else {
                      hookName = "useEffect";
                    }
                    var addendum = void 0;
                    if (destroy === null) {
                      addendum = " You returned null. If your effect does not require clean up, return undefined (or nothing).";
                    } else if (typeof destroy.then === "function") {
                      addendum = "\n\nIt looks like you wrote " + hookName + "(async () => ...) or returned a Promise. Instead, write the async function inside your effect and call it immediately:\n\n" + hookName + "(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching";
                    } else {
                      addendum = " You returned: " + destroy;
                    }
                    error("%s must not return anything besides a function, which is used for clean-up.%s", hookName, addendum);
                  }
                }
              }
              effect = effect.next;
            } while (effect !== firstEffect);
          }
        }
        function commitPassiveEffectDurations(finishedRoot, finishedWork) {
          {
            if ((finishedWork.flags & Update) !== NoFlags) {
              switch (finishedWork.tag) {
                case Profiler: {
                  var passiveEffectDuration = finishedWork.stateNode.passiveEffectDuration;
                  var _finishedWork$memoize = finishedWork.memoizedProps, id = _finishedWork$memoize.id, onPostCommit = _finishedWork$memoize.onPostCommit;
                  var commitTime2 = getCommitTime();
                  var phase = finishedWork.alternate === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onPostCommit === "function") {
                    onPostCommit(id, phase, passiveEffectDuration, commitTime2);
                  }
                  var parentFiber = finishedWork.return;
                  outer: while (parentFiber !== null) {
                    switch (parentFiber.tag) {
                      case HostRoot:
                        var root2 = parentFiber.stateNode;
                        root2.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                      case Profiler:
                        var parentStateNode = parentFiber.stateNode;
                        parentStateNode.passiveEffectDuration += passiveEffectDuration;
                        break outer;
                    }
                    parentFiber = parentFiber.return;
                  }
                  break;
                }
              }
            }
          }
        }
        function commitLayoutEffectOnFiber(finishedRoot, current2, finishedWork, committedLanes) {
          if ((finishedWork.flags & LayoutMask) !== NoFlags) {
            switch (finishedWork.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                if (!offscreenSubtreeWasHidden) {
                  if (finishedWork.mode & ProfileMode) {
                    try {
                      startLayoutEffectTimer();
                      commitHookEffectListMount(Layout | HasEffect, finishedWork);
                    } finally {
                      recordLayoutEffectDuration(finishedWork);
                    }
                  } else {
                    commitHookEffectListMount(Layout | HasEffect, finishedWork);
                  }
                }
                break;
              }
              case ClassComponent: {
                var instance = finishedWork.stateNode;
                if (finishedWork.flags & Update) {
                  if (!offscreenSubtreeWasHidden) {
                    if (current2 === null) {
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidMount. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidMount();
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidMount();
                      }
                    } else {
                      var prevProps = finishedWork.elementType === finishedWork.type ? current2.memoizedProps : resolveDefaultProps(finishedWork.type, current2.memoizedProps);
                      var prevState = current2.memoizedState;
                      {
                        if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                          if (instance.props !== finishedWork.memoizedProps) {
                            error("Expected %s props to match memoized props before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                          if (instance.state !== finishedWork.memoizedState) {
                            error("Expected %s state to match memoized state before componentDidUpdate. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                          }
                        }
                      }
                      if (finishedWork.mode & ProfileMode) {
                        try {
                          startLayoutEffectTimer();
                          instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                        } finally {
                          recordLayoutEffectDuration(finishedWork);
                        }
                      } else {
                        instance.componentDidUpdate(prevProps, prevState, instance.__reactInternalSnapshotBeforeUpdate);
                      }
                    }
                  }
                }
                var updateQueue = finishedWork.updateQueue;
                if (updateQueue !== null) {
                  {
                    if (finishedWork.type === finishedWork.elementType && !didWarnAboutReassigningProps) {
                      if (instance.props !== finishedWork.memoizedProps) {
                        error("Expected %s props to match memoized props before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.props`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                      if (instance.state !== finishedWork.memoizedState) {
                        error("Expected %s state to match memoized state before processing the update queue. This might either be because of a bug in React, or because a component reassigns its own `this.state`. Please file an issue.", getComponentNameFromFiber(finishedWork) || "instance");
                      }
                    }
                  }
                  commitUpdateQueue(finishedWork, updateQueue, instance);
                }
                break;
              }
              case HostRoot: {
                var _updateQueue = finishedWork.updateQueue;
                if (_updateQueue !== null) {
                  var _instance = null;
                  if (finishedWork.child !== null) {
                    switch (finishedWork.child.tag) {
                      case HostComponent:
                        _instance = getPublicInstance(finishedWork.child.stateNode);
                        break;
                      case ClassComponent:
                        _instance = finishedWork.child.stateNode;
                        break;
                    }
                  }
                  commitUpdateQueue(finishedWork, _updateQueue, _instance);
                }
                break;
              }
              case HostComponent: {
                var _instance2 = finishedWork.stateNode;
                if (current2 === null && finishedWork.flags & Update) {
                  var type = finishedWork.type;
                  var props = finishedWork.memoizedProps;
                  commitMount(_instance2, type, props);
                }
                break;
              }
              case HostText: {
                break;
              }
              case HostPortal: {
                break;
              }
              case Profiler: {
                {
                  var _finishedWork$memoize2 = finishedWork.memoizedProps, onCommit = _finishedWork$memoize2.onCommit, onRender = _finishedWork$memoize2.onRender;
                  var effectDuration = finishedWork.stateNode.effectDuration;
                  var commitTime2 = getCommitTime();
                  var phase = current2 === null ? "mount" : "update";
                  {
                    if (isCurrentUpdateNested()) {
                      phase = "nested-update";
                    }
                  }
                  if (typeof onRender === "function") {
                    onRender(finishedWork.memoizedProps.id, phase, finishedWork.actualDuration, finishedWork.treeBaseDuration, finishedWork.actualStartTime, commitTime2);
                  }
                  {
                    if (typeof onCommit === "function") {
                      onCommit(finishedWork.memoizedProps.id, phase, effectDuration, commitTime2);
                    }
                    enqueuePendingPassiveProfilerEffect(finishedWork);
                    var parentFiber = finishedWork.return;
                    outer: while (parentFiber !== null) {
                      switch (parentFiber.tag) {
                        case HostRoot:
                          var root2 = parentFiber.stateNode;
                          root2.effectDuration += effectDuration;
                          break outer;
                        case Profiler:
                          var parentStateNode = parentFiber.stateNode;
                          parentStateNode.effectDuration += effectDuration;
                          break outer;
                      }
                      parentFiber = parentFiber.return;
                    }
                  }
                }
                break;
              }
              case SuspenseComponent: {
                commitSuspenseHydrationCallbacks(finishedRoot, finishedWork);
                break;
              }
              case SuspenseListComponent:
              case IncompleteClassComponent:
              case ScopeComponent:
              case OffscreenComponent:
              case LegacyHiddenComponent:
              case TracingMarkerComponent: {
                break;
              }
              default:
                throw new Error("This unit of work tag should not have side-effects. This error is likely caused by a bug in React. Please file an issue.");
            }
          }
          if (!offscreenSubtreeWasHidden) {
            {
              if (finishedWork.flags & Ref) {
                commitAttachRef(finishedWork);
              }
            }
          }
        }
        function reappearLayoutEffectsOnFiber(node) {
          switch (node.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (node.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  safelyCallCommitHookLayoutEffectListMount(node, node.return);
                } finally {
                  recordLayoutEffectDuration(node);
                }
              } else {
                safelyCallCommitHookLayoutEffectListMount(node, node.return);
              }
              break;
            }
            case ClassComponent: {
              var instance = node.stateNode;
              if (typeof instance.componentDidMount === "function") {
                safelyCallComponentDidMount(node, node.return, instance);
              }
              safelyAttachRef(node, node.return);
              break;
            }
            case HostComponent: {
              safelyAttachRef(node, node.return);
              break;
            }
          }
        }
        function hideOrUnhideAllChildren(finishedWork, isHidden) {
          var hostSubtreeRoot = null;
          {
            var node = finishedWork;
            while (true) {
              if (node.tag === HostComponent) {
                if (hostSubtreeRoot === null) {
                  hostSubtreeRoot = node;
                  try {
                    var instance = node.stateNode;
                    if (isHidden) {
                      hideInstance(instance);
                    } else {
                      unhideInstance(node.stateNode, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if (node.tag === HostText) {
                if (hostSubtreeRoot === null) {
                  try {
                    var _instance3 = node.stateNode;
                    if (isHidden) {
                      hideTextInstance(_instance3);
                    } else {
                      unhideTextInstance(_instance3, node.memoizedProps);
                    }
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              } else if ((node.tag === OffscreenComponent || node.tag === LegacyHiddenComponent) && node.memoizedState !== null && node !== finishedWork) ;
              else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === finishedWork) {
                return;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === finishedWork) {
                  return;
                }
                if (hostSubtreeRoot === node) {
                  hostSubtreeRoot = null;
                }
                node = node.return;
              }
              if (hostSubtreeRoot === node) {
                hostSubtreeRoot = null;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
        }
        function commitAttachRef(finishedWork) {
          var ref = finishedWork.ref;
          if (ref !== null) {
            var instance = finishedWork.stateNode;
            var instanceToUse;
            switch (finishedWork.tag) {
              case HostComponent:
                instanceToUse = getPublicInstance(instance);
                break;
              default:
                instanceToUse = instance;
            }
            if (typeof ref === "function") {
              var retVal;
              if (finishedWork.mode & ProfileMode) {
                try {
                  startLayoutEffectTimer();
                  retVal = ref(instanceToUse);
                } finally {
                  recordLayoutEffectDuration(finishedWork);
                }
              } else {
                retVal = ref(instanceToUse);
              }
              {
                if (typeof retVal === "function") {
                  error("Unexpected return value from a callback ref in %s. A callback ref should not return a function.", getComponentNameFromFiber(finishedWork));
                }
              }
            } else {
              {
                if (!ref.hasOwnProperty("current")) {
                  error("Unexpected ref object provided for %s. Use either a ref-setter function or React.createRef().", getComponentNameFromFiber(finishedWork));
                }
              }
              ref.current = instanceToUse;
            }
          }
        }
        function detachFiberMutation(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            alternate.return = null;
          }
          fiber.return = null;
        }
        function detachFiberAfterEffects(fiber) {
          var alternate = fiber.alternate;
          if (alternate !== null) {
            fiber.alternate = null;
            detachFiberAfterEffects(alternate);
          }
          {
            fiber.child = null;
            fiber.deletions = null;
            fiber.sibling = null;
            if (fiber.tag === HostComponent) {
              var hostInstance = fiber.stateNode;
              if (hostInstance !== null) {
                detachDeletedInstance(hostInstance);
              }
            }
            fiber.stateNode = null;
            {
              fiber._debugOwner = null;
            }
            {
              fiber.return = null;
              fiber.dependencies = null;
              fiber.memoizedProps = null;
              fiber.memoizedState = null;
              fiber.pendingProps = null;
              fiber.stateNode = null;
              fiber.updateQueue = null;
            }
          }
        }
        function getHostParentFiber(fiber) {
          var parent = fiber.return;
          while (parent !== null) {
            if (isHostParent(parent)) {
              return parent;
            }
            parent = parent.return;
          }
          throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
        }
        function isHostParent(fiber) {
          return fiber.tag === HostComponent || fiber.tag === HostRoot || fiber.tag === HostPortal;
        }
        function getHostSibling(fiber) {
          var node = fiber;
          siblings: while (true) {
            while (node.sibling === null) {
              if (node.return === null || isHostParent(node.return)) {
                return null;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
            while (node.tag !== HostComponent && node.tag !== HostText && node.tag !== DehydratedFragment) {
              if (node.flags & Placement) {
                continue siblings;
              }
              if (node.child === null || node.tag === HostPortal) {
                continue siblings;
              } else {
                node.child.return = node;
                node = node.child;
              }
            }
            if (!(node.flags & Placement)) {
              return node.stateNode;
            }
          }
        }
        function commitPlacement(finishedWork) {
          var parentFiber = getHostParentFiber(finishedWork);
          switch (parentFiber.tag) {
            case HostComponent: {
              var parent = parentFiber.stateNode;
              if (parentFiber.flags & ContentReset) {
                resetTextContent(parent);
                parentFiber.flags &= ~ContentReset;
              }
              var before = getHostSibling(finishedWork);
              insertOrAppendPlacementNode(finishedWork, before, parent);
              break;
            }
            case HostRoot:
            case HostPortal: {
              var _parent = parentFiber.stateNode.containerInfo;
              var _before = getHostSibling(finishedWork);
              insertOrAppendPlacementNodeIntoContainer(finishedWork, _before, _parent);
              break;
            }
            // eslint-disable-next-line-no-fallthrough
            default:
              throw new Error("Invalid host parent fiber. This error is likely caused by a bug in React. Please file an issue.");
          }
        }
        function insertOrAppendPlacementNodeIntoContainer(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertInContainerBefore(parent, stateNode, before);
            } else {
              appendChildToContainer(parent, stateNode);
            }
          } else if (tag === HostPortal) ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNodeIntoContainer(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNodeIntoContainer(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        function insertOrAppendPlacementNode(node, before, parent) {
          var tag = node.tag;
          var isHost = tag === HostComponent || tag === HostText;
          if (isHost) {
            var stateNode = node.stateNode;
            if (before) {
              insertBefore(parent, stateNode, before);
            } else {
              appendChild(parent, stateNode);
            }
          } else if (tag === HostPortal) ;
          else {
            var child = node.child;
            if (child !== null) {
              insertOrAppendPlacementNode(child, before, parent);
              var sibling = child.sibling;
              while (sibling !== null) {
                insertOrAppendPlacementNode(sibling, before, parent);
                sibling = sibling.sibling;
              }
            }
          }
        }
        var hostParent = null;
        var hostParentIsContainer = false;
        function commitDeletionEffects(root2, returnFiber, deletedFiber) {
          {
            var parent = returnFiber;
            findParent: while (parent !== null) {
              switch (parent.tag) {
                case HostComponent: {
                  hostParent = parent.stateNode;
                  hostParentIsContainer = false;
                  break findParent;
                }
                case HostRoot: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
                case HostPortal: {
                  hostParent = parent.stateNode.containerInfo;
                  hostParentIsContainer = true;
                  break findParent;
                }
              }
              parent = parent.return;
            }
            if (hostParent === null) {
              throw new Error("Expected to find a host parent. This error is likely caused by a bug in React. Please file an issue.");
            }
            commitDeletionEffectsOnFiber(root2, returnFiber, deletedFiber);
            hostParent = null;
            hostParentIsContainer = false;
          }
          detachFiberMutation(deletedFiber);
        }
        function recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, parent) {
          var child = parent.child;
          while (child !== null) {
            commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, child);
            child = child.sibling;
          }
        }
        function commitDeletionEffectsOnFiber(finishedRoot, nearestMountedAncestor, deletedFiber) {
          onCommitUnmount(deletedFiber);
          switch (deletedFiber.tag) {
            case HostComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
              }
            }
            // eslint-disable-next-line-no-fallthrough
            case HostText: {
              {
                var prevHostParent = hostParent;
                var prevHostParentIsContainer = hostParentIsContainer;
                hostParent = null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = prevHostParent;
                hostParentIsContainer = prevHostParentIsContainer;
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    removeChildFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    removeChild(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case DehydratedFragment: {
              {
                if (hostParent !== null) {
                  if (hostParentIsContainer) {
                    clearSuspenseBoundaryFromContainer(hostParent, deletedFiber.stateNode);
                  } else {
                    clearSuspenseBoundary(hostParent, deletedFiber.stateNode);
                  }
                }
              }
              return;
            }
            case HostPortal: {
              {
                var _prevHostParent = hostParent;
                var _prevHostParentIsContainer = hostParentIsContainer;
                hostParent = deletedFiber.stateNode.containerInfo;
                hostParentIsContainer = true;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                hostParent = _prevHostParent;
                hostParentIsContainer = _prevHostParentIsContainer;
              }
              return;
            }
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              if (!offscreenSubtreeWasHidden) {
                var updateQueue = deletedFiber.updateQueue;
                if (updateQueue !== null) {
                  var lastEffect = updateQueue.lastEffect;
                  if (lastEffect !== null) {
                    var firstEffect = lastEffect.next;
                    var effect = firstEffect;
                    do {
                      var _effect = effect, destroy = _effect.destroy, tag = _effect.tag;
                      if (destroy !== void 0) {
                        if ((tag & Insertion) !== NoFlags$1) {
                          safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                        } else if ((tag & Layout) !== NoFlags$1) {
                          {
                            markComponentLayoutEffectUnmountStarted(deletedFiber);
                          }
                          if (deletedFiber.mode & ProfileMode) {
                            startLayoutEffectTimer();
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                            recordLayoutEffectDuration(deletedFiber);
                          } else {
                            safelyCallDestroy(deletedFiber, nearestMountedAncestor, destroy);
                          }
                          {
                            markComponentLayoutEffectUnmountStopped();
                          }
                        }
                      }
                      effect = effect.next;
                    } while (effect !== firstEffect);
                  }
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ClassComponent: {
              if (!offscreenSubtreeWasHidden) {
                safelyDetachRef(deletedFiber, nearestMountedAncestor);
                var instance = deletedFiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(deletedFiber, nearestMountedAncestor, instance);
                }
              }
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case ScopeComponent: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
            case OffscreenComponent: {
              if (
                // TODO: Remove this dead flag
                deletedFiber.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || deletedFiber.memoizedState !== null;
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              }
              break;
            }
            default: {
              recursivelyTraverseDeletionEffects(finishedRoot, nearestMountedAncestor, deletedFiber);
              return;
            }
          }
        }
        function commitSuspenseCallback(finishedWork) {
          var newState = finishedWork.memoizedState;
        }
        function commitSuspenseHydrationCallbacks(finishedRoot, finishedWork) {
          var newState = finishedWork.memoizedState;
          if (newState === null) {
            var current2 = finishedWork.alternate;
            if (current2 !== null) {
              var prevState = current2.memoizedState;
              if (prevState !== null) {
                var suspenseInstance = prevState.dehydrated;
                if (suspenseInstance !== null) {
                  commitHydratedSuspenseInstance(suspenseInstance);
                }
              }
            }
          }
        }
        function attachSuspenseRetryListeners(finishedWork) {
          var wakeables = finishedWork.updateQueue;
          if (wakeables !== null) {
            finishedWork.updateQueue = null;
            var retryCache = finishedWork.stateNode;
            if (retryCache === null) {
              retryCache = finishedWork.stateNode = new PossiblyWeakSet();
            }
            wakeables.forEach(function(wakeable) {
              var retry = resolveRetryWakeable.bind(null, finishedWork, wakeable);
              if (!retryCache.has(wakeable)) {
                retryCache.add(wakeable);
                {
                  if (isDevToolsPresent) {
                    if (inProgressLanes !== null && inProgressRoot !== null) {
                      restorePendingUpdaters(inProgressRoot, inProgressLanes);
                    } else {
                      throw Error("Expected finished root and lanes to be set. This is a bug in React.");
                    }
                  }
                }
                wakeable.then(retry, retry);
              }
            });
          }
        }
        function commitMutationEffects(root2, finishedWork, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          setCurrentFiber(finishedWork);
          commitMutationEffectsOnFiber(finishedWork, root2);
          setCurrentFiber(finishedWork);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function recursivelyTraverseMutationEffects(root2, parentFiber, lanes) {
          var deletions = parentFiber.deletions;
          if (deletions !== null) {
            for (var i = 0; i < deletions.length; i++) {
              var childToDelete = deletions[i];
              try {
                commitDeletionEffects(root2, parentFiber, childToDelete);
              } catch (error2) {
                captureCommitPhaseError(childToDelete, parentFiber, error2);
              }
            }
          }
          var prevDebugFiber = getCurrentFiber();
          if (parentFiber.subtreeFlags & MutationMask) {
            var child = parentFiber.child;
            while (child !== null) {
              setCurrentFiber(child);
              commitMutationEffectsOnFiber(child, root2);
              child = child.sibling;
            }
          }
          setCurrentFiber(prevDebugFiber);
        }
        function commitMutationEffectsOnFiber(finishedWork, root2, lanes) {
          var current2 = finishedWork.alternate;
          var flags = finishedWork.flags;
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case MemoComponent:
            case SimpleMemoComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                try {
                  commitHookEffectListUnmount(Insertion | HasEffect, finishedWork, finishedWork.return);
                  commitHookEffectListMount(Insertion | HasEffect, finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                if (finishedWork.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                  recordLayoutEffectDuration(finishedWork);
                } else {
                  try {
                    commitHookEffectListUnmount(Layout | HasEffect, finishedWork, finishedWork.return);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case ClassComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              return;
            }
            case HostComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Ref) {
                if (current2 !== null) {
                  safelyDetachRef(current2, current2.return);
                }
              }
              {
                if (finishedWork.flags & ContentReset) {
                  var instance = finishedWork.stateNode;
                  try {
                    resetTextContent(instance);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
                if (flags & Update) {
                  var _instance4 = finishedWork.stateNode;
                  if (_instance4 != null) {
                    var newProps = finishedWork.memoizedProps;
                    var oldProps = current2 !== null ? current2.memoizedProps : newProps;
                    var type = finishedWork.type;
                    var updatePayload = finishedWork.updateQueue;
                    finishedWork.updateQueue = null;
                    if (updatePayload !== null) {
                      try {
                        commitUpdate(_instance4, updatePayload, type, oldProps, newProps, finishedWork);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostText: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (finishedWork.stateNode === null) {
                    throw new Error("This should have a text node initialized. This error is likely caused by a bug in React. Please file an issue.");
                  }
                  var textInstance = finishedWork.stateNode;
                  var newText = finishedWork.memoizedProps;
                  var oldText = current2 !== null ? current2.memoizedProps : newText;
                  try {
                    commitTextUpdate(textInstance, oldText, newText);
                  } catch (error2) {
                    captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                  }
                }
              }
              return;
            }
            case HostRoot: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                {
                  if (current2 !== null) {
                    var prevRootState = current2.memoizedState;
                    if (prevRootState.isDehydrated) {
                      try {
                        commitHydratedContainer(root2.containerInfo);
                      } catch (error2) {
                        captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                      }
                    }
                  }
                }
              }
              return;
            }
            case HostPortal: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
            case SuspenseComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              var offscreenFiber = finishedWork.child;
              if (offscreenFiber.flags & Visibility) {
                var offscreenInstance = offscreenFiber.stateNode;
                var newState = offscreenFiber.memoizedState;
                var isHidden = newState !== null;
                offscreenInstance.isHidden = isHidden;
                if (isHidden) {
                  var wasHidden = offscreenFiber.alternate !== null && offscreenFiber.alternate.memoizedState !== null;
                  if (!wasHidden) {
                    markCommitTimeOfFallback();
                  }
                }
              }
              if (flags & Update) {
                try {
                  commitSuspenseCallback(finishedWork);
                } catch (error2) {
                  captureCommitPhaseError(finishedWork, finishedWork.return, error2);
                }
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case OffscreenComponent: {
              var _wasHidden = current2 !== null && current2.memoizedState !== null;
              if (
                // TODO: Remove this dead flag
                finishedWork.mode & ConcurrentMode
              ) {
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden || _wasHidden;
                recursivelyTraverseMutationEffects(root2, finishedWork);
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
              } else {
                recursivelyTraverseMutationEffects(root2, finishedWork);
              }
              commitReconciliationEffects(finishedWork);
              if (flags & Visibility) {
                var _offscreenInstance = finishedWork.stateNode;
                var _newState = finishedWork.memoizedState;
                var _isHidden = _newState !== null;
                var offscreenBoundary = finishedWork;
                _offscreenInstance.isHidden = _isHidden;
                {
                  if (_isHidden) {
                    if (!_wasHidden) {
                      if ((offscreenBoundary.mode & ConcurrentMode) !== NoMode) {
                        nextEffect = offscreenBoundary;
                        var offscreenChild = offscreenBoundary.child;
                        while (offscreenChild !== null) {
                          nextEffect = offscreenChild;
                          disappearLayoutEffects_begin(offscreenChild);
                          offscreenChild = offscreenChild.sibling;
                        }
                      }
                    }
                  }
                }
                {
                  hideOrUnhideAllChildren(offscreenBoundary, _isHidden);
                }
              }
              return;
            }
            case SuspenseListComponent: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              if (flags & Update) {
                attachSuspenseRetryListeners(finishedWork);
              }
              return;
            }
            case ScopeComponent: {
              return;
            }
            default: {
              recursivelyTraverseMutationEffects(root2, finishedWork);
              commitReconciliationEffects(finishedWork);
              return;
            }
          }
        }
        function commitReconciliationEffects(finishedWork) {
          var flags = finishedWork.flags;
          if (flags & Placement) {
            try {
              commitPlacement(finishedWork);
            } catch (error2) {
              captureCommitPhaseError(finishedWork, finishedWork.return, error2);
            }
            finishedWork.flags &= ~Placement;
          }
          if (flags & Hydrating) {
            finishedWork.flags &= ~Hydrating;
          }
        }
        function commitLayoutEffects(finishedWork, root2, committedLanes) {
          inProgressLanes = committedLanes;
          inProgressRoot = root2;
          nextEffect = finishedWork;
          commitLayoutEffects_begin(finishedWork, root2, committedLanes);
          inProgressLanes = null;
          inProgressRoot = null;
        }
        function commitLayoutEffects_begin(subtreeRoot, root2, committedLanes) {
          var isModernRoot = (subtreeRoot.mode & ConcurrentMode) !== NoMode;
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent && isModernRoot) {
              var isHidden = fiber.memoizedState !== null;
              var newOffscreenSubtreeIsHidden = isHidden || offscreenSubtreeIsHidden;
              if (newOffscreenSubtreeIsHidden) {
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              } else {
                var current2 = fiber.alternate;
                var wasHidden = current2 !== null && current2.memoizedState !== null;
                var newOffscreenSubtreeWasHidden = wasHidden || offscreenSubtreeWasHidden;
                var prevOffscreenSubtreeIsHidden = offscreenSubtreeIsHidden;
                var prevOffscreenSubtreeWasHidden = offscreenSubtreeWasHidden;
                offscreenSubtreeIsHidden = newOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = newOffscreenSubtreeWasHidden;
                if (offscreenSubtreeWasHidden && !prevOffscreenSubtreeWasHidden) {
                  nextEffect = fiber;
                  reappearLayoutEffects_begin(fiber);
                }
                var child = firstChild;
                while (child !== null) {
                  nextEffect = child;
                  commitLayoutEffects_begin(
                    child,
                    // New root; bubble back up to here and stop.
                    root2,
                    committedLanes
                  );
                  child = child.sibling;
                }
                nextEffect = fiber;
                offscreenSubtreeIsHidden = prevOffscreenSubtreeIsHidden;
                offscreenSubtreeWasHidden = prevOffscreenSubtreeWasHidden;
                commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
                continue;
              }
            }
            if ((fiber.subtreeFlags & LayoutMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes);
            }
          }
        }
        function commitLayoutMountEffects_complete(subtreeRoot, root2, committedLanes) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & LayoutMask) !== NoFlags) {
              var current2 = fiber.alternate;
              setCurrentFiber(fiber);
              try {
                commitLayoutEffectOnFiber(root2, current2, fiber, committedLanes);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function disappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case MemoComponent:
              case SimpleMemoComponent: {
                if (fiber.mode & ProfileMode) {
                  try {
                    startLayoutEffectTimer();
                    commitHookEffectListUnmount(Layout, fiber, fiber.return);
                  } finally {
                    recordLayoutEffectDuration(fiber);
                  }
                } else {
                  commitHookEffectListUnmount(Layout, fiber, fiber.return);
                }
                break;
              }
              case ClassComponent: {
                safelyDetachRef(fiber, fiber.return);
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
              case HostComponent: {
                safelyDetachRef(fiber, fiber.return);
                break;
              }
              case OffscreenComponent: {
                var isHidden = fiber.memoizedState !== null;
                if (isHidden) {
                  disappearLayoutEffects_complete(subtreeRoot);
                  continue;
                }
                break;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              disappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function disappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function reappearLayoutEffects_begin(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if (fiber.tag === OffscreenComponent) {
              var isHidden = fiber.memoizedState !== null;
              if (isHidden) {
                reappearLayoutEffects_complete(subtreeRoot);
                continue;
              }
            }
            if (firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              reappearLayoutEffects_complete(subtreeRoot);
            }
          }
        }
        function reappearLayoutEffects_complete(subtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            try {
              reappearLayoutEffectsOnFiber(fiber);
            } catch (error2) {
              captureCommitPhaseError(fiber, fiber.return, error2);
            }
            resetCurrentFiber();
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountEffects(root2, finishedWork, committedLanes, committedTransitions) {
          nextEffect = finishedWork;
          commitPassiveMountEffects_begin(finishedWork, root2, committedLanes, committedTransitions);
        }
        function commitPassiveMountEffects_begin(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var firstChild = fiber.child;
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && firstChild !== null) {
              firstChild.return = fiber;
              nextEffect = firstChild;
            } else {
              commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions);
            }
          }
        }
        function commitPassiveMountEffects_complete(subtreeRoot, root2, committedLanes, committedTransitions) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              try {
                commitPassiveMountOnFiber(root2, fiber, committedLanes, committedTransitions);
              } catch (error2) {
                captureCommitPhaseError(fiber, fiber.return, error2);
              }
              resetCurrentFiber();
            }
            if (fiber === subtreeRoot) {
              nextEffect = null;
              return;
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveMountOnFiber(finishedRoot, finishedWork, committedLanes, committedTransitions) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
                } finally {
                  recordPassiveEffectDuration(finishedWork);
                }
              } else {
                commitHookEffectListMount(Passive$1 | HasEffect, finishedWork);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffects(firstChild) {
          nextEffect = firstChild;
          commitPassiveUnmountEffects_begin();
        }
        function commitPassiveUnmountEffects_begin() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var child = fiber.child;
            if ((nextEffect.flags & ChildDeletion) !== NoFlags) {
              var deletions = fiber.deletions;
              if (deletions !== null) {
                for (var i = 0; i < deletions.length; i++) {
                  var fiberToDelete = deletions[i];
                  nextEffect = fiberToDelete;
                  commitPassiveUnmountEffectsInsideOfDeletedTree_begin(fiberToDelete, fiber);
                }
                {
                  var previousFiber = fiber.alternate;
                  if (previousFiber !== null) {
                    var detachedChild = previousFiber.child;
                    if (detachedChild !== null) {
                      previousFiber.child = null;
                      do {
                        var detachedSibling = detachedChild.sibling;
                        detachedChild.sibling = null;
                        detachedChild = detachedSibling;
                      } while (detachedChild !== null);
                    }
                  }
                }
                nextEffect = fiber;
              }
            }
            if ((fiber.subtreeFlags & PassiveMask) !== NoFlags && child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffects_complete();
            }
          }
        }
        function commitPassiveUnmountEffects_complete() {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            if ((fiber.flags & Passive) !== NoFlags) {
              setCurrentFiber(fiber);
              commitPassiveUnmountOnFiber(fiber);
              resetCurrentFiber();
            }
            var sibling = fiber.sibling;
            if (sibling !== null) {
              sibling.return = fiber.return;
              nextEffect = sibling;
              return;
            }
            nextEffect = fiber.return;
          }
        }
        function commitPassiveUnmountOnFiber(finishedWork) {
          switch (finishedWork.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (finishedWork.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
                recordPassiveEffectDuration(finishedWork);
              } else {
                commitHookEffectListUnmount(Passive$1 | HasEffect, finishedWork, finishedWork.return);
              }
              break;
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_begin(deletedSubtreeRoot, nearestMountedAncestor) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            setCurrentFiber(fiber);
            commitPassiveUnmountInsideDeletedTreeOnFiber(fiber, nearestMountedAncestor);
            resetCurrentFiber();
            var child = fiber.child;
            if (child !== null) {
              child.return = fiber;
              nextEffect = child;
            } else {
              commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot);
            }
          }
        }
        function commitPassiveUnmountEffectsInsideOfDeletedTree_complete(deletedSubtreeRoot) {
          while (nextEffect !== null) {
            var fiber = nextEffect;
            var sibling = fiber.sibling;
            var returnFiber = fiber.return;
            {
              detachFiberAfterEffects(fiber);
              if (fiber === deletedSubtreeRoot) {
                nextEffect = null;
                return;
              }
            }
            if (sibling !== null) {
              sibling.return = returnFiber;
              nextEffect = sibling;
              return;
            }
            nextEffect = returnFiber;
          }
        }
        function commitPassiveUnmountInsideDeletedTreeOnFiber(current2, nearestMountedAncestor) {
          switch (current2.tag) {
            case FunctionComponent:
            case ForwardRef:
            case SimpleMemoComponent: {
              if (current2.mode & ProfileMode) {
                startPassiveEffectTimer();
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
                recordPassiveEffectDuration(current2);
              } else {
                commitHookEffectListUnmount(Passive$1, current2, nearestMountedAncestor);
              }
              break;
            }
          }
        }
        function invokeLayoutEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Layout | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                try {
                  instance.componentDidMount();
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectMountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListMount(Passive$1 | HasEffect, fiber);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
            }
          }
        }
        function invokeLayoutEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Layout | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
                break;
              }
              case ClassComponent: {
                var instance = fiber.stateNode;
                if (typeof instance.componentWillUnmount === "function") {
                  safelyCallComponentWillUnmount(fiber, fiber.return, instance);
                }
                break;
              }
            }
          }
        }
        function invokePassiveEffectUnmountInDEV(fiber) {
          {
            switch (fiber.tag) {
              case FunctionComponent:
              case ForwardRef:
              case SimpleMemoComponent: {
                try {
                  commitHookEffectListUnmount(Passive$1 | HasEffect, fiber, fiber.return);
                } catch (error2) {
                  captureCommitPhaseError(fiber, fiber.return, error2);
                }
              }
            }
          }
        }
        var COMPONENT_TYPE = 0;
        var HAS_PSEUDO_CLASS_TYPE = 1;
        var ROLE_TYPE = 2;
        var TEST_NAME_TYPE = 3;
        var TEXT_TYPE = 4;
        if (typeof Symbol === "function" && Symbol.for) {
          var symbolFor = Symbol.for;
          COMPONENT_TYPE = symbolFor("selector.component");
          HAS_PSEUDO_CLASS_TYPE = symbolFor("selector.has_pseudo_class");
          ROLE_TYPE = symbolFor("selector.role");
          TEST_NAME_TYPE = symbolFor("selector.test_id");
          TEXT_TYPE = symbolFor("selector.text");
        }
        var commitHooks = [];
        function onCommitRoot$1() {
          {
            commitHooks.forEach(function(commitHook) {
              return commitHook();
            });
          }
        }
        var ReactCurrentActQueue = ReactSharedInternals.ReactCurrentActQueue;
        function isLegacyActEnvironment(fiber) {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            var jestIsDefined = typeof jest !== "undefined";
            return jestIsDefined && isReactActEnvironmentGlobal !== false;
          }
        }
        function isConcurrentActEnvironment() {
          {
            var isReactActEnvironmentGlobal = (
              // $FlowExpectedError – Flow doesn't know about IS_REACT_ACT_ENVIRONMENT global
              typeof IS_REACT_ACT_ENVIRONMENT !== "undefined" ? IS_REACT_ACT_ENVIRONMENT : void 0
            );
            if (!isReactActEnvironmentGlobal && ReactCurrentActQueue.current !== null) {
              error("The current testing environment is not configured to support act(...)");
            }
            return isReactActEnvironmentGlobal;
          }
        }
        var ceil = Math.ceil;
        var ReactCurrentDispatcher$2 = ReactSharedInternals.ReactCurrentDispatcher, ReactCurrentOwner$2 = ReactSharedInternals.ReactCurrentOwner, ReactCurrentBatchConfig$3 = ReactSharedInternals.ReactCurrentBatchConfig, ReactCurrentActQueue$1 = ReactSharedInternals.ReactCurrentActQueue;
        var NoContext = (
          /*             */
          0
        );
        var BatchedContext = (
          /*               */
          1
        );
        var RenderContext = (
          /*                */
          2
        );
        var CommitContext = (
          /*                */
          4
        );
        var RootInProgress = 0;
        var RootFatalErrored = 1;
        var RootErrored = 2;
        var RootSuspended = 3;
        var RootSuspendedWithDelay = 4;
        var RootCompleted = 5;
        var RootDidNotComplete = 6;
        var executionContext = NoContext;
        var workInProgressRoot = null;
        var workInProgress = null;
        var workInProgressRootRenderLanes = NoLanes;
        var subtreeRenderLanes = NoLanes;
        var subtreeRenderLanesCursor = createCursor(NoLanes);
        var workInProgressRootExitStatus = RootInProgress;
        var workInProgressRootFatalError = null;
        var workInProgressRootIncludedLanes = NoLanes;
        var workInProgressRootSkippedLanes = NoLanes;
        var workInProgressRootInterleavedUpdatedLanes = NoLanes;
        var workInProgressRootPingedLanes = NoLanes;
        var workInProgressRootConcurrentErrors = null;
        var workInProgressRootRecoverableErrors = null;
        var globalMostRecentFallbackTime = 0;
        var FALLBACK_THROTTLE_MS = 500;
        var workInProgressRootRenderTargetTime = Infinity;
        var RENDER_TIMEOUT_MS = 500;
        var workInProgressTransitions = null;
        function resetRenderTimer() {
          workInProgressRootRenderTargetTime = now() + RENDER_TIMEOUT_MS;
        }
        function getRenderTargetTime() {
          return workInProgressRootRenderTargetTime;
        }
        var hasUncaughtError = false;
        var firstUncaughtError = null;
        var legacyErrorBoundariesThatAlreadyFailed = null;
        var rootDoesHavePassiveEffects = false;
        var rootWithPendingPassiveEffects = null;
        var pendingPassiveEffectsLanes = NoLanes;
        var pendingPassiveProfilerEffects = [];
        var pendingPassiveTransitions = null;
        var NESTED_UPDATE_LIMIT = 50;
        var nestedUpdateCount = 0;
        var rootWithNestedUpdates = null;
        var isFlushingPassiveEffects = false;
        var didScheduleUpdateDuringPassiveEffects = false;
        var NESTED_PASSIVE_UPDATE_LIMIT = 50;
        var nestedPassiveUpdateCount = 0;
        var rootWithPassiveNestedUpdates = null;
        var currentEventTime = NoTimestamp;
        var currentEventTransitionLane = NoLanes;
        var isRunningInsertionEffect = false;
        function getWorkInProgressRoot() {
          return workInProgressRoot;
        }
        function requestEventTime() {
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            return now();
          }
          if (currentEventTime !== NoTimestamp) {
            return currentEventTime;
          }
          currentEventTime = now();
          return currentEventTime;
        }
        function requestUpdateLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          } else if ((executionContext & RenderContext) !== NoContext && workInProgressRootRenderLanes !== NoLanes) {
            return pickArbitraryLane(workInProgressRootRenderLanes);
          }
          var isTransition = requestCurrentTransition() !== NoTransition;
          if (isTransition) {
            if (ReactCurrentBatchConfig$3.transition !== null) {
              var transition = ReactCurrentBatchConfig$3.transition;
              if (!transition._updatedFibers) {
                transition._updatedFibers = /* @__PURE__ */ new Set();
              }
              transition._updatedFibers.add(fiber);
            }
            if (currentEventTransitionLane === NoLane) {
              currentEventTransitionLane = claimNextTransitionLane();
            }
            return currentEventTransitionLane;
          }
          var updateLane = getCurrentUpdatePriority();
          if (updateLane !== NoLane) {
            return updateLane;
          }
          var eventLane = getCurrentEventPriority();
          return eventLane;
        }
        function requestRetryLane(fiber) {
          var mode = fiber.mode;
          if ((mode & ConcurrentMode) === NoMode) {
            return SyncLane;
          }
          return claimNextRetryLane();
        }
        function scheduleUpdateOnFiber(root2, fiber, lane, eventTime) {
          checkForNestedUpdates();
          {
            if (isRunningInsertionEffect) {
              error("useInsertionEffect must not schedule updates.");
            }
          }
          {
            if (isFlushingPassiveEffects) {
              didScheduleUpdateDuringPassiveEffects = true;
            }
          }
          markRootUpdated(root2, lane, eventTime);
          if ((executionContext & RenderContext) !== NoLanes && root2 === workInProgressRoot) {
            warnAboutRenderPhaseUpdatesInDEV(fiber);
          } else {
            {
              if (isDevToolsPresent) {
                addFiberToLanesMap(root2, fiber, lane);
              }
            }
            warnIfUpdatesNotWrappedWithActDEV(fiber);
            if (root2 === workInProgressRoot) {
              if ((executionContext & RenderContext) === NoContext) {
                workInProgressRootInterleavedUpdatedLanes = mergeLanes(workInProgressRootInterleavedUpdatedLanes, lane);
              }
              if (workInProgressRootExitStatus === RootSuspendedWithDelay) {
                markRootSuspended$1(root2, workInProgressRootRenderLanes);
              }
            }
            ensureRootIsScheduled(root2, eventTime);
            if (lane === SyncLane && executionContext === NoContext && (fiber.mode & ConcurrentMode) === NoMode && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function scheduleInitialHydrationOnRoot(root2, lane, eventTime) {
          var current2 = root2.current;
          current2.lanes = lane;
          markRootUpdated(root2, lane, eventTime);
          ensureRootIsScheduled(root2, eventTime);
        }
        function isUnsafeClassRenderPhaseUpdate(fiber) {
          return (
            // TODO: Remove outdated deferRenderPhaseUpdateToNextBatch experiment. We
            // decided not to enable it.
            (executionContext & RenderContext) !== NoContext
          );
        }
        function ensureRootIsScheduled(root2, currentTime) {
          var existingCallbackNode = root2.callbackNode;
          markStarvedLanesAsExpired(root2, currentTime);
          var nextLanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (nextLanes === NoLanes) {
            if (existingCallbackNode !== null) {
              cancelCallback$1(existingCallbackNode);
            }
            root2.callbackNode = null;
            root2.callbackPriority = NoLane;
            return;
          }
          var newCallbackPriority = getHighestPriorityLane(nextLanes);
          var existingCallbackPriority = root2.callbackPriority;
          if (existingCallbackPriority === newCallbackPriority && // Special case related to `act`. If the currently scheduled task is a
          // Scheduler task, rather than an `act` task, cancel it and re-scheduled
          // on the `act` queue.
          !(ReactCurrentActQueue$1.current !== null && existingCallbackNode !== fakeActCallbackNode)) {
            {
              if (existingCallbackNode == null && existingCallbackPriority !== SyncLane) {
                error("Expected scheduled callback to exist. This error is likely caused by a bug in React. Please file an issue.");
              }
            }
            return;
          }
          if (existingCallbackNode != null) {
            cancelCallback$1(existingCallbackNode);
          }
          var newCallbackNode;
          if (newCallbackPriority === SyncLane) {
            if (root2.tag === LegacyRoot) {
              if (ReactCurrentActQueue$1.isBatchingLegacy !== null) {
                ReactCurrentActQueue$1.didScheduleLegacyUpdate = true;
              }
              scheduleLegacySyncCallback(performSyncWorkOnRoot.bind(null, root2));
            } else {
              scheduleSyncCallback(performSyncWorkOnRoot.bind(null, root2));
            }
            {
              if (ReactCurrentActQueue$1.current !== null) {
                ReactCurrentActQueue$1.current.push(flushSyncCallbacks);
              } else {
                scheduleMicrotask(function() {
                  if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
                    flushSyncCallbacks();
                  }
                });
              }
            }
            newCallbackNode = null;
          } else {
            var schedulerPriorityLevel;
            switch (lanesToEventPriority(nextLanes)) {
              case DiscreteEventPriority:
                schedulerPriorityLevel = ImmediatePriority;
                break;
              case ContinuousEventPriority:
                schedulerPriorityLevel = UserBlockingPriority;
                break;
              case DefaultEventPriority:
                schedulerPriorityLevel = NormalPriority;
                break;
              case IdleEventPriority:
                schedulerPriorityLevel = IdlePriority;
                break;
              default:
                schedulerPriorityLevel = NormalPriority;
                break;
            }
            newCallbackNode = scheduleCallback$1(schedulerPriorityLevel, performConcurrentWorkOnRoot.bind(null, root2));
          }
          root2.callbackPriority = newCallbackPriority;
          root2.callbackNode = newCallbackNode;
        }
        function performConcurrentWorkOnRoot(root2, didTimeout) {
          {
            resetNestedUpdateFlag();
          }
          currentEventTime = NoTimestamp;
          currentEventTransitionLane = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var originalCallbackNode = root2.callbackNode;
          var didFlushPassiveEffects = flushPassiveEffects();
          if (didFlushPassiveEffects) {
            if (root2.callbackNode !== originalCallbackNode) {
              return null;
            }
          }
          var lanes = getNextLanes(root2, root2 === workInProgressRoot ? workInProgressRootRenderLanes : NoLanes);
          if (lanes === NoLanes) {
            return null;
          }
          var shouldTimeSlice = !includesBlockingLane(root2, lanes) && !includesExpiredLane(root2, lanes) && !didTimeout;
          var exitStatus = shouldTimeSlice ? renderRootConcurrent(root2, lanes) : renderRootSync(root2, lanes);
          if (exitStatus !== RootInProgress) {
            if (exitStatus === RootErrored) {
              var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
              if (errorRetryLanes !== NoLanes) {
                lanes = errorRetryLanes;
                exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
              }
            }
            if (exitStatus === RootFatalErrored) {
              var fatalError = workInProgressRootFatalError;
              prepareFreshStack(root2, NoLanes);
              markRootSuspended$1(root2, lanes);
              ensureRootIsScheduled(root2, now());
              throw fatalError;
            }
            if (exitStatus === RootDidNotComplete) {
              markRootSuspended$1(root2, lanes);
            } else {
              var renderWasConcurrent = !includesBlockingLane(root2, lanes);
              var finishedWork = root2.current.alternate;
              if (renderWasConcurrent && !isRenderConsistentWithExternalStores(finishedWork)) {
                exitStatus = renderRootSync(root2, lanes);
                if (exitStatus === RootErrored) {
                  var _errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
                  if (_errorRetryLanes !== NoLanes) {
                    lanes = _errorRetryLanes;
                    exitStatus = recoverFromConcurrentError(root2, _errorRetryLanes);
                  }
                }
                if (exitStatus === RootFatalErrored) {
                  var _fatalError = workInProgressRootFatalError;
                  prepareFreshStack(root2, NoLanes);
                  markRootSuspended$1(root2, lanes);
                  ensureRootIsScheduled(root2, now());
                  throw _fatalError;
                }
              }
              root2.finishedWork = finishedWork;
              root2.finishedLanes = lanes;
              finishConcurrentRender(root2, exitStatus, lanes);
            }
          }
          ensureRootIsScheduled(root2, now());
          if (root2.callbackNode === originalCallbackNode) {
            return performConcurrentWorkOnRoot.bind(null, root2);
          }
          return null;
        }
        function recoverFromConcurrentError(root2, errorRetryLanes) {
          var errorsFromFirstAttempt = workInProgressRootConcurrentErrors;
          if (isRootDehydrated(root2)) {
            var rootWorkInProgress = prepareFreshStack(root2, errorRetryLanes);
            rootWorkInProgress.flags |= ForceClientRender;
            {
              errorHydratingContainer(root2.containerInfo);
            }
          }
          var exitStatus = renderRootSync(root2, errorRetryLanes);
          if (exitStatus !== RootErrored) {
            var errorsFromSecondAttempt = workInProgressRootRecoverableErrors;
            workInProgressRootRecoverableErrors = errorsFromFirstAttempt;
            if (errorsFromSecondAttempt !== null) {
              queueRecoverableErrors(errorsFromSecondAttempt);
            }
          }
          return exitStatus;
        }
        function queueRecoverableErrors(errors) {
          if (workInProgressRootRecoverableErrors === null) {
            workInProgressRootRecoverableErrors = errors;
          } else {
            workInProgressRootRecoverableErrors.push.apply(workInProgressRootRecoverableErrors, errors);
          }
        }
        function finishConcurrentRender(root2, exitStatus, lanes) {
          switch (exitStatus) {
            case RootInProgress:
            case RootFatalErrored: {
              throw new Error("Root did not complete. This is a bug in React.");
            }
            // Flow knows about invariant, so it complains if I add a break
            // statement, but eslint doesn't know about invariant, so it complains
            // if I do. eslint-disable-next-line no-fallthrough
            case RootErrored: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspended: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyRetries(lanes) && // do not delay if we're inside an act() scope
              !shouldForceFlushFallbacksInDEV()) {
                var msUntilTimeout = globalMostRecentFallbackTime + FALLBACK_THROTTLE_MS - now();
                if (msUntilTimeout > 10) {
                  var nextLanes = getNextLanes(root2, NoLanes);
                  if (nextLanes !== NoLanes) {
                    break;
                  }
                  var suspendedLanes = root2.suspendedLanes;
                  if (!isSubsetOfLanes(suspendedLanes, lanes)) {
                    var eventTime = requestEventTime();
                    markRootPinged(root2, suspendedLanes);
                    break;
                  }
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootSuspendedWithDelay: {
              markRootSuspended$1(root2, lanes);
              if (includesOnlyTransitions(lanes)) {
                break;
              }
              if (!shouldForceFlushFallbacksInDEV()) {
                var mostRecentEventTime = getMostRecentEventTime(root2, lanes);
                var eventTimeMs = mostRecentEventTime;
                var timeElapsedMs = now() - eventTimeMs;
                var _msUntilTimeout = jnd(timeElapsedMs) - timeElapsedMs;
                if (_msUntilTimeout > 10) {
                  root2.timeoutHandle = scheduleTimeout(commitRoot.bind(null, root2, workInProgressRootRecoverableErrors, workInProgressTransitions), _msUntilTimeout);
                  break;
                }
              }
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            case RootCompleted: {
              commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
              break;
            }
            default: {
              throw new Error("Unknown root exit status.");
            }
          }
        }
        function isRenderConsistentWithExternalStores(finishedWork) {
          var node = finishedWork;
          while (true) {
            if (node.flags & StoreConsistency) {
              var updateQueue = node.updateQueue;
              if (updateQueue !== null) {
                var checks = updateQueue.stores;
                if (checks !== null) {
                  for (var i = 0; i < checks.length; i++) {
                    var check = checks[i];
                    var getSnapshot = check.getSnapshot;
                    var renderedValue = check.value;
                    try {
                      if (!objectIs(getSnapshot(), renderedValue)) {
                        return false;
                      }
                    } catch (error2) {
                      return false;
                    }
                  }
                }
              }
            }
            var child = node.child;
            if (node.subtreeFlags & StoreConsistency && child !== null) {
              child.return = node;
              node = child;
              continue;
            }
            if (node === finishedWork) {
              return true;
            }
            while (node.sibling === null) {
              if (node.return === null || node.return === finishedWork) {
                return true;
              }
              node = node.return;
            }
            node.sibling.return = node.return;
            node = node.sibling;
          }
          return true;
        }
        function markRootSuspended$1(root2, suspendedLanes) {
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootPingedLanes);
          suspendedLanes = removeLanes(suspendedLanes, workInProgressRootInterleavedUpdatedLanes);
          markRootSuspended(root2, suspendedLanes);
        }
        function performSyncWorkOnRoot(root2) {
          {
            syncNestedUpdateFlag();
          }
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          flushPassiveEffects();
          var lanes = getNextLanes(root2, NoLanes);
          if (!includesSomeLane(lanes, SyncLane)) {
            ensureRootIsScheduled(root2, now());
            return null;
          }
          var exitStatus = renderRootSync(root2, lanes);
          if (root2.tag !== LegacyRoot && exitStatus === RootErrored) {
            var errorRetryLanes = getLanesToRetrySynchronouslyOnError(root2);
            if (errorRetryLanes !== NoLanes) {
              lanes = errorRetryLanes;
              exitStatus = recoverFromConcurrentError(root2, errorRetryLanes);
            }
          }
          if (exitStatus === RootFatalErrored) {
            var fatalError = workInProgressRootFatalError;
            prepareFreshStack(root2, NoLanes);
            markRootSuspended$1(root2, lanes);
            ensureRootIsScheduled(root2, now());
            throw fatalError;
          }
          if (exitStatus === RootDidNotComplete) {
            throw new Error("Root did not complete. This is a bug in React.");
          }
          var finishedWork = root2.current.alternate;
          root2.finishedWork = finishedWork;
          root2.finishedLanes = lanes;
          commitRoot(root2, workInProgressRootRecoverableErrors, workInProgressTransitions);
          ensureRootIsScheduled(root2, now());
          return null;
        }
        function flushRoot(root2, lanes) {
          if (lanes !== NoLanes) {
            markRootEntangled(root2, mergeLanes(lanes, SyncLane));
            ensureRootIsScheduled(root2, now());
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              resetRenderTimer();
              flushSyncCallbacks();
            }
          }
        }
        function batchedUpdates$1(fn, a7) {
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          try {
            return fn(a7);
          } finally {
            executionContext = prevExecutionContext;
            if (executionContext === NoContext && // Treat `act` as if it's inside `batchedUpdates`, even in legacy mode.
            !ReactCurrentActQueue$1.isBatchingLegacy) {
              resetRenderTimer();
              flushSyncCallbacksOnlyInLegacyMode();
            }
          }
        }
        function discreteUpdates(fn, a7, b, c, d) {
          var previousPriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            return fn(a7, b, c, d);
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            if (executionContext === NoContext) {
              resetRenderTimer();
            }
          }
        }
        function flushSync3(fn) {
          if (rootWithPendingPassiveEffects !== null && rootWithPendingPassiveEffects.tag === LegacyRoot && (executionContext & (RenderContext | CommitContext)) === NoContext) {
            flushPassiveEffects();
          }
          var prevExecutionContext = executionContext;
          executionContext |= BatchedContext;
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          var previousPriority = getCurrentUpdatePriority();
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            if (fn) {
              return fn();
            } else {
              return void 0;
            }
          } finally {
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
            executionContext = prevExecutionContext;
            if ((executionContext & (RenderContext | CommitContext)) === NoContext) {
              flushSyncCallbacks();
            }
          }
        }
        function isAlreadyRendering() {
          return (executionContext & (RenderContext | CommitContext)) !== NoContext;
        }
        function pushRenderLanes(fiber, lanes) {
          push(subtreeRenderLanesCursor, subtreeRenderLanes, fiber);
          subtreeRenderLanes = mergeLanes(subtreeRenderLanes, lanes);
          workInProgressRootIncludedLanes = mergeLanes(workInProgressRootIncludedLanes, lanes);
        }
        function popRenderLanes(fiber) {
          subtreeRenderLanes = subtreeRenderLanesCursor.current;
          pop(subtreeRenderLanesCursor, fiber);
        }
        function prepareFreshStack(root2, lanes) {
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          var timeoutHandle = root2.timeoutHandle;
          if (timeoutHandle !== noTimeout) {
            root2.timeoutHandle = noTimeout;
            cancelTimeout(timeoutHandle);
          }
          if (workInProgress !== null) {
            var interruptedWork = workInProgress.return;
            while (interruptedWork !== null) {
              var current2 = interruptedWork.alternate;
              unwindInterruptedWork(current2, interruptedWork);
              interruptedWork = interruptedWork.return;
            }
          }
          workInProgressRoot = root2;
          var rootWorkInProgress = createWorkInProgress(root2.current, null);
          workInProgress = rootWorkInProgress;
          workInProgressRootRenderLanes = subtreeRenderLanes = workInProgressRootIncludedLanes = lanes;
          workInProgressRootExitStatus = RootInProgress;
          workInProgressRootFatalError = null;
          workInProgressRootSkippedLanes = NoLanes;
          workInProgressRootInterleavedUpdatedLanes = NoLanes;
          workInProgressRootPingedLanes = NoLanes;
          workInProgressRootConcurrentErrors = null;
          workInProgressRootRecoverableErrors = null;
          finishQueueingConcurrentUpdates();
          {
            ReactStrictModeWarnings.discardPendingWarnings();
          }
          return rootWorkInProgress;
        }
        function handleError(root2, thrownValue) {
          do {
            var erroredWork = workInProgress;
            try {
              resetContextDependencies();
              resetHooksAfterThrow();
              resetCurrentFiber();
              ReactCurrentOwner$2.current = null;
              if (erroredWork === null || erroredWork.return === null) {
                workInProgressRootExitStatus = RootFatalErrored;
                workInProgressRootFatalError = thrownValue;
                workInProgress = null;
                return;
              }
              if (enableProfilerTimer && erroredWork.mode & ProfileMode) {
                stopProfilerTimerIfRunningAndRecordDelta(erroredWork, true);
              }
              if (enableSchedulingProfiler) {
                markComponentRenderStopped();
                if (thrownValue !== null && typeof thrownValue === "object" && typeof thrownValue.then === "function") {
                  var wakeable = thrownValue;
                  markComponentSuspended(erroredWork, wakeable, workInProgressRootRenderLanes);
                } else {
                  markComponentErrored(erroredWork, thrownValue, workInProgressRootRenderLanes);
                }
              }
              throwException(root2, erroredWork.return, erroredWork, thrownValue, workInProgressRootRenderLanes);
              completeUnitOfWork(erroredWork);
            } catch (yetAnotherThrownValue) {
              thrownValue = yetAnotherThrownValue;
              if (workInProgress === erroredWork && erroredWork !== null) {
                erroredWork = erroredWork.return;
                workInProgress = erroredWork;
              } else {
                erroredWork = workInProgress;
              }
              continue;
            }
            return;
          } while (true);
        }
        function pushDispatcher() {
          var prevDispatcher = ReactCurrentDispatcher$2.current;
          ReactCurrentDispatcher$2.current = ContextOnlyDispatcher;
          if (prevDispatcher === null) {
            return ContextOnlyDispatcher;
          } else {
            return prevDispatcher;
          }
        }
        function popDispatcher(prevDispatcher) {
          ReactCurrentDispatcher$2.current = prevDispatcher;
        }
        function markCommitTimeOfFallback() {
          globalMostRecentFallbackTime = now();
        }
        function markSkippedUpdateLanes(lane) {
          workInProgressRootSkippedLanes = mergeLanes(lane, workInProgressRootSkippedLanes);
        }
        function renderDidSuspend() {
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootSuspended;
          }
        }
        function renderDidSuspendDelayIfPossible() {
          if (workInProgressRootExitStatus === RootInProgress || workInProgressRootExitStatus === RootSuspended || workInProgressRootExitStatus === RootErrored) {
            workInProgressRootExitStatus = RootSuspendedWithDelay;
          }
          if (workInProgressRoot !== null && (includesNonIdleWork(workInProgressRootSkippedLanes) || includesNonIdleWork(workInProgressRootInterleavedUpdatedLanes))) {
            markRootSuspended$1(workInProgressRoot, workInProgressRootRenderLanes);
          }
        }
        function renderDidError(error2) {
          if (workInProgressRootExitStatus !== RootSuspendedWithDelay) {
            workInProgressRootExitStatus = RootErrored;
          }
          if (workInProgressRootConcurrentErrors === null) {
            workInProgressRootConcurrentErrors = [error2];
          } else {
            workInProgressRootConcurrentErrors.push(error2);
          }
        }
        function renderHasNotSuspendedYet() {
          return workInProgressRootExitStatus === RootInProgress;
        }
        function renderRootSync(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopSync();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          executionContext = prevExecutionContext;
          popDispatcher(prevDispatcher);
          if (workInProgress !== null) {
            throw new Error("Cannot commit an incomplete root. This error is likely caused by a bug in React. Please file an issue.");
          }
          {
            markRenderStopped();
          }
          workInProgressRoot = null;
          workInProgressRootRenderLanes = NoLanes;
          return workInProgressRootExitStatus;
        }
        function workLoopSync() {
          while (workInProgress !== null) {
            performUnitOfWork(workInProgress);
          }
        }
        function renderRootConcurrent(root2, lanes) {
          var prevExecutionContext = executionContext;
          executionContext |= RenderContext;
          var prevDispatcher = pushDispatcher();
          if (workInProgressRoot !== root2 || workInProgressRootRenderLanes !== lanes) {
            {
              if (isDevToolsPresent) {
                var memoizedUpdaters = root2.memoizedUpdaters;
                if (memoizedUpdaters.size > 0) {
                  restorePendingUpdaters(root2, workInProgressRootRenderLanes);
                  memoizedUpdaters.clear();
                }
                movePendingFibersToMemoized(root2, lanes);
              }
            }
            workInProgressTransitions = getTransitionsForLanes();
            resetRenderTimer();
            prepareFreshStack(root2, lanes);
          }
          {
            markRenderStarted(lanes);
          }
          do {
            try {
              workLoopConcurrent();
              break;
            } catch (thrownValue) {
              handleError(root2, thrownValue);
            }
          } while (true);
          resetContextDependencies();
          popDispatcher(prevDispatcher);
          executionContext = prevExecutionContext;
          if (workInProgress !== null) {
            {
              markRenderYielded();
            }
            return RootInProgress;
          } else {
            {
              markRenderStopped();
            }
            workInProgressRoot = null;
            workInProgressRootRenderLanes = NoLanes;
            return workInProgressRootExitStatus;
          }
        }
        function workLoopConcurrent() {
          while (workInProgress !== null && !shouldYield()) {
            performUnitOfWork(workInProgress);
          }
        }
        function performUnitOfWork(unitOfWork) {
          var current2 = unitOfWork.alternate;
          setCurrentFiber(unitOfWork);
          var next;
          if ((unitOfWork.mode & ProfileMode) !== NoMode) {
            startProfilerTimer(unitOfWork);
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
            stopProfilerTimerIfRunningAndRecordDelta(unitOfWork, true);
          } else {
            next = beginWork$1(current2, unitOfWork, subtreeRenderLanes);
          }
          resetCurrentFiber();
          unitOfWork.memoizedProps = unitOfWork.pendingProps;
          if (next === null) {
            completeUnitOfWork(unitOfWork);
          } else {
            workInProgress = next;
          }
          ReactCurrentOwner$2.current = null;
        }
        function completeUnitOfWork(unitOfWork) {
          var completedWork = unitOfWork;
          do {
            var current2 = completedWork.alternate;
            var returnFiber = completedWork.return;
            if ((completedWork.flags & Incomplete) === NoFlags) {
              setCurrentFiber(completedWork);
              var next = void 0;
              if ((completedWork.mode & ProfileMode) === NoMode) {
                next = completeWork(current2, completedWork, subtreeRenderLanes);
              } else {
                startProfilerTimer(completedWork);
                next = completeWork(current2, completedWork, subtreeRenderLanes);
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
              }
              resetCurrentFiber();
              if (next !== null) {
                workInProgress = next;
                return;
              }
            } else {
              var _next = unwindWork(current2, completedWork);
              if (_next !== null) {
                _next.flags &= HostEffectMask;
                workInProgress = _next;
                return;
              }
              if ((completedWork.mode & ProfileMode) !== NoMode) {
                stopProfilerTimerIfRunningAndRecordDelta(completedWork, false);
                var actualDuration = completedWork.actualDuration;
                var child = completedWork.child;
                while (child !== null) {
                  actualDuration += child.actualDuration;
                  child = child.sibling;
                }
                completedWork.actualDuration = actualDuration;
              }
              if (returnFiber !== null) {
                returnFiber.flags |= Incomplete;
                returnFiber.subtreeFlags = NoFlags;
                returnFiber.deletions = null;
              } else {
                workInProgressRootExitStatus = RootDidNotComplete;
                workInProgress = null;
                return;
              }
            }
            var siblingFiber = completedWork.sibling;
            if (siblingFiber !== null) {
              workInProgress = siblingFiber;
              return;
            }
            completedWork = returnFiber;
            workInProgress = completedWork;
          } while (completedWork !== null);
          if (workInProgressRootExitStatus === RootInProgress) {
            workInProgressRootExitStatus = RootCompleted;
          }
        }
        function commitRoot(root2, recoverableErrors, transitions) {
          var previousUpdateLanePriority = getCurrentUpdatePriority();
          var prevTransition = ReactCurrentBatchConfig$3.transition;
          try {
            ReactCurrentBatchConfig$3.transition = null;
            setCurrentUpdatePriority(DiscreteEventPriority);
            commitRootImpl(root2, recoverableErrors, transitions, previousUpdateLanePriority);
          } finally {
            ReactCurrentBatchConfig$3.transition = prevTransition;
            setCurrentUpdatePriority(previousUpdateLanePriority);
          }
          return null;
        }
        function commitRootImpl(root2, recoverableErrors, transitions, renderPriorityLevel) {
          do {
            flushPassiveEffects();
          } while (rootWithPendingPassiveEffects !== null);
          flushRenderPhaseStrictModeWarningsInDEV();
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Should not already be working.");
          }
          var finishedWork = root2.finishedWork;
          var lanes = root2.finishedLanes;
          {
            markCommitStarted(lanes);
          }
          if (finishedWork === null) {
            {
              markCommitStopped();
            }
            return null;
          } else {
            {
              if (lanes === NoLanes) {
                error("root.finishedLanes should not be empty during a commit. This is a bug in React.");
              }
            }
          }
          root2.finishedWork = null;
          root2.finishedLanes = NoLanes;
          if (finishedWork === root2.current) {
            throw new Error("Cannot commit the same tree as before. This error is likely caused by a bug in React. Please file an issue.");
          }
          root2.callbackNode = null;
          root2.callbackPriority = NoLane;
          var remainingLanes = mergeLanes(finishedWork.lanes, finishedWork.childLanes);
          markRootFinished(root2, remainingLanes);
          if (root2 === workInProgressRoot) {
            workInProgressRoot = null;
            workInProgress = null;
            workInProgressRootRenderLanes = NoLanes;
          }
          if ((finishedWork.subtreeFlags & PassiveMask) !== NoFlags || (finishedWork.flags & PassiveMask) !== NoFlags) {
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              pendingPassiveTransitions = transitions;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
          var subtreeHasEffects = (finishedWork.subtreeFlags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          var rootHasEffect = (finishedWork.flags & (BeforeMutationMask | MutationMask | LayoutMask | PassiveMask)) !== NoFlags;
          if (subtreeHasEffects || rootHasEffect) {
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            ReactCurrentBatchConfig$3.transition = null;
            var previousPriority = getCurrentUpdatePriority();
            setCurrentUpdatePriority(DiscreteEventPriority);
            var prevExecutionContext = executionContext;
            executionContext |= CommitContext;
            ReactCurrentOwner$2.current = null;
            var shouldFireAfterActiveInstanceBlur2 = commitBeforeMutationEffects(root2, finishedWork);
            {
              recordCommitTime();
            }
            commitMutationEffects(root2, finishedWork, lanes);
            resetAfterCommit(root2.containerInfo);
            root2.current = finishedWork;
            {
              markLayoutEffectsStarted(lanes);
            }
            commitLayoutEffects(finishedWork, root2, lanes);
            {
              markLayoutEffectsStopped();
            }
            requestPaint();
            executionContext = prevExecutionContext;
            setCurrentUpdatePriority(previousPriority);
            ReactCurrentBatchConfig$3.transition = prevTransition;
          } else {
            root2.current = finishedWork;
            {
              recordCommitTime();
            }
          }
          var rootDidHavePassiveEffects = rootDoesHavePassiveEffects;
          if (rootDoesHavePassiveEffects) {
            rootDoesHavePassiveEffects = false;
            rootWithPendingPassiveEffects = root2;
            pendingPassiveEffectsLanes = lanes;
          } else {
            {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
            }
          }
          remainingLanes = root2.pendingLanes;
          if (remainingLanes === NoLanes) {
            legacyErrorBoundariesThatAlreadyFailed = null;
          }
          {
            if (!rootDidHavePassiveEffects) {
              commitDoubleInvokeEffectsInDEV(root2.current, false);
            }
          }
          onCommitRoot(finishedWork.stateNode, renderPriorityLevel);
          {
            if (isDevToolsPresent) {
              root2.memoizedUpdaters.clear();
            }
          }
          {
            onCommitRoot$1();
          }
          ensureRootIsScheduled(root2, now());
          if (recoverableErrors !== null) {
            var onRecoverableError = root2.onRecoverableError;
            for (var i = 0; i < recoverableErrors.length; i++) {
              var recoverableError = recoverableErrors[i];
              var componentStack = recoverableError.stack;
              var digest = recoverableError.digest;
              onRecoverableError(recoverableError.value, {
                componentStack,
                digest
              });
            }
          }
          if (hasUncaughtError) {
            hasUncaughtError = false;
            var error$1 = firstUncaughtError;
            firstUncaughtError = null;
            throw error$1;
          }
          if (includesSomeLane(pendingPassiveEffectsLanes, SyncLane) && root2.tag !== LegacyRoot) {
            flushPassiveEffects();
          }
          remainingLanes = root2.pendingLanes;
          if (includesSomeLane(remainingLanes, SyncLane)) {
            {
              markNestedUpdateScheduled();
            }
            if (root2 === rootWithNestedUpdates) {
              nestedUpdateCount++;
            } else {
              nestedUpdateCount = 0;
              rootWithNestedUpdates = root2;
            }
          } else {
            nestedUpdateCount = 0;
          }
          flushSyncCallbacks();
          {
            markCommitStopped();
          }
          return null;
        }
        function flushPassiveEffects() {
          if (rootWithPendingPassiveEffects !== null) {
            var renderPriority = lanesToEventPriority(pendingPassiveEffectsLanes);
            var priority = lowerEventPriority(DefaultEventPriority, renderPriority);
            var prevTransition = ReactCurrentBatchConfig$3.transition;
            var previousPriority = getCurrentUpdatePriority();
            try {
              ReactCurrentBatchConfig$3.transition = null;
              setCurrentUpdatePriority(priority);
              return flushPassiveEffectsImpl();
            } finally {
              setCurrentUpdatePriority(previousPriority);
              ReactCurrentBatchConfig$3.transition = prevTransition;
            }
          }
          return false;
        }
        function enqueuePendingPassiveProfilerEffect(fiber) {
          {
            pendingPassiveProfilerEffects.push(fiber);
            if (!rootDoesHavePassiveEffects) {
              rootDoesHavePassiveEffects = true;
              scheduleCallback$1(NormalPriority, function() {
                flushPassiveEffects();
                return null;
              });
            }
          }
        }
        function flushPassiveEffectsImpl() {
          if (rootWithPendingPassiveEffects === null) {
            return false;
          }
          var transitions = pendingPassiveTransitions;
          pendingPassiveTransitions = null;
          var root2 = rootWithPendingPassiveEffects;
          var lanes = pendingPassiveEffectsLanes;
          rootWithPendingPassiveEffects = null;
          pendingPassiveEffectsLanes = NoLanes;
          if ((executionContext & (RenderContext | CommitContext)) !== NoContext) {
            throw new Error("Cannot flush passive effects while already rendering.");
          }
          {
            isFlushingPassiveEffects = true;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          {
            markPassiveEffectsStarted(lanes);
          }
          var prevExecutionContext = executionContext;
          executionContext |= CommitContext;
          commitPassiveUnmountEffects(root2.current);
          commitPassiveMountEffects(root2, root2.current, lanes, transitions);
          {
            var profilerEffects = pendingPassiveProfilerEffects;
            pendingPassiveProfilerEffects = [];
            for (var i = 0; i < profilerEffects.length; i++) {
              var _fiber = profilerEffects[i];
              commitPassiveEffectDurations(root2, _fiber);
            }
          }
          {
            markPassiveEffectsStopped();
          }
          {
            commitDoubleInvokeEffectsInDEV(root2.current, true);
          }
          executionContext = prevExecutionContext;
          flushSyncCallbacks();
          {
            if (didScheduleUpdateDuringPassiveEffects) {
              if (root2 === rootWithPassiveNestedUpdates) {
                nestedPassiveUpdateCount++;
              } else {
                nestedPassiveUpdateCount = 0;
                rootWithPassiveNestedUpdates = root2;
              }
            } else {
              nestedPassiveUpdateCount = 0;
            }
            isFlushingPassiveEffects = false;
            didScheduleUpdateDuringPassiveEffects = false;
          }
          onPostCommitRoot(root2);
          {
            var stateNode = root2.current.stateNode;
            stateNode.effectDuration = 0;
            stateNode.passiveEffectDuration = 0;
          }
          return true;
        }
        function isAlreadyFailedLegacyErrorBoundary(instance) {
          return legacyErrorBoundariesThatAlreadyFailed !== null && legacyErrorBoundariesThatAlreadyFailed.has(instance);
        }
        function markLegacyErrorBoundaryAsFailed(instance) {
          if (legacyErrorBoundariesThatAlreadyFailed === null) {
            legacyErrorBoundariesThatAlreadyFailed = /* @__PURE__ */ new Set([instance]);
          } else {
            legacyErrorBoundariesThatAlreadyFailed.add(instance);
          }
        }
        function prepareToThrowUncaughtError(error2) {
          if (!hasUncaughtError) {
            hasUncaughtError = true;
            firstUncaughtError = error2;
          }
        }
        var onUncaughtError = prepareToThrowUncaughtError;
        function captureCommitPhaseErrorOnRoot(rootFiber, sourceFiber, error2) {
          var errorInfo = createCapturedValueAtFiber(error2, sourceFiber);
          var update = createRootErrorUpdate(rootFiber, errorInfo, SyncLane);
          var root2 = enqueueUpdate(rootFiber, update, SyncLane);
          var eventTime = requestEventTime();
          if (root2 !== null) {
            markRootUpdated(root2, SyncLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function captureCommitPhaseError(sourceFiber, nearestMountedAncestor, error$1) {
          {
            reportUncaughtErrorInDEV(error$1);
            setIsRunningInsertionEffect(false);
          }
          if (sourceFiber.tag === HostRoot) {
            captureCommitPhaseErrorOnRoot(sourceFiber, sourceFiber, error$1);
            return;
          }
          var fiber = null;
          {
            fiber = nearestMountedAncestor;
          }
          while (fiber !== null) {
            if (fiber.tag === HostRoot) {
              captureCommitPhaseErrorOnRoot(fiber, sourceFiber, error$1);
              return;
            } else if (fiber.tag === ClassComponent) {
              var ctor = fiber.type;
              var instance = fiber.stateNode;
              if (typeof ctor.getDerivedStateFromError === "function" || typeof instance.componentDidCatch === "function" && !isAlreadyFailedLegacyErrorBoundary(instance)) {
                var errorInfo = createCapturedValueAtFiber(error$1, sourceFiber);
                var update = createClassErrorUpdate(fiber, errorInfo, SyncLane);
                var root2 = enqueueUpdate(fiber, update, SyncLane);
                var eventTime = requestEventTime();
                if (root2 !== null) {
                  markRootUpdated(root2, SyncLane, eventTime);
                  ensureRootIsScheduled(root2, eventTime);
                }
                return;
              }
            }
            fiber = fiber.return;
          }
          {
            error("Internal React error: Attempted to capture a commit phase error inside a detached tree. This indicates a bug in React. Likely causes include deleting the same fiber more than once, committing an already-finished tree, or an inconsistent return pointer.\n\nError message:\n\n%s", error$1);
          }
        }
        function pingSuspendedRoot(root2, wakeable, pingedLanes) {
          var pingCache = root2.pingCache;
          if (pingCache !== null) {
            pingCache.delete(wakeable);
          }
          var eventTime = requestEventTime();
          markRootPinged(root2, pingedLanes);
          warnIfSuspenseResolutionNotWrappedWithActDEV(root2);
          if (workInProgressRoot === root2 && isSubsetOfLanes(workInProgressRootRenderLanes, pingedLanes)) {
            if (workInProgressRootExitStatus === RootSuspendedWithDelay || workInProgressRootExitStatus === RootSuspended && includesOnlyRetries(workInProgressRootRenderLanes) && now() - globalMostRecentFallbackTime < FALLBACK_THROTTLE_MS) {
              prepareFreshStack(root2, NoLanes);
            } else {
              workInProgressRootPingedLanes = mergeLanes(workInProgressRootPingedLanes, pingedLanes);
            }
          }
          ensureRootIsScheduled(root2, eventTime);
        }
        function retryTimedOutBoundary(boundaryFiber, retryLane) {
          if (retryLane === NoLane) {
            retryLane = requestRetryLane(boundaryFiber);
          }
          var eventTime = requestEventTime();
          var root2 = enqueueConcurrentRenderForLane(boundaryFiber, retryLane);
          if (root2 !== null) {
            markRootUpdated(root2, retryLane, eventTime);
            ensureRootIsScheduled(root2, eventTime);
          }
        }
        function retryDehydratedSuspenseBoundary(boundaryFiber) {
          var suspenseState = boundaryFiber.memoizedState;
          var retryLane = NoLane;
          if (suspenseState !== null) {
            retryLane = suspenseState.retryLane;
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function resolveRetryWakeable(boundaryFiber, wakeable) {
          var retryLane = NoLane;
          var retryCache;
          switch (boundaryFiber.tag) {
            case SuspenseComponent:
              retryCache = boundaryFiber.stateNode;
              var suspenseState = boundaryFiber.memoizedState;
              if (suspenseState !== null) {
                retryLane = suspenseState.retryLane;
              }
              break;
            case SuspenseListComponent:
              retryCache = boundaryFiber.stateNode;
              break;
            default:
              throw new Error("Pinged unknown suspense boundary type. This is probably a bug in React.");
          }
          if (retryCache !== null) {
            retryCache.delete(wakeable);
          }
          retryTimedOutBoundary(boundaryFiber, retryLane);
        }
        function jnd(timeElapsed) {
          return timeElapsed < 120 ? 120 : timeElapsed < 480 ? 480 : timeElapsed < 1080 ? 1080 : timeElapsed < 1920 ? 1920 : timeElapsed < 3e3 ? 3e3 : timeElapsed < 4320 ? 4320 : ceil(timeElapsed / 1960) * 1960;
        }
        function checkForNestedUpdates() {
          if (nestedUpdateCount > NESTED_UPDATE_LIMIT) {
            nestedUpdateCount = 0;
            rootWithNestedUpdates = null;
            throw new Error("Maximum update depth exceeded. This can happen when a component repeatedly calls setState inside componentWillUpdate or componentDidUpdate. React limits the number of nested updates to prevent infinite loops.");
          }
          {
            if (nestedPassiveUpdateCount > NESTED_PASSIVE_UPDATE_LIMIT) {
              nestedPassiveUpdateCount = 0;
              rootWithPassiveNestedUpdates = null;
              error("Maximum update depth exceeded. This can happen when a component calls setState inside useEffect, but useEffect either doesn't have a dependency array, or one of the dependencies changes on every render.");
            }
          }
        }
        function flushRenderPhaseStrictModeWarningsInDEV() {
          {
            ReactStrictModeWarnings.flushLegacyContextWarning();
            {
              ReactStrictModeWarnings.flushPendingUnsafeLifecycleWarnings();
            }
          }
        }
        function commitDoubleInvokeEffectsInDEV(fiber, hasPassiveEffects) {
          {
            setCurrentFiber(fiber);
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectUnmountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectUnmountInDEV);
            }
            invokeEffectsInDev(fiber, MountLayoutDev, invokeLayoutEffectMountInDEV);
            if (hasPassiveEffects) {
              invokeEffectsInDev(fiber, MountPassiveDev, invokePassiveEffectMountInDEV);
            }
            resetCurrentFiber();
          }
        }
        function invokeEffectsInDev(firstChild, fiberFlags, invokeEffectFn) {
          {
            var current2 = firstChild;
            var subtreeRoot = null;
            while (current2 !== null) {
              var primarySubtreeFlag = current2.subtreeFlags & fiberFlags;
              if (current2 !== subtreeRoot && current2.child !== null && primarySubtreeFlag !== NoFlags) {
                current2 = current2.child;
              } else {
                if ((current2.flags & fiberFlags) !== NoFlags) {
                  invokeEffectFn(current2);
                }
                if (current2.sibling !== null) {
                  current2 = current2.sibling;
                } else {
                  current2 = subtreeRoot = current2.return;
                }
              }
            }
          }
        }
        var didWarnStateUpdateForNotYetMountedComponent = null;
        function warnAboutUpdateOnNotYetMountedFiberInDEV(fiber) {
          {
            if ((executionContext & RenderContext) !== NoContext) {
              return;
            }
            if (!(fiber.mode & ConcurrentMode)) {
              return;
            }
            var tag = fiber.tag;
            if (tag !== IndeterminateComponent && tag !== HostRoot && tag !== ClassComponent && tag !== FunctionComponent && tag !== ForwardRef && tag !== MemoComponent && tag !== SimpleMemoComponent) {
              return;
            }
            var componentName = getComponentNameFromFiber(fiber) || "ReactComponent";
            if (didWarnStateUpdateForNotYetMountedComponent !== null) {
              if (didWarnStateUpdateForNotYetMountedComponent.has(componentName)) {
                return;
              }
              didWarnStateUpdateForNotYetMountedComponent.add(componentName);
            } else {
              didWarnStateUpdateForNotYetMountedComponent = /* @__PURE__ */ new Set([componentName]);
            }
            var previousFiber = current;
            try {
              setCurrentFiber(fiber);
              error("Can't perform a React state update on a component that hasn't mounted yet. This indicates that you have a side-effect in your render function that asynchronously later calls tries to update the component. Move this work to useEffect instead.");
            } finally {
              if (previousFiber) {
                setCurrentFiber(fiber);
              } else {
                resetCurrentFiber();
              }
            }
          }
        }
        var beginWork$1;
        {
          var dummyFiber = null;
          beginWork$1 = function(current2, unitOfWork, lanes) {
            var originalWorkInProgressCopy = assignFiberPropertiesInDEV(dummyFiber, unitOfWork);
            try {
              return beginWork(current2, unitOfWork, lanes);
            } catch (originalError) {
              if (didSuspendOrErrorWhileHydratingDEV() || originalError !== null && typeof originalError === "object" && typeof originalError.then === "function") {
                throw originalError;
              }
              resetContextDependencies();
              resetHooksAfterThrow();
              unwindInterruptedWork(current2, unitOfWork);
              assignFiberPropertiesInDEV(unitOfWork, originalWorkInProgressCopy);
              if (unitOfWork.mode & ProfileMode) {
                startProfilerTimer(unitOfWork);
              }
              invokeGuardedCallback(null, beginWork, null, current2, unitOfWork, lanes);
              if (hasCaughtError()) {
                var replayError = clearCaughtError();
                if (typeof replayError === "object" && replayError !== null && replayError._suppressLogging && typeof originalError === "object" && originalError !== null && !originalError._suppressLogging) {
                  originalError._suppressLogging = true;
                }
              }
              throw originalError;
            }
          };
        }
        var didWarnAboutUpdateInRender = false;
        var didWarnAboutUpdateInRenderForAnotherComponent;
        {
          didWarnAboutUpdateInRenderForAnotherComponent = /* @__PURE__ */ new Set();
        }
        function warnAboutRenderPhaseUpdatesInDEV(fiber) {
          {
            if (isRendering && !getIsUpdatingOpaqueValueInRenderPhaseInDEV()) {
              switch (fiber.tag) {
                case FunctionComponent:
                case ForwardRef:
                case SimpleMemoComponent: {
                  var renderingComponentName = workInProgress && getComponentNameFromFiber(workInProgress) || "Unknown";
                  var dedupeKey = renderingComponentName;
                  if (!didWarnAboutUpdateInRenderForAnotherComponent.has(dedupeKey)) {
                    didWarnAboutUpdateInRenderForAnotherComponent.add(dedupeKey);
                    var setStateComponentName = getComponentNameFromFiber(fiber) || "Unknown";
                    error("Cannot update a component (`%s`) while rendering a different component (`%s`). To locate the bad setState() call inside `%s`, follow the stack trace as described in https://reactjs.org/link/setstate-in-render", setStateComponentName, renderingComponentName, renderingComponentName);
                  }
                  break;
                }
                case ClassComponent: {
                  if (!didWarnAboutUpdateInRender) {
                    error("Cannot update during an existing state transition (such as within `render`). Render methods should be a pure function of props and state.");
                    didWarnAboutUpdateInRender = true;
                  }
                  break;
                }
              }
            }
          }
        }
        function restorePendingUpdaters(root2, lanes) {
          {
            if (isDevToolsPresent) {
              var memoizedUpdaters = root2.memoizedUpdaters;
              memoizedUpdaters.forEach(function(schedulingFiber) {
                addFiberToLanesMap(root2, schedulingFiber, lanes);
              });
            }
          }
        }
        var fakeActCallbackNode = {};
        function scheduleCallback$1(priorityLevel, callback) {
          {
            var actQueue = ReactCurrentActQueue$1.current;
            if (actQueue !== null) {
              actQueue.push(callback);
              return fakeActCallbackNode;
            } else {
              return scheduleCallback(priorityLevel, callback);
            }
          }
        }
        function cancelCallback$1(callbackNode) {
          if (callbackNode === fakeActCallbackNode) {
            return;
          }
          return cancelCallback(callbackNode);
        }
        function shouldForceFlushFallbacksInDEV() {
          return ReactCurrentActQueue$1.current !== null;
        }
        function warnIfUpdatesNotWrappedWithActDEV(fiber) {
          {
            if (fiber.mode & ConcurrentMode) {
              if (!isConcurrentActEnvironment()) {
                return;
              }
            } else {
              if (!isLegacyActEnvironment()) {
                return;
              }
              if (executionContext !== NoContext) {
                return;
              }
              if (fiber.tag !== FunctionComponent && fiber.tag !== ForwardRef && fiber.tag !== SimpleMemoComponent) {
                return;
              }
            }
            if (ReactCurrentActQueue$1.current === null) {
              var previousFiber = current;
              try {
                setCurrentFiber(fiber);
                error("An update to %s inside a test was not wrapped in act(...).\n\nWhen testing, code that causes React state updates should be wrapped into act(...):\n\nact(() => {\n  /* fire events that update state */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act", getComponentNameFromFiber(fiber));
              } finally {
                if (previousFiber) {
                  setCurrentFiber(fiber);
                } else {
                  resetCurrentFiber();
                }
              }
            }
          }
        }
        function warnIfSuspenseResolutionNotWrappedWithActDEV(root2) {
          {
            if (root2.tag !== LegacyRoot && isConcurrentActEnvironment() && ReactCurrentActQueue$1.current === null) {
              error("A suspended resource finished loading inside a test, but the event was not wrapped in act(...).\n\nWhen testing, code that resolves suspended data should be wrapped into act(...):\n\nact(() => {\n  /* finish loading suspended data */\n});\n/* assert on the output */\n\nThis ensures that you're testing the behavior the user would see in the browser. Learn more at https://reactjs.org/link/wrap-tests-with-act");
            }
          }
        }
        function setIsRunningInsertionEffect(isRunning) {
          {
            isRunningInsertionEffect = isRunning;
          }
        }
        var resolveFamily = null;
        var failedBoundaries = null;
        var setRefreshHandler = function(handler) {
          {
            resolveFamily = handler;
          }
        };
        function resolveFunctionForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              return type;
            }
            return family.current;
          }
        }
        function resolveClassForHotReloading(type) {
          return resolveFunctionForHotReloading(type);
        }
        function resolveForwardRefForHotReloading(type) {
          {
            if (resolveFamily === null) {
              return type;
            }
            var family = resolveFamily(type);
            if (family === void 0) {
              if (type !== null && type !== void 0 && typeof type.render === "function") {
                var currentRender = resolveFunctionForHotReloading(type.render);
                if (type.render !== currentRender) {
                  var syntheticType = {
                    $$typeof: REACT_FORWARD_REF_TYPE,
                    render: currentRender
                  };
                  if (type.displayName !== void 0) {
                    syntheticType.displayName = type.displayName;
                  }
                  return syntheticType;
                }
              }
              return type;
            }
            return family.current;
          }
        }
        function isCompatibleFamilyForHotReloading(fiber, element) {
          {
            if (resolveFamily === null) {
              return false;
            }
            var prevType = fiber.elementType;
            var nextType = element.type;
            var needsCompareFamilies = false;
            var $$typeofNextType = typeof nextType === "object" && nextType !== null ? nextType.$$typeof : null;
            switch (fiber.tag) {
              case ClassComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                }
                break;
              }
              case FunctionComponent: {
                if (typeof nextType === "function") {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case ForwardRef: {
                if ($$typeofNextType === REACT_FORWARD_REF_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              case MemoComponent:
              case SimpleMemoComponent: {
                if ($$typeofNextType === REACT_MEMO_TYPE) {
                  needsCompareFamilies = true;
                } else if ($$typeofNextType === REACT_LAZY_TYPE) {
                  needsCompareFamilies = true;
                }
                break;
              }
              default:
                return false;
            }
            if (needsCompareFamilies) {
              var prevFamily = resolveFamily(prevType);
              if (prevFamily !== void 0 && prevFamily === resolveFamily(nextType)) {
                return true;
              }
            }
            return false;
          }
        }
        function markFailedErrorBoundaryForHotReloading(fiber) {
          {
            if (resolveFamily === null) {
              return;
            }
            if (typeof WeakSet !== "function") {
              return;
            }
            if (failedBoundaries === null) {
              failedBoundaries = /* @__PURE__ */ new WeakSet();
            }
            failedBoundaries.add(fiber);
          }
        }
        var scheduleRefresh = function(root2, update) {
          {
            if (resolveFamily === null) {
              return;
            }
            var staleFamilies = update.staleFamilies, updatedFamilies = update.updatedFamilies;
            flushPassiveEffects();
            flushSync3(function() {
              scheduleFibersWithFamiliesRecursively(root2.current, updatedFamilies, staleFamilies);
            });
          }
        };
        var scheduleRoot = function(root2, element) {
          {
            if (root2.context !== emptyContextObject) {
              return;
            }
            flushPassiveEffects();
            flushSync3(function() {
              updateContainer(element, root2, null, null);
            });
          }
        };
        function scheduleFibersWithFamiliesRecursively(fiber, updatedFamilies, staleFamilies) {
          {
            var alternate = fiber.alternate, child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            if (resolveFamily === null) {
              throw new Error("Expected resolveFamily to be set during hot reload.");
            }
            var needsRender = false;
            var needsRemount = false;
            if (candidateType !== null) {
              var family = resolveFamily(candidateType);
              if (family !== void 0) {
                if (staleFamilies.has(family)) {
                  needsRemount = true;
                } else if (updatedFamilies.has(family)) {
                  if (tag === ClassComponent) {
                    needsRemount = true;
                  } else {
                    needsRender = true;
                  }
                }
              }
            }
            if (failedBoundaries !== null) {
              if (failedBoundaries.has(fiber) || alternate !== null && failedBoundaries.has(alternate)) {
                needsRemount = true;
              }
            }
            if (needsRemount) {
              fiber._debugNeedsRemount = true;
            }
            if (needsRemount || needsRender) {
              var _root = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (_root !== null) {
                scheduleUpdateOnFiber(_root, fiber, SyncLane, NoTimestamp);
              }
            }
            if (child !== null && !needsRemount) {
              scheduleFibersWithFamiliesRecursively(child, updatedFamilies, staleFamilies);
            }
            if (sibling !== null) {
              scheduleFibersWithFamiliesRecursively(sibling, updatedFamilies, staleFamilies);
            }
          }
        }
        var findHostInstancesForRefresh = function(root2, families) {
          {
            var hostInstances = /* @__PURE__ */ new Set();
            var types = new Set(families.map(function(family) {
              return family.current;
            }));
            findHostInstancesForMatchingFibersRecursively(root2.current, types, hostInstances);
            return hostInstances;
          }
        };
        function findHostInstancesForMatchingFibersRecursively(fiber, types, hostInstances) {
          {
            var child = fiber.child, sibling = fiber.sibling, tag = fiber.tag, type = fiber.type;
            var candidateType = null;
            switch (tag) {
              case FunctionComponent:
              case SimpleMemoComponent:
              case ClassComponent:
                candidateType = type;
                break;
              case ForwardRef:
                candidateType = type.render;
                break;
            }
            var didMatch = false;
            if (candidateType !== null) {
              if (types.has(candidateType)) {
                didMatch = true;
              }
            }
            if (didMatch) {
              findHostInstancesForFiberShallowly(fiber, hostInstances);
            } else {
              if (child !== null) {
                findHostInstancesForMatchingFibersRecursively(child, types, hostInstances);
              }
            }
            if (sibling !== null) {
              findHostInstancesForMatchingFibersRecursively(sibling, types, hostInstances);
            }
          }
        }
        function findHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var foundHostInstances = findChildHostInstancesForFiberShallowly(fiber, hostInstances);
            if (foundHostInstances) {
              return;
            }
            var node = fiber;
            while (true) {
              switch (node.tag) {
                case HostComponent:
                  hostInstances.add(node.stateNode);
                  return;
                case HostPortal:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
                case HostRoot:
                  hostInstances.add(node.stateNode.containerInfo);
                  return;
              }
              if (node.return === null) {
                throw new Error("Expected to reach root first.");
              }
              node = node.return;
            }
          }
        }
        function findChildHostInstancesForFiberShallowly(fiber, hostInstances) {
          {
            var node = fiber;
            var foundHostInstances = false;
            while (true) {
              if (node.tag === HostComponent) {
                foundHostInstances = true;
                hostInstances.add(node.stateNode);
              } else if (node.child !== null) {
                node.child.return = node;
                node = node.child;
                continue;
              }
              if (node === fiber) {
                return foundHostInstances;
              }
              while (node.sibling === null) {
                if (node.return === null || node.return === fiber) {
                  return foundHostInstances;
                }
                node = node.return;
              }
              node.sibling.return = node.return;
              node = node.sibling;
            }
          }
          return false;
        }
        var hasBadMapPolyfill;
        {
          hasBadMapPolyfill = false;
          try {
            var nonExtensibleObject = Object.preventExtensions({});
            /* @__PURE__ */ new Map([[nonExtensibleObject, null]]);
            /* @__PURE__ */ new Set([nonExtensibleObject]);
          } catch (e7) {
            hasBadMapPolyfill = true;
          }
        }
        function FiberNode(tag, pendingProps, key, mode) {
          this.tag = tag;
          this.key = key;
          this.elementType = null;
          this.type = null;
          this.stateNode = null;
          this.return = null;
          this.child = null;
          this.sibling = null;
          this.index = 0;
          this.ref = null;
          this.pendingProps = pendingProps;
          this.memoizedProps = null;
          this.updateQueue = null;
          this.memoizedState = null;
          this.dependencies = null;
          this.mode = mode;
          this.flags = NoFlags;
          this.subtreeFlags = NoFlags;
          this.deletions = null;
          this.lanes = NoLanes;
          this.childLanes = NoLanes;
          this.alternate = null;
          {
            this.actualDuration = Number.NaN;
            this.actualStartTime = Number.NaN;
            this.selfBaseDuration = Number.NaN;
            this.treeBaseDuration = Number.NaN;
            this.actualDuration = 0;
            this.actualStartTime = -1;
            this.selfBaseDuration = 0;
            this.treeBaseDuration = 0;
          }
          {
            this._debugSource = null;
            this._debugOwner = null;
            this._debugNeedsRemount = false;
            this._debugHookTypes = null;
            if (!hasBadMapPolyfill && typeof Object.preventExtensions === "function") {
              Object.preventExtensions(this);
            }
          }
        }
        var createFiber = function(tag, pendingProps, key, mode) {
          return new FiberNode(tag, pendingProps, key, mode);
        };
        function shouldConstruct$1(Component) {
          var prototype = Component.prototype;
          return !!(prototype && prototype.isReactComponent);
        }
        function isSimpleFunctionComponent(type) {
          return typeof type === "function" && !shouldConstruct$1(type) && type.defaultProps === void 0;
        }
        function resolveLazyComponentTag(Component) {
          if (typeof Component === "function") {
            return shouldConstruct$1(Component) ? ClassComponent : FunctionComponent;
          } else if (Component !== void 0 && Component !== null) {
            var $$typeof = Component.$$typeof;
            if ($$typeof === REACT_FORWARD_REF_TYPE) {
              return ForwardRef;
            }
            if ($$typeof === REACT_MEMO_TYPE) {
              return MemoComponent;
            }
          }
          return IndeterminateComponent;
        }
        function createWorkInProgress(current2, pendingProps) {
          var workInProgress2 = current2.alternate;
          if (workInProgress2 === null) {
            workInProgress2 = createFiber(current2.tag, pendingProps, current2.key, current2.mode);
            workInProgress2.elementType = current2.elementType;
            workInProgress2.type = current2.type;
            workInProgress2.stateNode = current2.stateNode;
            {
              workInProgress2._debugSource = current2._debugSource;
              workInProgress2._debugOwner = current2._debugOwner;
              workInProgress2._debugHookTypes = current2._debugHookTypes;
            }
            workInProgress2.alternate = current2;
            current2.alternate = workInProgress2;
          } else {
            workInProgress2.pendingProps = pendingProps;
            workInProgress2.type = current2.type;
            workInProgress2.flags = NoFlags;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            {
              workInProgress2.actualDuration = 0;
              workInProgress2.actualStartTime = -1;
            }
          }
          workInProgress2.flags = current2.flags & StaticMask;
          workInProgress2.childLanes = current2.childLanes;
          workInProgress2.lanes = current2.lanes;
          workInProgress2.child = current2.child;
          workInProgress2.memoizedProps = current2.memoizedProps;
          workInProgress2.memoizedState = current2.memoizedState;
          workInProgress2.updateQueue = current2.updateQueue;
          var currentDependencies = current2.dependencies;
          workInProgress2.dependencies = currentDependencies === null ? null : {
            lanes: currentDependencies.lanes,
            firstContext: currentDependencies.firstContext
          };
          workInProgress2.sibling = current2.sibling;
          workInProgress2.index = current2.index;
          workInProgress2.ref = current2.ref;
          {
            workInProgress2.selfBaseDuration = current2.selfBaseDuration;
            workInProgress2.treeBaseDuration = current2.treeBaseDuration;
          }
          {
            workInProgress2._debugNeedsRemount = current2._debugNeedsRemount;
            switch (workInProgress2.tag) {
              case IndeterminateComponent:
              case FunctionComponent:
              case SimpleMemoComponent:
                workInProgress2.type = resolveFunctionForHotReloading(current2.type);
                break;
              case ClassComponent:
                workInProgress2.type = resolveClassForHotReloading(current2.type);
                break;
              case ForwardRef:
                workInProgress2.type = resolveForwardRefForHotReloading(current2.type);
                break;
            }
          }
          return workInProgress2;
        }
        function resetWorkInProgress(workInProgress2, renderLanes2) {
          workInProgress2.flags &= StaticMask | Placement;
          var current2 = workInProgress2.alternate;
          if (current2 === null) {
            workInProgress2.childLanes = NoLanes;
            workInProgress2.lanes = renderLanes2;
            workInProgress2.child = null;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.memoizedProps = null;
            workInProgress2.memoizedState = null;
            workInProgress2.updateQueue = null;
            workInProgress2.dependencies = null;
            workInProgress2.stateNode = null;
            {
              workInProgress2.selfBaseDuration = 0;
              workInProgress2.treeBaseDuration = 0;
            }
          } else {
            workInProgress2.childLanes = current2.childLanes;
            workInProgress2.lanes = current2.lanes;
            workInProgress2.child = current2.child;
            workInProgress2.subtreeFlags = NoFlags;
            workInProgress2.deletions = null;
            workInProgress2.memoizedProps = current2.memoizedProps;
            workInProgress2.memoizedState = current2.memoizedState;
            workInProgress2.updateQueue = current2.updateQueue;
            workInProgress2.type = current2.type;
            var currentDependencies = current2.dependencies;
            workInProgress2.dependencies = currentDependencies === null ? null : {
              lanes: currentDependencies.lanes,
              firstContext: currentDependencies.firstContext
            };
            {
              workInProgress2.selfBaseDuration = current2.selfBaseDuration;
              workInProgress2.treeBaseDuration = current2.treeBaseDuration;
            }
          }
          return workInProgress2;
        }
        function createHostRootFiber(tag, isStrictMode, concurrentUpdatesByDefaultOverride) {
          var mode;
          if (tag === ConcurrentRoot) {
            mode = ConcurrentMode;
            if (isStrictMode === true) {
              mode |= StrictLegacyMode;
              {
                mode |= StrictEffectsMode;
              }
            }
          } else {
            mode = NoMode;
          }
          if (isDevToolsPresent) {
            mode |= ProfileMode;
          }
          return createFiber(HostRoot, null, null, mode);
        }
        function createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes) {
          var fiberTag = IndeterminateComponent;
          var resolvedType = type;
          if (typeof type === "function") {
            if (shouldConstruct$1(type)) {
              fiberTag = ClassComponent;
              {
                resolvedType = resolveClassForHotReloading(resolvedType);
              }
            } else {
              {
                resolvedType = resolveFunctionForHotReloading(resolvedType);
              }
            }
          } else if (typeof type === "string") {
            fiberTag = HostComponent;
          } else {
            getTag: switch (type) {
              case REACT_FRAGMENT_TYPE:
                return createFiberFromFragment(pendingProps.children, mode, lanes, key);
              case REACT_STRICT_MODE_TYPE:
                fiberTag = Mode;
                mode |= StrictLegacyMode;
                if ((mode & ConcurrentMode) !== NoMode) {
                  mode |= StrictEffectsMode;
                }
                break;
              case REACT_PROFILER_TYPE:
                return createFiberFromProfiler(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_TYPE:
                return createFiberFromSuspense(pendingProps, mode, lanes, key);
              case REACT_SUSPENSE_LIST_TYPE:
                return createFiberFromSuspenseList(pendingProps, mode, lanes, key);
              case REACT_OFFSCREEN_TYPE:
                return createFiberFromOffscreen(pendingProps, mode, lanes, key);
              case REACT_LEGACY_HIDDEN_TYPE:
              // eslint-disable-next-line no-fallthrough
              case REACT_SCOPE_TYPE:
              // eslint-disable-next-line no-fallthrough
              case REACT_CACHE_TYPE:
              // eslint-disable-next-line no-fallthrough
              case REACT_TRACING_MARKER_TYPE:
              // eslint-disable-next-line no-fallthrough
              case REACT_DEBUG_TRACING_MODE_TYPE:
              // eslint-disable-next-line no-fallthrough
              default: {
                if (typeof type === "object" && type !== null) {
                  switch (type.$$typeof) {
                    case REACT_PROVIDER_TYPE:
                      fiberTag = ContextProvider;
                      break getTag;
                    case REACT_CONTEXT_TYPE:
                      fiberTag = ContextConsumer;
                      break getTag;
                    case REACT_FORWARD_REF_TYPE:
                      fiberTag = ForwardRef;
                      {
                        resolvedType = resolveForwardRefForHotReloading(resolvedType);
                      }
                      break getTag;
                    case REACT_MEMO_TYPE:
                      fiberTag = MemoComponent;
                      break getTag;
                    case REACT_LAZY_TYPE:
                      fiberTag = LazyComponent;
                      resolvedType = null;
                      break getTag;
                  }
                }
                var info = "";
                {
                  if (type === void 0 || typeof type === "object" && type !== null && Object.keys(type).length === 0) {
                    info += " You likely forgot to export your component from the file it's defined in, or you might have mixed up default and named imports.";
                  }
                  var ownerName = owner ? getComponentNameFromFiber(owner) : null;
                  if (ownerName) {
                    info += "\n\nCheck the render method of `" + ownerName + "`.";
                  }
                }
                throw new Error("Element type is invalid: expected a string (for built-in components) or a class/function (for composite components) " + ("but got: " + (type == null ? type : typeof type) + "." + info));
              }
            }
          }
          var fiber = createFiber(fiberTag, pendingProps, key, mode);
          fiber.elementType = type;
          fiber.type = resolvedType;
          fiber.lanes = lanes;
          {
            fiber._debugOwner = owner;
          }
          return fiber;
        }
        function createFiberFromElement(element, mode, lanes) {
          var owner = null;
          {
            owner = element._owner;
          }
          var type = element.type;
          var key = element.key;
          var pendingProps = element.props;
          var fiber = createFiberFromTypeAndProps(type, key, pendingProps, owner, mode, lanes);
          {
            fiber._debugSource = element._source;
            fiber._debugOwner = element._owner;
          }
          return fiber;
        }
        function createFiberFromFragment(elements, mode, lanes, key) {
          var fiber = createFiber(Fragment6, elements, key, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromProfiler(pendingProps, mode, lanes, key) {
          {
            if (typeof pendingProps.id !== "string") {
              error('Profiler must specify an "id" of type `string` as a prop. Received the type `%s` instead.', typeof pendingProps.id);
            }
          }
          var fiber = createFiber(Profiler, pendingProps, key, mode | ProfileMode);
          fiber.elementType = REACT_PROFILER_TYPE;
          fiber.lanes = lanes;
          {
            fiber.stateNode = {
              effectDuration: 0,
              passiveEffectDuration: 0
            };
          }
          return fiber;
        }
        function createFiberFromSuspense(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromSuspenseList(pendingProps, mode, lanes, key) {
          var fiber = createFiber(SuspenseListComponent, pendingProps, key, mode);
          fiber.elementType = REACT_SUSPENSE_LIST_TYPE;
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromOffscreen(pendingProps, mode, lanes, key) {
          var fiber = createFiber(OffscreenComponent, pendingProps, key, mode);
          fiber.elementType = REACT_OFFSCREEN_TYPE;
          fiber.lanes = lanes;
          var primaryChildInstance = {
            isHidden: false
          };
          fiber.stateNode = primaryChildInstance;
          return fiber;
        }
        function createFiberFromText(content, mode, lanes) {
          var fiber = createFiber(HostText, content, null, mode);
          fiber.lanes = lanes;
          return fiber;
        }
        function createFiberFromHostInstanceForDeletion() {
          var fiber = createFiber(HostComponent, null, null, NoMode);
          fiber.elementType = "DELETED";
          return fiber;
        }
        function createFiberFromDehydratedFragment(dehydratedNode) {
          var fiber = createFiber(DehydratedFragment, null, null, NoMode);
          fiber.stateNode = dehydratedNode;
          return fiber;
        }
        function createFiberFromPortal(portal, mode, lanes) {
          var pendingProps = portal.children !== null ? portal.children : [];
          var fiber = createFiber(HostPortal, pendingProps, portal.key, mode);
          fiber.lanes = lanes;
          fiber.stateNode = {
            containerInfo: portal.containerInfo,
            pendingChildren: null,
            // Used by persistent updates
            implementation: portal.implementation
          };
          return fiber;
        }
        function assignFiberPropertiesInDEV(target, source) {
          if (target === null) {
            target = createFiber(IndeterminateComponent, null, null, NoMode);
          }
          target.tag = source.tag;
          target.key = source.key;
          target.elementType = source.elementType;
          target.type = source.type;
          target.stateNode = source.stateNode;
          target.return = source.return;
          target.child = source.child;
          target.sibling = source.sibling;
          target.index = source.index;
          target.ref = source.ref;
          target.pendingProps = source.pendingProps;
          target.memoizedProps = source.memoizedProps;
          target.updateQueue = source.updateQueue;
          target.memoizedState = source.memoizedState;
          target.dependencies = source.dependencies;
          target.mode = source.mode;
          target.flags = source.flags;
          target.subtreeFlags = source.subtreeFlags;
          target.deletions = source.deletions;
          target.lanes = source.lanes;
          target.childLanes = source.childLanes;
          target.alternate = source.alternate;
          {
            target.actualDuration = source.actualDuration;
            target.actualStartTime = source.actualStartTime;
            target.selfBaseDuration = source.selfBaseDuration;
            target.treeBaseDuration = source.treeBaseDuration;
          }
          target._debugSource = source._debugSource;
          target._debugOwner = source._debugOwner;
          target._debugNeedsRemount = source._debugNeedsRemount;
          target._debugHookTypes = source._debugHookTypes;
          return target;
        }
        function FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError) {
          this.tag = tag;
          this.containerInfo = containerInfo;
          this.pendingChildren = null;
          this.current = null;
          this.pingCache = null;
          this.finishedWork = null;
          this.timeoutHandle = noTimeout;
          this.context = null;
          this.pendingContext = null;
          this.callbackNode = null;
          this.callbackPriority = NoLane;
          this.eventTimes = createLaneMap(NoLanes);
          this.expirationTimes = createLaneMap(NoTimestamp);
          this.pendingLanes = NoLanes;
          this.suspendedLanes = NoLanes;
          this.pingedLanes = NoLanes;
          this.expiredLanes = NoLanes;
          this.mutableReadLanes = NoLanes;
          this.finishedLanes = NoLanes;
          this.entangledLanes = NoLanes;
          this.entanglements = createLaneMap(NoLanes);
          this.identifierPrefix = identifierPrefix;
          this.onRecoverableError = onRecoverableError;
          {
            this.mutableSourceEagerHydrationData = null;
          }
          {
            this.effectDuration = 0;
            this.passiveEffectDuration = 0;
          }
          {
            this.memoizedUpdaters = /* @__PURE__ */ new Set();
            var pendingUpdatersLaneMap = this.pendingUpdatersLaneMap = [];
            for (var _i2 = 0; _i2 < TotalLanes; _i2++) {
              pendingUpdatersLaneMap.push(/* @__PURE__ */ new Set());
            }
          }
          {
            switch (tag) {
              case ConcurrentRoot:
                this._debugRootType = hydrate2 ? "hydrateRoot()" : "createRoot()";
                break;
              case LegacyRoot:
                this._debugRootType = hydrate2 ? "hydrate()" : "render()";
                break;
            }
          }
        }
        function createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var root2 = new FiberRootNode(containerInfo, tag, hydrate2, identifierPrefix, onRecoverableError);
          var uninitializedFiber = createHostRootFiber(tag, isStrictMode);
          root2.current = uninitializedFiber;
          uninitializedFiber.stateNode = root2;
          {
            var _initialState = {
              element: initialChildren,
              isDehydrated: hydrate2,
              cache: null,
              // not enabled yet
              transitions: null,
              pendingSuspenseBoundaries: null
            };
            uninitializedFiber.memoizedState = _initialState;
          }
          initializeUpdateQueue(uninitializedFiber);
          return root2;
        }
        var ReactVersion = "18.3.1";
        function createPortal(children, containerInfo, implementation) {
          var key = arguments.length > 3 && arguments[3] !== void 0 ? arguments[3] : null;
          {
            checkKeyStringCoercion(key);
          }
          return {
            // This tag allow us to uniquely identify this as a React Portal
            $$typeof: REACT_PORTAL_TYPE,
            key: key == null ? null : "" + key,
            children,
            containerInfo,
            implementation
          };
        }
        var didWarnAboutNestedUpdates;
        var didWarnAboutFindNodeInStrictMode;
        {
          didWarnAboutNestedUpdates = false;
          didWarnAboutFindNodeInStrictMode = {};
        }
        function getContextForSubtree(parentComponent) {
          if (!parentComponent) {
            return emptyContextObject;
          }
          var fiber = get(parentComponent);
          var parentContext = findCurrentUnmaskedContext(fiber);
          if (fiber.tag === ClassComponent) {
            var Component = fiber.type;
            if (isContextProvider(Component)) {
              return processChildContext(fiber, Component, parentContext);
            }
          }
          return parentContext;
        }
        function findHostInstanceWithWarning(component, methodName) {
          {
            var fiber = get(component);
            if (fiber === void 0) {
              if (typeof component.render === "function") {
                throw new Error("Unable to find node on an unmounted component.");
              } else {
                var keys = Object.keys(component).join(",");
                throw new Error("Argument appears to not be a ReactComponent. Keys: " + keys);
              }
            }
            var hostFiber = findCurrentHostFiber(fiber);
            if (hostFiber === null) {
              return null;
            }
            if (hostFiber.mode & StrictLegacyMode) {
              var componentName = getComponentNameFromFiber(fiber) || "Component";
              if (!didWarnAboutFindNodeInStrictMode[componentName]) {
                didWarnAboutFindNodeInStrictMode[componentName] = true;
                var previousFiber = current;
                try {
                  setCurrentFiber(hostFiber);
                  if (fiber.mode & StrictLegacyMode) {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which is inside StrictMode. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  } else {
                    error("%s is deprecated in StrictMode. %s was passed an instance of %s which renders StrictMode children. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node", methodName, methodName, componentName);
                  }
                } finally {
                  if (previousFiber) {
                    setCurrentFiber(previousFiber);
                  } else {
                    resetCurrentFiber();
                  }
                }
              }
            }
            return hostFiber.stateNode;
          }
        }
        function createContainer(containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = false;
          var initialChildren = null;
          return createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
        }
        function createHydrationContainer(initialChildren, callback, containerInfo, tag, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError, transitionCallbacks) {
          var hydrate2 = true;
          var root2 = createFiberRoot(containerInfo, tag, hydrate2, initialChildren, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          root2.context = getContextForSubtree(null);
          var current2 = root2.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current2);
          var update = createUpdate(eventTime, lane);
          update.callback = callback !== void 0 && callback !== null ? callback : null;
          enqueueUpdate(current2, update, lane);
          scheduleInitialHydrationOnRoot(root2, lane, eventTime);
          return root2;
        }
        function updateContainer(element, container, parentComponent, callback) {
          {
            onScheduleRoot(container, element);
          }
          var current$1 = container.current;
          var eventTime = requestEventTime();
          var lane = requestUpdateLane(current$1);
          {
            markRenderScheduled(lane);
          }
          var context = getContextForSubtree(parentComponent);
          if (container.context === null) {
            container.context = context;
          } else {
            container.pendingContext = context;
          }
          {
            if (isRendering && current !== null && !didWarnAboutNestedUpdates) {
              didWarnAboutNestedUpdates = true;
              error("Render methods should be a pure function of props and state; triggering nested component updates from render is not allowed. If necessary, trigger nested updates in componentDidUpdate.\n\nCheck the render method of %s.", getComponentNameFromFiber(current) || "Unknown");
            }
          }
          var update = createUpdate(eventTime, lane);
          update.payload = {
            element
          };
          callback = callback === void 0 ? null : callback;
          if (callback !== null) {
            {
              if (typeof callback !== "function") {
                error("render(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callback);
              }
            }
            update.callback = callback;
          }
          var root2 = enqueueUpdate(current$1, update, lane);
          if (root2 !== null) {
            scheduleUpdateOnFiber(root2, current$1, lane, eventTime);
            entangleTransitions(root2, current$1, lane);
          }
          return lane;
        }
        function getPublicRootInstance(container) {
          var containerFiber = container.current;
          if (!containerFiber.child) {
            return null;
          }
          switch (containerFiber.child.tag) {
            case HostComponent:
              return getPublicInstance(containerFiber.child.stateNode);
            default:
              return containerFiber.child.stateNode;
          }
        }
        function attemptSynchronousHydration$1(fiber) {
          switch (fiber.tag) {
            case HostRoot: {
              var root2 = fiber.stateNode;
              if (isRootDehydrated(root2)) {
                var lanes = getHighestPriorityPendingLanes(root2);
                flushRoot(root2, lanes);
              }
              break;
            }
            case SuspenseComponent: {
              flushSync3(function() {
                var root3 = enqueueConcurrentRenderForLane(fiber, SyncLane);
                if (root3 !== null) {
                  var eventTime = requestEventTime();
                  scheduleUpdateOnFiber(root3, fiber, SyncLane, eventTime);
                }
              });
              var retryLane = SyncLane;
              markRetryLaneIfNotHydrated(fiber, retryLane);
              break;
            }
          }
        }
        function markRetryLaneImpl(fiber, retryLane) {
          var suspenseState = fiber.memoizedState;
          if (suspenseState !== null && suspenseState.dehydrated !== null) {
            suspenseState.retryLane = higherPriorityLane(suspenseState.retryLane, retryLane);
          }
        }
        function markRetryLaneIfNotHydrated(fiber, retryLane) {
          markRetryLaneImpl(fiber, retryLane);
          var alternate = fiber.alternate;
          if (alternate) {
            markRetryLaneImpl(alternate, retryLane);
          }
        }
        function attemptContinuousHydration$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = SelectiveHydrationLane;
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function attemptHydrationAtCurrentPriority$1(fiber) {
          if (fiber.tag !== SuspenseComponent) {
            return;
          }
          var lane = requestUpdateLane(fiber);
          var root2 = enqueueConcurrentRenderForLane(fiber, lane);
          if (root2 !== null) {
            var eventTime = requestEventTime();
            scheduleUpdateOnFiber(root2, fiber, lane, eventTime);
          }
          markRetryLaneIfNotHydrated(fiber, lane);
        }
        function findHostInstanceWithNoPortals(fiber) {
          var hostFiber = findCurrentHostFiberWithNoPortals(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        var shouldErrorImpl = function(fiber) {
          return null;
        };
        function shouldError(fiber) {
          return shouldErrorImpl(fiber);
        }
        var shouldSuspendImpl = function(fiber) {
          return false;
        };
        function shouldSuspend(fiber) {
          return shouldSuspendImpl(fiber);
        }
        var overrideHookState = null;
        var overrideHookStateDeletePath = null;
        var overrideHookStateRenamePath = null;
        var overrideProps = null;
        var overridePropsDeletePath = null;
        var overridePropsRenamePath = null;
        var scheduleUpdate = null;
        var setErrorHandler = null;
        var setSuspenseHandler = null;
        {
          var copyWithDeleteImpl = function(obj, path, index2) {
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === path.length) {
              if (isArray(updated)) {
                updated.splice(key, 1);
              } else {
                delete updated[key];
              }
              return updated;
            }
            updated[key] = copyWithDeleteImpl(obj[key], path, index2 + 1);
            return updated;
          };
          var copyWithDelete = function(obj, path) {
            return copyWithDeleteImpl(obj, path, 0);
          };
          var copyWithRenameImpl = function(obj, oldPath, newPath, index2) {
            var oldKey = oldPath[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            if (index2 + 1 === oldPath.length) {
              var newKey = newPath[index2];
              updated[newKey] = updated[oldKey];
              if (isArray(updated)) {
                updated.splice(oldKey, 1);
              } else {
                delete updated[oldKey];
              }
            } else {
              updated[oldKey] = copyWithRenameImpl(
                // $FlowFixMe number or string is fine here
                obj[oldKey],
                oldPath,
                newPath,
                index2 + 1
              );
            }
            return updated;
          };
          var copyWithRename = function(obj, oldPath, newPath) {
            if (oldPath.length !== newPath.length) {
              warn("copyWithRename() expects paths of the same length");
              return;
            } else {
              for (var i = 0; i < newPath.length - 1; i++) {
                if (oldPath[i] !== newPath[i]) {
                  warn("copyWithRename() expects paths to be the same except for the deepest key");
                  return;
                }
              }
            }
            return copyWithRenameImpl(obj, oldPath, newPath, 0);
          };
          var copyWithSetImpl = function(obj, path, index2, value) {
            if (index2 >= path.length) {
              return value;
            }
            var key = path[index2];
            var updated = isArray(obj) ? obj.slice() : assign({}, obj);
            updated[key] = copyWithSetImpl(obj[key], path, index2 + 1, value);
            return updated;
          };
          var copyWithSet = function(obj, path, value) {
            return copyWithSetImpl(obj, path, 0, value);
          };
          var findHook = function(fiber, id) {
            var currentHook2 = fiber.memoizedState;
            while (currentHook2 !== null && id > 0) {
              currentHook2 = currentHook2.next;
              id--;
            }
            return currentHook2;
          };
          overrideHookState = function(fiber, id, path, value) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithSet(hook.memoizedState, path, value);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateDeletePath = function(fiber, id, path) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithDelete(hook.memoizedState, path);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideHookStateRenamePath = function(fiber, id, oldPath, newPath) {
            var hook = findHook(fiber, id);
            if (hook !== null) {
              var newState = copyWithRename(hook.memoizedState, oldPath, newPath);
              hook.memoizedState = newState;
              hook.baseState = newState;
              fiber.memoizedProps = assign({}, fiber.memoizedProps);
              var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
              if (root2 !== null) {
                scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
              }
            }
          };
          overrideProps = function(fiber, path, value) {
            fiber.pendingProps = copyWithSet(fiber.memoizedProps, path, value);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsDeletePath = function(fiber, path) {
            fiber.pendingProps = copyWithDelete(fiber.memoizedProps, path);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          overridePropsRenamePath = function(fiber, oldPath, newPath) {
            fiber.pendingProps = copyWithRename(fiber.memoizedProps, oldPath, newPath);
            if (fiber.alternate) {
              fiber.alternate.pendingProps = fiber.pendingProps;
            }
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          scheduleUpdate = function(fiber) {
            var root2 = enqueueConcurrentRenderForLane(fiber, SyncLane);
            if (root2 !== null) {
              scheduleUpdateOnFiber(root2, fiber, SyncLane, NoTimestamp);
            }
          };
          setErrorHandler = function(newShouldErrorImpl) {
            shouldErrorImpl = newShouldErrorImpl;
          };
          setSuspenseHandler = function(newShouldSuspendImpl) {
            shouldSuspendImpl = newShouldSuspendImpl;
          };
        }
        function findHostInstanceByFiber(fiber) {
          var hostFiber = findCurrentHostFiber(fiber);
          if (hostFiber === null) {
            return null;
          }
          return hostFiber.stateNode;
        }
        function emptyFindFiberByHostInstance(instance) {
          return null;
        }
        function getCurrentFiberForDevTools() {
          return current;
        }
        function injectIntoDevTools(devToolsConfig) {
          var findFiberByHostInstance = devToolsConfig.findFiberByHostInstance;
          var ReactCurrentDispatcher2 = ReactSharedInternals.ReactCurrentDispatcher;
          return injectInternals({
            bundleType: devToolsConfig.bundleType,
            version: devToolsConfig.version,
            rendererPackageName: devToolsConfig.rendererPackageName,
            rendererConfig: devToolsConfig.rendererConfig,
            overrideHookState,
            overrideHookStateDeletePath,
            overrideHookStateRenamePath,
            overrideProps,
            overridePropsDeletePath,
            overridePropsRenamePath,
            setErrorHandler,
            setSuspenseHandler,
            scheduleUpdate,
            currentDispatcherRef: ReactCurrentDispatcher2,
            findHostInstanceByFiber,
            findFiberByHostInstance: findFiberByHostInstance || emptyFindFiberByHostInstance,
            // React Refresh
            findHostInstancesForRefresh,
            scheduleRefresh,
            scheduleRoot,
            setRefreshHandler,
            // Enables DevTools to append owner stacks to error messages in DEV mode.
            getCurrentFiber: getCurrentFiberForDevTools,
            // Enables DevTools to detect reconciler version rather than renderer version
            // which may not match for third party renderers.
            reconcilerVersion: ReactVersion
          });
        }
        var defaultOnRecoverableError = typeof reportError === "function" ? (
          // In modern browsers, reportError will dispatch an error event,
          // emulating an uncaught JavaScript error.
          reportError
        ) : function(error2) {
          console["error"](error2);
        };
        function ReactDOMRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        ReactDOMHydrationRoot.prototype.render = ReactDOMRoot.prototype.render = function(children) {
          var root2 = this._internalRoot;
          if (root2 === null) {
            throw new Error("Cannot update an unmounted root.");
          }
          {
            if (typeof arguments[1] === "function") {
              error("render(...): does not support the second callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            } else if (isValidContainer(arguments[1])) {
              error("You passed a container to the second argument of root.render(...). You don't need to pass it again since you already passed it to create the root.");
            } else if (typeof arguments[1] !== "undefined") {
              error("You passed a second argument to root.render(...) but it only accepts one argument.");
            }
            var container = root2.containerInfo;
            if (container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(root2.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of the root container was removed without using React. This is not supported and will cause errors. Instead, call root.unmount() to empty a root's container.");
                }
              }
            }
          }
          updateContainer(children, root2, null, null);
        };
        ReactDOMHydrationRoot.prototype.unmount = ReactDOMRoot.prototype.unmount = function() {
          {
            if (typeof arguments[0] === "function") {
              error("unmount(...): does not support a callback argument. To execute a side effect after rendering, declare it in a component body with useEffect().");
            }
          }
          var root2 = this._internalRoot;
          if (root2 !== null) {
            this._internalRoot = null;
            var container = root2.containerInfo;
            {
              if (isAlreadyRendering()) {
                error("Attempted to synchronously unmount a root while React was already rendering. React cannot finish unmounting the root until the current render has completed, which may lead to a race condition.");
              }
            }
            flushSync3(function() {
              updateContainer(null, root2, null, null);
            });
            unmarkContainerAsRoot(container);
          }
        };
        function createRoot(container, options2) {
          if (!isValidContainer(container)) {
            throw new Error("createRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          var transitionCallbacks = null;
          if (options2 !== null && options2 !== void 0) {
            {
              if (options2.hydrate) {
                warn("hydrate through createRoot is deprecated. Use ReactDOMClient.hydrateRoot(container, <App />) instead.");
              } else {
                if (typeof options2 === "object" && options2 !== null && options2.$$typeof === REACT_ELEMENT_TYPE) {
                  error("You passed a JSX element to createRoot. You probably meant to call root.render instead. Example usage:\n\n  let root = createRoot(domContainer);\n  root.render(<App />);");
                }
              }
            }
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
            if (options2.transitionCallbacks !== void 0) {
              transitionCallbacks = options2.transitionCallbacks;
            }
          }
          var root2 = createContainer(container, ConcurrentRoot, null, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
          listenToAllSupportedEvents(rootContainerElement);
          return new ReactDOMRoot(root2);
        }
        function ReactDOMHydrationRoot(internalRoot) {
          this._internalRoot = internalRoot;
        }
        function scheduleHydration(target) {
          if (target) {
            queueExplicitHydrationTarget(target);
          }
        }
        ReactDOMHydrationRoot.prototype.unstable_scheduleHydration = scheduleHydration;
        function hydrateRoot(container, initialChildren, options2) {
          if (!isValidContainer(container)) {
            throw new Error("hydrateRoot(...): Target container is not a DOM element.");
          }
          warnIfReactDOMContainerInDEV(container);
          {
            if (initialChildren === void 0) {
              error("Must provide initial children as second argument to hydrateRoot. Example usage: hydrateRoot(domContainer, <App />)");
            }
          }
          var hydrationCallbacks = options2 != null ? options2 : null;
          var mutableSources = options2 != null && options2.hydratedSources || null;
          var isStrictMode = false;
          var concurrentUpdatesByDefaultOverride = false;
          var identifierPrefix = "";
          var onRecoverableError = defaultOnRecoverableError;
          if (options2 !== null && options2 !== void 0) {
            if (options2.unstable_strictMode === true) {
              isStrictMode = true;
            }
            if (options2.identifierPrefix !== void 0) {
              identifierPrefix = options2.identifierPrefix;
            }
            if (options2.onRecoverableError !== void 0) {
              onRecoverableError = options2.onRecoverableError;
            }
          }
          var root2 = createHydrationContainer(initialChildren, null, container, ConcurrentRoot, hydrationCallbacks, isStrictMode, concurrentUpdatesByDefaultOverride, identifierPrefix, onRecoverableError);
          markContainerAsRoot(root2.current, container);
          listenToAllSupportedEvents(container);
          if (mutableSources) {
            for (var i = 0; i < mutableSources.length; i++) {
              var mutableSource = mutableSources[i];
              registerMutableSourceForHydration(root2, mutableSource);
            }
          }
          return new ReactDOMHydrationRoot(root2);
        }
        function isValidContainer(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || !disableCommentsAsDOMContainers));
        }
        function isValidContainerLegacy(node) {
          return !!(node && (node.nodeType === ELEMENT_NODE || node.nodeType === DOCUMENT_NODE || node.nodeType === DOCUMENT_FRAGMENT_NODE || node.nodeType === COMMENT_NODE && node.nodeValue === " react-mount-point-unstable "));
        }
        function warnIfReactDOMContainerInDEV(container) {
          {
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("createRoot(): Creating roots directly with document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try using a container element created for your app.");
            }
            if (isContainerMarkedAsRoot(container)) {
              if (container._reactRootContainer) {
                error("You are calling ReactDOMClient.createRoot() on a container that was previously passed to ReactDOM.render(). This is not supported.");
              } else {
                error("You are calling ReactDOMClient.createRoot() on a container that has already been passed to createRoot() before. Instead, call root.render() on the existing root instead if you want to update it.");
              }
            }
          }
        }
        var ReactCurrentOwner$3 = ReactSharedInternals.ReactCurrentOwner;
        var topLevelUpdateWarnings;
        {
          topLevelUpdateWarnings = function(container) {
            if (container._reactRootContainer && container.nodeType !== COMMENT_NODE) {
              var hostInstance = findHostInstanceWithNoPortals(container._reactRootContainer.current);
              if (hostInstance) {
                if (hostInstance.parentNode !== container) {
                  error("render(...): It looks like the React-rendered content of this container was removed without using React. This is not supported and will cause errors. Instead, call ReactDOM.unmountComponentAtNode to empty a container.");
                }
              }
            }
            var isRootRenderedBySomeReact = !!container._reactRootContainer;
            var rootEl = getReactRootElementInContainer(container);
            var hasNonRootReactChild = !!(rootEl && getInstanceFromNode(rootEl));
            if (hasNonRootReactChild && !isRootRenderedBySomeReact) {
              error("render(...): Replacing React-rendered children with a new root component. If you intended to update the children of this node, you should instead have the existing children update their state and render the new components instead of calling ReactDOM.render.");
            }
            if (container.nodeType === ELEMENT_NODE && container.tagName && container.tagName.toUpperCase() === "BODY") {
              error("render(): Rendering components directly into document.body is discouraged, since its children are often manipulated by third-party scripts and browser extensions. This may lead to subtle reconciliation issues. Try rendering into a container element created for your app.");
            }
          };
        }
        function getReactRootElementInContainer(container) {
          if (!container) {
            return null;
          }
          if (container.nodeType === DOCUMENT_NODE) {
            return container.documentElement;
          } else {
            return container.firstChild;
          }
        }
        function noopOnRecoverableError() {
        }
        function legacyCreateRootFromDOMContainer(container, initialChildren, parentComponent, callback, isHydrationContainer) {
          if (isHydrationContainer) {
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            var root2 = createHydrationContainer(
              initialChildren,
              callback,
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = root2;
            markContainerAsRoot(root2.current, container);
            var rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(rootContainerElement);
            flushSync3();
            return root2;
          } else {
            var rootSibling;
            while (rootSibling = container.lastChild) {
              container.removeChild(rootSibling);
            }
            if (typeof callback === "function") {
              var _originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(_root);
                _originalCallback.call(instance);
              };
            }
            var _root = createContainer(
              container,
              LegacyRoot,
              null,
              // hydrationCallbacks
              false,
              // isStrictMode
              false,
              // concurrentUpdatesByDefaultOverride,
              "",
              // identifierPrefix
              noopOnRecoverableError
            );
            container._reactRootContainer = _root;
            markContainerAsRoot(_root.current, container);
            var _rootContainerElement = container.nodeType === COMMENT_NODE ? container.parentNode : container;
            listenToAllSupportedEvents(_rootContainerElement);
            flushSync3(function() {
              updateContainer(initialChildren, _root, parentComponent, callback);
            });
            return _root;
          }
        }
        function warnOnInvalidCallback$1(callback, callerName) {
          {
            if (callback !== null && typeof callback !== "function") {
              error("%s(...): Expected the last optional `callback` argument to be a function. Instead received: %s.", callerName, callback);
            }
          }
        }
        function legacyRenderSubtreeIntoContainer(parentComponent, children, container, forceHydrate, callback) {
          {
            topLevelUpdateWarnings(container);
            warnOnInvalidCallback$1(callback === void 0 ? null : callback, "render");
          }
          var maybeRoot = container._reactRootContainer;
          var root2;
          if (!maybeRoot) {
            root2 = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);
          } else {
            root2 = maybeRoot;
            if (typeof callback === "function") {
              var originalCallback = callback;
              callback = function() {
                var instance = getPublicRootInstance(root2);
                originalCallback.call(instance);
              };
            }
            updateContainer(children, root2, parentComponent, callback);
          }
          return getPublicRootInstance(root2);
        }
        var didWarnAboutFindDOMNode = false;
        function findDOMNode(componentOrElement) {
          {
            if (!didWarnAboutFindDOMNode) {
              didWarnAboutFindDOMNode = true;
              error("findDOMNode is deprecated and will be removed in the next major release. Instead, add a ref directly to the element you want to reference. Learn more about using refs safely here: https://reactjs.org/link/strict-mode-find-node");
            }
            var owner = ReactCurrentOwner$3.current;
            if (owner !== null && owner.stateNode !== null) {
              var warnedAboutRefsInRender = owner.stateNode._warnedAboutRefsInRender;
              if (!warnedAboutRefsInRender) {
                error("%s is accessing findDOMNode inside its render(). render() should be a pure function of props and state. It should never access something that requires stale data from the previous render, such as refs. Move this logic to componentDidMount and componentDidUpdate instead.", getComponentNameFromType(owner.type) || "A component");
              }
              owner.stateNode._warnedAboutRefsInRender = true;
            }
          }
          if (componentOrElement == null) {
            return null;
          }
          if (componentOrElement.nodeType === ELEMENT_NODE) {
            return componentOrElement;
          }
          {
            return findHostInstanceWithWarning(componentOrElement, "findDOMNode");
          }
        }
        function hydrate(element, container, callback) {
          {
            error("ReactDOM.hydrate is no longer supported in React 18. Use hydrateRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.hydrate() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call hydrateRoot(container, element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, true, callback);
        }
        function render(element, container, callback) {
          {
            error("ReactDOM.render is no longer supported in React 18. Use createRoot instead. Until you switch to the new API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.render() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.render(element)?");
            }
          }
          return legacyRenderSubtreeIntoContainer(null, element, container, false, callback);
        }
        function unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          {
            error("ReactDOM.unstable_renderSubtreeIntoContainer() is no longer supported in React 18. Consider using a portal instead. Until you switch to the createRoot API, your app will behave as if it's running React 17. Learn more: https://reactjs.org/link/switch-to-createroot");
          }
          if (!isValidContainerLegacy(containerNode)) {
            throw new Error("Target container is not a DOM element.");
          }
          if (parentComponent == null || !has(parentComponent)) {
            throw new Error("parentComponent must be a valid React Component");
          }
          return legacyRenderSubtreeIntoContainer(parentComponent, element, containerNode, false, callback);
        }
        var didWarnAboutUnmountComponentAtNode = false;
        function unmountComponentAtNode(container) {
          {
            if (!didWarnAboutUnmountComponentAtNode) {
              didWarnAboutUnmountComponentAtNode = true;
              error("unmountComponentAtNode is deprecated and will be removed in the next major release. Switch to the createRoot API. Learn more: https://reactjs.org/link/switch-to-createroot");
            }
          }
          if (!isValidContainerLegacy(container)) {
            throw new Error("unmountComponentAtNode(...): Target container is not a DOM element.");
          }
          {
            var isModernRoot = isContainerMarkedAsRoot(container) && container._reactRootContainer === void 0;
            if (isModernRoot) {
              error("You are calling ReactDOM.unmountComponentAtNode() on a container that was previously passed to ReactDOMClient.createRoot(). This is not supported. Did you mean to call root.unmount()?");
            }
          }
          if (container._reactRootContainer) {
            {
              var rootEl = getReactRootElementInContainer(container);
              var renderedByDifferentReact = rootEl && !getInstanceFromNode(rootEl);
              if (renderedByDifferentReact) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by another copy of React.");
              }
            }
            flushSync3(function() {
              legacyRenderSubtreeIntoContainer(null, null, container, false, function() {
                container._reactRootContainer = null;
                unmarkContainerAsRoot(container);
              });
            });
            return true;
          } else {
            {
              var _rootEl = getReactRootElementInContainer(container);
              var hasNonRootReactChild = !!(_rootEl && getInstanceFromNode(_rootEl));
              var isContainerReactRoot = container.nodeType === ELEMENT_NODE && isValidContainerLegacy(container.parentNode) && !!container.parentNode._reactRootContainer;
              if (hasNonRootReactChild) {
                error("unmountComponentAtNode(): The node you're attempting to unmount was rendered by React and is not a top-level container. %s", isContainerReactRoot ? "You may have accidentally passed in a React root node instead of its container." : "Instead, have the parent component update its state and rerender in order to remove this component.");
              }
            }
            return false;
          }
        }
        setAttemptSynchronousHydration(attemptSynchronousHydration$1);
        setAttemptContinuousHydration(attemptContinuousHydration$1);
        setAttemptHydrationAtCurrentPriority(attemptHydrationAtCurrentPriority$1);
        setGetCurrentUpdatePriority(getCurrentUpdatePriority);
        setAttemptHydrationAtPriority(runWithPriority);
        {
          if (typeof Map !== "function" || // $FlowIssue Flow incorrectly thinks Map has no prototype
          Map.prototype == null || typeof Map.prototype.forEach !== "function" || typeof Set !== "function" || // $FlowIssue Flow incorrectly thinks Set has no prototype
          Set.prototype == null || typeof Set.prototype.clear !== "function" || typeof Set.prototype.forEach !== "function") {
            error("React depends on Map and Set built-in types. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills");
          }
        }
        setRestoreImplementation(restoreControlledState$3);
        setBatchingImplementation(batchedUpdates$1, discreteUpdates, flushSync3);
        function createPortal$1(children, container) {
          var key = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : null;
          if (!isValidContainer(container)) {
            throw new Error("Target container is not a DOM element.");
          }
          return createPortal(children, container, null, key);
        }
        function renderSubtreeIntoContainer(parentComponent, element, containerNode, callback) {
          return unstable_renderSubtreeIntoContainer(parentComponent, element, containerNode, callback);
        }
        var Internals = {
          usingClientEntryPoint: false,
          // Keep in sync with ReactTestUtils.js.
          // This is an array for better minification.
          Events: [getInstanceFromNode, getNodeFromInstance, getFiberCurrentPropsFromNode, enqueueStateRestore, restoreStateIfNeeded, batchedUpdates$1]
        };
        function createRoot$1(container, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing createRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return createRoot(container, options2);
        }
        function hydrateRoot$1(container, initialChildren, options2) {
          {
            if (!Internals.usingClientEntryPoint && true) {
              error('You are importing hydrateRoot from "react-dom" which is not supported. You should instead import it from "react-dom/client".');
            }
          }
          return hydrateRoot(container, initialChildren, options2);
        }
        function flushSync$1(fn) {
          {
            if (isAlreadyRendering()) {
              error("flushSync was called from inside a lifecycle method. React cannot flush when React is already rendering. Consider moving this call to a scheduler task or micro task.");
            }
          }
          return flushSync3(fn);
        }
        var foundDevTools = injectIntoDevTools({
          findFiberByHostInstance: getClosestInstanceFromNode,
          bundleType: 1,
          version: ReactVersion,
          rendererPackageName: "react-dom"
        });
        {
          if (!foundDevTools && canUseDOM && window.top === window.self) {
            if (navigator.userAgent.indexOf("Chrome") > -1 && navigator.userAgent.indexOf("Edge") === -1 || navigator.userAgent.indexOf("Firefox") > -1) {
              var protocol = window.location.protocol;
              if (/^(https?|file):$/.test(protocol)) {
                console.info("%cDownload the React DevTools for a better development experience: https://reactjs.org/link/react-devtools" + (protocol === "file:" ? "\nYou might need to use a local HTTP server (instead of file://): https://reactjs.org/link/react-devtools-faq" : ""), "font-weight:bold");
              }
            }
          }
        }
        exports.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED = Internals;
        exports.createPortal = createPortal$1;
        exports.createRoot = createRoot$1;
        exports.findDOMNode = findDOMNode;
        exports.flushSync = flushSync$1;
        exports.hydrate = hydrate;
        exports.hydrateRoot = hydrateRoot$1;
        exports.render = render;
        exports.unmountComponentAtNode = unmountComponentAtNode;
        exports.unstable_batchedUpdates = batchedUpdates$1;
        exports.unstable_renderSubtreeIntoContainer = renderSubtreeIntoContainer;
        exports.version = ReactVersion;
        if (typeof __REACT_DEVTOOLS_GLOBAL_HOOK__ !== "undefined" && typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop === "function") {
          __REACT_DEVTOOLS_GLOBAL_HOOK__.registerInternalModuleStop(new Error());
        }
      })();
    }
  }
});

// node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/index.js
var require_react_dom = __commonJS({
  "node_modules/.pnpm/react-dom@18.3.1_react@18.3.1/node_modules/react-dom/index.js"(exports, module) {
    "use strict";
    if (false) {
      checkDCE();
      module.exports = null;
    } else {
      module.exports = require_react_dom_development();
    }
  }
});

// node_modules/.pnpm/@storybook+core@8.4.7/node_modules/@storybook/core/dist/components/index.js
var import_react3 = __toESM(require_react());
var import_react4 = __toESM(require_react());
var import_react5 = __toESM(require_react());

// node_modules/.pnpm/@storybook+core@8.4.7/node_modules/@storybook/core/dist/theming/index.js
var Z = __toESM(require_react());
var I = __toESM(require_react());
var import_react = __toESM(require_react());
var Re = __toESM(require_react());
var M = __toESM(require_react());
var import_react2 = __toESM(require_react());
var import_client_logger = __toESM(require_client_logger());
var import_client_logger2 = __toESM(require_client_logger());
var Bn = Object.create;
var or = Object.defineProperty;
var $n = Object.getOwnPropertyDescriptor;
var Hn = Object.getOwnPropertyNames;
var Vn = Object.getPrototypeOf;
var Un = Object.prototype.hasOwnProperty;
var a = (e7, r) => or(e7, "name", { value: r, configurable: true });
var Ee = ((e7) => typeof __require < "u" ? __require : typeof Proxy < "u" ? new Proxy(e7, {
  get: (r, t) => (typeof __require < "u" ? __require : r)[t]
}) : e7)(function(e7) {
  if (typeof __require < "u") return __require.apply(this, arguments);
  throw Error('Dynamic require of "' + e7 + '" is not supported');
});
var Le = (e7, r) => () => (r || e7((r = { exports: {} }).exports, r), r.exports);
var Wn = (e7, r, t, n) => {
  if (r && typeof r == "object" || typeof r == "function")
    for (let o of Hn(r))
      !Un.call(e7, o) && o !== t && or(e7, o, { get: () => r[o], enumerable: !(n = $n(r, o)) || n.enumerable });
  return e7;
};
var ir = (e7, r, t) => (t = e7 != null ? Bn(Vn(e7)) : {}, Wn(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  r || !e7 || !e7.__esModule ? or(t, "default", { value: e7, enumerable: true }) : t,
  e7
));
var ct = Le((R) => {
  "use strict";
  (function() {
    "use strict";
    var e7 = typeof Symbol == "function" && Symbol.for, r = e7 ? Symbol.for("react.element") : 60103, t = e7 ? Symbol.for("react.portal") : 60106, n = e7 ? Symbol.for("react.fragment") : 60107, o = e7 ? Symbol.for("react.strict_mode") : 60108, i = e7 ? Symbol.for("react.profiler") : 60114, s4 = e7 ? Symbol.for("react.provider") : 60109, u6 = e7 ? Symbol.for("react.context") : 60110, c = e7 ? Symbol.for("react.async_mode") : 60111, d = e7 ? Symbol.for("react.concurrent_mode") : 60111, f = e7 ? Symbol.for("react.forward_ref") : 60112, l7 = e7 ? Symbol.for("react.suspense") : 60113, p = e7 ? Symbol.for("react.suspense_list") : 60120, v7 = e7 ? Symbol.for("react.memo") : 60115, h7 = e7 ? Symbol.for("react.lazy") : 60116, m = e7 ? Symbol.for("react.block") : 60121, y = e7 ? Symbol.for("react.fundamental") : 60117, x7 = e7 ? Symbol.for("react.responder") : 60118, E7 = e7 ? Symbol.for("react.scope") : 60119;
    function A(b) {
      return typeof b == "string" || typeof b == "function" || // Note: its typeof might be other than 'symbol' or 'number' if it's a polyfill.
      b === n || b === d || b === i || b === o || b === l7 || b === p || typeof b == "object" && b !== null && (b.$$typeof === h7 || b.$$typeof === v7 || b.$$typeof === s4 || b.$$typeof === u6 || b.$$typeof === f || b.$$typeof === y || b.$$typeof === x7 || b.$$typeof === E7 || b.$$typeof === m);
    }
    a(A, "isValidElementType");
    function T(b) {
      if (typeof b == "object" && b !== null) {
        var ar2 = b.$$typeof;
        switch (ar2) {
          case r:
            var Pe2 = b.type;
            switch (Pe2) {
              case c:
              case d:
              case n:
              case i:
              case o:
              case l7:
                return Pe2;
              default:
                var Br2 = Pe2 && Pe2.$$typeof;
                switch (Br2) {
                  case u6:
                  case f:
                  case h7:
                  case v7:
                  case s4:
                    return Br2;
                  default:
                    return ar2;
                }
            }
          case t:
            return ar2;
        }
      }
    }
    a(T, "typeOf");
    var C7 = c, N = d, S4 = u6, xe2 = s4, W = r, G = f, er2 = n, rr2 = h7, tr2 = v7, nr2 = t, Tn2 = i, Cn2 = o, Rn2 = l7, jr2 = false;
    function An2(b) {
      return jr2 || (jr2 = true, console.warn("The ReactIs.isAsyncMode() alias has been deprecated, and will be removed in React 17+. Update your code to use ReactIs.isConcurrentMode() instead. It has the exact same API.")), Dr2(b) || T(b) === c;
    }
    a(An2, "isAsyncMode");
    function Dr2(b) {
      return T(b) === d;
    }
    a(Dr2, "isConcurrentMode");
    function _n2(b) {
      return T(b) === u6;
    }
    a(_n2, "isContextConsumer");
    function Fn2(b) {
      return T(b) === s4;
    }
    a(Fn2, "isContextProvider");
    function Nn2(b) {
      return typeof b == "object" && b !== null && b.$$typeof === r;
    }
    a(Nn2, "isElement");
    function In2(b) {
      return T(b) === f;
    }
    a(In2, "isForwardRef");
    function kn2(b) {
      return T(b) === n;
    }
    a(kn2, "isFragment");
    function Pn2(b) {
      return T(b) === h7;
    }
    a(Pn2, "isLazy");
    function Ln2(b) {
      return T(b) === v7;
    }
    a(Ln2, "isMemo");
    function zn2(b) {
      return T(b) === t;
    }
    a(zn2, "isPortal");
    function Mn2(b) {
      return T(b) === i;
    }
    a(Mn2, "isProfiler");
    function jn2(b) {
      return T(b) === o;
    }
    a(jn2, "isStrictMode");
    function Dn2(b) {
      return T(b) === l7;
    }
    a(Dn2, "isSuspense"), R.AsyncMode = C7, R.ConcurrentMode = N, R.ContextConsumer = S4, R.ContextProvider = xe2, R.Element = W, R.ForwardRef = G, R.Fragment = er2, R.Lazy = rr2, R.Memo = tr2, R.Portal = nr2, R.Profiler = Tn2, R.StrictMode = Cn2, R.Suspense = Rn2, R.isAsyncMode = An2, R.isConcurrentMode = Dr2, R.isContextConsumer = _n2, R.isContextProvider = Fn2, R.isElement = Nn2, R.isForwardRef = In2, R.isFragment = kn2, R.isLazy = Pn2, R.isMemo = Ln2, R.isPortal = zn2, R.isProfiler = Mn2, R.isStrictMode = jn2, R.isSuspense = Dn2, R.isValidElementType = A, R.typeOf = T;
  })();
});
var lt = Le((xi, ft2) => {
  "use strict";
  ft2.exports = ct();
});
var mr = Le((Ei, bt2) => {
  "use strict";
  var dr2 = lt(), ua2 = {
    childContextTypes: true,
    contextType: true,
    contextTypes: true,
    defaultProps: true,
    displayName: true,
    getDefaultProps: true,
    getDerivedStateFromError: true,
    getDerivedStateFromProps: true,
    mixins: true,
    propTypes: true,
    type: true
  }, ca2 = {
    name: true,
    length: true,
    prototype: true,
    caller: true,
    callee: true,
    arguments: true,
    arity: true
  }, fa2 = {
    $$typeof: true,
    render: true,
    defaultProps: true,
    displayName: true,
    propTypes: true
  }, ht2 = {
    $$typeof: true,
    compare: true,
    defaultProps: true,
    displayName: true,
    propTypes: true,
    type: true
  }, pr2 = {};
  pr2[dr2.ForwardRef] = fa2;
  pr2[dr2.Memo] = ht2;
  function dt2(e7) {
    return dr2.isMemo(e7) ? ht2 : pr2[e7.$$typeof] || ua2;
  }
  a(dt2, "getStatics");
  var la2 = Object.defineProperty, da2 = Object.getOwnPropertyNames, pt2 = Object.getOwnPropertySymbols, pa2 = Object.getOwnPropertyDescriptor, ma2 = Object.getPrototypeOf, mt2 = Object.prototype;
  function gt2(e7, r, t) {
    if (typeof r != "string") {
      if (mt2) {
        var n = ma2(r);
        n && n !== mt2 && gt2(e7, n, t);
      }
      var o = da2(r);
      pt2 && (o = o.concat(pt2(r)));
      for (var i = dt2(e7), s4 = dt2(r), u6 = 0; u6 < o.length; ++u6) {
        var c = o[u6];
        if (!ca2[c] && !(t && t[c]) && !(s4 && s4[c]) && !(i && i[c])) {
          var d = pa2(r, c);
          try {
            la2(e7, c, d);
          } catch {
          }
        }
      }
    }
    return e7;
  }
  a(gt2, "hoistNonReactStatics");
  bt2.exports = gt2;
});
var ln = Le((fn, Ir2) => {
  (function(e7) {
    if (typeof fn == "object" && typeof Ir2 < "u")
      Ir2.exports = e7();
    else if (typeof define == "function" && define.amd)
      define([], e7);
    else {
      var r;
      typeof window < "u" ? r = window : typeof global < "u" ? r = global : typeof self < "u" ? r = self : r = this, r.memoizerific = e7();
    }
  })(function() {
    var e7, r, t;
    return a(function n(o, i, s4) {
      function u6(f, l7) {
        if (!i[f]) {
          if (!o[f]) {
            var p = typeof Ee == "function" && Ee;
            if (!l7 && p) return p(f, true);
            if (c) return c(f, true);
            var v7 = new Error("Cannot find module '" + f + "'");
            throw v7.code = "MODULE_NOT_FOUND", v7;
          }
          var h7 = i[f] = { exports: {} };
          o[f][0].call(h7.exports, function(m) {
            var y = o[f][1][m];
            return u6(y || m);
          }, h7, h7.exports, n, o, i, s4);
        }
        return i[f].exports;
      }
      a(u6, "s");
      for (var c = typeof Ee == "function" && Ee, d = 0; d < s4.length; d++) u6(s4[d]);
      return u6;
    }, "e")({ 1: [function(n, o, i) {
      o.exports = function(s4) {
        if (typeof Map != "function" || s4) {
          var u6 = n("./similar");
          return new u6();
        } else
          return /* @__PURE__ */ new Map();
      };
    }, { "./similar": 2 }], 2: [function(n, o, i) {
      function s4() {
        return this.list = [], this.lastItem = void 0, this.size = 0, this;
      }
      a(s4, "Similar"), s4.prototype.get = function(u6) {
        var c;
        if (this.lastItem && this.isEqual(this.lastItem.key, u6))
          return this.lastItem.val;
        if (c = this.indexOf(u6), c >= 0)
          return this.lastItem = this.list[c], this.list[c].val;
      }, s4.prototype.set = function(u6, c) {
        var d;
        return this.lastItem && this.isEqual(this.lastItem.key, u6) ? (this.lastItem.val = c, this) : (d = this.indexOf(u6), d >= 0 ? (this.lastItem = this.list[d], this.list[d].val = c, this) : (this.lastItem = { key: u6, val: c }, this.list.push(this.lastItem), this.size++, this));
      }, s4.prototype.delete = function(u6) {
        var c;
        if (this.lastItem && this.isEqual(this.lastItem.key, u6) && (this.lastItem = void 0), c = this.indexOf(u6), c >= 0)
          return this.size--, this.list.splice(c, 1)[0];
      }, s4.prototype.has = function(u6) {
        var c;
        return this.lastItem && this.isEqual(this.lastItem.key, u6) ? true : (c = this.indexOf(u6), c >= 0 ? (this.lastItem = this.list[c], true) : false);
      }, s4.prototype.forEach = function(u6, c) {
        var d;
        for (d = 0; d < this.size; d++)
          u6.call(c || this, this.list[d].val, this.list[d].key, this);
      }, s4.prototype.indexOf = function(u6) {
        var c;
        for (c = 0; c < this.size; c++)
          if (this.isEqual(this.list[c].key, u6))
            return c;
        return -1;
      }, s4.prototype.isEqual = function(u6, c) {
        return u6 === c || u6 !== u6 && c !== c;
      }, o.exports = s4;
    }, {}], 3: [function(n, o, i) {
      var s4 = n("map-or-similar");
      o.exports = function(f) {
        var l7 = new s4(false), p = [];
        return function(v7) {
          var h7 = a(function() {
            var m = l7, y, x7, E7 = arguments.length - 1, A = Array(E7 + 1), T = true, C7;
            if ((h7.numArgs || h7.numArgs === 0) && h7.numArgs !== E7 + 1)
              throw new Error("Memoizerific functions should always be called with the same number of arguments");
            for (C7 = 0; C7 < E7; C7++) {
              if (A[C7] = {
                cacheItem: m,
                arg: arguments[C7]
              }, m.has(arguments[C7])) {
                m = m.get(arguments[C7]);
                continue;
              }
              T = false, y = new s4(false), m.set(arguments[C7], y), m = y;
            }
            return T && (m.has(arguments[E7]) ? x7 = m.get(arguments[E7]) : T = false), T || (x7 = v7.apply(null, arguments), m.set(arguments[E7], x7)), f > 0 && (A[E7] = {
              cacheItem: m,
              arg: arguments[E7]
            }, T ? u6(p, A) : p.push(A), p.length > f && c(p.shift())), h7.wasMemoized = T, h7.numArgs = E7 + 1, x7;
          }, "memoizerific");
          return h7.limit = f, h7.wasMemoized = false, h7.cache = l7, h7.lru = p, h7;
        };
      };
      function u6(f, l7) {
        var p = f.length, v7 = l7.length, h7, m, y;
        for (m = 0; m < p; m++) {
          for (h7 = true, y = 0; y < v7; y++)
            if (!d(f[m][y].arg, l7[y].arg)) {
              h7 = false;
              break;
            }
          if (h7)
            break;
        }
        f.push(f.splice(m, 1)[0]);
      }
      a(u6, "moveToMostRecentLru");
      function c(f) {
        var l7 = f.length, p = f[l7 - 1], v7, h7;
        for (p.cacheItem.delete(p.arg), h7 = l7 - 2; h7 >= 0 && (p = f[h7], v7 = p.cacheItem.get(p.arg), !v7 || !v7.size); h7--)
          p.cacheItem.delete(p.arg);
      }
      a(c, "removeCachedResult");
      function d(f, l7) {
        return f === l7 || f !== f && l7 !== l7;
      }
      a(d, "isEqual");
    }, { "map-or-similar": 1 }] }, {}, [3])(3);
  });
});
function j() {
  return j = Object.assign ? Object.assign.bind() : function(e7) {
    for (var r = 1; r < arguments.length; r++) {
      var t = arguments[r];
      for (var n in t) ({}).hasOwnProperty.call(t, n) && (e7[n] = t[n]);
    }
    return e7;
  }, j.apply(null, arguments);
}
a(j, "_extends");
function ze(e7) {
  var r = /* @__PURE__ */ Object.create(null);
  return function(t) {
    return r[t] === void 0 && (r[t] = e7(t)), r[t];
  };
}
a(ze, "memoize");
var Yn = /^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|disableRemotePlayback|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;
var sr = ze(
  function(e7) {
    return Yn.test(e7) || e7.charCodeAt(0) === 111 && e7.charCodeAt(1) === 110 && e7.charCodeAt(2) < 91;
  }
  /* Z+1 */
);
function Gn(e7) {
  if (e7.sheet)
    return e7.sheet;
  for (var r = 0; r < document.styleSheets.length; r++)
    if (document.styleSheets[r].ownerNode === e7)
      return document.styleSheets[r];
}
a(Gn, "sheetForTag");
function qn(e7) {
  var r = document.createElement("style");
  return r.setAttribute("data-emotion", e7.key), e7.nonce !== void 0 && r.setAttribute("nonce", e7.nonce), r.appendChild(document.createTextNode(
    ""
  )), r.setAttribute("data-s", ""), r;
}
a(qn, "createStyleElement");
var $r = function() {
  function e7(t) {
    var n = this;
    this._insertTag = function(o) {
      var i;
      n.tags.length === 0 ? n.insertionPoint ? i = n.insertionPoint.nextSibling : n.prepend ? i = n.container.firstChild : i = n.before : i = n.tags[n.tags.length - 1].nextSibling, n.container.insertBefore(o, i), n.tags.push(o);
    }, this.isSpeedy = t.speedy === void 0 ? false : t.speedy, this.tags = [], this.ctr = 0, this.nonce = t.nonce, this.key = t.key, this.container = t.container, this.prepend = t.prepend, this.insertionPoint = t.insertionPoint, this.before = null;
  }
  a(e7, "StyleSheet");
  var r = e7.prototype;
  return r.hydrate = a(function(n) {
    n.forEach(this._insertTag);
  }, "hydrate"), r.insert = a(function(n) {
    this.ctr % (this.isSpeedy ? 65e3 : 1) === 0 && this._insertTag(qn(this));
    var o = this.tags[this.tags.length - 1], i = n.charCodeAt(0) === 64 && n.charCodeAt(1) === 105;
    if (i && this._alreadyInsertedOrderInsensitiveRule && console.error(`You're attempting to insert the following rule:
` + n + "\n\n`@import` rules must be before all other types of rules in a stylesheet but other rules have already been inserted. Please ensure that `@import` rules are before all other rules."), this._alreadyInsertedOrderInsensitiveRule = this._alreadyInsertedOrderInsensitiveRule || !i, this.isSpeedy) {
      var s4 = Gn(o);
      try {
        s4.insertRule(n, s4.cssRules.length);
      } catch (u6) {
        /:(-moz-placeholder|-moz-focus-inner|-moz-focusring|-ms-input-placeholder|-moz-read-write|-moz-read-only|-ms-clear|-ms-expand|-ms-reveal){/.test(n) || console.error('There was a problem inserting the following rule: "' + n + '"', u6);
      }
    } else
      o.appendChild(document.createTextNode(n));
    this.ctr++;
  }, "insert"), r.flush = a(function() {
    this.tags.forEach(function(n) {
      return n.parentNode && n.parentNode.removeChild(n);
    }), this.tags = [], this.ctr = 0, this._alreadyInsertedOrderInsensitiveRule = false;
  }, "flush"), e7;
}();
var k = "-ms-";
var we = "-moz-";
var O = "-webkit-";
var ae = "comm";
var oe = "rule";
var ie = "decl";
var Hr = "@import";
var Me = "@keyframes";
var Vr = "@layer";
var Ur = Math.abs;
var X = String.fromCharCode;
var Wr = Object.assign;
function Yr(e7, r) {
  return _(e7, 0) ^ 45 ? (((r << 2 ^ _(e7, 0)) << 2 ^ _(e7, 1)) << 2 ^ _(e7, 2)) << 2 ^ _(e7, 3) : 0;
}
a(Yr, "hash");
function je(e7) {
  return e7.trim();
}
a(je, "trim");
function ur(e7, r) {
  return (e7 = r.exec(e7)) ? e7[0] : e7;
}
a(ur, "match");
function w(e7, r, t) {
  return e7.replace(r, t);
}
a(w, "replace");
function Se(e7, r) {
  return e7.indexOf(r);
}
a(Se, "indexof");
function _(e7, r) {
  return e7.charCodeAt(r) | 0;
}
a(_, "charat");
function q(e7, r, t) {
  return e7.slice(r, t);
}
a(q, "substr");
function P(e7) {
  return e7.length;
}
a(P, "strlen");
function se(e7) {
  return e7.length;
}
a(se, "sizeof");
function ue(e7, r) {
  return r.push(e7), e7;
}
a(ue, "append");
function cr(e7, r) {
  return e7.map(r).join("");
}
a(cr, "combine");
var De = 1;
var ce = 1;
var Gr = 0;
var L = 0;
var F = 0;
var le = "";
function Oe(e7, r, t, n, o, i, s4) {
  return { value: e7, root: r, parent: t, type: n, props: o, children: i, line: De, column: ce, length: s4, return: "" };
}
a(Oe, "node");
function de(e7, r) {
  return Wr(Oe("", null, null, "", null, null, 0), e7, { length: -e7.length }, r);
}
a(de, "copy");
function qr() {
  return F;
}
a(qr, "char");
function Jr() {
  return F = L > 0 ? _(le, --L) : 0, ce--, F === 10 && (ce = 1, De--), F;
}
a(Jr, "prev");
function z() {
  return F = L < Gr ? _(le, L++) : 0, ce++, F === 10 && (ce = 1, De++), F;
}
a(z, "next");
function D() {
  return _(le, L);
}
a(D, "peek");
function Te() {
  return L;
}
a(Te, "caret");
function pe(e7, r) {
  return q(le, e7, r);
}
a(pe, "slice");
function fe(e7) {
  switch (e7) {
    // \0 \t \n \r \s whitespace token
    case 0:
    case 9:
    case 10:
    case 13:
    case 32:
      return 5;
    // ! + , / > @ ~ isolate token
    case 33:
    case 43:
    case 44:
    case 47:
    case 62:
    case 64:
    case 126:
    // ; { } breakpoint token
    case 59:
    case 123:
    case 125:
      return 4;
    // : accompanied token
    case 58:
      return 3;
    // " ' ( [ opening delimit token
    case 34:
    case 39:
    case 40:
    case 91:
      return 2;
    // ) ] closing delimit token
    case 41:
    case 93:
      return 1;
  }
  return 0;
}
a(fe, "token");
function Be(e7) {
  return De = ce = 1, Gr = P(le = e7), L = 0, [];
}
a(Be, "alloc");
function $e(e7) {
  return le = "", e7;
}
a($e, "dealloc");
function me(e7) {
  return je(pe(L - 1, fr(e7 === 91 ? e7 + 2 : e7 === 40 ? e7 + 1 : e7)));
}
a(me, "delimit");
function Zr(e7) {
  for (; (F = D()) && F < 33; )
    z();
  return fe(e7) > 2 || fe(F) > 3 ? "" : " ";
}
a(Zr, "whitespace");
function Kr(e7, r) {
  for (; --r && z() && !(F < 48 || F > 102 || F > 57 && F < 65 || F > 70 && F < 97); )
    ;
  return pe(e7, Te() + (r < 6 && D() == 32 && z() == 32));
}
a(Kr, "escaping");
function fr(e7) {
  for (; z(); )
    switch (F) {
      // ] ) " '
      case e7:
        return L;
      // " '
      case 34:
      case 39:
        e7 !== 34 && e7 !== 39 && fr(F);
        break;
      // (
      case 40:
        e7 === 41 && fr(e7);
        break;
      // \
      case 92:
        z();
        break;
    }
  return L;
}
a(fr, "delimiter");
function Xr(e7, r) {
  for (; z() && e7 + F !== 57; )
    if (e7 + F === 84 && D() === 47)
      break;
  return "/*" + pe(r, L - 1) + "*" + X(e7 === 47 ? e7 : z());
}
a(Xr, "commenter");
function Qr(e7) {
  for (; !fe(D()); )
    z();
  return pe(e7, L);
}
a(Qr, "identifier");
function tt(e7) {
  return $e(He("", null, null, null, [""], e7 = Be(e7), 0, [0], e7));
}
a(tt, "compile");
function He(e7, r, t, n, o, i, s4, u6, c) {
  for (var d = 0, f = 0, l7 = s4, p = 0, v7 = 0, h7 = 0, m = 1, y = 1, x7 = 1, E7 = 0, A = "", T = o, C7 = i, N = n, S4 = A; y; )
    switch (h7 = E7, E7 = z()) {
      // (
      case 40:
        if (h7 != 108 && _(S4, l7 - 1) == 58) {
          Se(S4 += w(me(E7), "&", "&\f"), "&\f") != -1 && (x7 = -1);
          break;
        }
      // " ' [
      case 34:
      case 39:
      case 91:
        S4 += me(E7);
        break;
      // \t \n \r \s
      case 9:
      case 10:
      case 13:
      case 32:
        S4 += Zr(h7);
        break;
      // \
      case 92:
        S4 += Kr(Te() - 1, 7);
        continue;
      // /
      case 47:
        switch (D()) {
          case 42:
          case 47:
            ue(Jn(Xr(z(), Te()), r, t), c);
            break;
          default:
            S4 += "/";
        }
        break;
      // {
      case 123 * m:
        u6[d++] = P(S4) * x7;
      // } ; \0
      case 125 * m:
      case 59:
      case 0:
        switch (E7) {
          // \0 }
          case 0:
          case 125:
            y = 0;
          // ;
          case 59 + f:
            x7 == -1 && (S4 = w(S4, /\f/g, "")), v7 > 0 && P(S4) - l7 && ue(
              v7 > 32 ? rt(S4 + ";", n, t, l7 - 1) : rt(w(S4, " ", "") + ";", n, t, l7 - 2),
              c
            );
            break;
          // @ ;
          case 59:
            S4 += ";";
          // { rule/at-rule
          default:
            if (ue(N = et(S4, r, t, d, f, o, u6, A, T = [], C7 = [], l7), i), E7 === 123)
              if (f === 0)
                He(S4, r, N, N, T, i, l7, u6, C7);
              else
                switch (p === 99 && _(S4, 3) === 110 ? 100 : p) {
                  // d l m s
                  case 100:
                  case 108:
                  case 109:
                  case 115:
                    He(e7, N, N, n && ue(et(e7, N, N, 0, 0, o, u6, A, o, T = [], l7), C7), o, C7, l7, u6, n ? T : C7);
                    break;
                  default:
                    He(S4, N, N, N, [""], C7, 0, u6, C7);
                }
        }
        d = f = v7 = 0, m = x7 = 1, A = S4 = "", l7 = s4;
        break;
      // :
      case 58:
        l7 = 1 + P(S4), v7 = h7;
      default:
        if (m < 1) {
          if (E7 == 123)
            --m;
          else if (E7 == 125 && m++ == 0 && Jr() == 125)
            continue;
        }
        switch (S4 += X(E7), E7 * m) {
          // &
          case 38:
            x7 = f > 0 ? 1 : (S4 += "\f", -1);
            break;
          // ,
          case 44:
            u6[d++] = (P(S4) - 1) * x7, x7 = 1;
            break;
          // @
          case 64:
            D() === 45 && (S4 += me(z())), p = D(), f = l7 = P(A = S4 += Qr(Te())), E7++;
            break;
          // -
          case 45:
            h7 === 45 && P(S4) == 2 && (m = 0);
        }
    }
  return i;
}
a(He, "parse");
function et(e7, r, t, n, o, i, s4, u6, c, d, f) {
  for (var l7 = o - 1, p = o === 0 ? i : [""], v7 = se(p), h7 = 0, m = 0, y = 0; h7 < n; ++h7)
    for (var x7 = 0, E7 = q(e7, l7 + 1, l7 = Ur(m = s4[h7])), A = e7; x7 < v7; ++x7)
      (A = je(m > 0 ? p[x7] + " " + E7 : w(E7, /&\f/g, p[x7]))) && (c[y++] = A);
  return Oe(e7, r, t, o === 0 ? oe : u6, c, d, f);
}
a(et, "ruleset");
function Jn(e7, r, t) {
  return Oe(e7, r, t, ae, X(qr()), q(e7, 2, -2), 0);
}
a(Jn, "comment");
function rt(e7, r, t, n) {
  return Oe(e7, r, t, ie, q(e7, 0, n), q(e7, n + 1, -1), n);
}
a(rt, "declaration");
function Q(e7, r) {
  for (var t = "", n = se(e7), o = 0; o < n; o++)
    t += r(e7[o], o, e7, r) || "";
  return t;
}
a(Q, "serialize");
function nt(e7, r, t, n) {
  switch (e7.type) {
    case Vr:
      if (e7.children.length) break;
    case Hr:
    case ie:
      return e7.return = e7.return || e7.value;
    case ae:
      return "";
    case Me:
      return e7.return = e7.value + "{" + Q(e7.children, n) + "}";
    case oe:
      e7.value = e7.props.join(",");
  }
  return P(t = Q(e7.children, n)) ? e7.return = e7.value + "{" + t + "}" : "";
}
a(nt, "stringify");
function at(e7) {
  var r = se(e7);
  return function(t, n, o, i) {
    for (var s4 = "", u6 = 0; u6 < r; u6++)
      s4 += e7[u6](t, n, o, i) || "";
    return s4;
  };
}
a(at, "middleware");
var lr = a(function(r) {
  var t = /* @__PURE__ */ new WeakMap();
  return function(n) {
    if (t.has(n))
      return t.get(n);
    var o = r(n);
    return t.set(n, o), o;
  };
}, "weakMemoize");
var Zn = a(function(r, t, n) {
  for (var o = 0, i = 0; o = i, i = D(), o === 38 && i === 12 && (t[n] = 1), !fe(i); )
    z();
  return pe(r, L);
}, "identifierWithPointTracking");
var Kn = a(function(r, t) {
  var n = -1, o = 44;
  do
    switch (fe(o)) {
      case 0:
        o === 38 && D() === 12 && (t[n] = 1), r[n] += Zn(L - 1, t, n);
        break;
      case 2:
        r[n] += me(o);
        break;
      case 4:
        if (o === 44) {
          r[++n] = D() === 58 ? "&\f" : "", t[n] = r[n].length;
          break;
        }
      // fallthrough
      default:
        r[n] += X(o);
    }
  while (o = z());
  return r;
}, "toRules");
var Xn = a(function(r, t) {
  return $e(Kn(Be(r), t));
}, "getRules");
var ot = /* @__PURE__ */ new WeakMap();
var Qn = a(function(r) {
  if (!(r.type !== "rule" || !r.parent || // positive .length indicates that this rule contains pseudo
  // negative .length indicates that this rule has been already prefixed
  r.length < 1)) {
    for (var t = r.value, n = r.parent, o = r.column === n.column && r.line === n.line; n.type !== "rule"; )
      if (n = n.parent, !n) return;
    if (!(r.props.length === 1 && t.charCodeAt(0) !== 58 && !ot.get(n)) && !o) {
      ot.set(r, true);
      for (var i = [], s4 = Xn(t, i), u6 = n.props, c = 0, d = 0; c < s4.length; c++)
        for (var f = 0; f < u6.length; f++, d++)
          r.props[d] = i[c] ? s4[c].replace(/&\f/g, u6[f]) : u6[f] + " " + s4[c];
    }
  }
}, "compat");
var ea = a(function(r) {
  if (r.type === "decl") {
    var t = r.value;
    t.charCodeAt(0) === 108 && // charcode for b
    t.charCodeAt(2) === 98 && (r.return = "", r.value = "");
  }
}, "removeLabel");
var ra = "emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason";
var ta = a(
  function(r) {
    return r.type === "comm" && r.children.indexOf(ra) > -1;
  },
  "isIgnoringComment"
);
var na = a(function(r) {
  return function(t, n, o) {
    if (!(t.type !== "rule" || r.compat)) {
      var i = t.value.match(/(:first|:nth|:nth-last)-child/g);
      if (i) {
        for (var s4 = !!t.parent, u6 = s4 ? t.parent.children : (
          // global rule at the root level
          o
        ), c = u6.length - 1; c >= 0; c--) {
          var d = u6[c];
          if (d.line < t.line)
            break;
          if (d.column < t.column) {
            if (ta(d))
              return;
            break;
          }
        }
        i.forEach(function(f) {
          console.error('The pseudo class "' + f + '" is potentially unsafe when doing server-side rendering. Try changing it to "' + f.split(
            "-child"
          )[0] + '-of-type".');
        });
      }
    }
  };
}, "createUnsafeSelectorsAlarm");
var st = a(function(r) {
  return r.type.charCodeAt(1) === 105 && r.type.charCodeAt(0) === 64;
}, "isImportRule");
var aa = a(function(r, t) {
  for (var n = r - 1; n >= 0; n--)
    if (!st(t[n]))
      return true;
  return false;
}, "isPrependedWithRegularRules");
var it = a(function(r) {
  r.type = "", r.value = "", r.return = "", r.children = "", r.props = "";
}, "nullifyElement");
var oa = a(function(r, t, n) {
  st(r) && (r.parent ? (console.error("`@import` rules can't be nested inside other rules. Please move it to the top level and put it before regular rules. Keep in mind that they can only be used within global styles."), it(r)) : aa(t, n) && (console.error("`@import` rules can't be after other rules. Please put your `@import` rules before your other rules."), it(r)));
}, "incorrectImportAlarm");
function ut(e7, r) {
  switch (Yr(e7, r)) {
    // color-adjust
    case 5103:
      return O + "print-" + e7 + e7;
    // animation, animation-(delay|direction|duration|fill-mode|iteration-count|name|play-state|timing-function)
    case 5737:
    case 4201:
    case 3177:
    case 3433:
    case 1641:
    case 4457:
    case 2921:
    // text-decoration, filter, clip-path, backface-visibility, column, box-decoration-break
    case 5572:
    case 6356:
    case 5844:
    case 3191:
    case 6645:
    case 3005:
    // mask, mask-image, mask-(mode|clip|size), mask-(repeat|origin), mask-position, mask-composite,
    case 6391:
    case 5879:
    case 5623:
    case 6135:
    case 4599:
    case 4855:
    // background-clip, columns, column-(count|fill|gap|rule|rule-color|rule-style|rule-width|span|width)
    case 4215:
    case 6389:
    case 5109:
    case 5365:
    case 5621:
    case 3829:
      return O + e7 + e7;
    // appearance, user-select, transform, hyphens, text-size-adjust
    case 5349:
    case 4246:
    case 4810:
    case 6968:
    case 2756:
      return O + e7 + we + e7 + k + e7 + e7;
    // flex, flex-direction
    case 6828:
    case 4268:
      return O + e7 + k + e7 + e7;
    // order
    case 6165:
      return O + e7 + k + "flex-" + e7 + e7;
    // align-items
    case 5187:
      return O + e7 + w(e7, /(\w+).+(:[^]+)/, O + "box-$1$2" + k + "flex-$1$2") + e7;
    // align-self
    case 5443:
      return O + e7 + k + "flex-item-" + w(e7, /flex-|-self/, "") + e7;
    // align-content
    case 4675:
      return O + e7 + k + "flex-line-pack" + w(e7, /align-content|flex-|-self/, "") + e7;
    // flex-shrink
    case 5548:
      return O + e7 + k + w(e7, "shrink", "negative") + e7;
    // flex-basis
    case 5292:
      return O + e7 + k + w(e7, "basis", "preferred-size") + e7;
    // flex-grow
    case 6060:
      return O + "box-" + w(e7, "-grow", "") + O + e7 + k + w(e7, "grow", "positive") + e7;
    // transition
    case 4554:
      return O + w(e7, /([^-])(transform)/g, "$1" + O + "$2") + e7;
    // cursor
    case 6187:
      return w(w(w(e7, /(zoom-|grab)/, O + "$1"), /(image-set)/, O + "$1"), e7, "") + e7;
    // background, background-image
    case 5495:
    case 3959:
      return w(e7, /(image-set\([^]*)/, O + "$1$`$1");
    // justify-content
    case 4968:
      return w(w(e7, /(.+:)(flex-)?(.*)/, O + "box-pack:$3" + k + "flex-pack:$3"), /s.+-b[^;]+/, "justify") + O + e7 + e7;
    // (margin|padding)-inline-(start|end)
    case 4095:
    case 3583:
    case 4068:
    case 2532:
      return w(e7, /(.+)-inline(.+)/, O + "$1$2") + e7;
    // (min|max)?(width|height|inline-size|block-size)
    case 8116:
    case 7059:
    case 5753:
    case 5535:
    case 5445:
    case 5701:
    case 4933:
    case 4677:
    case 5533:
    case 5789:
    case 5021:
    case 4765:
      if (P(e7) - 1 - r > 6) switch (_(e7, r + 1)) {
        // (m)ax-content, (m)in-content
        case 109:
          if (_(e7, r + 4) !== 45) break;
        // (f)ill-available, (f)it-content
        case 102:
          return w(e7, /(.+:)(.+)-([^]+)/, "$1" + O + "$2-$3$1" + we + (_(e7, r + 3) == 108 ? "$3" : "$2-$3")) + e7;
        // (s)tretch
        case 115:
          return ~Se(e7, "stretch") ? ut(w(e7, "stretch", "fill-available"), r) + e7 : e7;
      }
      break;
    // position: sticky
    case 4949:
      if (_(e7, r + 1) !== 115) break;
    // display: (flex|inline-flex)
    case 6444:
      switch (_(e7, P(e7) - 3 - (~Se(e7, "!important") && 10))) {
        // stic(k)y
        case 107:
          return w(e7, ":", ":" + O) + e7;
        // (inline-)?fl(e)x
        case 101:
          return w(e7, /(.+:)([^;!]+)(;|!.+)?/, "$1" + O + (_(e7, 14) === 45 ? "inline-" : "") + "box$3$1" + O + "$2$3$1" + k + "$2box$3") + e7;
      }
      break;
    // writing-mode
    case 5936:
      switch (_(e7, r + 11)) {
        // vertical-l(r)
        case 114:
          return O + e7 + k + w(e7, /[svh]\w+-[tblr]{2}/, "tb") + e7;
        // vertical-r(l)
        case 108:
          return O + e7 + k + w(e7, /[svh]\w+-[tblr]{2}/, "tb-rl") + e7;
        // horizontal(-)tb
        case 45:
          return O + e7 + k + w(e7, /[svh]\w+-[tblr]{2}/, "lr") + e7;
      }
      return O + e7 + k + e7 + e7;
  }
  return e7;
}
a(ut, "prefix");
var ia = a(function(r, t, n, o) {
  if (r.length > -1 && !r.return) switch (r.type) {
    case ie:
      r.return = ut(r.value, r.length);
      break;
    case Me:
      return Q([de(r, {
        value: w(r.value, "@", "@" + O)
      })], o);
    case oe:
      if (r.length) return cr(r.props, function(i) {
        switch (ur(i, /(::plac\w+|:read-\w+)/)) {
          // :read-(only|write)
          case ":read-only":
          case ":read-write":
            return Q([de(r, {
              props: [w(i, /:(read-\w+)/, ":" + we + "$1")]
            })], o);
          // :placeholder
          case "::placeholder":
            return Q([de(r, {
              props: [w(i, /:(plac\w+)/, ":" + O + "input-$1")]
            }), de(r, {
              props: [w(i, /:(plac\w+)/, ":" + we + "$1")]
            }), de(r, {
              props: [w(i, /:(plac\w+)/, k + "input-$1")]
            })], o);
        }
        return "";
      });
  }
}, "prefixer");
var sa = [ia];
var Ve = a(function(r) {
  var t = r.key;
  if (!t)
    throw new Error(`You have to configure \`key\` for your cache. Please make sure it's unique (and not equal to 'css') as it's used for linking styles to your cache.
If multiple caches share the same key they might "fight" for each other's style elements.`);
  if (t === "css") {
    var n = document.querySelectorAll("style[data-emotion]:not([data-s])");
    Array.prototype.forEach.call(n, function(m) {
      var y = m.getAttribute("data-emotion");
      y.indexOf(" ") !== -1 && (document.head.appendChild(m), m.setAttribute("data-s", ""));
    });
  }
  var o = r.stylisPlugins || sa;
  if (/[^a-z-]/.test(t))
    throw new Error('Emotion key must only contain lower case alphabetical characters and - but "' + t + '" was passed');
  var i = {}, s4, u6 = [];
  s4 = r.container || document.head, Array.prototype.forEach.call(
    // this means we will ignore elements which don't have a space in them which
    // means that the style elements we're looking at are only Emotion 11 server-rendered style elements
    document.querySelectorAll('style[data-emotion^="' + t + ' "]'),
    function(m) {
      for (var y = m.getAttribute("data-emotion").split(" "), x7 = 1; x7 < y.length; x7++)
        i[y[x7]] = true;
      u6.push(m);
    }
  );
  var c, d = [Qn, ea];
  d.push(na({
    get compat() {
      return h7.compat;
    }
  }), oa);
  {
    var f, l7 = [nt, function(m) {
      m.root || (m.return ? f.insert(m.return) : m.value && m.type !== ae && f.insert(m.value + "{}"));
    }], p = at(d.concat(o, l7)), v7 = a(function(y) {
      return Q(tt(y), p);
    }, "stylis");
    c = a(function(y, x7, E7, A) {
      f = E7, x7.map !== void 0 && (f = {
        insert: a(function(C7) {
          E7.insert(C7 + x7.map);
        }, "insert")
      }), v7(y ? y + "{" + x7.styles + "}" : x7.styles), A && (h7.inserted[x7.name] = true);
    }, "insert");
  }
  var h7 = {
    key: t,
    sheet: new $r({
      key: t,
      container: s4,
      nonce: r.nonce,
      speedy: r.speedy,
      prepend: r.prepend,
      insertionPoint: r.insertionPoint
    }),
    nonce: r.nonce,
    inserted: i,
    registered: {},
    insert: c
  };
  return h7.sheet.hydrate(u6), h7;
}, "createCache");
var vt = ir(mr());
var yt = a(function(e7, r) {
  return (0, vt.default)(e7, r);
}, "hoistNonReactStatics");
var ha = true;
function he(e7, r, t) {
  var n = "";
  return t.split(" ").forEach(function(o) {
    e7[o] !== void 0 ? r.push(e7[o] + ";") : n += o + " ";
  }), n;
}
a(he, "getRegisteredStyles");
var ee = a(function(r, t, n) {
  var o = r.key + "-" + t.name;
  (n === false || // we need to always store it if we're in compat mode and
  // in node since emotion-server relies on whether a style is in
  // the registered cache to know whether a style is global or not
  // also, note that this check will be dead code eliminated in the browser
  ha === false) && r.registered[o] === void 0 && (r.registered[o] = t.styles);
}, "registerStyles");
var re = a(function(r, t, n) {
  ee(r, t, n);
  var o = r.key + "-" + t.name;
  if (r.inserted[t.name] === void 0) {
    var i = t;
    do
      r.insert(t === i ? "." + o : "", i, r.sheet, true), i = i.next;
    while (i !== void 0);
  }
}, "insertStyles");
function xt(e7) {
  for (var r = 0, t, n = 0, o = e7.length; o >= 4; ++n, o -= 4)
    t = e7.charCodeAt(n) & 255 | (e7.charCodeAt(++n) & 255) << 8 | (e7.charCodeAt(++n) & 255) << 16 | (e7.charCodeAt(++n) & 255) << 24, t = /* Math.imul(k, m): */
    (t & 65535) * 1540483477 + ((t >>> 16) * 59797 << 16), t ^= /* k >>> r: */
    t >>> 24, r = /* Math.imul(k, m): */
    (t & 65535) * 1540483477 + ((t >>> 16) * 59797 << 16) ^ /* Math.imul(h, m): */
    (r & 65535) * 1540483477 + ((r >>> 16) * 59797 << 16);
  switch (o) {
    case 3:
      r ^= (e7.charCodeAt(n + 2) & 255) << 16;
    case 2:
      r ^= (e7.charCodeAt(n + 1) & 255) << 8;
    case 1:
      r ^= e7.charCodeAt(n) & 255, r = /* Math.imul(h, m): */
      (r & 65535) * 1540483477 + ((r >>> 16) * 59797 << 16);
  }
  return r ^= r >>> 13, r = /* Math.imul(h, m): */
  (r & 65535) * 1540483477 + ((r >>> 16) * 59797 << 16), ((r ^ r >>> 15) >>> 0).toString(36);
}
a(xt, "murmur2");
var Et = {
  animationIterationCount: 1,
  aspectRatio: 1,
  borderImageOutset: 1,
  borderImageSlice: 1,
  borderImageWidth: 1,
  boxFlex: 1,
  boxFlexGroup: 1,
  boxOrdinalGroup: 1,
  columnCount: 1,
  columns: 1,
  flex: 1,
  flexGrow: 1,
  flexPositive: 1,
  flexShrink: 1,
  flexNegative: 1,
  flexOrder: 1,
  gridRow: 1,
  gridRowEnd: 1,
  gridRowSpan: 1,
  gridRowStart: 1,
  gridColumn: 1,
  gridColumnEnd: 1,
  gridColumnSpan: 1,
  gridColumnStart: 1,
  msGridRow: 1,
  msGridRowSpan: 1,
  msGridColumn: 1,
  msGridColumnSpan: 1,
  fontWeight: 1,
  lineHeight: 1,
  opacity: 1,
  order: 1,
  orphans: 1,
  tabSize: 1,
  widows: 1,
  zIndex: 1,
  zoom: 1,
  WebkitLineClamp: 1,
  // SVG-related properties
  fillOpacity: 1,
  floodOpacity: 1,
  stopOpacity: 1,
  strokeDasharray: 1,
  strokeDashoffset: 1,
  strokeMiterlimit: 1,
  strokeOpacity: 1,
  strokeWidth: 1
};
var wt = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var ga = "You have passed in falsy value as style object's key (can happen when in example you pass unexported component as computed key).";
var ba = /[A-Z]|^ms/g;
var Ft = /_EMO_([^_]+?)_([^]*?)_EMO_/g;
var br = a(function(r) {
  return r.charCodeAt(1) === 45;
}, "isCustomProperty");
var St = a(function(r) {
  return r != null && typeof r != "boolean";
}, "isProcessableValue");
var hr = ze(function(e7) {
  return br(e7) ? e7 : e7.replace(ba, "-$&").toLowerCase();
});
var Ue = a(function(r, t) {
  switch (r) {
    case "animation":
    case "animationName":
      if (typeof t == "string")
        return t.replace(Ft, function(n, o, i) {
          return $ = {
            name: o,
            styles: i,
            next: $
          }, o;
        });
  }
  return Et[r] !== 1 && !br(r) && typeof t == "number" && t !== 0 ? t + "px" : t;
}, "processStyleValue");
Ot = /(var|attr|counters?|url|element|(((repeating-)?(linear|radial))|conic)-gradient)\(|(no-)?(open|close)-quote/, Tt = ["normal", "none", "initial", "inherit", "unset"], Ct = Ue, Rt = /^-ms-/, At = /-(.)/g, gr = {}, Ue = a(function(r, t) {
  if (r === "content" && (typeof t != "string" || Tt.indexOf(t) === -1 && !Ot.test(t) && (t.charAt(0) !== t.charAt(t.length - 1) || t.charAt(
    0
  ) !== '"' && t.charAt(0) !== "'")))
    throw new Error("You seem to be using a value for 'content' without quotes, try replacing it with `content: '\"" + t + "\"'`");
  var n = Ct(r, t);
  return n !== "" && !br(r) && r.indexOf("-") !== -1 && gr[r] === void 0 && (gr[r] = true, console.error("Using kebab-case for css properties in objects is not supported. Did you mean " + r.replace(Rt, "ms-").replace(At, function(o, i) {
    return i.toUpperCase();
  }) + "?")), n;
}, "processStyleValue");
var Ot;
var Tt;
var Ct;
var Rt;
var At;
var gr;
var Nt = "Component selectors can only be used in conjunction with @emotion/babel-plugin, the swc Emotion plugin, or another Emotion-aware compiler transform.";
function Ce(e7, r, t) {
  if (t == null)
    return "";
  if (t.__emotion_styles !== void 0) {
    if (t.toString() === "NO_COMPONENT_SELECTOR")
      throw new Error(Nt);
    return t;
  }
  switch (typeof t) {
    case "boolean":
      return "";
    case "object": {
      if (t.anim === 1)
        return $ = {
          name: t.name,
          styles: t.styles,
          next: $
        }, t.name;
      if (t.styles !== void 0) {
        var n = t.next;
        if (n !== void 0)
          for (; n !== void 0; )
            $ = {
              name: n.name,
              styles: n.styles,
              next: $
            }, n = n.next;
        var o = t.styles + ";";
        return t.map !== void 0 && (o += t.map), o;
      }
      return va(e7, r, t);
    }
    case "function": {
      if (e7 !== void 0) {
        var i = $, s4 = t(e7);
        return $ = i, Ce(e7, r, s4);
      } else console.error("Functions that are interpolated in css calls will be stringified.\nIf you want to have a css call based on props, create a function that returns a css call like this\nlet dynamicStyle = (props) => css`color: ${props.color}`\nIt can be called directly with props or interpolated in a styled call like this\nlet SomeComponent = styled('div')`${dynamicStyle}`");
      break;
    }
    case "string":
      var u6 = [], c = t.replace(Ft, function(f, l7, p) {
        var v7 = "animation" + u6.length;
        return u6.push("const " + v7 + " = keyframes`" + p.replace(/^@keyframes animation-\w+/, "") + "`"), "${" + v7 + "}";
      });
      u6.length && console.error("`keyframes` output got interpolated into plain string, please wrap it with `css`.\n\nInstead of doing this:\n\n" + [].concat(u6, ["`" + c + "`"]).join(`
`) + `

You should wrap it with \`css\` like this:

` + ("css`" + c + "`"));
      break;
  }
  if (r == null)
    return t;
  var d = r[t];
  return d !== void 0 ? d : t;
}
a(Ce, "handleInterpolation");
function va(e7, r, t) {
  var n = "";
  if (Array.isArray(t))
    for (var o = 0; o < t.length; o++)
      n += Ce(e7, r, t[o]) + ";";
  else
    for (var i in t) {
      var s4 = t[i];
      if (typeof s4 != "object")
        r != null && r[s4] !== void 0 ? n += i + "{" + r[s4] + "}" : St(s4) && (n += hr(i) + ":" + Ue(i, s4) + ";");
      else {
        if (i === "NO_COMPONENT_SELECTOR")
          throw new Error(Nt);
        if (Array.isArray(s4) && typeof s4[0] == "string" && (r == null || r[s4[0]] === void 0))
          for (var u6 = 0; u6 < s4.length; u6++)
            St(s4[u6]) && (n += hr(i) + ":" + Ue(i, s4[u6]) + ";");
        else {
          var c = Ce(e7, r, s4);
          switch (i) {
            case "animation":
            case "animationName": {
              n += hr(i) + ":" + c + ";";
              break;
            }
            default:
              i === "undefined" && console.error(ga), n += i + "{" + c + "}";
          }
        }
      }
    }
  return n;
}
a(va, "createStringFromObject");
var _t = /label:\s*([^\s;\n{]+)\s*(;|$)/g;
var It;
It = /\/\*#\ssourceMappingURL=data:application\/json;\S+\s+\*\//g;
var $;
var Y = a(function(r, t, n) {
  if (r.length === 1 && typeof r[0] == "object" && r[0] !== null && r[0].styles !== void 0)
    return r[0];
  var o = true, i = "";
  $ = void 0;
  var s4 = r[0];
  s4 == null || s4.raw === void 0 ? (o = false, i += Ce(n, t, s4)) : (s4[0] === void 0 && console.error(wt), i += s4[0]);
  for (var u6 = 1; u6 < r.length; u6++)
    i += Ce(n, t, r[u6]), o && (s4[u6] === void 0 && console.error(wt), i += s4[u6]);
  var c;
  i = i.replace(It, function(p) {
    return c = p, "";
  }), _t.lastIndex = 0;
  for (var d = "", f; (f = _t.exec(i)) !== null; )
    d += "-" + // $FlowFixMe we know it's not null
    f[1];
  var l7 = xt(i) + d;
  return {
    name: l7,
    styles: i,
    map: c,
    next: $,
    toString: a(function() {
      return "You have tried to stringify object returned from `css` function. It isn't supposed to be used directly (e.g. as value of the `className` prop), but rather handed to emotion so it can handle it (e.g. as value of `css` prop).";
    }, "toString")
  };
}, "serializeStyles");
var ya = a(function(r) {
  return r();
}, "syncFallback");
var kt = Re.useInsertionEffect ? Re.useInsertionEffect : false;
var ge = kt || ya;
var vr = kt || Re.useLayoutEffect;
var Er = true;
var We = {}.hasOwnProperty;
var Ae = I.createContext(
  // we're doing this to avoid preconstruct's dead code elimination in this one case
  // because this module is primarily intended for the browser and node
  // but it's also required in react native and similar environments sometimes
  // and we could have a special build just for that
  // but this is much easier and the native packages
  // might use a different theme context in the future anyway
  typeof HTMLElement < "u" ? Ve({
    key: "css"
  }) : null
);
Ae.displayName = "EmotionCacheContext";
var zt = Ae.Provider;
var J = a(function(r) {
  return (0, import_react.forwardRef)(function(t, n) {
    var o = (0, import_react.useContext)(Ae);
    return r(t, o, n);
  });
}, "withEmotionCache");
Er || (J = a(function(r) {
  return function(t) {
    var n = (0, import_react.useContext)(Ae);
    return n === null ? (n = Ve({
      key: "css"
    }), I.createElement(Ae.Provider, {
      value: n
    }, r(t, n))) : r(t, n);
  };
}, "withEmotionCache"));
var B = I.createContext({});
B.displayName = "EmotionThemeContext";
var Mt = a(function() {
  return I.useContext(B);
}, "useTheme");
var Ea = a(function(r, t) {
  if (typeof t == "function") {
    var n = t(r);
    if (n == null || typeof n != "object" || Array.isArray(n))
      throw new Error("[ThemeProvider] Please return an object from your theme function, i.e. theme={() => ({})}!");
    return n;
  }
  if (t == null || typeof t != "object" || Array.isArray(t))
    throw new Error("[ThemeProvider] Please make your theme prop a plain object");
  return j({}, r, t);
}, "getTheme");
var wa = lr(function(e7) {
  return lr(function(r) {
    return Ea(e7, r);
  });
});
var jt = a(function(r) {
  var t = I.useContext(B);
  return r.theme !== t && (t = wa(t)(r.theme)), I.createElement(B.Provider, {
    value: t
  }, r.children);
}, "ThemeProvider");
function Dt(e7) {
  var r = e7.displayName || e7.name || "Component", t = a(function(i, s4) {
    var u6 = I.useContext(B);
    return I.createElement(e7, j({
      theme: u6,
      ref: s4
    }, i));
  }, "render"), n = I.forwardRef(t);
  return n.displayName = "WithTheme(" + r + ")", yt(n, e7);
}
a(Dt, "withTheme");
var Pt = a(function(r) {
  var t = r.split(".");
  return t[t.length - 1];
}, "getLastPart");
var Sa = a(function(r) {
  var t = /^\s+at\s+([A-Za-z0-9$.]+)\s/.exec(r);
  if (t || (t = /^([A-Za-z0-9$.]+)@/.exec(r), t)) return Pt(t[1]);
}, "getFunctionNameFromStackTraceLine");
var Oa = /* @__PURE__ */ new Set(["renderWithHooks", "processChild", "finishClassComponent", "renderToString"]);
var Ta = a(function(r) {
  return r.replace(/\$/g, "-");
}, "sanitizeIdentifier");
var Ca = a(function(r) {
  if (r)
    for (var t = r.split(`
`), n = 0; n < t.length; n++) {
      var o = Sa(t[n]);
      if (o) {
        if (Oa.has(o)) break;
        if (/^[A-Z]/.test(o)) return Ta(o);
      }
    }
}, "getLabelFromStackTrace");
var yr = "__EMOTION_TYPE_PLEASE_DO_NOT_USE__";
var xr = "__EMOTION_LABEL_PLEASE_DO_NOT_USE__";
var Bt = a(
  function(r, t) {
    if (typeof t.css == "string" && // check if there is a css declaration
    t.css.indexOf(":") !== -1)
      throw new Error("Strings are not allowed as css prop values, please wrap it in a css template literal from '@emotion/react' like this: css`" + t.css + "`");
    var n = {};
    for (var o in t)
      We.call(t, o) && (n[o] = t[o]);
    if (n[yr] = r, t.css && (typeof t.css != "object" || typeof t.css.name != "string" || t.css.name.indexOf("-") === -1)) {
      var i = Ca(new Error().stack);
      i && (n[xr] = i);
    }
    return n;
  },
  "createEmotionProps"
);
var Ra = a(function(r) {
  var t = r.cache, n = r.serialized, o = r.isStringTag;
  return ee(t, n, o), ge(function() {
    return re(t, n, o);
  }), null;
}, "Insertion");
var $t = J(function(e7, r, t) {
  var n = e7.css;
  typeof n == "string" && r.registered[n] !== void 0 && (n = r.registered[n]);
  var o = e7[yr], i = [n], s4 = "";
  typeof e7.className == "string" ? s4 = he(r.registered, i, e7.className) : e7.className != null && (s4 = e7.className + " ");
  var u6 = Y(i, void 0, I.useContext(B));
  if (u6.name.indexOf("-") === -1) {
    var c = e7[xr];
    c && (u6 = Y([u6, "label:" + c + ";"]));
  }
  s4 += r.key + "-" + u6.name;
  var d = {};
  for (var f in e7)
    We.call(e7, f) && f !== "css" && f !== yr && f !== xr && (d[f] = e7[f]);
  return d.ref = t, d.className = s4, I.createElement(I.Fragment, null, I.createElement(Ra, {
    cache: r,
    serialized: u6,
    isStringTag: typeof o == "string"
  }), I.createElement(o, d));
});
$t.displayName = "EmotionCssPropInternal";
var Ht = $t;
var rs = ir(mr());
var Aa = {
  name: "@emotion/react",
  version: "11.11.4",
  main: "dist/emotion-react.cjs.js",
  module: "dist/emotion-react.esm.js",
  browser: {
    "./dist/emotion-react.esm.js": "./dist/emotion-react.browser.esm.js"
  },
  exports: {
    ".": {
      module: {
        worker: "./dist/emotion-react.worker.esm.js",
        browser: "./dist/emotion-react.browser.esm.js",
        default: "./dist/emotion-react.esm.js"
      },
      import: "./dist/emotion-react.cjs.mjs",
      default: "./dist/emotion-react.cjs.js"
    },
    "./jsx-runtime": {
      module: {
        worker: "./jsx-runtime/dist/emotion-react-jsx-runtime.worker.esm.js",
        browser: "./jsx-runtime/dist/emotion-react-jsx-runtime.browser.esm.js",
        default: "./jsx-runtime/dist/emotion-react-jsx-runtime.esm.js"
      },
      import: "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.mjs",
      default: "./jsx-runtime/dist/emotion-react-jsx-runtime.cjs.js"
    },
    "./_isolated-hnrs": {
      module: {
        worker: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.worker.esm.js",
        browser: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.browser.esm.js",
        default: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.esm.js"
      },
      import: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.mjs",
      default: "./_isolated-hnrs/dist/emotion-react-_isolated-hnrs.cjs.js"
    },
    "./jsx-dev-runtime": {
      module: {
        worker: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.worker.esm.js",
        browser: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.browser.esm.js",
        default: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.esm.js"
      },
      import: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.mjs",
      default: "./jsx-dev-runtime/dist/emotion-react-jsx-dev-runtime.cjs.js"
    },
    "./package.json": "./package.json",
    "./types/css-prop": "./types/css-prop.d.ts",
    "./macro": {
      types: {
        import: "./macro.d.mts",
        default: "./macro.d.ts"
      },
      default: "./macro.js"
    }
  },
  types: "types/index.d.ts",
  files: [
    "src",
    "dist",
    "jsx-runtime",
    "jsx-dev-runtime",
    "_isolated-hnrs",
    "types/*.d.ts",
    "macro.*"
  ],
  sideEffects: false,
  author: "Emotion Contributors",
  license: "MIT",
  scripts: {
    "test:typescript": "dtslint types"
  },
  dependencies: {
    "@babel/runtime": "^7.18.3",
    "@emotion/babel-plugin": "^11.11.0",
    "@emotion/cache": "^11.11.0",
    "@emotion/serialize": "^1.1.3",
    "@emotion/use-insertion-effect-with-fallbacks": "^1.0.1",
    "@emotion/utils": "^1.2.1",
    "@emotion/weak-memoize": "^0.3.1",
    "hoist-non-react-statics": "^3.3.1"
  },
  peerDependencies: {
    react: ">=16.8.0"
  },
  peerDependenciesMeta: {
    "@types/react": {
      optional: true
    }
  },
  devDependencies: {
    "@definitelytyped/dtslint": "0.0.112",
    "@emotion/css": "11.11.2",
    "@emotion/css-prettifier": "1.1.3",
    "@emotion/server": "11.11.0",
    "@emotion/styled": "11.11.0",
    "html-tag-names": "^1.1.2",
    react: "16.14.0",
    "svg-tag-names": "^1.1.1",
    typescript: "^4.5.5"
  },
  repository: "https://github.com/emotion-js/emotion/tree/main/packages/react",
  publishConfig: {
    access: "public"
  },
  "umd:main": "dist/emotion-react.umd.min.js",
  preconstruct: {
    entrypoints: [
      "./index.js",
      "./jsx-runtime.js",
      "./jsx-dev-runtime.js",
      "./_isolated-hnrs.js"
    ],
    umdName: "emotionReact",
    exports: {
      envConditions: [
        "browser",
        "worker"
      ],
      extra: {
        "./types/css-prop": "./types/css-prop.d.ts",
        "./macro": {
          types: {
            import: "./macro.d.mts",
            default: "./macro.d.ts"
          },
          default: "./macro.js"
        }
      }
    }
  }
};
var _a = a(function(r, t) {
  var n = arguments;
  if (t == null || !We.call(t, "css"))
    return M.createElement.apply(void 0, n);
  var o = n.length, i = new Array(o);
  i[0] = Ht, i[1] = Bt(r, t);
  for (var s4 = 2; s4 < o; s4++)
    i[s4] = n[s4];
  return M.createElement.apply(null, i);
}, "jsx");
var Vt = false;
var Wt = J(function(e7, r) {
  !Vt && // check for className as well since the user is
  // probably using the custom createElement which
  // means it will be turned into a className prop
  // $FlowFixMe I don't really want to add it to the type since it shouldn't be used
  (e7.className || e7.css) && (console.error("It looks like you're using the css prop on Global, did you mean to use the styles prop instead?"), Vt = true);
  var t = e7.styles, n = Y([t], void 0, M.useContext(B));
  if (!Er) {
    for (var o, i = n.name, s4 = n.styles, u6 = n.next; u6 !== void 0; )
      i += " " + u6.name, s4 += u6.styles, u6 = u6.next;
    var c = r.compat === true, d = r.insert("", {
      name: i,
      styles: s4
    }, r.sheet, c);
    return c ? null : M.createElement("style", (o = {}, o["data-emotion"] = r.key + "-global " + i, o.dangerouslySetInnerHTML = {
      __html: d
    }, o.nonce = r.sheet.nonce, o));
  }
  var f = M.useRef();
  return vr(function() {
    var l7 = r.key + "-global", p = new r.sheet.constructor({
      key: l7,
      nonce: r.sheet.nonce,
      container: r.sheet.container,
      speedy: r.sheet.isSpeedy
    }), v7 = false, h7 = document.querySelector('style[data-emotion="' + l7 + " " + n.name + '"]');
    return r.sheet.tags.length && (p.before = r.sheet.tags[0]), h7 !== null && (v7 = true, h7.setAttribute("data-emotion", l7), p.hydrate([h7])), f.current = [p, v7], function() {
      p.flush();
    };
  }, [r]), vr(function() {
    var l7 = f.current, p = l7[0], v7 = l7[1];
    if (v7) {
      l7[1] = false;
      return;
    }
    if (n.next !== void 0 && re(r, n.next, true), p.tags.length) {
      var h7 = p.tags[p.tags.length - 1].nextElementSibling;
      p.before = h7, p.flush();
    }
    r.insert("", n, p, false);
  }, [r, n.name]), null;
});
Wt.displayName = "EmotionGlobal";
function _e() {
  for (var e7 = arguments.length, r = new Array(e7), t = 0; t < e7; t++)
    r[t] = arguments[t];
  return Y(r);
}
a(_e, "css");
var be = a(function() {
  var r = _e.apply(void 0, arguments), t = "animation-" + r.name;
  return {
    name: t,
    styles: "@keyframes " + t + "{" + r.styles + "}",
    anim: 1,
    toString: a(function() {
      return "_EMO_" + this.name + "_" + this.styles + "_EMO_";
    }, "toString")
  };
}, "keyframes");
var Fa = a(function e(r) {
  for (var t = r.length, n = 0, o = ""; n < t; n++) {
    var i = r[n];
    if (i != null) {
      var s4 = void 0;
      switch (typeof i) {
        case "boolean":
          break;
        case "object": {
          if (Array.isArray(i))
            s4 = e(i);
          else {
            i.styles !== void 0 && i.name !== void 0 && console.error("You have passed styles created with `css` from `@emotion/react` package to the `cx`.\n`cx` is meant to compose class names (strings) so you should convert those styles to a class name by passing them to the `css` received from <ClassNames/> component."), s4 = "";
            for (var u6 in i)
              i[u6] && u6 && (s4 && (s4 += " "), s4 += u6);
          }
          break;
        }
        default:
          s4 = i;
      }
      s4 && (o && (o += " "), o += s4);
    }
  }
  return o;
}, "classnames");
function Na(e7, r, t) {
  var n = [], o = he(e7, n, t);
  return n.length < 2 ? t : o + r(n);
}
a(Na, "merge");
var Ia = a(function(r) {
  var t = r.cache, n = r.serializedArr;
  return ge(function() {
    for (var o = 0; o < n.length; o++)
      re(t, n[o], false);
  }), null;
}, "Insertion");
var Yt = J(function(e7, r) {
  var t = false, n = [], o = a(function() {
    if (t)
      throw new Error("css can only be used during render");
    for (var d = arguments.length, f = new Array(d), l7 = 0; l7 < d; l7++)
      f[l7] = arguments[l7];
    var p = Y(f, r.registered);
    return n.push(p), ee(r, p, false), r.key + "-" + p.name;
  }, "css"), i = a(function() {
    if (t)
      throw new Error("cx can only be used during render");
    for (var d = arguments.length, f = new Array(d), l7 = 0; l7 < d; l7++)
      f[l7] = arguments[l7];
    return Na(r.registered, o, Fa(f));
  }, "cx"), s4 = {
    css: o,
    cx: i,
    theme: M.useContext(B)
  }, u6 = e7.children(s4);
  return t = true, M.createElement(M.Fragment, null, M.createElement(Ia, {
    cache: r,
    serializedArr: n
  }), u6);
});
Yt.displayName = "EmotionClassNames";
wr = true, Ut = typeof jest < "u" || typeof vi < "u", wr && !Ut && (Sr = // $FlowIgnore
typeof globalThis < "u" ? globalThis : wr ? window : global, Or = "__EMOTION_REACT_" + Aa.version.split(".")[0] + "__", Sr[Or] && console.warn(
  "You are loading @emotion/react when it is already loaded. Running multiple instances may cause problems. This can happen if multiple versions are used, or if multiple builds of the same version are used."
), Sr[Or] = true);
var wr;
var Ut;
var Sr;
var Or;
var ka = sr;
var Pa = a(function(r) {
  return r !== "theme";
}, "testOmitPropsOnComponent");
var Gt = a(function(r) {
  return typeof r == "string" && // 96 is one less than the char code
  // for "a" so this is checking that
  // it's a lowercase character
  r.charCodeAt(0) > 96 ? ka : Pa;
}, "getDefaultShouldForwardProp");
var qt = a(function(r, t, n) {
  var o;
  if (t) {
    var i = t.shouldForwardProp;
    o = r.__emotion_forwardProp && i ? function(s4) {
      return r.__emotion_forwardProp(s4) && i(s4);
    } : i;
  }
  return typeof o != "function" && n && (o = r.__emotion_forwardProp), o;
}, "composeShouldForwardProps");
var Jt = `You have illegal escape sequence in your template literal, most likely inside content's property value.
Because you write your CSS inside a JavaScript string you actually have to do double escaping, so for example "content: '\\00d7';" should become "content: '\\\\00d7';".
You can read more about this here:
https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Template_literals#ES2018_revision_of_illegal_escape_sequences`;
var La = a(
  function(r) {
    var t = r.cache, n = r.serialized, o = r.isStringTag;
    return ee(t, n, o), ge(function() {
      return re(t, n, o);
    }), null;
  },
  "Insertion"
);
var Zt = a(function e2(r, t) {
  if (r === void 0)
    throw new Error(`You are trying to create a styled element with an undefined component.
You may have forgotten to import it.`);
  var n = r.__emotion_real === r, o = n && r.__emotion_base || r, i, s4;
  t !== void 0 && (i = t.label, s4 = t.target);
  var u6 = qt(r, t, n), c = u6 || Gt(o), d = !c("as");
  return function() {
    var f = arguments, l7 = n && r.__emotion_styles !== void 0 ? r.__emotion_styles.slice(0) : [];
    if (i !== void 0 && l7.push("label:" + i + ";"), f[0] == null || f[0].raw === void 0)
      l7.push.apply(l7, f);
    else {
      f[0][0] === void 0 && console.error(Jt), l7.push(f[0][0]);
      for (var p = f.length, v7 = 1; v7 < p; v7++)
        f[0][v7] === void 0 && console.error(Jt), l7.push(f[v7], f[0][v7]);
    }
    var h7 = J(function(m, y, x7) {
      var E7 = d && m.as || o, A = "", T = [], C7 = m;
      if (m.theme == null) {
        C7 = {};
        for (var N in m)
          C7[N] = m[N];
        C7.theme = Z.useContext(B);
      }
      typeof m.className == "string" ? A = he(y.registered, T, m.className) : m.className != null && (A = m.className + " ");
      var S4 = Y(l7.concat(T), y.registered, C7);
      A += y.key + "-" + S4.name, s4 !== void 0 && (A += " " + s4);
      var xe2 = d && u6 === void 0 ? Gt(E7) : c, W = {};
      for (var G in m)
        d && G === "as" || // $FlowFixMe
        xe2(G) && (W[G] = m[G]);
      return W.className = A, W.ref = x7, Z.createElement(Z.Fragment, null, Z.createElement(La, {
        cache: y,
        serialized: S4,
        isStringTag: typeof E7 == "string"
      }), Z.createElement(E7, W));
    });
    return h7.displayName = i !== void 0 ? i : "Styled(" + (typeof o == "string" ? o : o.displayName || o.name || "Component") + ")", h7.defaultProps = r.defaultProps, h7.__emotion_real = h7, h7.__emotion_base = o, h7.__emotion_styles = l7, h7.__emotion_forwardProp = u6, Object.defineProperty(
      h7,
      "toString",
      {
        value: a(function() {
          return s4 === void 0 ? "NO_COMPONENT_SELECTOR" : "." + s4;
        }, "value")
      }
    ), h7.withComponent = function(m, y) {
      return e2(m, j({}, t, y, {
        shouldForwardProp: qt(h7, y, true)
      })).apply(void 0, l7);
    }, h7;
  };
}, "createStyled");
var za = [
  "a",
  "abbr",
  "address",
  "area",
  "article",
  "aside",
  "audio",
  "b",
  "base",
  "bdi",
  "bdo",
  "big",
  "blockquote",
  "body",
  "br",
  "button",
  "canvas",
  "caption",
  "cite",
  "code",
  "col",
  "colgroup",
  "data",
  "datalist",
  "dd",
  "del",
  "details",
  "dfn",
  "dialog",
  "div",
  "dl",
  "dt",
  "em",
  "embed",
  "fieldset",
  "figcaption",
  "figure",
  "footer",
  "form",
  "h1",
  "h2",
  "h3",
  "h4",
  "h5",
  "h6",
  "head",
  "header",
  "hgroup",
  "hr",
  "html",
  "i",
  "iframe",
  "img",
  "input",
  "ins",
  "kbd",
  "keygen",
  "label",
  "legend",
  "li",
  "link",
  "main",
  "map",
  "mark",
  "marquee",
  "menu",
  "menuitem",
  "meta",
  "meter",
  "nav",
  "noscript",
  "object",
  "ol",
  "optgroup",
  "option",
  "output",
  "p",
  "param",
  "picture",
  "pre",
  "progress",
  "q",
  "rp",
  "rt",
  "ruby",
  "s",
  "samp",
  "script",
  "section",
  "select",
  "small",
  "source",
  "span",
  "strong",
  "style",
  "sub",
  "summary",
  "sup",
  "table",
  "tbody",
  "td",
  "textarea",
  "tfoot",
  "th",
  "thead",
  "time",
  "title",
  "tr",
  "track",
  "u",
  "ul",
  "var",
  "video",
  "wbr",
  // SVG
  "circle",
  "clipPath",
  "defs",
  "ellipse",
  "foreignObject",
  "g",
  "image",
  "line",
  "linearGradient",
  "mask",
  "path",
  "pattern",
  "polygon",
  "polyline",
  "radialGradient",
  "rect",
  "stop",
  "svg",
  "text",
  "tspan"
];
var Tr = Zt.bind();
za.forEach(function(e7) {
  Tr[e7] = Tr(e7);
});
function Kt(e7) {
  if (e7 === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e7;
}
a(Kt, "_assertThisInitialized");
function K(e7, r) {
  return K = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(t, n) {
    return t.__proto__ = n, t;
  }, K(e7, r);
}
a(K, "_setPrototypeOf");
function Xt(e7, r) {
  e7.prototype = Object.create(r.prototype), e7.prototype.constructor = e7, K(e7, r);
}
a(Xt, "_inheritsLoose");
function Ye(e7) {
  return Ye = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(r) {
    return r.__proto__ || Object.getPrototypeOf(r);
  }, Ye(e7);
}
a(Ye, "_getPrototypeOf");
function Qt(e7) {
  try {
    return Function.toString.call(e7).indexOf("[native code]") !== -1;
  } catch {
    return typeof e7 == "function";
  }
}
a(Qt, "_isNativeFunction");
function Cr() {
  try {
    var e7 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch {
  }
  return (Cr = a(function() {
    return !!e7;
  }, "_isNativeReflectConstruct"))();
}
a(Cr, "_isNativeReflectConstruct");
function en(e7, r, t) {
  if (Cr()) return Reflect.construct.apply(null, arguments);
  var n = [null];
  n.push.apply(n, r);
  var o = new (e7.bind.apply(e7, n))();
  return t && K(o, t.prototype), o;
}
a(en, "_construct");
function Ge(e7) {
  var r = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
  return Ge = a(function(n) {
    if (n === null || !Qt(n)) return n;
    if (typeof n != "function") throw new TypeError("Super expression must either be null or a function");
    if (r !== void 0) {
      if (r.has(n)) return r.get(n);
      r.set(n, o);
    }
    function o() {
      return en(n, arguments, Ye(this).constructor);
    }
    return a(o, "Wrapper"), o.prototype = Object.create(n.prototype, {
      constructor: {
        value: o,
        enumerable: false,
        writable: true,
        configurable: true
      }
    }), K(o, n);
  }, "_wrapNativeSuper"), Ge(e7);
}
a(Ge, "_wrapNativeSuper");
var Ma = {
  1: `Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).

`,
  2: `Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).

`,
  3: `Passed an incorrect argument to a color function, please pass a string representation of a color.

`,
  4: `Couldn't generate valid rgb string from %s, it returned %s.

`,
  5: `Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.

`,
  6: `Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).

`,
  7: `Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).

`,
  8: `Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.

`,
  9: `Please provide a number of steps to the modularScale helper.

`,
  10: `Please pass a number or one of the predefined scales to the modularScale helper as the ratio.

`,
  11: `Invalid value passed as base to modularScale, expected number or em string but got "%s"

`,
  12: `Expected a string ending in "px" or a number passed as the first argument to %s(), got "%s" instead.

`,
  13: `Expected a string ending in "px" or a number passed as the second argument to %s(), got "%s" instead.

`,
  14: `Passed invalid pixel value ("%s") to %s(), please pass a value like "12px" or 12.

`,
  15: `Passed invalid base value ("%s") to %s(), please pass a value like "12px" or 12.

`,
  16: `You must provide a template to this method.

`,
  17: `You passed an unsupported selector state to this method.

`,
  18: `minScreen and maxScreen must be provided as stringified numbers with the same units.

`,
  19: `fromSize and toSize must be provided as stringified numbers with the same units.

`,
  20: `expects either an array of objects or a single object with the properties prop, fromSize, and toSize.

`,
  21: "expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
  22: "expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
  23: `fontFace expects a name of a font-family.

`,
  24: `fontFace expects either the path to the font file(s) or a name of a local copy.

`,
  25: `fontFace expects localFonts to be an array.

`,
  26: `fontFace expects fileFormats to be an array.

`,
  27: `radialGradient requries at least 2 color-stops to properly render.

`,
  28: `Please supply a filename to retinaImage() as the first argument.

`,
  29: `Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.

`,
  30: "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
  31: `The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation

`,
  32: `To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])
To pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')

`,
  33: `The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation

`,
  34: `borderRadius expects a radius value as a string or number as the second argument.

`,
  35: `borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.

`,
  36: `Property must be a string value.

`,
  37: `Syntax Error at %s.

`,
  38: `Formula contains a function that needs parentheses at %s.

`,
  39: `Formula is missing closing parenthesis at %s.

`,
  40: `Formula has too many closing parentheses at %s.

`,
  41: `All values in a formula must have the same unit or be unitless.

`,
  42: `Please provide a number of steps to the modularScale helper.

`,
  43: `Please pass a number or one of the predefined scales to the modularScale helper as the ratio.

`,
  44: `Invalid value passed as base to modularScale, expected number or em/rem string but got %s.

`,
  45: `Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.

`,
  46: `Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.

`,
  47: `minScreen and maxScreen must be provided as stringified numbers with the same units.

`,
  48: `fromSize and toSize must be provided as stringified numbers with the same units.

`,
  49: `Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.

`,
  50: `Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.

`,
  51: `Expects the first argument object to have the properties prop, fromSize, and toSize.

`,
  52: `fontFace expects either the path to the font file(s) or a name of a local copy.

`,
  53: `fontFace expects localFonts to be an array.

`,
  54: `fontFace expects fileFormats to be an array.

`,
  55: `fontFace expects a name of a font-family.

`,
  56: `linearGradient requries at least 2 color-stops to properly render.

`,
  57: `radialGradient requries at least 2 color-stops to properly render.

`,
  58: `Please supply a filename to retinaImage() as the first argument.

`,
  59: `Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.

`,
  60: "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
  61: `Property must be a string value.

`,
  62: `borderRadius expects a radius value as a string or number as the second argument.

`,
  63: `borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.

`,
  64: `The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.

`,
  65: `To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').

`,
  66: `The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.

`,
  67: `You must provide a template to this method.

`,
  68: `You passed an unsupported selector state to this method.

`,
  69: `Expected a string ending in "px" or a number passed as the first argument to %s(), got %s instead.

`,
  70: `Expected a string ending in "px" or a number passed as the second argument to %s(), got %s instead.

`,
  71: `Passed invalid pixel value %s to %s(), please pass a value like "12px" or 12.

`,
  72: `Passed invalid base value %s to %s(), please pass a value like "12px" or 12.

`,
  73: `Please provide a valid CSS variable.

`,
  74: `CSS variable not found and no default was provided.

`,
  75: `important requires a valid style object, got a %s instead.

`,
  76: `fromSize and toSize must be provided as stringified numbers with the same units as minScreen and maxScreen.

`,
  77: `remToPx expects a value in "rem" but you provided it in "%s".

`,
  78: `base must be set in "px" or "%" but you set it in "%s".
`
};
function ja() {
  for (var e7 = arguments.length, r = new Array(e7), t = 0; t < e7; t++)
    r[t] = arguments[t];
  var n = r[0], o = [], i;
  for (i = 1; i < r.length; i += 1)
    o.push(r[i]);
  return o.forEach(function(s4) {
    n = n.replace(/%[a-z]/, s4);
  }), n;
}
a(ja, "format");
var V = function(e7) {
  Xt(r, e7);
  function r(t) {
    for (var n, o = arguments.length, i = new Array(o > 1 ? o - 1 : 0), s4 = 1; s4 < o; s4++)
      i[s4 - 1] = arguments[s4];
    return n = e7.call(this, ja.apply(void 0, [Ma[t]].concat(i))) || this, Kt(n);
  }
  return a(r, "PolishedError"), r;
}(Ge(Error));
function Rr(e7) {
  return Math.round(e7 * 255);
}
a(Rr, "colorToInt");
function Da(e7, r, t) {
  return Rr(e7) + "," + Rr(r) + "," + Rr(t);
}
a(Da, "convertToInt");
function Fe(e7, r, t, n) {
  if (n === void 0 && (n = Da), r === 0)
    return n(t, t, t);
  var o = (e7 % 360 + 360) % 360 / 60, i = (1 - Math.abs(2 * t - 1)) * r, s4 = i * (1 - Math.abs(o % 2 - 1)), u6 = 0, c = 0, d = 0;
  o >= 0 && o < 1 ? (u6 = i, c = s4) : o >= 1 && o < 2 ? (u6 = s4, c = i) : o >= 2 && o < 3 ? (c = i, d = s4) : o >= 3 && o < 4 ? (c = s4, d = i) : o >= 4 && o < 5 ? (u6 = s4, d = i) : o >= 5 && o < 6 && (u6 = i, d = s4);
  var f = t - i / 2, l7 = u6 + f, p = c + f, v7 = d + f;
  return n(l7, p, v7);
}
a(Fe, "hslToRgb");
var rn = {
  aliceblue: "f0f8ff",
  antiquewhite: "faebd7",
  aqua: "00ffff",
  aquamarine: "7fffd4",
  azure: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "000",
  blanchedalmond: "ffebcd",
  blue: "0000ff",
  blueviolet: "8a2be2",
  brown: "a52a2a",
  burlywood: "deb887",
  cadetblue: "5f9ea0",
  chartreuse: "7fff00",
  chocolate: "d2691e",
  coral: "ff7f50",
  cornflowerblue: "6495ed",
  cornsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "00ffff",
  darkblue: "00008b",
  darkcyan: "008b8b",
  darkgoldenrod: "b8860b",
  darkgray: "a9a9a9",
  darkgreen: "006400",
  darkgrey: "a9a9a9",
  darkkhaki: "bdb76b",
  darkmagenta: "8b008b",
  darkolivegreen: "556b2f",
  darkorange: "ff8c00",
  darkorchid: "9932cc",
  darkred: "8b0000",
  darksalmon: "e9967a",
  darkseagreen: "8fbc8f",
  darkslateblue: "483d8b",
  darkslategray: "2f4f4f",
  darkslategrey: "2f4f4f",
  darkturquoise: "00ced1",
  darkviolet: "9400d3",
  deeppink: "ff1493",
  deepskyblue: "00bfff",
  dimgray: "696969",
  dimgrey: "696969",
  dodgerblue: "1e90ff",
  firebrick: "b22222",
  floralwhite: "fffaf0",
  forestgreen: "228b22",
  fuchsia: "ff00ff",
  gainsboro: "dcdcdc",
  ghostwhite: "f8f8ff",
  gold: "ffd700",
  goldenrod: "daa520",
  gray: "808080",
  green: "008000",
  greenyellow: "adff2f",
  grey: "808080",
  honeydew: "f0fff0",
  hotpink: "ff69b4",
  indianred: "cd5c5c",
  indigo: "4b0082",
  ivory: "fffff0",
  khaki: "f0e68c",
  lavender: "e6e6fa",
  lavenderblush: "fff0f5",
  lawngreen: "7cfc00",
  lemonchiffon: "fffacd",
  lightblue: "add8e6",
  lightcoral: "f08080",
  lightcyan: "e0ffff",
  lightgoldenrodyellow: "fafad2",
  lightgray: "d3d3d3",
  lightgreen: "90ee90",
  lightgrey: "d3d3d3",
  lightpink: "ffb6c1",
  lightsalmon: "ffa07a",
  lightseagreen: "20b2aa",
  lightskyblue: "87cefa",
  lightslategray: "789",
  lightslategrey: "789",
  lightsteelblue: "b0c4de",
  lightyellow: "ffffe0",
  lime: "0f0",
  limegreen: "32cd32",
  linen: "faf0e6",
  magenta: "f0f",
  maroon: "800000",
  mediumaquamarine: "66cdaa",
  mediumblue: "0000cd",
  mediumorchid: "ba55d3",
  mediumpurple: "9370db",
  mediumseagreen: "3cb371",
  mediumslateblue: "7b68ee",
  mediumspringgreen: "00fa9a",
  mediumturquoise: "48d1cc",
  mediumvioletred: "c71585",
  midnightblue: "191970",
  mintcream: "f5fffa",
  mistyrose: "ffe4e1",
  moccasin: "ffe4b5",
  navajowhite: "ffdead",
  navy: "000080",
  oldlace: "fdf5e6",
  olive: "808000",
  olivedrab: "6b8e23",
  orange: "ffa500",
  orangered: "ff4500",
  orchid: "da70d6",
  palegoldenrod: "eee8aa",
  palegreen: "98fb98",
  paleturquoise: "afeeee",
  palevioletred: "db7093",
  papayawhip: "ffefd5",
  peachpuff: "ffdab9",
  peru: "cd853f",
  pink: "ffc0cb",
  plum: "dda0dd",
  powderblue: "b0e0e6",
  purple: "800080",
  rebeccapurple: "639",
  red: "f00",
  rosybrown: "bc8f8f",
  royalblue: "4169e1",
  saddlebrown: "8b4513",
  salmon: "fa8072",
  sandybrown: "f4a460",
  seagreen: "2e8b57",
  seashell: "fff5ee",
  sienna: "a0522d",
  silver: "c0c0c0",
  skyblue: "87ceeb",
  slateblue: "6a5acd",
  slategray: "708090",
  slategrey: "708090",
  snow: "fffafa",
  springgreen: "00ff7f",
  steelblue: "4682b4",
  tan: "d2b48c",
  teal: "008080",
  thistle: "d8bfd8",
  tomato: "ff6347",
  turquoise: "40e0d0",
  violet: "ee82ee",
  wheat: "f5deb3",
  white: "fff",
  whitesmoke: "f5f5f5",
  yellow: "ff0",
  yellowgreen: "9acd32"
};
function Ba(e7) {
  if (typeof e7 != "string") return e7;
  var r = e7.toLowerCase();
  return rn[r] ? "#" + rn[r] : e7;
}
a(Ba, "nameToHex");
var $a = /^#[a-fA-F0-9]{6}$/;
var Ha = /^#[a-fA-F0-9]{8}$/;
var Va = /^#[a-fA-F0-9]{3}$/;
var Ua = /^#[a-fA-F0-9]{4}$/;
var Ar = /^rgb\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*\)$/i;
var Wa = /^rgb(?:a)?\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;
var Ya = /^hsl\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i;
var Ga = /^hsl(?:a)?\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;
function Je(e7) {
  if (typeof e7 != "string")
    throw new V(3);
  var r = Ba(e7);
  if (r.match($a))
    return {
      red: parseInt("" + r[1] + r[2], 16),
      green: parseInt("" + r[3] + r[4], 16),
      blue: parseInt("" + r[5] + r[6], 16)
    };
  if (r.match(Ha)) {
    var t = parseFloat((parseInt("" + r[7] + r[8], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + r[1] + r[2], 16),
      green: parseInt("" + r[3] + r[4], 16),
      blue: parseInt("" + r[5] + r[6], 16),
      alpha: t
    };
  }
  if (r.match(Va))
    return {
      red: parseInt("" + r[1] + r[1], 16),
      green: parseInt("" + r[2] + r[2], 16),
      blue: parseInt("" + r[3] + r[3], 16)
    };
  if (r.match(Ua)) {
    var n = parseFloat((parseInt("" + r[4] + r[4], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + r[1] + r[1], 16),
      green: parseInt("" + r[2] + r[2], 16),
      blue: parseInt("" + r[3] + r[3], 16),
      alpha: n
    };
  }
  var o = Ar.exec(r);
  if (o)
    return {
      red: parseInt("" + o[1], 10),
      green: parseInt("" + o[2], 10),
      blue: parseInt("" + o[3], 10)
    };
  var i = Wa.exec(r.substring(0, 50));
  if (i)
    return {
      red: parseInt("" + i[1], 10),
      green: parseInt("" + i[2], 10),
      blue: parseInt("" + i[3], 10),
      alpha: parseFloat("" + i[4]) > 1 ? parseFloat("" + i[4]) / 100 : parseFloat("" + i[4])
    };
  var s4 = Ya.exec(r);
  if (s4) {
    var u6 = parseInt("" + s4[1], 10), c = parseInt("" + s4[2], 10) / 100, d = parseInt("" + s4[3], 10) / 100, f = "rgb(" + Fe(u6, c, d) + ")", l7 = Ar.exec(f);
    if (!l7)
      throw new V(4, r, f);
    return {
      red: parseInt("" + l7[1], 10),
      green: parseInt("" + l7[2], 10),
      blue: parseInt("" + l7[3], 10)
    };
  }
  var p = Ga.exec(r.substring(0, 50));
  if (p) {
    var v7 = parseInt("" + p[1], 10), h7 = parseInt("" + p[2], 10) / 100, m = parseInt("" + p[3], 10) / 100, y = "rgb(" + Fe(v7, h7, m) + ")", x7 = Ar.exec(y);
    if (!x7)
      throw new V(4, r, y);
    return {
      red: parseInt("" + x7[1], 10),
      green: parseInt("" + x7[2], 10),
      blue: parseInt("" + x7[3], 10),
      alpha: parseFloat("" + p[4]) > 1 ? parseFloat("" + p[4]) / 100 : parseFloat("" + p[4])
    };
  }
  throw new V(5);
}
a(Je, "parseToRgb");
function qa(e7) {
  var r = e7.red / 255, t = e7.green / 255, n = e7.blue / 255, o = Math.max(r, t, n), i = Math.min(r, t, n), s4 = (o + i) / 2;
  if (o === i)
    return e7.alpha !== void 0 ? {
      hue: 0,
      saturation: 0,
      lightness: s4,
      alpha: e7.alpha
    } : {
      hue: 0,
      saturation: 0,
      lightness: s4
    };
  var u6, c = o - i, d = s4 > 0.5 ? c / (2 - o - i) : c / (o + i);
  switch (o) {
    case r:
      u6 = (t - n) / c + (t < n ? 6 : 0);
      break;
    case t:
      u6 = (n - r) / c + 2;
      break;
    default:
      u6 = (r - t) / c + 4;
      break;
  }
  return u6 *= 60, e7.alpha !== void 0 ? {
    hue: u6,
    saturation: d,
    lightness: s4,
    alpha: e7.alpha
  } : {
    hue: u6,
    saturation: d,
    lightness: s4
  };
}
a(qa, "rgbToHsl");
function tn(e7) {
  return qa(Je(e7));
}
a(tn, "parseToHsl");
var Ja = a(function(r) {
  return r.length === 7 && r[1] === r[2] && r[3] === r[4] && r[5] === r[6] ? "#" + r[1] + r[3] + r[5] : r;
}, "reduceHexValue");
var Fr = Ja;
function te(e7) {
  var r = e7.toString(16);
  return r.length === 1 ? "0" + r : r;
}
a(te, "numberToHex");
function _r(e7) {
  return te(Math.round(e7 * 255));
}
a(_r, "colorToHex");
function Za(e7, r, t) {
  return Fr("#" + _r(e7) + _r(r) + _r(t));
}
a(Za, "convertToHex");
function qe(e7, r, t) {
  return Fe(e7, r, t, Za);
}
a(qe, "hslToHex");
function Ka(e7, r, t) {
  if (typeof e7 == "number" && typeof r == "number" && typeof t == "number")
    return qe(e7, r, t);
  if (typeof e7 == "object" && r === void 0 && t === void 0)
    return qe(e7.hue, e7.saturation, e7.lightness);
  throw new V(1);
}
a(Ka, "hsl");
function Xa(e7, r, t, n) {
  if (typeof e7 == "number" && typeof r == "number" && typeof t == "number" && typeof n == "number")
    return n >= 1 ? qe(e7, r, t) : "rgba(" + Fe(e7, r, t) + "," + n + ")";
  if (typeof e7 == "object" && r === void 0 && t === void 0 && n === void 0)
    return e7.alpha >= 1 ? qe(e7.hue, e7.saturation, e7.lightness) : "rgba(" + Fe(e7.hue, e7.saturation, e7.lightness) + "," + e7.alpha + ")";
  throw new V(2);
}
a(Xa, "hsla");
function Nr(e7, r, t) {
  if (typeof e7 == "number" && typeof r == "number" && typeof t == "number")
    return Fr("#" + te(e7) + te(r) + te(t));
  if (typeof e7 == "object" && r === void 0 && t === void 0)
    return Fr("#" + te(e7.red) + te(e7.green) + te(e7.blue));
  throw new V(6);
}
a(Nr, "rgb");
function ve(e7, r, t, n) {
  if (typeof e7 == "string" && typeof r == "number") {
    var o = Je(e7);
    return "rgba(" + o.red + "," + o.green + "," + o.blue + "," + r + ")";
  } else {
    if (typeof e7 == "number" && typeof r == "number" && typeof t == "number" && typeof n == "number")
      return n >= 1 ? Nr(e7, r, t) : "rgba(" + e7 + "," + r + "," + t + "," + n + ")";
    if (typeof e7 == "object" && r === void 0 && t === void 0 && n === void 0)
      return e7.alpha >= 1 ? Nr(e7.red, e7.green, e7.blue) : "rgba(" + e7.red + "," + e7.green + "," + e7.blue + "," + e7.alpha + ")";
  }
  throw new V(7);
}
a(ve, "rgba");
var Qa = a(function(r) {
  return typeof r.red == "number" && typeof r.green == "number" && typeof r.blue == "number" && (typeof r.alpha != "number" || typeof r.alpha > "u");
}, "isRgb");
var eo = a(function(r) {
  return typeof r.red == "number" && typeof r.green == "number" && typeof r.blue == "number" && typeof r.alpha == "number";
}, "isRgba");
var ro = a(function(r) {
  return typeof r.hue == "number" && typeof r.saturation == "number" && typeof r.lightness == "number" && (typeof r.alpha != "number" || typeof r.alpha > "u");
}, "isHsl");
var to = a(function(r) {
  return typeof r.hue == "number" && typeof r.saturation == "number" && typeof r.lightness == "number" && typeof r.alpha == "number";
}, "isHsla");
function nn(e7) {
  if (typeof e7 != "object") throw new V(8);
  if (eo(e7)) return ve(e7);
  if (Qa(e7)) return Nr(e7);
  if (to(e7)) return Xa(e7);
  if (ro(e7)) return Ka(e7);
  throw new V(8);
}
a(nn, "toColorString");
function an(e7, r, t) {
  return a(function() {
    var o = t.concat(Array.prototype.slice.call(arguments));
    return o.length >= r ? e7.apply(this, o) : an(e7, r, o);
  }, "fn");
}
a(an, "curried");
function Ze(e7) {
  return an(e7, e7.length, []);
}
a(Ze, "curry");
function Ke(e7, r, t) {
  return Math.max(e7, Math.min(r, t));
}
a(Ke, "guard");
function no(e7, r) {
  if (r === "transparent") return r;
  var t = tn(r);
  return nn(j({}, t, {
    lightness: Ke(0, 1, t.lightness - parseFloat(e7))
  }));
}
a(no, "darken");
var ao = Ze(no);
var on = ao;
function oo(e7, r) {
  if (r === "transparent") return r;
  var t = tn(r);
  return nn(j({}, t, {
    lightness: Ke(0, 1, t.lightness + parseFloat(e7))
  }));
}
a(oo, "lighten");
var io = Ze(oo);
var sn = io;
function so(e7, r) {
  if (r === "transparent") return r;
  var t = Je(r), n = typeof t.alpha == "number" ? t.alpha : 1, o = j({}, t, {
    alpha: Ke(0, 1, (n * 100 + parseFloat(e7) * 100) / 100)
  });
  return ve(o);
}
a(so, "opacify");
var uo = Ze(so);
var un = uo;
function co(e7, r) {
  if (r === "transparent") return r;
  var t = Je(r), n = typeof t.alpha == "number" ? t.alpha : 1, o = j({}, t, {
    alpha: Ke(0, 1, +(n * 100 - parseFloat(e7) * 100).toFixed(2) / 100)
  });
  return ve(o);
}
a(co, "transparentize");
var fo = Ze(co);
var cn = fo;
var g = {
  // Official color palette
  primary: "#FF4785",
  // coral
  secondary: "#029CFD",
  // ocean
  tertiary: "#FAFBFC",
  ancillary: "#22a699",
  // Complimentary
  orange: "#FC521F",
  gold: "#FFAE00",
  green: "#66BF3C",
  seafoam: "#37D5D3",
  purple: "#6F2CAC",
  ultraviolet: "#2A0481",
  // Monochrome
  lightest: "#FFFFFF",
  lighter: "#F7FAFC",
  light: "#EEF3F6",
  mediumlight: "#ECF4F9",
  medium: "#D9E8F2",
  mediumdark: "#73828C",
  dark: "#5C6870",
  darker: "#454E54",
  darkest: "#2E3438",
  // For borders
  border: "hsla(203, 50%, 30%, 0.15)",
  // Status
  positive: "#66BF3C",
  negative: "#FF4400",
  warning: "#E69D00",
  critical: "#FFFFFF",
  // Text
  defaultText: "#2E3438",
  inverseText: "#FFFFFF",
  positiveText: "#448028",
  negativeText: "#D43900",
  warningText: "#A15C20"
};
var U = {
  app: "#F6F9FC",
  bar: g.lightest,
  content: g.lightest,
  preview: g.lightest,
  gridCellSize: 10,
  hoverable: cn(0.9, g.secondary),
  // hover state for items in a list
  // Notification, error, and warning backgrounds
  positive: "#E1FFD4",
  negative: "#FEDED2",
  warning: "#FFF5CF",
  critical: "#FF4400"
};
var H = {
  fonts: {
    base: [
      '"Nunito Sans"',
      "-apple-system",
      '".SFNSText-Regular"',
      '"San Francisco"',
      "BlinkMacSystemFont",
      '"Segoe UI"',
      '"Helvetica Neue"',
      "Helvetica",
      "Arial",
      "sans-serif"
    ].join(", "),
    mono: [
      "ui-monospace",
      "Menlo",
      "Monaco",
      '"Roboto Mono"',
      '"Oxygen Mono"',
      '"Ubuntu Monospace"',
      '"Source Code Pro"',
      '"Droid Sans Mono"',
      '"Courier New"',
      "monospace"
    ].join(", ")
  },
  weight: {
    regular: 400,
    bold: 700
  },
  size: {
    s1: 12,
    s2: 14,
    s3: 16,
    m1: 20,
    m2: 24,
    m3: 28,
    l1: 32,
    l2: 40,
    l3: 48,
    code: 90
  }
};
var kr = ir(ln(), 1);
var dn = (0, kr.default)(1)(
  ({ typography: e7 }) => ({
    body: {
      fontFamily: e7.fonts.base,
      fontSize: e7.size.s3,
      margin: 0,
      WebkitFontSmoothing: "antialiased",
      MozOsxFontSmoothing: "grayscale",
      WebkitTapHighlightColor: "rgba(0, 0, 0, 0)",
      WebkitOverflowScrolling: "touch"
    },
    "*": {
      boxSizing: "border-box"
    },
    "h1, h2, h3, h4, h5, h6": {
      fontWeight: e7.weight.regular,
      margin: 0,
      padding: 0
    },
    "button, input, textarea, select": {
      fontFamily: "inherit",
      fontSize: "inherit",
      boxSizing: "border-box"
    },
    sub: {
      fontSize: "0.8em",
      bottom: "-0.2em"
    },
    sup: {
      fontSize: "0.8em",
      top: "-0.2em"
    },
    "b, strong": {
      fontWeight: e7.weight.bold
    },
    hr: {
      border: "none",
      borderTop: "1px solid silver",
      clear: "both",
      marginBottom: "1.25rem"
    },
    code: {
      fontFamily: e7.fonts.mono,
      WebkitFontSmoothing: "antialiased",
      MozOsxFontSmoothing: "grayscale",
      display: "inline-block",
      paddingLeft: 2,
      paddingRight: 2,
      verticalAlign: "baseline",
      color: "inherit"
    },
    pre: {
      fontFamily: e7.fonts.mono,
      WebkitFontSmoothing: "antialiased",
      MozOsxFontSmoothing: "grayscale",
      lineHeight: "18px",
      padding: "11px 1rem",
      whiteSpace: "pre-wrap",
      color: "inherit",
      borderRadius: 3,
      margin: "1rem 0"
    }
  })
);
var lo = (0, kr.default)(1)(({
  color: e7,
  background: r,
  typography: t
}) => {
  let n = dn({ typography: t });
  return {
    ...n,
    body: {
      ...n.body,
      color: e7.defaultText,
      background: r.app,
      overflow: "hidden"
    },
    hr: {
      ...n.hr,
      borderTop: `1px solid ${e7.border}`
    }
  };
});
var po = {
  base: "dark",
  // Storybook-specific color palette
  colorPrimary: "#FF4785",
  // coral
  colorSecondary: "#029CFD",
  // ocean
  // UI
  appBg: "#222425",
  appContentBg: "#1B1C1D",
  appPreviewBg: g.lightest,
  appBorderColor: "rgba(255,255,255,.1)",
  appBorderRadius: 4,
  // Fonts
  fontBase: H.fonts.base,
  fontCode: H.fonts.mono,
  // Text colors
  textColor: "#C9CDCF",
  textInverseColor: "#222425",
  textMutedColor: "#798186",
  // Toolbar default and active colors
  barTextColor: g.mediumdark,
  barHoverColor: g.secondary,
  barSelectedColor: g.secondary,
  barBg: "#292C2E",
  // Form colors
  buttonBg: "#222425",
  buttonBorder: "rgba(255,255,255,.1)",
  booleanBg: "#222425",
  booleanSelectedBg: "#2E3438",
  inputBg: "#1B1C1D",
  inputBorder: "rgba(255,255,255,.1)",
  inputTextColor: g.lightest,
  inputBorderRadius: 4
};
var pn = po;
var mo = {
  base: "light",
  // Storybook-specific color palette
  colorPrimary: "#FF4785",
  // coral
  colorSecondary: "#029CFD",
  // ocean
  // UI
  appBg: U.app,
  appContentBg: g.lightest,
  appPreviewBg: g.lightest,
  appBorderColor: g.border,
  appBorderRadius: 4,
  // Fonts
  fontBase: H.fonts.base,
  fontCode: H.fonts.mono,
  // Text colors
  textColor: g.darkest,
  textInverseColor: g.lightest,
  textMutedColor: g.dark,
  // Toolbar default and active colors
  barTextColor: g.mediumdark,
  barHoverColor: g.secondary,
  barSelectedColor: g.secondary,
  barBg: g.lightest,
  // Form colors
  buttonBg: U.app,
  buttonBorder: g.medium,
  booleanBg: g.mediumlight,
  booleanSelectedBg: g.lightest,
  inputBg: g.lightest,
  inputBorder: g.border,
  inputTextColor: g.darkest,
  inputBorderRadius: 4
};
var ye = mo;
var mn = (() => {
  let e7;
  return typeof window < "u" ? e7 = window : typeof globalThis < "u" ? e7 = globalThis : typeof global < "u" ? e7 = global : typeof self < "u" ? e7 = self : e7 = {}, e7;
})();
var { window: Pr } = mn;
var hn = a((e7) => ({ color: e7 }), "mkColor");
var go = a((e7) => typeof e7 != "string" ? (import_client_logger.logger.warn(
  `Color passed to theme object should be a string. Instead ${e7}(${typeof e7}) was passed.`
), false) : true, "isColorString");
var bo = a((e7) => !/(gradient|var|calc)/.test(e7), "isValidColorForPolished");
var vo = a(
  (e7, r) => e7 === "darken" ? ve(`${on(1, r)}`, 0.95) : e7 === "lighten" ? ve(`${sn(1, r)}`, 0.95) : r,
  "applyPolished"
);
var gn = a(
  (e7) => (r) => {
    if (!go(r) || !bo(r))
      return r;
    try {
      return vo(e7, r);
    } catch {
      return r;
    }
  },
  "colorFactory"
);
var yo = gn("lighten");
var xo = gn("darken");
var Xe = a(() => !Pr || !Pr.matchMedia ? "light" : Pr.matchMedia("(prefers-color-scheme: dark)").matches ? "dark" : "light", "getPreferredColorScheme");
var Ne = {
  light: ye,
  dark: pn,
  normal: ye
};
var Lr = Xe();
var bu = a((e7 = { base: Lr }, r) => {
  let t = {
    ...Ne[Lr],
    ...Ne[e7.base] || {},
    ...e7,
    base: Ne[e7.base] ? e7.base : Lr
  };
  return {
    ...r,
    ...t,
    barSelectedColor: e7.barSelectedColor || t.colorSecondary
  };
}, "create");
var bn = {
  rubber: "cubic-bezier(0.175, 0.885, 0.335, 1.05)"
};
var Eo = be`
	from {
		transform: rotate(0deg);
	}
	to {
		transform: rotate(360deg);
	}
`;
var vn = be`
  0%, 100% { opacity: 1; }
  50% { opacity: .4; }
`;
var wo = be`
  0% { transform: translateY(1px); }
  25% { transform: translateY(0px); }
  50% { transform: translateY(-3px); }
  100% { transform: translateY(1px); }
`;
var So = be`
  0%, 100% { transform:translate3d(0,0,0); }
  12.5%, 62.5% { transform:translate3d(-4px,0,0); }
  37.5%, 87.5% {  transform: translate3d(4px,0,0);  }
`;
var Oo = _e`
  animation: ${vn} 1.5s ease-in-out infinite;
  color: transparent;
  cursor: progress;
`;
var To = _e`
  transition: all 150ms ease-out;
  transform: translate3d(0, 0, 0);

  &:hover {
    transform: translate3d(0, -2px, 0);
  }

  &:active {
    transform: translate3d(0, 0, 0);
  }
`;
var yn = {
  rotate360: Eo,
  glow: vn,
  float: wo,
  jiggle: So,
  inlineGlow: Oo,
  hoverable: To
};
var xn = {
  BASE_FONT_FAMILY: "Menlo, monospace",
  BASE_FONT_SIZE: "11px",
  BASE_LINE_HEIGHT: 1.2,
  BASE_BACKGROUND_COLOR: "rgb(36, 36, 36)",
  BASE_COLOR: "rgb(213, 213, 213)",
  OBJECT_PREVIEW_ARRAY_MAX_PROPERTIES: 10,
  OBJECT_PREVIEW_OBJECT_MAX_PROPERTIES: 5,
  OBJECT_NAME_COLOR: "rgb(227, 110, 236)",
  OBJECT_VALUE_NULL_COLOR: "rgb(127, 127, 127)",
  OBJECT_VALUE_UNDEFINED_COLOR: "rgb(127, 127, 127)",
  OBJECT_VALUE_REGEXP_COLOR: "rgb(233, 63, 59)",
  OBJECT_VALUE_STRING_COLOR: "rgb(233, 63, 59)",
  OBJECT_VALUE_SYMBOL_COLOR: "rgb(233, 63, 59)",
  OBJECT_VALUE_NUMBER_COLOR: "hsl(252, 100%, 75%)",
  OBJECT_VALUE_BOOLEAN_COLOR: "hsl(252, 100%, 75%)",
  OBJECT_VALUE_FUNCTION_PREFIX_COLOR: "rgb(85, 106, 242)",
  HTML_TAG_COLOR: "rgb(93, 176, 215)",
  HTML_TAGNAME_COLOR: "rgb(93, 176, 215)",
  HTML_TAGNAME_TEXT_TRANSFORM: "lowercase",
  HTML_ATTRIBUTE_NAME_COLOR: "rgb(155, 187, 220)",
  HTML_ATTRIBUTE_VALUE_COLOR: "rgb(242, 151, 102)",
  HTML_COMMENT_COLOR: "rgb(137, 137, 137)",
  HTML_DOCTYPE_COLOR: "rgb(192, 192, 192)",
  ARROW_COLOR: "rgb(145, 145, 145)",
  ARROW_MARGIN_RIGHT: 3,
  ARROW_FONT_SIZE: 12,
  ARROW_ANIMATION_DURATION: "0",
  TREENODE_FONT_FAMILY: "Menlo, monospace",
  TREENODE_FONT_SIZE: "11px",
  TREENODE_LINE_HEIGHT: 1.2,
  TREENODE_PADDING_LEFT: 12,
  TABLE_BORDER_COLOR: "rgb(85, 85, 85)",
  TABLE_TH_BACKGROUND_COLOR: "rgb(44, 44, 44)",
  TABLE_TH_HOVER_COLOR: "rgb(48, 48, 48)",
  TABLE_SORT_ICON_COLOR: "black",
  // 'rgb(48, 57, 66)',
  TABLE_DATA_BACKGROUND_IMAGE: "linear-gradient(rgba(255, 255, 255, 0), rgba(255, 255, 255, 0) 50%, rgba(51, 139, 255, 0.0980392) 50%, rgba(51, 139, 255, 0.0980392))",
  TABLE_DATA_BACKGROUND_SIZE: "128px 32px"
};
var En = {
  BASE_FONT_FAMILY: "Menlo, monospace",
  BASE_FONT_SIZE: "11px",
  BASE_LINE_HEIGHT: 1.2,
  BASE_BACKGROUND_COLOR: "white",
  BASE_COLOR: "black",
  OBJECT_PREVIEW_ARRAY_MAX_PROPERTIES: 10,
  OBJECT_PREVIEW_OBJECT_MAX_PROPERTIES: 5,
  OBJECT_NAME_COLOR: "rgb(136, 19, 145)",
  OBJECT_VALUE_NULL_COLOR: "rgb(128, 128, 128)",
  OBJECT_VALUE_UNDEFINED_COLOR: "rgb(128, 128, 128)",
  OBJECT_VALUE_REGEXP_COLOR: "rgb(196, 26, 22)",
  OBJECT_VALUE_STRING_COLOR: "rgb(196, 26, 22)",
  OBJECT_VALUE_SYMBOL_COLOR: "rgb(196, 26, 22)",
  OBJECT_VALUE_NUMBER_COLOR: "rgb(28, 0, 207)",
  OBJECT_VALUE_BOOLEAN_COLOR: "rgb(28, 0, 207)",
  OBJECT_VALUE_FUNCTION_PREFIX_COLOR: "rgb(13, 34, 170)",
  HTML_TAG_COLOR: "rgb(168, 148, 166)",
  HTML_TAGNAME_COLOR: "rgb(136, 18, 128)",
  HTML_TAGNAME_TEXT_TRANSFORM: "lowercase",
  HTML_ATTRIBUTE_NAME_COLOR: "rgb(153, 69, 0)",
  HTML_ATTRIBUTE_VALUE_COLOR: "rgb(26, 26, 166)",
  HTML_COMMENT_COLOR: "rgb(35, 110, 37)",
  HTML_DOCTYPE_COLOR: "rgb(192, 192, 192)",
  ARROW_COLOR: "#6e6e6e",
  ARROW_MARGIN_RIGHT: 3,
  ARROW_FONT_SIZE: 12,
  ARROW_ANIMATION_DURATION: "0",
  TREENODE_FONT_FAMILY: "Menlo, monospace",
  TREENODE_FONT_SIZE: "11px",
  TREENODE_LINE_HEIGHT: 1.2,
  TREENODE_PADDING_LEFT: 12,
  TABLE_BORDER_COLOR: "#aaa",
  TABLE_TH_BACKGROUND_COLOR: "#eee",
  TABLE_TH_HOVER_COLOR: "hsla(0, 0%, 90%, 1)",
  TABLE_SORT_ICON_COLOR: "#6e6e6e",
  TABLE_DATA_BACKGROUND_IMAGE: "linear-gradient(to bottom, white, white 50%, rgb(234, 243, 255) 50%, rgb(234, 243, 255))",
  TABLE_DATA_BACKGROUND_SIZE: "128px 32px"
};
var Co = a((e7) => Object.entries(e7).reduce((r, [t, n]) => ({ ...r, [t]: hn(n) }), {}), "convertColors");
var wn = a(
  ({ colors: e7, mono: r }) => {
    let t = Co(e7);
    return {
      token: {
        fontFamily: r,
        WebkitFontSmoothing: "antialiased",
        "&.tag": t.red3,
        "&.comment": { ...t.green1, fontStyle: "italic" },
        "&.prolog": { ...t.green1, fontStyle: "italic" },
        "&.doctype": { ...t.green1, fontStyle: "italic" },
        "&.cdata": { ...t.green1, fontStyle: "italic" },
        "&.string": t.red1,
        "&.url": t.cyan1,
        "&.symbol": t.cyan1,
        "&.number": t.cyan1,
        "&.boolean": t.cyan1,
        "&.variable": t.cyan1,
        "&.constant": t.cyan1,
        "&.inserted": t.cyan1,
        "&.atrule": t.blue1,
        "&.keyword": t.blue1,
        "&.attr-value": t.blue1,
        "&.punctuation": t.gray1,
        "&.operator": t.gray1,
        "&.function": t.gray1,
        "&.deleted": t.red2,
        "&.important": {
          fontWeight: "bold"
        },
        "&.bold": {
          fontWeight: "bold"
        },
        "&.italic": {
          fontStyle: "italic"
        },
        "&.class-name": t.cyan2,
        "&.selector": t.red3,
        "&.attr-name": t.red4,
        "&.property": t.red4,
        "&.regex": t.red4,
        "&.entity": t.red4,
        "&.directive.tag .tag": {
          background: "#ffff00",
          ...t.gray1
        }
      },
      "language-json .token.boolean": t.blue1,
      "language-json .token.number": t.blue1,
      "language-json .token.property": t.cyan2,
      namespace: {
        opacity: 0.7
      }
    };
  },
  "create"
);
var Ro = {
  green1: "#008000",
  red1: "#A31515",
  red2: "#9a050f",
  red3: "#800000",
  red4: "#ff0000",
  gray1: "#393A34",
  cyan1: "#36acaa",
  cyan2: "#2B91AF",
  blue1: "#0000ff",
  blue2: "#00009f"
};
var Ao = {
  green1: "#7C7C7C",
  red1: "#92C379",
  red2: "#9a050f",
  red3: "#A8FF60",
  red4: "#96CBFE",
  gray1: "#EDEDED",
  cyan1: "#C6C5FE",
  cyan2: "#FFFFB6",
  blue1: "#B474DD",
  blue2: "#00009f"
};
var _o = a((e7) => ({
  // Changeable colors
  primary: e7.colorPrimary,
  secondary: e7.colorSecondary,
  tertiary: g.tertiary,
  ancillary: g.ancillary,
  // Complimentary
  orange: g.orange,
  gold: g.gold,
  green: g.green,
  seafoam: g.seafoam,
  purple: g.purple,
  ultraviolet: g.ultraviolet,
  // Monochrome
  lightest: g.lightest,
  lighter: g.lighter,
  light: g.light,
  mediumlight: g.mediumlight,
  medium: g.medium,
  mediumdark: g.mediumdark,
  dark: g.dark,
  darker: g.darker,
  darkest: g.darkest,
  // For borders
  border: g.border,
  // Status
  positive: g.positive,
  negative: g.negative,
  warning: g.warning,
  critical: g.critical,
  defaultText: e7.textColor || g.darkest,
  inverseText: e7.textInverseColor || g.lightest,
  positiveText: g.positiveText,
  negativeText: g.negativeText,
  warningText: g.warningText
}), "createColors");
var zr = a((e7 = Ne[Xe()]) => {
  let {
    base: r,
    colorPrimary: t,
    colorSecondary: n,
    appBg: o,
    appContentBg: i,
    appPreviewBg: s4,
    appBorderColor: u6,
    appBorderRadius: c,
    fontBase: d,
    fontCode: f,
    textColor: l7,
    textInverseColor: p,
    barTextColor: v7,
    barHoverColor: h7,
    barSelectedColor: m,
    barBg: y,
    buttonBg: x7,
    buttonBorder: E7,
    booleanBg: A,
    booleanSelectedBg: T,
    inputBg: C7,
    inputBorder: N,
    inputTextColor: S4,
    inputBorderRadius: xe2,
    brandTitle: W,
    brandUrl: G,
    brandImage: er2,
    brandTarget: rr2,
    gridCellSize: tr2,
    ...nr2
  } = e7;
  return {
    ...nr2,
    base: r,
    color: _o(e7),
    background: {
      app: o,
      bar: y,
      content: i,
      preview: s4,
      gridCellSize: tr2 || U.gridCellSize,
      hoverable: U.hoverable,
      positive: U.positive,
      negative: U.negative,
      warning: U.warning,
      critical: U.critical
    },
    typography: {
      fonts: {
        base: d,
        mono: f
      },
      weight: H.weight,
      size: H.size
    },
    animation: yn,
    easing: bn,
    input: {
      background: C7,
      border: N,
      borderRadius: xe2,
      color: S4
    },
    button: {
      background: x7 || C7,
      border: E7 || N
    },
    boolean: {
      background: A || N,
      selectedBackground: T || C7
    },
    // UI
    layoutMargin: 10,
    appBorderColor: u6,
    appBorderRadius: c,
    // Toolbar default/active colors
    barTextColor: v7,
    barHoverColor: h7 || n,
    barSelectedColor: m || n,
    barBg: y,
    // Brand logo/text
    brand: {
      title: W,
      url: G,
      image: er2 || (W ? null : void 0),
      target: rr2
    },
    code: wn({
      colors: r === "light" ? Ro : Ao,
      mono: f
    }),
    // Addon actions theme
    // API example https://github.com/storybookjs/react-inspector/blob/master/src/styles/themes/chromeLight.tsx
    addonActionsTheme: {
      ...r === "light" ? En : xn,
      BASE_FONT_FAMILY: f,
      BASE_FONT_SIZE: H.size.s2 - 1,
      BASE_LINE_HEIGHT: "18px",
      BASE_BACKGROUND_COLOR: "transparent",
      BASE_COLOR: l7,
      ARROW_COLOR: un(0.2, u6),
      ARROW_MARGIN_RIGHT: 4,
      ARROW_FONT_SIZE: 8,
      TREENODE_FONT_FAMILY: f,
      TREENODE_FONT_SIZE: H.size.s2 - 1,
      TREENODE_LINE_HEIGHT: "18px",
      TREENODE_PADDING_LEFT: 12
    }
  };
}, "convert");
var Mr = a((e7) => Object.keys(e7).length === 0, "isEmpty");
var ne = a((e7) => e7 != null && typeof e7 == "object", "isObject");
var Ie = a((e7, ...r) => Object.prototype.hasOwnProperty.call(e7, ...r), "hasOwnProperty");
var ke = a(() => /* @__PURE__ */ Object.create(null), "makeObjectWithoutPrototype");
var Sn = a((e7, r) => e7 === r || !ne(e7) || !ne(r) ? {} : Object.keys(e7).reduce((t, n) => {
  if (Ie(r, n)) {
    let o = Sn(e7[n], r[n]);
    return ne(o) && Mr(o) || (t[n] = o), t;
  }
  return t[n] = void 0, t;
}, ke()), "deletedDiff");
var Qe = Sn;
function On(e7) {
  for (var r = [], t = 1; t < arguments.length; t++)
    r[t - 1] = arguments[t];
  var n = Array.from(typeof e7 == "string" ? [e7] : e7);
  n[n.length - 1] = n[n.length - 1].replace(/\r?\n([\t ]*)$/, "");
  var o = n.reduce(function(u6, c) {
    var d = c.match(/\n([\t ]+|(?!\s).)/g);
    return d ? u6.concat(d.map(function(f) {
      var l7, p;
      return (p = (l7 = f.match(/[\t ]/g)) === null || l7 === void 0 ? void 0 : l7.length) !== null && p !== void 0 ? p : 0;
    })) : u6;
  }, []);
  if (o.length) {
    var i = new RegExp(`
[	 ]{` + Math.min.apply(Math, o) + "}", "g");
    n = n.map(function(u6) {
      return u6.replace(i, `
`);
    });
  }
  n[0] = n[0].replace(/^\r?\n/, "");
  var s4 = n[0];
  return r.forEach(function(u6, c) {
    var d = s4.match(/(?:^|\n)( *)$/), f = d ? d[1] : "", l7 = u6;
    typeof u6 == "string" && u6.includes(`
`) && (l7 = String(u6).split(`
`).map(function(p, v7) {
      return v7 === 0 ? p : "" + f + p;
    }).join(`
`)), s4 += l7 + n[c + 1];
  }), s4;
}
a(On, "dedent");
var pc = a((e7) => {
  if (!e7)
    return zr(ye);
  let r = Qe(ye, e7);
  return Object.keys(r).length && import_client_logger2.logger.warn(
    On`
          Your theme is missing properties, you should update your theme!

          theme-data missing:
        `,
    r
  ), zr(e7);
}, "ensure");
var gc = "/* emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason */";

// node_modules/.pnpm/@storybook+core@8.4.7/node_modules/@storybook/core/dist/components/index.js
var Rw = __toESM(require_react());
var ye2 = __toESM(require_react());
var import_jsx_runtime = __toESM(require_jsx_runtime());
var Ah = __toESM(require_react());
var Bw = __toESM(require_react_dom());
var import_jsx_runtime2 = __toESM(require_jsx_runtime());
var kh = __toESM(require_react());
var Th = __toESM(require_react());
var _e2 = __toESM(require_react());
var Lh = __toESM(require_react_dom());
var Ih = __toESM(require_react());
var Lt2 = __toESM(require_react());
var import_jsx_runtime3 = __toESM(require_jsx_runtime());
var gn2 = __toESM(require_react());
var vi2 = __toESM(require_react());
var import_jsx_runtime4 = __toESM(require_jsx_runtime());
var I3 = __toESM(require_react());
var Vh = __toESM(require_react());
var import_jsx_runtime5 = __toESM(require_jsx_runtime());
var import_react6 = __toESM(require_react());
var import_react7 = __toESM(require_react());
var import_client_logger3 = __toESM(require_client_logger());
var _l = __toESM(require_react());
var mr2 = __toESM(require_react());
var J3 = __toESM(require_react_dom());
var X2 = __toESM(require_react());
var import_react8 = __toESM(require_react());
var import_react9 = __toESM(require_react());
var import_react_dom = __toESM(require_react_dom());
var import_react10 = __toESM(require_react());
var import_react11 = __toESM(require_react());
var import_react12 = __toESM(require_react());
var import_react13 = __toESM(require_react());
var import_react14 = __toESM(require_react());
var import_react15 = __toESM(require_react());
var s = __toESM(require_react());
var import_react16 = __toESM(require_react());
var import_react17 = __toESM(require_react());
var import_react18 = __toESM(require_react());
var import_react19 = __toESM(require_react());
var import_react20 = __toESM(require_react());
var wl = __toESM(require_react());
var import_react21 = __toESM(require_react());
var import_react22 = __toESM(require_react());
var import_react23 = __toESM(require_react());
var import_react24 = __toESM(require_react());
var import_react25 = __toESM(require_react());
var import_react_dom2 = __toESM(require_react_dom());
var import_react26 = __toESM(require_react());
var import_react27 = __toESM(require_react());
var import_react28 = __toESM(require_react());
var import_react29 = __toESM(require_react());
var import_react_dom3 = __toESM(require_react_dom());
var import_react30 = __toESM(require_react());
var import_react_dom4 = __toESM(require_react_dom());
var import_react31 = __toESM(require_react());
var Al = __toESM(require_react());
var Se2 = __toESM(require_react());
var import_react32 = __toESM(require_react());
var Gg = __toESM(require_react());
var Xg = __toESM(require_react());
var J2 = __toESM(require_react());
var Ro2 = __toESM(require_react());
var Jg = __toESM(require_react());
var import_react33 = __toESM(require_react());
var import_react34 = __toESM(require_react());
var import_react35 = __toESM(require_react());
var import_react36 = __toESM(require_react());
var import_client_logger4 = __toESM(require_client_logger());
var import_react37 = __toESM(require_react());
var import_react38 = __toESM(require_react());
var import_react39 = __toESM(require_react());
var import_react40 = __toESM(require_react());
var import_react41 = __toESM(require_react());
var import_react42 = __toESM(require_react());
var import_react43 = __toESM(require_react());
var import_react44 = __toESM(require_react());
var st2 = __toESM(require_react());
var Nv = __toESM(require_react());
var import_react45 = __toESM(require_react());
var import_react46 = __toESM(require_react());
var import_react47 = __toESM(require_react());
var import_react48 = __toESM(require_react());
var import_react49 = __toESM(require_react());
var import_react50 = __toESM(require_react());
var import_react51 = __toESM(require_react());
var import_react52 = __toESM(require_react());

// node_modules/.pnpm/@storybook+csf@0.1.13/node_modules/@storybook/csf/dist/index.mjs
var C = Object.create;
var u = Object.defineProperty;
var B2 = Object.getOwnPropertyDescriptor;
var F2 = Object.getOwnPropertyNames;
var h = Object.getPrototypeOf;
var w2 = Object.prototype.hasOwnProperty;
var E = (r, e7) => () => (e7 || r((e7 = { exports: {} }).exports, e7), e7.exports);
var v = (r, e7, n, t) => {
  if (e7 && typeof e7 == "object" || typeof e7 == "function") for (let a7 of F2(e7)) !w2.call(r, a7) && a7 !== n && u(r, a7, { get: () => e7[a7], enumerable: !(t = B2(e7, a7)) || t.enumerable });
  return r;
};
var I2 = (r, e7, n) => (n = r != null ? C(h(r)) : {}, v(e7 || !r || !r.__esModule ? u(n, "default", { value: r, enumerable: true }) : n, r));
var x = E((T) => {
  Object.defineProperty(T, "__esModule", { value: true }), T.isEqual = /* @__PURE__ */ function() {
    var r = Object.prototype.toString, e7 = Object.getPrototypeOf, n = Object.getOwnPropertySymbols ? function(t) {
      return Object.keys(t).concat(Object.getOwnPropertySymbols(t));
    } : Object.keys;
    return function(t, a7) {
      return function i(o, s4, p) {
        var g7, y, d, c = r.call(o), b = r.call(s4);
        if (o === s4) return true;
        if (o == null || s4 == null) return false;
        if (p.indexOf(o) > -1 && p.indexOf(s4) > -1) return true;
        if (p.push(o, s4), c != b || (g7 = n(o), y = n(s4), g7.length != y.length || g7.some(function(A) {
          return !i(o[A], s4[A], p);
        }))) return false;
        switch (c.slice(8, -1)) {
          case "Symbol":
            return o.valueOf() == s4.valueOf();
          case "Date":
          case "Number":
            return +o == +s4 || +o != +o && +s4 != +s4;
          case "RegExp":
          case "Function":
          case "String":
          case "Boolean":
            return "" + o == "" + s4;
          case "Set":
          case "Map":
            g7 = o.entries(), y = s4.entries();
            do
              if (!i((d = g7.next()).value, y.next().value, p)) return false;
            while (!d.done);
            return true;
          case "ArrayBuffer":
            o = new Uint8Array(o), s4 = new Uint8Array(s4);
          case "DataView":
            o = new Uint8Array(o.buffer), s4 = new Uint8Array(s4.buffer);
          case "Float32Array":
          case "Float64Array":
          case "Int8Array":
          case "Int16Array":
          case "Int32Array":
          case "Uint8Array":
          case "Uint16Array":
          case "Uint32Array":
          case "Uint8ClampedArray":
          case "Arguments":
          case "Array":
            if (o.length != s4.length) return false;
            for (d = 0; d < o.length; d++) if ((d in o || d in s4) && (d in o != d in s4 || !i(o[d], s4[d], p))) return false;
            return true;
          case "Object":
            return i(e7(o), e7(s4), p);
          default:
            return false;
        }
      }(t, a7, []);
    };
  }();
});
var l = I2(x());
var S = (r) => r.map((e7) => typeof e7 < "u").filter(Boolean).length;
var k2 = (r, e7) => {
  let { exists: n, eq: t, neq: a7, truthy: i } = r;
  if (S([n, t, a7, i]) > 1) throw new Error(`Invalid conditional test ${JSON.stringify({ exists: n, eq: t, neq: a7 })}`);
  if (typeof t < "u") return (0, l.isEqual)(e7, t);
  if (typeof a7 < "u") return !(0, l.isEqual)(e7, a7);
  if (typeof n < "u") {
    let s4 = typeof e7 < "u";
    return n ? s4 : !s4;
  }
  return (typeof i > "u" ? true : i) ? !!e7 : !e7;
};
var P2 = (r, e7, n) => {
  if (!r.if) return true;
  let { arg: t, global: a7 } = r.if;
  if (S([t, a7]) !== 1) throw new Error(`Invalid conditional value ${JSON.stringify({ arg: t, global: a7 })}`);
  let i = t ? e7[t] : n[a7];
  return k2(r.if, i);
};
var O2 = (r) => r.toLowerCase().replace(/[ ’–—―′¿'`~!@#$%^&*()_|+\-=?;:'",.<>\{\}\[\]\\\/]/gi, "-").replace(/-+/g, "-").replace(/^-+/, "").replace(/-+$/, "");

// node_modules/.pnpm/@storybook+core@8.4.7/node_modules/@storybook/core/dist/components/index.js
var import_react53 = __toESM(require_react());
var import_react54 = __toESM(require_react());
var import_react55 = __toESM(require_react());
var import_react56 = __toESM(require_react());
var import_react57 = __toESM(require_react());
var import_react58 = __toESM(require_react());
var import_react59 = __toESM(require_react());
var import_react60 = __toESM(require_react());
var import_client_logger5 = __toESM(require_client_logger());
var import_react61 = __toESM(require_react());
var import_react62 = __toESM(require_react());
var import_react63 = __toESM(require_react());
var import_react64 = __toESM(require_react());
var L4 = Object.create;
var Qa2 = Object.defineProperty;
var I4 = Object.getOwnPropertyDescriptor;
var B4 = Object.getOwnPropertyNames;
var M4 = Object.getPrototypeOf;
var _4 = Object.prototype.hasOwnProperty;
var a2 = (e7, t) => Qa2(e7, "name", { value: t, configurable: true });
var Ko = ((e7) => typeof __require < "u" ? __require : typeof Proxy < "u" ? new Proxy(e7, {
  get: (t, r) => (typeof __require < "u" ? __require : t)[r]
}) : e7)(function(e7) {
  if (typeof __require < "u") return __require.apply(this, arguments);
  throw Error('Dynamic require of "' + e7 + '" is not supported');
});
var F3 = (e7, t) => () => (e7 && (t = e7(e7 = 0)), t);
var _2 = (e7, t) => () => (t || e7((t = { exports: {} }).exports, t), t.exports);
var an2 = (e7, t) => {
  for (var r in t)
    Qa2(e7, r, { get: t[r], enumerable: true });
};
var P4 = (e7, t, r, n) => {
  if (t && typeof t == "object" || typeof t == "function")
    for (let o of B4(t))
      !_4.call(e7, o) && o !== r && Qa2(e7, o, { get: () => t[o], enumerable: !(n = I4(t, o)) || n.enumerable });
  return e7;
};
var we2 = (e7, t, r) => (r = e7 != null ? L4(M4(e7)) : {}, P4(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  t || !e7 || !e7.__esModule ? Qa2(r, "default", { value: e7, enumerable: true }) : r,
  e7
));
function H2() {
  return H2 = Object.assign ? Object.assign.bind() : function(e7) {
    for (var t = 1; t < arguments.length; t++) {
      var r = arguments[t];
      for (var n in r) ({}).hasOwnProperty.call(r, n) && (e7[n] = r[n]);
    }
    return e7;
  }, H2.apply(null, arguments);
}
var qe2 = F3(() => {
  a2(H2, "_extends");
});
function rp(e7) {
  if (e7 === void 0) throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
  return e7;
}
var np = F3(() => {
  a2(rp, "_assertThisInitialized");
});
function Xt2(e7, t) {
  return Xt2 = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function(r, n) {
    return r.__proto__ = n, r;
  }, Xt2(e7, t);
}
var ei = F3(() => {
  a2(Xt2, "_setPrototypeOf");
});
function ti(e7) {
  return ti = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function(t) {
    return t.__proto__ || Object.getPrototypeOf(t);
  }, ti(e7);
}
var ap = F3(() => {
  a2(ti, "_getPrototypeOf");
});
var ln2;
var oi = F3(() => {
  ln2 = (() => {
    let e7;
    return typeof window < "u" ? e7 = window : typeof globalThis < "u" ? e7 = globalThis : typeof global < "u" ? e7 = global : typeof self < "u" ? e7 = self : e7 = {}, e7;
  })();
});
var Qo = _2((hp, vs) => {
  (function(e7) {
    if (typeof hp == "object" && typeof vs < "u")
      vs.exports = e7();
    else if (typeof define == "function" && define.amd)
      define([], e7);
    else {
      var t;
      typeof window < "u" ? t = window : typeof global < "u" ? t = global : typeof self < "u" ? t = self : t = this, t.memoizerific = e7();
    }
  })(function() {
    var e7, t, r;
    return a2(function n(o, i, l7) {
      function u6(d, h7) {
        if (!i[d]) {
          if (!o[d]) {
            var f = typeof Ko == "function" && Ko;
            if (!h7 && f) return f(d, true);
            if (c) return c(d, true);
            var v7 = new Error("Cannot find module '" + d + "'");
            throw v7.code = "MODULE_NOT_FOUND", v7;
          }
          var b = i[d] = { exports: {} };
          o[d][0].call(b.exports, function(m) {
            var g7 = o[d][1][m];
            return u6(g7 || m);
          }, b, b.exports, n, o, i, l7);
        }
        return i[d].exports;
      }
      a2(u6, "s");
      for (var c = typeof Ko == "function" && Ko, p = 0; p < l7.length; p++) u6(l7[p]);
      return u6;
    }, "e")({ 1: [function(n, o, i) {
      o.exports = function(l7) {
        if (typeof Map != "function" || l7) {
          var u6 = n("./similar");
          return new u6();
        } else
          return /* @__PURE__ */ new Map();
      };
    }, { "./similar": 2 }], 2: [function(n, o, i) {
      function l7() {
        return this.list = [], this.lastItem = void 0, this.size = 0, this;
      }
      a2(l7, "Similar"), l7.prototype.get = function(u6) {
        var c;
        if (this.lastItem && this.isEqual(this.lastItem.key, u6))
          return this.lastItem.val;
        if (c = this.indexOf(u6), c >= 0)
          return this.lastItem = this.list[c], this.list[c].val;
      }, l7.prototype.set = function(u6, c) {
        var p;
        return this.lastItem && this.isEqual(this.lastItem.key, u6) ? (this.lastItem.val = c, this) : (p = this.indexOf(u6), p >= 0 ? (this.lastItem = this.list[p], this.list[p].val = c, this) : (this.lastItem = { key: u6, val: c }, this.list.push(this.lastItem), this.size++, this));
      }, l7.prototype.delete = function(u6) {
        var c;
        if (this.lastItem && this.isEqual(this.lastItem.key, u6) && (this.lastItem = void 0), c = this.indexOf(u6), c >= 0)
          return this.size--, this.list.splice(c, 1)[0];
      }, l7.prototype.has = function(u6) {
        var c;
        return this.lastItem && this.isEqual(this.lastItem.key, u6) ? true : (c = this.indexOf(u6), c >= 0 ? (this.lastItem = this.list[c], true) : false);
      }, l7.prototype.forEach = function(u6, c) {
        var p;
        for (p = 0; p < this.size; p++)
          u6.call(c || this, this.list[p].val, this.list[p].key, this);
      }, l7.prototype.indexOf = function(u6) {
        var c;
        for (c = 0; c < this.size; c++)
          if (this.isEqual(this.list[c].key, u6))
            return c;
        return -1;
      }, l7.prototype.isEqual = function(u6, c) {
        return u6 === c || u6 !== u6 && c !== c;
      }, o.exports = l7;
    }, {}], 3: [function(n, o, i) {
      var l7 = n("map-or-similar");
      o.exports = function(d) {
        var h7 = new l7(false), f = [];
        return function(v7) {
          var b = a2(function() {
            var m = h7, g7, y, w5 = arguments.length - 1, D7 = Array(w5 + 1), x7 = true, C7;
            if ((b.numArgs || b.numArgs === 0) && b.numArgs !== w5 + 1)
              throw new Error("Memoizerific functions should always be called with the same number of arguments");
            for (C7 = 0; C7 < w5; C7++) {
              if (D7[C7] = {
                cacheItem: m,
                arg: arguments[C7]
              }, m.has(arguments[C7])) {
                m = m.get(arguments[C7]);
                continue;
              }
              x7 = false, g7 = new l7(false), m.set(arguments[C7], g7), m = g7;
            }
            return x7 && (m.has(arguments[w5]) ? y = m.get(arguments[w5]) : x7 = false), x7 || (y = v7.apply(null, arguments), m.set(arguments[w5], y)), d > 0 && (D7[w5] = {
              cacheItem: m,
              arg: arguments[w5]
            }, x7 ? u6(f, D7) : f.push(D7), f.length > d && c(f.shift())), b.wasMemoized = x7, b.numArgs = w5 + 1, y;
          }, "memoizerific");
          return b.limit = d, b.wasMemoized = false, b.cache = h7, b.lru = f, b;
        };
      };
      function u6(d, h7) {
        var f = d.length, v7 = h7.length, b, m, g7;
        for (m = 0; m < f; m++) {
          for (b = true, g7 = 0; g7 < v7; g7++)
            if (!p(d[m][g7].arg, h7[g7].arg)) {
              b = false;
              break;
            }
          if (b)
            break;
        }
        d.push(d.splice(m, 1)[0]);
      }
      a2(u6, "moveToMostRecentLru");
      function c(d) {
        var h7 = d.length, f = d[h7 - 1], v7, b;
        for (f.cacheItem.delete(f.arg), b = h7 - 2; b >= 0 && (f = d[b], v7 = f.cacheItem.get(f.arg), !v7 || !v7.size); b--)
          f.cacheItem.delete(f.arg);
      }
      a2(c, "removeCachedResult");
      function p(d, h7) {
        return d === h7 || d !== d && h7 !== h7;
      }
      a2(p, "isEqual");
    }, { "map-or-similar": 1 }] }, {}, [3])(3);
  });
});
function sn2(e7, t) {
  if (e7 == null) return {};
  var r = {};
  for (var n in e7) if ({}.hasOwnProperty.call(e7, n)) {
    if (t.indexOf(n) >= 0) continue;
    r[n] = e7[n];
  }
  return r;
}
var ai = F3(() => {
  a2(sn2, "_objectWithoutPropertiesLoose");
});
function mp(e7, t) {
  if (e7 == null) return {};
  var r, n, o = sn2(e7, t);
  if (Object.getOwnPropertySymbols) {
    var i = Object.getOwnPropertySymbols(e7);
    for (n = 0; n < i.length; n++) r = i[n], t.indexOf(r) >= 0 || {}.propertyIsEnumerable.call(e7, r) && (o[r] = e7[r]);
  }
  return o;
}
var gp = F3(() => {
  ai();
  a2(mp, "_objectWithoutProperties");
});
function ea2(e7, t) {
  (t == null || t > e7.length) && (t = e7.length);
  for (var r = 0, n = Array(t); r < t; r++) n[r] = e7[r];
  return n;
}
var ws = F3(() => {
  a2(ea2, "_arrayLikeToArray");
});
function vp(e7) {
  if (Array.isArray(e7)) return ea2(e7);
}
var wp = F3(() => {
  ws();
  a2(vp, "_arrayWithoutHoles");
});
function bp(e7) {
  if (typeof Symbol < "u" && e7[Symbol.iterator] != null || e7["@@iterator"] != null) return Array.from(e7);
}
var yp = F3(() => {
  a2(bp, "_iterableToArray");
});
function Dp(e7, t) {
  if (e7) {
    if (typeof e7 == "string") return ea2(e7, t);
    var r = {}.toString.call(e7).slice(8, -1);
    return r === "Object" && e7.constructor && (r = e7.constructor.name), r === "Map" || r === "Set" ? Array.from(e7) : r === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(r) ? ea2(e7, t) : void 0;
  }
}
var xp = F3(() => {
  ws();
  a2(Dp, "_unsupportedIterableToArray");
});
function Cp() {
  throw new TypeError(`Invalid attempt to spread non-iterable instance.
In order to be iterable, non-array objects must have a [Symbol.iterator]() method.`);
}
var Ep = F3(() => {
  a2(Cp, "_nonIterableSpread");
});
function Sp(e7) {
  return vp(e7) || bp(e7) || Dp(e7) || Cp();
}
var Rp = F3(() => {
  wp();
  yp();
  xp();
  Ep();
  a2(Sp, "_toConsumableArray");
});
function br2(e7) {
  "@babel/helpers - typeof";
  return br2 = typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? function(t) {
    return typeof t;
  } : function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, br2(e7);
}
var bs = F3(() => {
  a2(br2, "_typeof");
});
function Ap(e7, t) {
  if (br2(e7) != "object" || !e7) return e7;
  var r = e7[Symbol.toPrimitive];
  if (r !== void 0) {
    var n = r.call(e7, t || "default");
    if (br2(n) != "object") return n;
    throw new TypeError("@@toPrimitive must return a primitive value.");
  }
  return (t === "string" ? String : Number)(e7);
}
var Fp = F3(() => {
  bs();
  a2(Ap, "toPrimitive");
});
function kp(e7) {
  var t = Ap(e7, "string");
  return br2(t) == "symbol" ? t : t + "";
}
var Tp = F3(() => {
  bs();
  Fp();
  a2(kp, "toPropertyKey");
});
function ii(e7, t, r) {
  return (t = kp(t)) in e7 ? Object.defineProperty(e7, t, {
    value: r,
    enumerable: true,
    configurable: true,
    writable: true
  }) : e7[t] = r, e7;
}
var ys = F3(() => {
  Tp();
  a2(ii, "_defineProperty");
});
function Lp(e7, t) {
  var r = Object.keys(e7);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e7);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e7, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function un2(e7) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? Lp(Object(r), true).forEach(function(n) {
      ii(e7, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e7, Object.getOwnPropertyDescriptors(r)) : Lp(Object(r)).forEach(function(n) {
      Object.defineProperty(e7, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e7;
}
function h6(e7) {
  var t = e7.length;
  if (t === 0 || t === 1) return e7;
  if (t === 2)
    return [e7[0], e7[1], "".concat(e7[0], ".").concat(e7[1]), "".concat(e7[1], ".").concat(e7[0])];
  if (t === 3)
    return [e7[0], e7[1], e7[2], "".concat(e7[0], ".").concat(e7[1]), "".concat(e7[0], ".").concat(e7[2]), "".concat(e7[1], ".").concat(e7[0]), "".concat(
      e7[1],
      "."
    ).concat(e7[2]), "".concat(e7[2], ".").concat(e7[0]), "".concat(e7[2], ".").concat(e7[1]), "".concat(e7[0], ".").concat(e7[1], ".").concat(
      e7[2]
    ), "".concat(e7[0], ".").concat(e7[2], ".").concat(e7[1]), "".concat(e7[1], ".").concat(e7[0], ".").concat(e7[2]), "".concat(e7[1], ".").concat(
      e7[2],
      "."
    ).concat(e7[0]), "".concat(e7[2], ".").concat(e7[0], ".").concat(e7[1]), "".concat(e7[2], ".").concat(e7[1], ".").concat(e7[0])];
  if (t >= 4)
    return [
      e7[0],
      e7[1],
      e7[2],
      e7[3],
      "".concat(e7[0], ".").concat(e7[1]),
      "".concat(e7[0], ".").concat(e7[2]),
      "".concat(e7[0], ".").concat(e7[3]),
      "".concat(e7[1], ".").concat(e7[0]),
      "".concat(e7[1], ".").concat(e7[2]),
      "".concat(e7[1], ".").concat(e7[3]),
      "".concat(e7[2], ".").concat(e7[0]),
      "".concat(e7[2], ".").concat(e7[1]),
      "".concat(e7[2], ".").concat(e7[3]),
      "".concat(e7[3], ".").concat(e7[0]),
      "".concat(e7[3], ".").concat(e7[1]),
      "".concat(e7[3], ".").concat(e7[2]),
      "".concat(e7[0], ".").concat(e7[1], ".").concat(e7[2]),
      "".concat(e7[0], ".").concat(e7[1], ".").concat(e7[3]),
      "".concat(e7[0], ".").concat(e7[2], ".").concat(e7[1]),
      "".concat(e7[0], ".").concat(e7[2], ".").concat(e7[3]),
      "".concat(e7[0], ".").concat(
        e7[3],
        "."
      ).concat(e7[1]),
      "".concat(e7[0], ".").concat(e7[3], ".").concat(e7[2]),
      "".concat(e7[1], ".").concat(e7[0], ".").concat(e7[2]),
      "".concat(
        e7[1],
        "."
      ).concat(e7[0], ".").concat(e7[3]),
      "".concat(e7[1], ".").concat(e7[2], ".").concat(e7[0]),
      "".concat(e7[1], ".").concat(e7[2], ".").concat(
        e7[3]
      ),
      "".concat(e7[1], ".").concat(e7[3], ".").concat(e7[0]),
      "".concat(e7[1], ".").concat(e7[3], ".").concat(e7[2]),
      "".concat(e7[2], ".").concat(
        e7[0],
        "."
      ).concat(e7[1]),
      "".concat(e7[2], ".").concat(e7[0], ".").concat(e7[3]),
      "".concat(e7[2], ".").concat(e7[1], ".").concat(e7[0]),
      "".concat(
        e7[2],
        "."
      ).concat(e7[1], ".").concat(e7[3]),
      "".concat(e7[2], ".").concat(e7[3], ".").concat(e7[0]),
      "".concat(e7[2], ".").concat(e7[3], ".").concat(
        e7[1]
      ),
      "".concat(e7[3], ".").concat(e7[0], ".").concat(e7[1]),
      "".concat(e7[3], ".").concat(e7[0], ".").concat(e7[2]),
      "".concat(e7[3], ".").concat(
        e7[1],
        "."
      ).concat(e7[0]),
      "".concat(e7[3], ".").concat(e7[1], ".").concat(e7[2]),
      "".concat(e7[3], ".").concat(e7[2], ".").concat(e7[0]),
      "".concat(
        e7[3],
        "."
      ).concat(e7[2], ".").concat(e7[1]),
      "".concat(e7[0], ".").concat(e7[1], ".").concat(e7[2], ".").concat(e7[3]),
      "".concat(e7[0], ".").concat(
        e7[1],
        "."
      ).concat(e7[3], ".").concat(e7[2]),
      "".concat(e7[0], ".").concat(e7[2], ".").concat(e7[1], ".").concat(e7[3]),
      "".concat(e7[0], ".").concat(
        e7[2],
        "."
      ).concat(e7[3], ".").concat(e7[1]),
      "".concat(e7[0], ".").concat(e7[3], ".").concat(e7[1], ".").concat(e7[2]),
      "".concat(e7[0], ".").concat(
        e7[3],
        "."
      ).concat(e7[2], ".").concat(e7[1]),
      "".concat(e7[1], ".").concat(e7[0], ".").concat(e7[2], ".").concat(e7[3]),
      "".concat(e7[1], ".").concat(
        e7[0],
        "."
      ).concat(e7[3], ".").concat(e7[2]),
      "".concat(e7[1], ".").concat(e7[2], ".").concat(e7[0], ".").concat(e7[3]),
      "".concat(e7[1], ".").concat(
        e7[2],
        "."
      ).concat(e7[3], ".").concat(e7[0]),
      "".concat(e7[1], ".").concat(e7[3], ".").concat(e7[0], ".").concat(e7[2]),
      "".concat(e7[1], ".").concat(
        e7[3],
        "."
      ).concat(e7[2], ".").concat(e7[0]),
      "".concat(e7[2], ".").concat(e7[0], ".").concat(e7[1], ".").concat(e7[3]),
      "".concat(e7[2], ".").concat(
        e7[0],
        "."
      ).concat(e7[3], ".").concat(e7[1]),
      "".concat(e7[2], ".").concat(e7[1], ".").concat(e7[0], ".").concat(e7[3]),
      "".concat(e7[2], ".").concat(
        e7[1],
        "."
      ).concat(e7[3], ".").concat(e7[0]),
      "".concat(e7[2], ".").concat(e7[3], ".").concat(e7[0], ".").concat(e7[1]),
      "".concat(e7[2], ".").concat(
        e7[3],
        "."
      ).concat(e7[1], ".").concat(e7[0]),
      "".concat(e7[3], ".").concat(e7[0], ".").concat(e7[1], ".").concat(e7[2]),
      "".concat(e7[3], ".").concat(
        e7[0],
        "."
      ).concat(e7[2], ".").concat(e7[1]),
      "".concat(e7[3], ".").concat(e7[1], ".").concat(e7[0], ".").concat(e7[2]),
      "".concat(e7[3], ".").concat(
        e7[1],
        "."
      ).concat(e7[2], ".").concat(e7[0]),
      "".concat(e7[3], ".").concat(e7[2], ".").concat(e7[0], ".").concat(e7[1]),
      "".concat(e7[3], ".").concat(
        e7[2],
        "."
      ).concat(e7[1], ".").concat(e7[0])
    ];
}
function m6(e7) {
  if (e7.length === 0 || e7.length === 1) return e7;
  var t = e7.join(".");
  return Ds[t] || (Ds[t] = h6(e7)), Ds[t];
}
function g6(e7) {
  var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : {}, r = arguments.length > 2 ? arguments[2] : void 0, n = e7.filter(
    function(i) {
      return i !== "token";
    }
  ), o = m6(n);
  return o.reduce(function(i, l7) {
    return un2(un2({}, i), r[l7]);
  }, t);
}
function Ip(e7) {
  return e7.join(" ");
}
function v6(e7, t) {
  var r = 0;
  return function(n) {
    return r += 1, n.map(function(o, i) {
      return yr2({
        node: o,
        stylesheet: e7,
        useInlineStyles: t,
        key: "code-segment-".concat(r, "-").concat(i)
      });
    });
  };
}
function yr2(e7) {
  var t = e7.node, r = e7.stylesheet, n = e7.style, o = n === void 0 ? {} : n, i = e7.useInlineStyles, l7 = e7.key, u6 = t.properties, c = t.type, p = t.tagName, d = t.value;
  if (c === "text")
    return d;
  if (p) {
    var h7 = v6(r, i), f;
    if (!i)
      f = un2(un2({}, u6), {}, {
        className: Ip(u6.className)
      });
    else {
      var v7 = Object.keys(r).reduce(function(y, w5) {
        return w5.split(".").forEach(function(D7) {
          y.includes(D7) || y.push(D7);
        }), y;
      }, []), b = u6.className && u6.className.includes("token") ? ["token"] : [], m = u6.className && b.concat(u6.className.filter(function(y) {
        return !v7.includes(y);
      }));
      f = un2(un2({}, u6), {}, {
        className: Ip(m) || void 0,
        style: g6(u6.className, Object.assign({}, u6.style, o), r)
      });
    }
    var g7 = h7(t.children);
    return import_react3.default.createElement(p, H2({
      key: l7
    }, f), g7);
  }
}
var Ds;
var xs = F3(() => {
  qe2();
  ys();
  a2(Lp, "ownKeys");
  a2(un2, "_objectSpread");
  a2(h6, "powerSetPermutations");
  Ds = {};
  a2(m6, "getClassNameCombinations");
  a2(g6, "createStyleObject");
  a2(Ip, "createClassNameString");
  a2(v6, "createChildren");
  a2(yr2, "createElement");
});
var Bp;
var Mp = F3(() => {
  Bp = a2(function(e7, t) {
    var r = e7.listLanguages();
    return r.indexOf(t) !== -1;
  }, "default");
});
function _p(e7, t) {
  var r = Object.keys(e7);
  if (Object.getOwnPropertySymbols) {
    var n = Object.getOwnPropertySymbols(e7);
    t && (n = n.filter(function(o) {
      return Object.getOwnPropertyDescriptor(e7, o).enumerable;
    })), r.push.apply(r, n);
  }
  return r;
}
function mt(e7) {
  for (var t = 1; t < arguments.length; t++) {
    var r = arguments[t] != null ? arguments[t] : {};
    t % 2 ? _p(Object(r), true).forEach(function(n) {
      ii(e7, n, r[n]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e7, Object.getOwnPropertyDescriptors(r)) : _p(Object(r)).forEach(function(n) {
      Object.defineProperty(e7, n, Object.getOwnPropertyDescriptor(r, n));
    });
  }
  return e7;
}
function y6(e7) {
  return e7.match(b6);
}
function D6(e7) {
  var t = e7.lines, r = e7.startingLineNumber, n = e7.style;
  return t.map(function(o, i) {
    var l7 = i + r;
    return import_react4.default.createElement("span", {
      key: "line-".concat(i),
      className: "react-syntax-highlighter-line-number",
      style: typeof n == "function" ? n(l7) : n
    }, "".concat(l7, `
`));
  });
}
function x6(e7) {
  var t = e7.codeString, r = e7.codeStyle, n = e7.containerStyle, o = n === void 0 ? {
    float: "left",
    paddingRight: "10px"
  } : n, i = e7.numberStyle, l7 = i === void 0 ? {} : i, u6 = e7.startingLineNumber;
  return import_react4.default.createElement("code", {
    style: Object.assign({}, r, o)
  }, D6({
    lines: t.replace(/\n$/, "").split(`
`),
    style: l7,
    startingLineNumber: u6
  }));
}
function C6(e7) {
  return "".concat(e7.toString().length, ".25em");
}
function Pp(e7, t) {
  return {
    type: "element",
    tagName: "span",
    properties: {
      key: "line-number--".concat(e7),
      className: ["comment", "linenumber", "react-syntax-highlighter-line-number"],
      style: t
    },
    children: [{
      type: "text",
      value: e7
    }]
  };
}
function Hp(e7, t, r) {
  var n = {
    display: "inline-block",
    minWidth: C6(r),
    paddingRight: "1em",
    textAlign: "right",
    userSelect: "none"
  }, o = typeof e7 == "function" ? e7(t) : e7, i = mt(mt({}, n), o);
  return i;
}
function li(e7) {
  var t = e7.children, r = e7.lineNumber, n = e7.lineNumberStyle, o = e7.largestLineNumber, i = e7.showInlineLineNumbers, l7 = e7.lineProps, u6 = l7 === void 0 ? {} : l7, c = e7.className, p = c === void 0 ? [] : c, d = e7.showLineNumbers, h7 = e7.wrapLongLines, f = typeof u6 == "function" ? u6(r) : u6;
  if (f.className = p, r && i) {
    var v7 = Hp(n, r, o);
    t.unshift(Pp(r, v7));
  }
  return h7 & d && (f.style = mt(mt({}, f.style), {}, {
    display: "flex"
  })), {
    type: "element",
    tagName: "span",
    properties: f,
    children: t
  };
}
function $p(e7) {
  for (var t = arguments.length > 1 && arguments[1] !== void 0 ? arguments[1] : [], r = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [], n = 0; n < e7.length; n++) {
    var o = e7[n];
    if (o.type === "text")
      r.push(li({
        children: [o],
        className: Sp(new Set(t))
      }));
    else if (o.children) {
      var i = t.concat(o.properties.className);
      $p(o.children, i).forEach(function(l7) {
        return r.push(l7);
      });
    }
  }
  return r;
}
function E6(e7, t, r, n, o, i, l7, u6, c) {
  var p, d = $p(e7.value), h7 = [], f = -1, v7 = 0;
  function b(C7, E7) {
    var S4 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    return li({
      children: C7,
      lineNumber: E7,
      lineNumberStyle: u6,
      largestLineNumber: l7,
      showInlineLineNumbers: o,
      lineProps: r,
      className: S4,
      showLineNumbers: n,
      wrapLongLines: c
    });
  }
  a2(b, "createWrappedLine");
  function m(C7, E7) {
    if (n && E7 && o) {
      var S4 = Hp(u6, E7, l7);
      C7.unshift(Pp(E7, S4));
    }
    return C7;
  }
  a2(m, "createUnwrappedLine");
  function g7(C7, E7) {
    var S4 = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
    return t || S4.length > 0 ? b(C7, E7, S4) : m(C7, E7);
  }
  a2(g7, "createLine");
  for (var y = a2(function() {
    var E7 = d[v7], S4 = E7.children[0].value, R = y6(S4);
    if (R) {
      var A = S4.split(`
`);
      A.forEach(function(k4, B6) {
        var $6 = n && h7.length + i, M6 = {
          type: "text",
          value: "".concat(k4, `
`)
        };
        if (B6 === 0) {
          var W = d.slice(f + 1, v7).concat(li({
            children: [M6],
            className: E7.properties.className
          })), T = g7(W, $6);
          h7.push(T);
        } else if (B6 === A.length - 1) {
          var L6 = d[v7 + 1] && d[v7 + 1].children && d[v7 + 1].children[0], P6 = {
            type: "text",
            value: "".concat(k4)
          };
          if (L6) {
            var U6 = li({
              children: [P6],
              className: E7.properties.className
            });
            d.splice(v7 + 1, 0, U6);
          } else {
            var N = [P6], G = g7(N, $6, E7.properties.className);
            h7.push(G);
          }
        } else {
          var z6 = [M6], K3 = g7(z6, $6, E7.properties.className);
          h7.push(K3);
        }
      }), f = v7;
    }
    v7++;
  }, "_loop"); v7 < d.length; )
    y();
  if (f !== d.length - 1) {
    var w5 = d.slice(f + 1, d.length);
    if (w5 && w5.length) {
      var D7 = n && h7.length + i, x7 = g7(w5, D7);
      h7.push(x7);
    }
  }
  return t ? h7 : (p = []).concat.apply(p, h7);
}
function S6(e7) {
  var t = e7.rows, r = e7.stylesheet, n = e7.useInlineStyles;
  return t.map(function(o, i) {
    return yr2({
      node: o,
      stylesheet: r,
      useInlineStyles: n,
      key: "code-segement".concat(i)
    });
  });
}
function zp(e7) {
  return e7 && typeof e7.highlightAuto < "u";
}
function R6(e7) {
  var t = e7.astGenerator, r = e7.language, n = e7.code, o = e7.defaultCodeValue;
  if (zp(t)) {
    var i = Bp(t, r);
    return r === "text" ? {
      value: o,
      language: "text"
    } : i ? t.highlight(r, n) : t.highlightAuto(n);
  }
  try {
    return r && r !== "text" ? {
      value: t.highlight(n, r)
    } : {
      value: o
    };
  } catch {
    return {
      value: o
    };
  }
}
function Cs(e7, t) {
  return a2(function(n) {
    var o = n.language, i = n.children, l7 = n.style, u6 = l7 === void 0 ? t : l7, c = n.customStyle, p = c === void 0 ? {} : c, d = n.codeTagProps, h7 = d === void 0 ? {
      className: o ? "language-".concat(o) : void 0,
      style: mt(mt({}, u6['code[class*="language-"]']), u6['code[class*="language-'.concat(o, '"]')])
    } : d, f = n.useInlineStyles, v7 = f === void 0 ? true : f, b = n.showLineNumbers, m = b === void 0 ? false : b, g7 = n.showInlineLineNumbers, y = g7 === void 0 ? true : g7, w5 = n.startingLineNumber, D7 = w5 === void 0 ? 1 : w5, x7 = n.lineNumberContainerStyle, C7 = n.lineNumberStyle, E7 = C7 === void 0 ? {} : C7, S4 = n.wrapLines, R = n.wrapLongLines, A = R === void 0 ? false : R, k4 = n.lineProps, B6 = k4 === void 0 ? {} : k4, $6 = n.renderer, M6 = n.PreTag, W = M6 === void 0 ? "pre" : M6, T = n.CodeTag, L6 = T === void 0 ? "code" : T, P6 = n.code, U6 = P6 === void 0 ? (Array.isArray(i) ? i[0] : i) || "" : P6, N = n.astGenerator, G = mp(n, w6);
    N = N || e7;
    var z6 = m ? import_react4.default.createElement(x6, {
      containerStyle: x7,
      codeStyle: h7.style || {},
      numberStyle: E7,
      startingLineNumber: D7,
      codeString: U6
    }) : null, K3 = u6.hljs || u6['pre[class*="language-"]'] || {
      backgroundColor: "#fff"
    }, Te2 = zp(N) ? "hljs" : "prismjs", ve2 = v7 ? Object.assign({}, G, {
      style: Object.assign({}, K3, p)
    }) : Object.assign({}, G, {
      className: G.className ? "".concat(Te2, " ").concat(G.className) : Te2,
      style: Object.assign({}, p)
    });
    if (A ? h7.style = mt(mt({}, h7.style), {}, {
      whiteSpace: "pre-wrap"
    }) : h7.style = mt(mt({}, h7.style), {}, {
      whiteSpace: "pre"
    }), !N)
      return import_react4.default.createElement(W, ve2, z6, import_react4.default.createElement(L6, h7, U6));
    (S4 === void 0 && $6 || A) && (S4 = true), $6 = $6 || S6;
    var de2 = [{
      type: "text",
      value: U6
    }], Ce2 = R6({
      astGenerator: N,
      language: o,
      code: U6,
      defaultCodeValue: de2
    });
    Ce2.language === null && (Ce2.value = de2);
    var Le2 = Ce2.value.length + D7, Ie2 = E6(Ce2, S4, B6, m, y, D7, Le2, E7, A);
    return import_react4.default.createElement(W, ve2, import_react4.default.createElement(L6, h7, !y && z6, $6({
      rows: Ie2,
      stylesheet: u6,
      useInlineStyles: v7
    })));
  }, "SyntaxHighlighter");
}
var w6;
var b6;
var Op = F3(() => {
  gp();
  Rp();
  ys();
  xs();
  Mp();
  w6 = ["language", "children", "style", "customStyle", "codeTagProps", "useInlineStyles", "showLineNumbers", "showInlineLineNumbers", "startingLineNumber", "lineNumberContainerStyle", "lineNumberStyle", "wrapLines", "wrapLongLines", "lineProps", "renderer", "PreTag", "CodeTag", "code", "astGenerator"];
  a2(_p, "ownKeys");
  a2(mt, "_objectSpread");
  b6 = /\n/g;
  a2(y6, "getNewLines");
  a2(D6, "getAllLineNumbers");
  a2(x6, "AllLineNumbers");
  a2(C6, "getEmWidthOfNumber");
  a2(Pp, "getInlineLineNumber");
  a2(Hp, "assembleLineNumberStyles");
  a2(li, "createLineElement");
  a2($p, "flattenCodeTree");
  a2(E6, "processLines");
  a2(S6, "defaultRenderer");
  a2(zp, "isHighlightJs");
  a2(R6, "getCodeTree");
  a2(Cs, "default");
});
var jp = _2((DH, Np) => {
  Np.exports = F6;
  var A6 = Object.prototype.hasOwnProperty;
  function F6() {
    for (var e7 = {}, t = 0; t < arguments.length; t++) {
      var r = arguments[t];
      for (var n in r)
        A6.call(r, n) && (e7[n] = r[n]);
    }
    return e7;
  }
  a2(F6, "extend");
});
var Ss = _2((CH, qp) => {
  "use strict";
  qp.exports = Vp;
  var Es = Vp.prototype;
  Es.space = null;
  Es.normal = {};
  Es.property = {};
  function Vp(e7, t, r) {
    this.property = e7, this.normal = t, r && (this.space = r);
  }
  a2(Vp, "Schema");
});
var Gp = _2((SH, Up) => {
  "use strict";
  var Wp = jp(), k6 = Ss();
  Up.exports = T6;
  function T6(e7) {
    for (var t = e7.length, r = [], n = [], o = -1, i, l7; ++o < t; )
      i = e7[o], r.push(i.property), n.push(i.normal), l7 = i.space;
    return new k6(
      Wp.apply(null, r),
      Wp.apply(null, n),
      l7
    );
  }
  a2(T6, "merge");
});
var si = _2((AH, Xp) => {
  "use strict";
  Xp.exports = L6;
  function L6(e7) {
    return e7.toLowerCase();
  }
  a2(L6, "normalize");
});
var Rs = _2((kH, Kp) => {
  "use strict";
  Kp.exports = Yp;
  var Ue2 = Yp.prototype;
  Ue2.space = null;
  Ue2.attribute = null;
  Ue2.property = null;
  Ue2.boolean = false;
  Ue2.booleanish = false;
  Ue2.overloadedBoolean = false;
  Ue2.number = false;
  Ue2.commaSeparated = false;
  Ue2.spaceSeparated = false;
  Ue2.commaOrSpaceSeparated = false;
  Ue2.mustUseProperty = false;
  Ue2.defined = false;
  function Yp(e7, t) {
    this.property = e7, this.attribute = t;
  }
  a2(Yp, "Info");
});
var ui = _2((Kt2) => {
  "use strict";
  var I6 = 0;
  Kt2.boolean = xr2();
  Kt2.booleanish = xr2();
  Kt2.overloadedBoolean = xr2();
  Kt2.number = xr2();
  Kt2.spaceSeparated = xr2();
  Kt2.commaSeparated = xr2();
  Kt2.commaOrSpaceSeparated = xr2();
  function xr2() {
    return Math.pow(2, ++I6);
  }
  a2(xr2, "increment");
});
var Fs = _2((BH, td) => {
  "use strict";
  var Qp = Rs(), Zp = ui();
  td.exports = As;
  As.prototype = new Qp();
  As.prototype.defined = true;
  var ed = [
    "boolean",
    "booleanish",
    "overloadedBoolean",
    "number",
    "commaSeparated",
    "spaceSeparated",
    "commaOrSpaceSeparated"
  ], B6 = ed.length;
  function As(e7, t, r, n) {
    var o = -1, i;
    for (Jp(this, "space", n), Qp.call(this, e7, t); ++o < B6; )
      i = ed[o], Jp(this, i, (r & Zp[i]) === Zp[i]);
  }
  a2(As, "DefinedInfo");
  function Jp(e7, t, r) {
    r && (e7[t] = r);
  }
  a2(Jp, "mark");
});
var cn2 = _2((_H, nd) => {
  "use strict";
  var rd = si(), M6 = Ss(), _6 = Fs();
  nd.exports = P6;
  function P6(e7) {
    var t = e7.space, r = e7.mustUseProperty || [], n = e7.attributes || {}, o = e7.properties, i = e7.transform, l7 = {}, u6 = {}, c, p;
    for (c in o)
      p = new _6(
        c,
        i(n, c),
        o[c],
        t
      ), r.indexOf(c) !== -1 && (p.mustUseProperty = true), l7[c] = p, u6[rd(c)] = c, u6[rd(p.attribute)] = c;
    return new M6(l7, u6, t);
  }
  a2(P6, "create");
});
var ad = _2((HH, od) => {
  "use strict";
  var H6 = cn2();
  od.exports = H6({
    space: "xlink",
    transform: $6,
    properties: {
      xLinkActuate: null,
      xLinkArcRole: null,
      xLinkHref: null,
      xLinkRole: null,
      xLinkShow: null,
      xLinkTitle: null,
      xLinkType: null
    }
  });
  function $6(e7, t) {
    return "xlink:" + t.slice(5).toLowerCase();
  }
  a2($6, "xlinkTransform");
});
var ld = _2((zH, id) => {
  "use strict";
  var z6 = cn2();
  id.exports = z6({
    space: "xml",
    transform: O6,
    properties: {
      xmlLang: null,
      xmlBase: null,
      xmlSpace: null
    }
  });
  function O6(e7, t) {
    return "xml:" + t.slice(3).toLowerCase();
  }
  a2(O6, "xmlTransform");
});
var ud = _2((NH, sd) => {
  "use strict";
  sd.exports = N6;
  function N6(e7, t) {
    return t in e7 ? e7[t] : t;
  }
  a2(N6, "caseSensitiveTransform");
});
var ks = _2((VH, cd) => {
  "use strict";
  var j6 = ud();
  cd.exports = V6;
  function V6(e7, t) {
    return j6(e7, t.toLowerCase());
  }
  a2(V6, "caseInsensitiveTransform");
});
var dd = _2((WH, pd) => {
  "use strict";
  var q62 = cn2(), W6 = ks();
  pd.exports = q62({
    space: "xmlns",
    attributes: {
      xmlnsxlink: "xmlns:xlink"
    },
    transform: W6,
    properties: {
      xmlns: null,
      xmlnsXLink: null
    }
  });
});
var hd = _2((UH, fd) => {
  "use strict";
  var Ts = ui(), U6 = cn2(), Me2 = Ts.booleanish, Ge2 = Ts.number, Cr2 = Ts.spaceSeparated;
  fd.exports = U6({
    transform: G6,
    properties: {
      ariaActiveDescendant: null,
      ariaAtomic: Me2,
      ariaAutoComplete: null,
      ariaBusy: Me2,
      ariaChecked: Me2,
      ariaColCount: Ge2,
      ariaColIndex: Ge2,
      ariaColSpan: Ge2,
      ariaControls: Cr2,
      ariaCurrent: null,
      ariaDescribedBy: Cr2,
      ariaDetails: null,
      ariaDisabled: Me2,
      ariaDropEffect: Cr2,
      ariaErrorMessage: null,
      ariaExpanded: Me2,
      ariaFlowTo: Cr2,
      ariaGrabbed: Me2,
      ariaHasPopup: null,
      ariaHidden: Me2,
      ariaInvalid: null,
      ariaKeyShortcuts: null,
      ariaLabel: null,
      ariaLabelledBy: Cr2,
      ariaLevel: Ge2,
      ariaLive: null,
      ariaModal: Me2,
      ariaMultiLine: Me2,
      ariaMultiSelectable: Me2,
      ariaOrientation: null,
      ariaOwns: Cr2,
      ariaPlaceholder: null,
      ariaPosInSet: Ge2,
      ariaPressed: Me2,
      ariaReadOnly: Me2,
      ariaRelevant: null,
      ariaRequired: Me2,
      ariaRoleDescription: Cr2,
      ariaRowCount: Ge2,
      ariaRowIndex: Ge2,
      ariaRowSpan: Ge2,
      ariaSelected: Me2,
      ariaSetSize: Ge2,
      ariaSort: null,
      ariaValueMax: Ge2,
      ariaValueMin: Ge2,
      ariaValueNow: Ge2,
      ariaValueText: null,
      role: null
    }
  });
  function G6(e7, t) {
    return t === "role" ? t : "aria-" + t.slice(4).toLowerCase();
  }
  a2(G6, "ariaTransform");
});
var gd = _2((XH, md) => {
  "use strict";
  var pn2 = ui(), X6 = cn2(), Y6 = ks(), V6 = pn2.boolean, K6 = pn2.overloadedBoolean, ta2 = pn2.booleanish, Z6 = pn2.number, Re2 = pn2.spaceSeparated, ci = pn2.commaSeparated;
  md.exports = X6({
    space: "html",
    attributes: {
      acceptcharset: "accept-charset",
      classname: "class",
      htmlfor: "for",
      httpequiv: "http-equiv"
    },
    transform: Y6,
    mustUseProperty: ["checked", "multiple", "muted", "selected"],
    properties: {
      // Standard Properties.
      abbr: null,
      accept: ci,
      acceptCharset: Re2,
      accessKey: Re2,
      action: null,
      allow: null,
      allowFullScreen: V6,
      allowPaymentRequest: V6,
      allowUserMedia: V6,
      alt: null,
      as: null,
      async: V6,
      autoCapitalize: null,
      autoComplete: Re2,
      autoFocus: V6,
      autoPlay: V6,
      capture: V6,
      charSet: null,
      checked: V6,
      cite: null,
      className: Re2,
      cols: Z6,
      colSpan: null,
      content: null,
      contentEditable: ta2,
      controls: V6,
      controlsList: Re2,
      coords: Z6 | ci,
      crossOrigin: null,
      data: null,
      dateTime: null,
      decoding: null,
      default: V6,
      defer: V6,
      dir: null,
      dirName: null,
      disabled: V6,
      download: K6,
      draggable: ta2,
      encType: null,
      enterKeyHint: null,
      form: null,
      formAction: null,
      formEncType: null,
      formMethod: null,
      formNoValidate: V6,
      formTarget: null,
      headers: Re2,
      height: Z6,
      hidden: V6,
      high: Z6,
      href: null,
      hrefLang: null,
      htmlFor: Re2,
      httpEquiv: Re2,
      id: null,
      imageSizes: null,
      imageSrcSet: ci,
      inputMode: null,
      integrity: null,
      is: null,
      isMap: V6,
      itemId: null,
      itemProp: Re2,
      itemRef: Re2,
      itemScope: V6,
      itemType: Re2,
      kind: null,
      label: null,
      lang: null,
      language: null,
      list: null,
      loading: null,
      loop: V6,
      low: Z6,
      manifest: null,
      max: null,
      maxLength: Z6,
      media: null,
      method: null,
      min: null,
      minLength: Z6,
      multiple: V6,
      muted: V6,
      name: null,
      nonce: null,
      noModule: V6,
      noValidate: V6,
      onAbort: null,
      onAfterPrint: null,
      onAuxClick: null,
      onBeforePrint: null,
      onBeforeUnload: null,
      onBlur: null,
      onCancel: null,
      onCanPlay: null,
      onCanPlayThrough: null,
      onChange: null,
      onClick: null,
      onClose: null,
      onContextMenu: null,
      onCopy: null,
      onCueChange: null,
      onCut: null,
      onDblClick: null,
      onDrag: null,
      onDragEnd: null,
      onDragEnter: null,
      onDragExit: null,
      onDragLeave: null,
      onDragOver: null,
      onDragStart: null,
      onDrop: null,
      onDurationChange: null,
      onEmptied: null,
      onEnded: null,
      onError: null,
      onFocus: null,
      onFormData: null,
      onHashChange: null,
      onInput: null,
      onInvalid: null,
      onKeyDown: null,
      onKeyPress: null,
      onKeyUp: null,
      onLanguageChange: null,
      onLoad: null,
      onLoadedData: null,
      onLoadedMetadata: null,
      onLoadEnd: null,
      onLoadStart: null,
      onMessage: null,
      onMessageError: null,
      onMouseDown: null,
      onMouseEnter: null,
      onMouseLeave: null,
      onMouseMove: null,
      onMouseOut: null,
      onMouseOver: null,
      onMouseUp: null,
      onOffline: null,
      onOnline: null,
      onPageHide: null,
      onPageShow: null,
      onPaste: null,
      onPause: null,
      onPlay: null,
      onPlaying: null,
      onPopState: null,
      onProgress: null,
      onRateChange: null,
      onRejectionHandled: null,
      onReset: null,
      onResize: null,
      onScroll: null,
      onSecurityPolicyViolation: null,
      onSeeked: null,
      onSeeking: null,
      onSelect: null,
      onSlotChange: null,
      onStalled: null,
      onStorage: null,
      onSubmit: null,
      onSuspend: null,
      onTimeUpdate: null,
      onToggle: null,
      onUnhandledRejection: null,
      onUnload: null,
      onVolumeChange: null,
      onWaiting: null,
      onWheel: null,
      open: V6,
      optimum: Z6,
      pattern: null,
      ping: Re2,
      placeholder: null,
      playsInline: V6,
      poster: null,
      preload: null,
      readOnly: V6,
      referrerPolicy: null,
      rel: Re2,
      required: V6,
      reversed: V6,
      rows: Z6,
      rowSpan: Z6,
      sandbox: Re2,
      scope: null,
      scoped: V6,
      seamless: V6,
      selected: V6,
      shape: null,
      size: Z6,
      sizes: null,
      slot: null,
      span: Z6,
      spellCheck: ta2,
      src: null,
      srcDoc: null,
      srcLang: null,
      srcSet: ci,
      start: Z6,
      step: null,
      style: null,
      tabIndex: Z6,
      target: null,
      title: null,
      translate: null,
      type: null,
      typeMustMatch: V6,
      useMap: null,
      value: ta2,
      width: Z6,
      wrap: null,
      // Legacy.
      // See: https://html.spec.whatwg.org/#other-elements,-attributes-and-apis
      align: null,
      // Several. Use CSS `text-align` instead,
      aLink: null,
      // `<body>`. Use CSS `a:active {color}` instead
      archive: Re2,
      // `<object>`. List of URIs to archives
      axis: null,
      // `<td>` and `<th>`. Use `scope` on `<th>`
      background: null,
      // `<body>`. Use CSS `background-image` instead
      bgColor: null,
      // `<body>` and table elements. Use CSS `background-color` instead
      border: Z6,
      // `<table>`. Use CSS `border-width` instead,
      borderColor: null,
      // `<table>`. Use CSS `border-color` instead,
      bottomMargin: Z6,
      // `<body>`
      cellPadding: null,
      // `<table>`
      cellSpacing: null,
      // `<table>`
      char: null,
      // Several table elements. When `align=char`, sets the character to align on
      charOff: null,
      // Several table elements. When `char`, offsets the alignment
      classId: null,
      // `<object>`
      clear: null,
      // `<br>`. Use CSS `clear` instead
      code: null,
      // `<object>`
      codeBase: null,
      // `<object>`
      codeType: null,
      // `<object>`
      color: null,
      // `<font>` and `<hr>`. Use CSS instead
      compact: V6,
      // Lists. Use CSS to reduce space between items instead
      declare: V6,
      // `<object>`
      event: null,
      // `<script>`
      face: null,
      // `<font>`. Use CSS instead
      frame: null,
      // `<table>`
      frameBorder: null,
      // `<iframe>`. Use CSS `border` instead
      hSpace: Z6,
      // `<img>` and `<object>`
      leftMargin: Z6,
      // `<body>`
      link: null,
      // `<body>`. Use CSS `a:link {color: *}` instead
      longDesc: null,
      // `<frame>`, `<iframe>`, and `<img>`. Use an `<a>`
      lowSrc: null,
      // `<img>`. Use a `<picture>`
      marginHeight: Z6,
      // `<body>`
      marginWidth: Z6,
      // `<body>`
      noResize: V6,
      // `<frame>`
      noHref: V6,
      // `<area>`. Use no href instead of an explicit `nohref`
      noShade: V6,
      // `<hr>`. Use background-color and height instead of borders
      noWrap: V6,
      // `<td>` and `<th>`
      object: null,
      // `<applet>`
      profile: null,
      // `<head>`
      prompt: null,
      // `<isindex>`
      rev: null,
      // `<link>`
      rightMargin: Z6,
      // `<body>`
      rules: null,
      // `<table>`
      scheme: null,
      // `<meta>`
      scrolling: ta2,
      // `<frame>`. Use overflow in the child context
      standby: null,
      // `<object>`
      summary: null,
      // `<table>`
      text: null,
      // `<body>`. Use CSS `color` instead
      topMargin: Z6,
      // `<body>`
      valueType: null,
      // `<param>`
      version: null,
      // `<html>`. Use a doctype.
      vAlign: null,
      // Several. Use CSS `vertical-align` instead
      vLink: null,
      // `<body>`. Use CSS `a:visited {color}` instead
      vSpace: Z6,
      // `<img>` and `<object>`
      // Non-standard Properties.
      allowTransparency: null,
      autoCorrect: null,
      autoSave: null,
      disablePictureInPicture: V6,
      disableRemotePlayback: V6,
      prefix: null,
      property: null,
      results: Z6,
      security: null,
      unselectable: null
    }
  });
});
var wd = _2((YH, vd) => {
  "use strict";
  var Z6 = Gp(), J6 = ad(), Q6 = ld(), e7 = dd(), t7 = hd(), r7 = gd();
  vd.exports = Z6([Q6, J6, e7, t7, r7]);
});
var Dd = _2((KH, yd) => {
  "use strict";
  var n7 = si(), o7 = Fs(), a7 = Rs(), Ls = "data";
  yd.exports = s7;
  var i7 = /^data[-\w.:]+$/i, bd = /-[a-z]/g, l7 = /[A-Z]/g;
  function s7(e7, t) {
    var r = n7(t), n = t, o = a7;
    return r in e7.normal ? e7.property[e7.normal[r]] : (r.length > 4 && r.slice(0, 4) === Ls && i7.test(t) && (t.charAt(4) === "-" ? n = u7(t) : t = c7(t), o = o7), new o(n, t));
  }
  a2(s7, "find");
  function u7(e7) {
    var t = e7.slice(5).replace(bd, d7);
    return Ls + t.charAt(0).toUpperCase() + t.slice(1);
  }
  a2(u7, "datasetToProperty");
  function c7(e7) {
    var t = e7.slice(4);
    return bd.test(t) ? e7 : (t = t.replace(l7, p7), t.charAt(0) !== "-" && (t = "-" + t), Ls + t);
  }
  a2(c7, "datasetToAttribute");
  function p7(e7) {
    return "-" + e7.toLowerCase();
  }
  a2(p7, "kebab");
  function d7(e7) {
    return e7.charAt(1).toUpperCase();
  }
  a2(d7, "camelcase");
});
var Ed = _2((JH, Cd) => {
  "use strict";
  Cd.exports = f7;
  var xd = /[#.]/g;
  function f7(e7, t) {
    for (var r = e7 || "", n = t || "div", o = {}, i = 0, l7, u6, c; i < r.length; )
      xd.lastIndex = i, c = xd.exec(r), l7 = r.slice(i, c ? c.index : r.length), l7 && (u6 ? u6 === "#" ? o.id = l7 : o.className ? o.className.push(
        l7
      ) : o.className = [l7] : n = l7, i += l7.length), c && (u6 = c[0], i++);
    return { type: "element", tagName: n, properties: o, children: [] };
  }
  a2(f7, "parse");
});
var Rd = _2((Is) => {
  "use strict";
  Is.parse = g7;
  Is.stringify = v7;
  var Sd = "", h7 = " ", m7 = /[ \t\n\r\f]+/g;
  function g7(e7) {
    var t = String(e7 || Sd).trim();
    return t === Sd ? [] : t.split(m7);
  }
  a2(g7, "parse");
  function v7(e7) {
    return e7.join(h7).trim();
  }
  a2(v7, "stringify");
});
var Fd = _2((Ms) => {
  "use strict";
  Ms.parse = w7;
  Ms.stringify = b7;
  var Bs = ",", Ad = " ", ra2 = "";
  function w7(e7) {
    for (var t = [], r = String(e7 || ra2), n = r.indexOf(Bs), o = 0, i = false, l7; !i; )
      n === -1 && (n = r.length, i = true), l7 = r.slice(o, n).trim(), (l7 || !i) && t.push(l7), o = n + 1, n = r.indexOf(Bs, o);
    return t;
  }
  a2(w7, "parse");
  function b7(e7, t) {
    var r = t || {}, n = r.padLeft === false ? ra2 : Ad, o = r.padRight ? Ad : ra2;
    return e7[e7.length - 1] === ra2 && (e7 = e7.concat(ra2)), e7.join(o + Bs + n).trim();
  }
  a2(b7, "stringify");
});
var _d = _2((o$, Md) => {
  "use strict";
  var y7 = Dd(), kd = si(), D7 = Ed(), Td = Rd().parse, Ld = Fd().parse;
  Md.exports = C7;
  var x7 = {}.hasOwnProperty;
  function C7(e7, t, r) {
    var n = r ? F7(r) : null;
    return o;
    function o(l7, u6) {
      var c = D7(l7, t), p = Array.prototype.slice.call(arguments, 2), d = c.tagName.toLowerCase(), h7;
      if (c.tagName = n && x7.call(n, d) ? n[d] : d, u6 && E7(u6, c) && (p.unshift(u6), u6 = null), u6)
        for (h7 in u6)
          i(c.properties, h7, u6[h7]);
      return Bd(c.children, p), c.tagName === "template" && (c.content = { type: "root", children: c.children }, c.children = []), c;
    }
    function i(l7, u6, c) {
      var p, d, h7;
      c == null || c !== c || (p = y7(e7, u6), d = p.property, h7 = c, typeof h7 == "string" && (p.spaceSeparated ? h7 = Td(h7) : p.commaSeparated ? h7 = Ld(h7) : p.commaOrSpaceSeparated && (h7 = Td(Ld(h7).join(" ")))), d === "style" && typeof c != "string" && (h7 = A7(h7)), d === "className" && l7.className && (h7 = l7.className.concat(h7)), l7[d] = R7(p, d, h7));
    }
  }
  a2(C7, "factory");
  function E7(e7, t) {
    return typeof e7 == "string" || "length" in e7 || S7(t.tagName, e7);
  }
  a2(E7, "isChildren");
  function S7(e7, t) {
    var r = t.type;
    return e7 === "input" || !r || typeof r != "string" ? false : typeof t.children == "object" && "length" in t.children ? true : (r = r.toLowerCase(), e7 === "button" ? r !== "menu" && r !== "submit" && r !== "reset" && r !== "button" : "value" in t);
  }
  a2(S7, "isNode");
  function Bd(e7, t) {
    var r, n;
    if (typeof t == "string" || typeof t == "number") {
      e7.push({ type: "text", value: String(t) });
      return;
    }
    if (typeof t == "object" && "length" in t) {
      for (r = -1, n = t.length; ++r < n; )
        Bd(e7, t[r]);
      return;
    }
    if (typeof t != "object" || !("type" in t))
      throw new Error("Expected node, nodes, or string, got `" + t + "`");
    e7.push(t);
  }
  a2(Bd, "addChild");
  function R7(e7, t, r) {
    var n, o, i;
    if (typeof r != "object" || !("length" in r))
      return Id(e7, t, r);
    for (o = r.length, n = -1, i = []; ++n < o; )
      i[n] = Id(e7, t, r[n]);
    return i;
  }
  a2(R7, "parsePrimitives");
  function Id(e7, t, r) {
    var n = r;
    return e7.number || e7.positiveNumber ? !isNaN(n) && n !== "" && (n = Number(n)) : (e7.boolean || e7.overloadedBoolean) && typeof n == "string" && (n === "" || kd(r) === kd(t)) && (n = true), n;
  }
  a2(Id, "parsePrimitive");
  function A7(e7) {
    var t = [], r;
    for (r in e7)
      t.push([r, e7[r]].join(": "));
    return t.join("; ");
  }
  a2(A7, "style");
  function F7(e7) {
    for (var t = e7.length, r = -1, n = {}, o; ++r < t; )
      o = e7[r], n[o.toLowerCase()] = o;
    return n;
  }
  a2(F7, "createAdjustMap");
});
var $d = _2((i$, Hd) => {
  "use strict";
  var k7 = wd(), T7 = _d(), Pd = T7(k7, "div");
  Pd.displayName = "html";
  Hd.exports = Pd;
});
var Od = _2((l$, zd) => {
  "use strict";
  zd.exports = $d();
});
var Nd = _2((s$, L7) => {
  L7.exports = {
    AElig: "Æ",
    AMP: "&",
    Aacute: "Á",
    Acirc: "Â",
    Agrave: "À",
    Aring: "Å",
    Atilde: "Ã",
    Auml: "Ä",
    COPY: "©",
    Ccedil: "Ç",
    ETH: "Ð",
    Eacute: "É",
    Ecirc: "Ê",
    Egrave: "È",
    Euml: "Ë",
    GT: ">",
    Iacute: "Í",
    Icirc: "Î",
    Igrave: "Ì",
    Iuml: "Ï",
    LT: "<",
    Ntilde: "Ñ",
    Oacute: "Ó",
    Ocirc: "Ô",
    Ograve: "Ò",
    Oslash: "Ø",
    Otilde: "Õ",
    Ouml: "Ö",
    QUOT: '"',
    REG: "®",
    THORN: "Þ",
    Uacute: "Ú",
    Ucirc: "Û",
    Ugrave: "Ù",
    Uuml: "Ü",
    Yacute: "Ý",
    aacute: "á",
    acirc: "â",
    acute: "´",
    aelig: "æ",
    agrave: "à",
    amp: "&",
    aring: "å",
    atilde: "ã",
    auml: "ä",
    brvbar: "¦",
    ccedil: "ç",
    cedil: "¸",
    cent: "¢",
    copy: "©",
    curren: "¤",
    deg: "°",
    divide: "÷",
    eacute: "é",
    ecirc: "ê",
    egrave: "è",
    eth: "ð",
    euml: "ë",
    frac12: "½",
    frac14: "¼",
    frac34: "¾",
    gt: ">",
    iacute: "í",
    icirc: "î",
    iexcl: "¡",
    igrave: "ì",
    iquest: "¿",
    iuml: "ï",
    laquo: "«",
    lt: "<",
    macr: "¯",
    micro: "µ",
    middot: "·",
    nbsp: " ",
    not: "¬",
    ntilde: "ñ",
    oacute: "ó",
    ocirc: "ô",
    ograve: "ò",
    ordf: "ª",
    ordm: "º",
    oslash: "ø",
    otilde: "õ",
    ouml: "ö",
    para: "¶",
    plusmn: "±",
    pound: "£",
    quot: '"',
    raquo: "»",
    reg: "®",
    sect: "§",
    shy: "­",
    sup1: "¹",
    sup2: "²",
    sup3: "³",
    szlig: "ß",
    thorn: "þ",
    times: "×",
    uacute: "ú",
    ucirc: "û",
    ugrave: "ù",
    uml: "¨",
    uuml: "ü",
    yacute: "ý",
    yen: "¥",
    yuml: "ÿ"
  };
});
var jd = _2((u$, I7) => {
  I7.exports = {
    "0": "�",
    "128": "€",
    "130": "‚",
    "131": "ƒ",
    "132": "„",
    "133": "…",
    "134": "†",
    "135": "‡",
    "136": "ˆ",
    "137": "‰",
    "138": "Š",
    "139": "‹",
    "140": "Œ",
    "142": "Ž",
    "145": "‘",
    "146": "’",
    "147": "“",
    "148": "”",
    "149": "•",
    "150": "–",
    "151": "—",
    "152": "˜",
    "153": "™",
    "154": "š",
    "155": "›",
    "156": "œ",
    "158": "ž",
    "159": "Ÿ"
  };
});
var _s = _2((c$, Vd) => {
  "use strict";
  Vd.exports = B7;
  function B7(e7) {
    var t = typeof e7 == "string" ? e7.charCodeAt(0) : e7;
    return t >= 48 && t <= 57;
  }
  a2(B7, "decimal");
});
var Wd = _2((d$, qd) => {
  "use strict";
  qd.exports = M7;
  function M7(e7) {
    var t = typeof e7 == "string" ? e7.charCodeAt(0) : e7;
    return t >= 97 && t <= 102 || t >= 65 && t <= 70 || t >= 48 && t <= 57;
  }
  a2(M7, "hexadecimal");
});
var Gd = _2((h$, Ud) => {
  "use strict";
  Ud.exports = _7;
  function _7(e7) {
    var t = typeof e7 == "string" ? e7.charCodeAt(0) : e7;
    return t >= 97 && t <= 122 || t >= 65 && t <= 90;
  }
  a2(_7, "alphabetical");
});
var Yd = _2((g$, Xd) => {
  "use strict";
  var P7 = Gd(), H7 = _s();
  Xd.exports = $7;
  function $7(e7) {
    return P7(e7) || H7(e7);
  }
  a2($7, "alphanumerical");
});
var Zd = _2((w$, Kd) => {
  "use strict";
  var pi, z7 = 59;
  Kd.exports = O7;
  function O7(e7) {
    var t = "&" + e7 + ";", r;
    return pi = pi || document.createElement("i"), pi.innerHTML = t, r = pi.textContent, r.charCodeAt(r.length - 1) === z7 && e7 !== "semi" || r === t ? false : r;
  }
  a2(O7, "decodeEntity");
});
var df = _2((y$, pf) => {
  "use strict";
  var Jd = Nd(), Qd = jd(), N7 = _s(), j7 = Wd(), nf = Yd(), V7 = Zd();
  pf.exports = rw;
  var q7 = {}.hasOwnProperty, dn2 = String.fromCharCode, W7 = Function.prototype, ef = {
    warning: null,
    reference: null,
    text: null,
    warningContext: null,
    referenceContext: null,
    textContext: null,
    position: {},
    additional: null,
    attribute: false,
    nonTerminated: true
  }, U7 = 9, tf = 10, G7 = 12, X7 = 32, rf = 38, Y7 = 59, K7 = 60, Z7 = 61, J7 = 35, Q7 = 88, ew = 120, tw = 65533, fn = "named", Hs = "hexadecimal", $s = "decimal", zs = {};
  zs[Hs] = 16;
  zs[$s] = 10;
  var di = {};
  di[fn] = nf;
  di[$s] = N7;
  di[Hs] = j7;
  var of = 1, af = 2, lf = 3, sf = 4, uf = 5, Ps = 6, cf = 7, Zt2 = {};
  Zt2[of] = "Named character references must be terminated by a semicolon";
  Zt2[af] = "Numeric character references must be terminated by a semicolon";
  Zt2[lf] = "Named character references cannot be empty";
  Zt2[sf] = "Numeric character references cannot be empty";
  Zt2[uf] = "Named character references must be known";
  Zt2[Ps] = "Numeric character references cannot be disallowed";
  Zt2[cf] = "Numeric character references cannot be outside the permissible Unicode range";
  function rw(e7, t) {
    var r = {}, n, o;
    t || (t = {});
    for (o in ef)
      n = t[o], r[o] = n ?? ef[o];
    return (r.position.indent || r.position.start) && (r.indent = r.position.indent || [], r.position = r.position.start), nw(e7, r);
  }
  a2(rw, "parseEntities");
  function nw(e7, t) {
    var r = t.additional, n = t.nonTerminated, o = t.text, i = t.reference, l7 = t.warning, u6 = t.textContext, c = t.referenceContext, p = t.warningContext, d = t.position, h7 = t.indent || [], f = e7.length, v7 = 0, b = -1, m = d.column || 1, g7 = d.line || 1, y = "", w5 = [], D7, x7, C7, E7, S4, R, A, k4, B6, $6, M6, W, T, L6, P6, U6, N, G, z6;
    for (typeof r == "string" && (r = r.charCodeAt(0)), U6 = K3(), k4 = l7 ? Te2 : W7, v7--, f++; ++v7 < f; )
      if (S4 === tf && (m = h7[b] || 1), S4 = e7.charCodeAt(v7), S4 === rf) {
        if (A = e7.charCodeAt(v7 + 1), A === U7 || A === tf || A === G7 || A === X7 || A === rf || A === K7 || A !== A || r && A === r) {
          y += dn2(S4), m++;
          continue;
        }
        for (T = v7 + 1, W = T, z6 = T, A === J7 ? (z6 = ++W, A = e7.charCodeAt(z6), A === Q7 || A === ew ? (L6 = Hs, z6 = ++W) : L6 = $s) : L6 = fn, D7 = "", M6 = "", E7 = "", P6 = di[L6], z6--; ++z6 < f && (A = e7.charCodeAt(z6), !!P6(A)); )
          E7 += dn2(A), L6 === fn && q7.call(Jd, E7) && (D7 = E7, M6 = Jd[E7]);
        C7 = e7.charCodeAt(z6) === Y7, C7 && (z6++, x7 = L6 === fn ? V7(E7) : false, x7 && (D7 = E7, M6 = x7)), G = 1 + z6 - T, !C7 && !n || (E7 ? L6 === fn ? (C7 && !M6 ? k4(uf, 1) : (D7 !== E7 && (z6 = W + D7.length, G = 1 + z6 - W, C7 = false), C7 || (B6 = D7 ? of : lf, t.attribute ? (A = e7.charCodeAt(z6), A === Z7 ? (k4(B6, G), M6 = null) : nf(A) ? M6 = null : k4(B6, G)) : k4(B6, G))), R = M6) : (C7 || k4(af, G), R = parseInt(E7, zs[L6]), ow(R) ? (k4(cf, G), R = dn2(tw)) : R in Qd ? (k4(Ps, G), R = Qd[R]) : ($6 = "", aw(R) && k4(Ps, G), R > 65535 && (R -= 65536, $6 += dn2(R >>> 10 | 55296), R = 56320 | R & 1023), R = $6 + dn2(R))) : L6 !== fn && k4(sf, G)), R ? (ve2(), U6 = K3(), v7 = z6 - 1, m += z6 - T + 1, w5.push(R), N = K3(), N.offset++, i && i.call(
          c,
          R,
          { start: U6, end: N },
          e7.slice(T - 1, z6)
        ), U6 = N) : (E7 = e7.slice(T - 1, z6), y += E7, m += E7.length, v7 = z6 - 1);
      } else
        S4 === 10 && (g7++, b++, m = 0), S4 === S4 ? (y += dn2(S4), m++) : ve2();
    return w5.join("");
    function K3() {
      return {
        line: g7,
        column: m,
        offset: v7 + (d.offset || 0)
      };
    }
    function Te2(de2, Ce2) {
      var Le2 = K3();
      Le2.column += Ce2, Le2.offset += Ce2, l7.call(p, Zt2[de2], Le2, de2);
    }
    function ve2() {
      y && (w5.push(y), o && o.call(u6, y, { start: U6, end: K3() }), y = "");
    }
  }
  a2(nw, "parse");
  function ow(e7) {
    return e7 >= 55296 && e7 <= 57343 || e7 > 1114111;
  }
  a2(ow, "prohibited");
  function aw(e7) {
    return e7 >= 1 && e7 <= 8 || e7 === 11 || e7 >= 13 && e7 <= 31 || e7 >= 127 && e7 <= 159 || e7 >= 64976 && e7 <= 65007 || (e7 & 65535) === 65535 || (e7 & 65535) === 65534;
  }
  a2(aw, "disallowed");
});
var hf = _2((x$, fi) => {
  var iw = typeof window < "u" ? window : typeof WorkerGlobalScope < "u" && self instanceof WorkerGlobalScope ? self : {};
  var ff = function(e7) {
    var t = /(?:^|\s)lang(?:uage)?-([\w-]+)(?=\s|$)/i, r = 0, n = {}, o = {
      /**
       * By default, Prism will attempt to highlight all code elements (by calling {@link Prism.highlightAll}) on the
       * current page after the page finished loading. This might be a problem if e.g. you wanted to asynchronously load
       * additional languages or plugins yourself.
       *
       * By setting this value to `true`, Prism will not automatically highlight all code elements on the page.
       *
       * You obviously have to change this value before the automatic highlighting started. To do this, you can add an
       * empty Prism object into the global scope before loading the Prism script like this:
       *
       * ```js
       * window.Prism = window.Prism || {};
       * Prism.manual = true;
       * // add a new <script> to load Prism's script
       * ```
       *
       * @default false
       * @type {boolean}
       * @memberof Prism
       * @public
       */
      manual: e7.Prism && e7.Prism.manual,
      /**
       * By default, if Prism is in a web worker, it assumes that it is in a worker it created itself, so it uses
       * `addEventListener` to communicate with its parent instance. However, if you're using Prism manually in your
       * own worker, you don't want it to do this.
       *
       * By setting this value to `true`, Prism will not add its own listeners to the worker.
       *
       * You obviously have to change this value before Prism executes. To do this, you can add an
       * empty Prism object into the global scope before loading the Prism script like this:
       *
       * ```js
       * window.Prism = window.Prism || {};
       * Prism.disableWorkerMessageHandler = true;
       * // Load Prism's script
       * ```
       *
       * @default false
       * @type {boolean}
       * @memberof Prism
       * @public
       */
      disableWorkerMessageHandler: e7.Prism && e7.Prism.disableWorkerMessageHandler,
      /**
       * A namespace for utility methods.
       *
       * All function in this namespace that are not explicitly marked as _public_ are for __internal use only__ and may
       * change or disappear at any time.
       *
       * @namespace
       * @memberof Prism
       */
      util: {
        encode: a2(function m(g7) {
          return g7 instanceof i ? new i(g7.type, m(g7.content), g7.alias) : Array.isArray(g7) ? g7.map(m) : g7.replace(/&/g, "&amp;").replace(
            /</g,
            "&lt;"
          ).replace(/\u00a0/g, " ");
        }, "encode"),
        /**
         * Returns the name of the type of the given value.
         *
         * @param {any} o
         * @returns {string}
         * @example
         * type(null)      === 'Null'
         * type(undefined) === 'Undefined'
         * type(123)       === 'Number'
         * type('foo')     === 'String'
         * type(true)      === 'Boolean'
         * type([1, 2])    === 'Array'
         * type({})        === 'Object'
         * type(String)    === 'Function'
         * type(/abc+/)    === 'RegExp'
         */
        type: a2(function(m) {
          return Object.prototype.toString.call(m).slice(8, -1);
        }, "type"),
        /**
         * Returns a unique number for the given object. Later calls will still return the same number.
         *
         * @param {Object} obj
         * @returns {number}
         */
        objId: a2(function(m) {
          return m.__id || Object.defineProperty(m, "__id", { value: ++r }), m.__id;
        }, "objId"),
        /**
         * Creates a deep clone of the given object.
         *
         * The main intended use of this function is to clone language definitions.
         *
         * @param {T} o
         * @param {Record<number, any>} [visited]
         * @returns {T}
         * @template T
         */
        clone: a2(function m(g7, y) {
          y = y || {};
          var w5, D7;
          switch (o.util.type(g7)) {
            case "Object":
              if (D7 = o.util.objId(g7), y[D7])
                return y[D7];
              w5 = /** @type {Record<string, any>} */
              {}, y[D7] = w5;
              for (var x7 in g7)
                g7.hasOwnProperty(x7) && (w5[x7] = m(g7[x7], y));
              return (
                /** @type {any} */
                w5
              );
            case "Array":
              return D7 = o.util.objId(g7), y[D7] ? y[D7] : (w5 = [], y[D7] = w5, /** @type {Array} */
              /** @type {any} */
              g7.forEach(function(C7, E7) {
                w5[E7] = m(C7, y);
              }), /** @type {any} */
              w5);
            default:
              return g7;
          }
        }, "deepClone"),
        /**
         * Returns the Prism language of the given element set by a `language-xxxx` or `lang-xxxx` class.
         *
         * If no language is set for the element or the element is `null` or `undefined`, `none` will be returned.
         *
         * @param {Element} element
         * @returns {string}
         */
        getLanguage: a2(function(m) {
          for (; m; ) {
            var g7 = t.exec(m.className);
            if (g7)
              return g7[1].toLowerCase();
            m = m.parentElement;
          }
          return "none";
        }, "getLanguage"),
        /**
         * Sets the Prism `language-xxxx` class of the given element.
         *
         * @param {Element} element
         * @param {string} language
         * @returns {void}
         */
        setLanguage: a2(function(m, g7) {
          m.className = m.className.replace(RegExp(t, "gi"), ""), m.classList.add("language-" + g7);
        }, "setLanguage"),
        /**
         * Returns the script element that is currently executing.
         *
         * This does __not__ work for line script element.
         *
         * @returns {HTMLScriptElement | null}
         */
        currentScript: a2(function() {
          if (typeof document > "u")
            return null;
          if ("currentScript" in document)
            return (
              /** @type {any} */
              document.currentScript
            );
          try {
            throw new Error();
          } catch (w5) {
            var m = (/at [^(\r\n]*\((.*):[^:]+:[^:]+\)$/i.exec(w5.stack) || [])[1];
            if (m) {
              var g7 = document.getElementsByTagName("script");
              for (var y in g7)
                if (g7[y].src == m)
                  return g7[y];
            }
            return null;
          }
        }, "currentScript"),
        /**
         * Returns whether a given class is active for `element`.
         *
         * The class can be activated if `element` or one of its ancestors has the given class and it can be deactivated
         * if `element` or one of its ancestors has the negated version of the given class. The _negated version_ of the
         * given class is just the given class with a `no-` prefix.
         *
         * Whether the class is active is determined by the closest ancestor of `element` (where `element` itself is
         * closest ancestor) that has the given class or the negated version of it. If neither `element` nor any of its
         * ancestors have the given class or the negated version of it, then the default activation will be returned.
         *
         * In the paradoxical situation where the closest ancestor contains __both__ the given class and the negated
         * version of it, the class is considered active.
         *
         * @param {Element} element
         * @param {string} className
         * @param {boolean} [defaultActivation=false]
         * @returns {boolean}
         */
        isActive: a2(function(m, g7, y) {
          for (var w5 = "no-" + g7; m; ) {
            var D7 = m.classList;
            if (D7.contains(g7))
              return true;
            if (D7.contains(w5))
              return false;
            m = m.parentElement;
          }
          return !!y;
        }, "isActive")
      },
      /**
       * This namespace contains all currently loaded languages and the some helper functions to create and modify languages.
       *
       * @namespace
       * @memberof Prism
       * @public
       */
      languages: {
        /**
         * The grammar for plain, unformatted text.
         */
        plain: n,
        plaintext: n,
        text: n,
        txt: n,
        /**
         * Creates a deep copy of the language with the given id and appends the given tokens.
         *
         * If a token in `redef` also appears in the copied language, then the existing token in the copied language
         * will be overwritten at its original position.
         *
         * ## Best practices
         *
         * Since the position of overwriting tokens (token in `redef` that overwrite tokens in the copied language)
         * doesn't matter, they can technically be in any order. However, this can be confusing to others that trying to
         * understand the language definition because, normally, the order of tokens matters in Prism grammars.
         *
         * Therefore, it is encouraged to order overwriting tokens according to the positions of the overwritten tokens.
         * Furthermore, all non-overwriting tokens should be placed after the overwriting ones.
         *
         * @param {string} id The id of the language to extend. This has to be a key in `Prism.languages`.
         * @param {Grammar} redef The new tokens to append.
         * @returns {Grammar} The new language created.
         * @public
         * @example
         * Prism.languages['css-with-colors'] = Prism.languages.extend('css', {
         *     // Prism.languages.css already has a 'comment' token, so this token will overwrite CSS' 'comment' token
         *     // at its original position
         *     'comment': { ... },
         *     // CSS doesn't have a 'color' token, so this token will be appended
         *     'color': /\b(?:red|green|blue)\b/
         * });
         */
        extend: a2(function(m, g7) {
          var y = o.util.clone(o.languages[m]);
          for (var w5 in g7)
            y[w5] = g7[w5];
          return y;
        }, "extend"),
        /**
         * Inserts tokens _before_ another token in a language definition or any other grammar.
         *
         * ## Usage
         *
         * This helper method makes it easy to modify existing languages. For example, the CSS language definition
         * not only defines CSS highlighting for CSS documents, but also needs to define highlighting for CSS embedded
         * in HTML through `<style>` elements. To do this, it needs to modify `Prism.languages.markup` and add the
         * appropriate tokens. However, `Prism.languages.markup` is a regular JavaScript object literal, so if you do
         * this:
         *
         * ```js
         * Prism.languages.markup.style = {
         *     // token
         * };
         * ```
         *
         * then the `style` token will be added (and processed) at the end. `insertBefore` allows you to insert tokens
         * before existing tokens. For the CSS example above, you would use it like this:
         *
         * ```js
         * Prism.languages.insertBefore('markup', 'cdata', {
         *     'style': {
         *         // token
         *     }
         * });
         * ```
         *
         * ## Special cases
         *
         * If the grammars of `inside` and `insert` have tokens with the same name, the tokens in `inside`'s grammar
         * will be ignored.
         *
         * This behavior can be used to insert tokens after `before`:
         *
         * ```js
         * Prism.languages.insertBefore('markup', 'comment', {
         *     'comment': Prism.languages.markup.comment,
         *     // tokens after 'comment'
         * });
         * ```
         *
         * ## Limitations
         *
         * The main problem `insertBefore` has to solve is iteration order. Since ES2015, the iteration order for object
         * properties is guaranteed to be the insertion order (except for integer keys) but some browsers behave
         * differently when keys are deleted and re-inserted. So `insertBefore` can't be implemented by temporarily
         * deleting properties which is necessary to insert at arbitrary positions.
         *
         * To solve this problem, `insertBefore` doesn't actually insert the given tokens into the target object.
         * Instead, it will create a new object and replace all references to the target object with the new one. This
         * can be done without temporarily deleting properties, so the iteration order is well-defined.
         *
         * However, only references that can be reached from `Prism.languages` or `insert` will be replaced. I.e. if
         * you hold the target object in a variable, then the value of the variable will not change.
         *
         * ```js
         * var oldMarkup = Prism.languages.markup;
         * var newMarkup = Prism.languages.insertBefore('markup', 'comment', { ... });
         *
         * assert(oldMarkup !== Prism.languages.markup);
         * assert(newMarkup === Prism.languages.markup);
         * ```
         *
         * @param {string} inside The property of `root` (e.g. a language id in `Prism.languages`) that contains the
         * object to be modified.
         * @param {string} before The key to insert before.
         * @param {Grammar} insert An object containing the key-value pairs to be inserted.
         * @param {Object<string, any>} [root] The object containing `inside`, i.e. the object that contains the
         * object to be modified.
         *
         * Defaults to `Prism.languages`.
         * @returns {Grammar} The new grammar object.
         * @public
         */
        insertBefore: a2(function(m, g7, y, w5) {
          w5 = w5 || /** @type {any} */
          o.languages;
          var D7 = w5[m], x7 = {};
          for (var C7 in D7)
            if (D7.hasOwnProperty(C7)) {
              if (C7 == g7)
                for (var E7 in y)
                  y.hasOwnProperty(E7) && (x7[E7] = y[E7]);
              y.hasOwnProperty(C7) || (x7[C7] = D7[C7]);
            }
          var S4 = w5[m];
          return w5[m] = x7, o.languages.DFS(o.languages, function(R, A) {
            A === S4 && R != m && (this[R] = x7);
          }), x7;
        }, "insertBefore"),
        // Traverse a language definition with Depth First Search
        DFS: a2(function m(g7, y, w5, D7) {
          D7 = D7 || {};
          var x7 = o.util.objId;
          for (var C7 in g7)
            if (g7.hasOwnProperty(C7)) {
              y.call(g7, C7, g7[C7], w5 || C7);
              var E7 = g7[C7], S4 = o.util.type(E7);
              S4 === "Object" && !D7[x7(E7)] ? (D7[x7(E7)] = true, m(E7, y, null, D7)) : S4 === "Array" && !D7[x7(E7)] && (D7[x7(E7)] = true, m(E7, y, C7, D7));
            }
        }, "DFS")
      },
      plugins: {},
      /**
       * This is the most high-level function in Prism’s API.
       * It fetches all the elements that have a `.language-xxxx` class and then calls {@link Prism.highlightElement} on
       * each one of them.
       *
       * This is equivalent to `Prism.highlightAllUnder(document, async, callback)`.
       *
       * @param {boolean} [async=false] Same as in {@link Prism.highlightAllUnder}.
       * @param {HighlightCallback} [callback] Same as in {@link Prism.highlightAllUnder}.
       * @memberof Prism
       * @public
       */
      highlightAll: a2(function(m, g7) {
        o.highlightAllUnder(document, m, g7);
      }, "highlightAll"),
      /**
       * Fetches all the descendants of `container` that have a `.language-xxxx` class and then calls
       * {@link Prism.highlightElement} on each one of them.
       *
       * The following hooks will be run:
       * 1. `before-highlightall`
       * 2. `before-all-elements-highlight`
       * 3. All hooks of {@link Prism.highlightElement} for each element.
       *
       * @param {ParentNode} container The root element, whose descendants that have a `.language-xxxx` class will be highlighted.
       * @param {boolean} [async=false] Whether each element is to be highlighted asynchronously using Web Workers.
       * @param {HighlightCallback} [callback] An optional callback to be invoked on each element after its highlighting is done.
       * @memberof Prism
       * @public
       */
      highlightAllUnder: a2(function(m, g7, y) {
        var w5 = {
          callback: y,
          container: m,
          selector: 'code[class*="language-"], [class*="language-"] code, code[class*="lang-"], [class*="lang-"] code'
        };
        o.hooks.run("before-highlightall", w5), w5.elements = Array.prototype.slice.apply(w5.container.querySelectorAll(w5.selector)), o.hooks.run(
          "before-all-elements-highlight",
          w5
        );
        for (var D7 = 0, x7; x7 = w5.elements[D7++]; )
          o.highlightElement(x7, g7 === true, w5.callback);
      }, "highlightAllUnder"),
      /**
       * Highlights the code inside a single element.
       *
       * The following hooks will be run:
       * 1. `before-sanity-check`
       * 2. `before-highlight`
       * 3. All hooks of {@link Prism.highlight}. These hooks will be run by an asynchronous worker if `async` is `true`.
       * 4. `before-insert`
       * 5. `after-highlight`
       * 6. `complete`
       *
       * Some the above hooks will be skipped if the element doesn't contain any text or there is no grammar loaded for
       * the element's language.
       *
       * @param {Element} element The element containing the code.
       * It must have a class of `language-xxxx` to be processed, where `xxxx` is a valid language identifier.
       * @param {boolean} [async=false] Whether the element is to be highlighted asynchronously using Web Workers
       * to improve performance and avoid blocking the UI when highlighting very large chunks of code. This option is
       * [disabled by default](https://prismjs.com/faq.html#why-is-asynchronous-highlighting-disabled-by-default).
       *
       * Note: All language definitions required to highlight the code must be included in the main `prism.js` file for
       * asynchronous highlighting to work. You can build your own bundle on the
       * [Download page](https://prismjs.com/download.html).
       * @param {HighlightCallback} [callback] An optional callback to be invoked after the highlighting is done.
       * Mostly useful when `async` is `true`, since in that case, the highlighting is done asynchronously.
       * @memberof Prism
       * @public
       */
      highlightElement: a2(function(m, g7, y) {
        var w5 = o.util.getLanguage(m), D7 = o.languages[w5];
        o.util.setLanguage(m, w5);
        var x7 = m.parentElement;
        x7 && x7.nodeName.toLowerCase() === "pre" && o.util.setLanguage(x7, w5);
        var C7 = m.textContent, E7 = {
          element: m,
          language: w5,
          grammar: D7,
          code: C7
        };
        function S4(A) {
          E7.highlightedCode = A, o.hooks.run("before-insert", E7), E7.element.innerHTML = E7.highlightedCode, o.hooks.run("after-highlight", E7), o.hooks.run("complete", E7), y && y.call(E7.element);
        }
        if (a2(S4, "insertHighlightedCode"), o.hooks.run("before-sanity-check", E7), x7 = E7.element.parentElement, x7 && x7.nodeName.toLowerCase() === "pre" && !x7.hasAttribute("tabindex") && x7.setAttribute("tabindex", "0"), !E7.code) {
          o.hooks.run("complete", E7), y && y.call(E7.element);
          return;
        }
        if (o.hooks.run("before-highlight", E7), !E7.grammar) {
          S4(o.util.encode(E7.code));
          return;
        }
        if (g7 && e7.Worker) {
          var R = new Worker(o.filename);
          R.onmessage = function(A) {
            S4(A.data);
          }, R.postMessage(JSON.stringify({
            language: E7.language,
            code: E7.code,
            immediateClose: true
          }));
        } else
          S4(o.highlight(E7.code, E7.grammar, E7.language));
      }, "highlightElement"),
      /**
       * Low-level function, only use if you know what you’re doing. It accepts a string of text as input
       * and the language definitions to use, and returns a string with the HTML produced.
       *
       * The following hooks will be run:
       * 1. `before-tokenize`
       * 2. `after-tokenize`
       * 3. `wrap`: On each {@link Token}.
       *
       * @param {string} text A string with the code to be highlighted.
       * @param {Grammar} grammar An object containing the tokens to use.
       *
       * Usually a language definition like `Prism.languages.markup`.
       * @param {string} language The name of the language definition passed to `grammar`.
       * @returns {string} The highlighted HTML.
       * @memberof Prism
       * @public
       * @example
       * Prism.highlight('var foo = true;', Prism.languages.javascript, 'javascript');
       */
      highlight: a2(function(m, g7, y) {
        var w5 = {
          code: m,
          grammar: g7,
          language: y
        };
        if (o.hooks.run("before-tokenize", w5), !w5.grammar)
          throw new Error('The language "' + w5.language + '" has no grammar.');
        return w5.tokens = o.tokenize(w5.code, w5.grammar), o.hooks.run("after-tokenize", w5), i.stringify(o.util.encode(w5.tokens), w5.language);
      }, "highlight"),
      /**
       * This is the heart of Prism, and the most low-level function you can use. It accepts a string of text as input
       * and the language definitions to use, and returns an array with the tokenized code.
       *
       * When the language definition includes nested tokens, the function is called recursively on each of these tokens.
       *
       * This method could be useful in other contexts as well, as a very crude parser.
       *
       * @param {string} text A string with the code to be highlighted.
       * @param {Grammar} grammar An object containing the tokens to use.
       *
       * Usually a language definition like `Prism.languages.markup`.
       * @returns {TokenStream} An array of strings and tokens, a token stream.
       * @memberof Prism
       * @public
       * @example
       * let code = `var foo = 0;`;
       * let tokens = Prism.tokenize(code, Prism.languages.javascript);
       * tokens.forEach(token => {
       *     if (token instanceof Prism.Token && token.type === 'number') {
       *         console.log(`Found numeric literal: ${token.content}`);
       *     }
       * });
       */
      tokenize: a2(function(m, g7) {
        var y = g7.rest;
        if (y) {
          for (var w5 in y)
            g7[w5] = y[w5];
          delete g7.rest;
        }
        var D7 = new c();
        return p(D7, D7.head, m), u6(m, D7, g7, D7.head, 0), h7(D7);
      }, "tokenize"),
      /**
       * @namespace
       * @memberof Prism
       * @public
       */
      hooks: {
        all: {},
        /**
         * Adds the given callback to the list of callbacks for the given hook.
         *
         * The callback will be invoked when the hook it is registered for is run.
         * Hooks are usually directly run by a highlight function but you can also run hooks yourself.
         *
         * One callback function can be registered to multiple hooks and the same hook multiple times.
         *
         * @param {string} name The name of the hook.
         * @param {HookCallback} callback The callback function which is given environment variables.
         * @public
         */
        add: a2(function(m, g7) {
          var y = o.hooks.all;
          y[m] = y[m] || [], y[m].push(g7);
        }, "add"),
        /**
         * Runs a hook invoking all registered callbacks with the given environment variables.
         *
         * Callbacks will be invoked synchronously and in the order in which they were registered.
         *
         * @param {string} name The name of the hook.
         * @param {Object<string, any>} env The environment variables of the hook passed to all callbacks registered.
         * @public
         */
        run: a2(function(m, g7) {
          var y = o.hooks.all[m];
          if (!(!y || !y.length))
            for (var w5 = 0, D7; D7 = y[w5++]; )
              D7(g7);
        }, "run")
      },
      Token: i
    };
    e7.Prism = o;
    function i(m, g7, y, w5) {
      this.type = m, this.content = g7, this.alias = y, this.length = (w5 || "").length | 0;
    }
    a2(i, "Token"), i.stringify = a2(function m(g7, y) {
      if (typeof g7 == "string")
        return g7;
      if (Array.isArray(g7)) {
        var w5 = "";
        return g7.forEach(function(S4) {
          w5 += m(S4, y);
        }), w5;
      }
      var D7 = {
        type: g7.type,
        content: m(g7.content, y),
        tag: "span",
        classes: ["token", g7.type],
        attributes: {},
        language: y
      }, x7 = g7.alias;
      x7 && (Array.isArray(x7) ? Array.prototype.push.apply(D7.classes, x7) : D7.classes.push(x7)), o.hooks.run("wrap", D7);
      var C7 = "";
      for (var E7 in D7.attributes)
        C7 += " " + E7 + '="' + (D7.attributes[E7] || "").replace(/"/g, "&quot;") + '"';
      return "<" + D7.tag + ' class="' + D7.classes.join(" ") + '"' + C7 + ">" + D7.content + "</" + D7.tag + ">";
    }, "stringify");
    function l7(m, g7, y, w5) {
      m.lastIndex = g7;
      var D7 = m.exec(y);
      if (D7 && w5 && D7[1]) {
        var x7 = D7[1].length;
        D7.index += x7, D7[0] = D7[0].slice(x7);
      }
      return D7;
    }
    a2(l7, "matchPattern");
    function u6(m, g7, y, w5, D7, x7) {
      for (var C7 in y)
        if (!(!y.hasOwnProperty(C7) || !y[C7])) {
          var E7 = y[C7];
          E7 = Array.isArray(E7) ? E7 : [E7];
          for (var S4 = 0; S4 < E7.length; ++S4) {
            if (x7 && x7.cause == C7 + "," + S4)
              return;
            var R = E7[S4], A = R.inside, k4 = !!R.lookbehind, B6 = !!R.greedy, $6 = R.alias;
            if (B6 && !R.pattern.global) {
              var M6 = R.pattern.toString().match(/[imsuy]*$/)[0];
              R.pattern = RegExp(R.pattern.source, M6 + "g");
            }
            for (var W = R.pattern || R, T = w5.next, L6 = D7; T !== g7.tail && !(x7 && L6 >= x7.reach); L6 += T.value.length, T = T.next) {
              var P6 = T.value;
              if (g7.length > m.length)
                return;
              if (!(P6 instanceof i)) {
                var U6 = 1, N;
                if (B6) {
                  if (N = l7(W, L6, m, k4), !N || N.index >= m.length)
                    break;
                  var Te2 = N.index, G = N.index + N[0].length, z6 = L6;
                  for (z6 += T.value.length; Te2 >= z6; )
                    T = T.next, z6 += T.value.length;
                  if (z6 -= T.value.length, L6 = z6, T.value instanceof i)
                    continue;
                  for (var K3 = T; K3 !== g7.tail && (z6 < G || typeof K3.value == "string"); K3 = K3.next)
                    U6++, z6 += K3.value.length;
                  U6--, P6 = m.slice(L6, z6), N.index -= L6;
                } else if (N = l7(W, 0, P6, k4), !N)
                  continue;
                var Te2 = N.index, ve2 = N[0], de2 = P6.slice(0, Te2), Ce2 = P6.slice(Te2 + ve2.length), Le2 = L6 + P6.length;
                x7 && Le2 > x7.reach && (x7.reach = Le2);
                var Ie2 = T.prev;
                de2 && (Ie2 = p(g7, Ie2, de2), L6 += de2.length), d(g7, Ie2, U6);
                var Xo = new i(C7, A ? o.tokenize(ve2, A) : ve2, $6, ve2);
                if (T = p(g7, Ie2, Xo), Ce2 && p(g7, T, Ce2), U6 > 1) {
                  var Yo = {
                    cause: C7 + "," + S4,
                    reach: Le2
                  };
                  u6(m, g7, y, T.prev, L6, Yo), x7 && Yo.reach > x7.reach && (x7.reach = Yo.reach);
                }
              }
            }
          }
        }
    }
    a2(u6, "matchGrammar");
    function c() {
      var m = { value: null, prev: null, next: null }, g7 = { value: null, prev: m, next: null };
      m.next = g7, this.head = m, this.tail = g7, this.length = 0;
    }
    a2(c, "LinkedList");
    function p(m, g7, y) {
      var w5 = g7.next, D7 = { value: y, prev: g7, next: w5 };
      return g7.next = D7, w5.prev = D7, m.length++, D7;
    }
    a2(p, "addAfter");
    function d(m, g7, y) {
      for (var w5 = g7.next, D7 = 0; D7 < y && w5 !== m.tail; D7++)
        w5 = w5.next;
      g7.next = w5, w5.prev = g7, m.length -= D7;
    }
    a2(d, "removeRange");
    function h7(m) {
      for (var g7 = [], y = m.head.next; y !== m.tail; )
        g7.push(y.value), y = y.next;
      return g7;
    }
    if (a2(h7, "toArray"), !e7.document)
      return e7.addEventListener && (o.disableWorkerMessageHandler || e7.addEventListener("message", function(m) {
        var g7 = JSON.parse(m.data), y = g7.language, w5 = g7.code, D7 = g7.immediateClose;
        e7.postMessage(o.highlight(w5, o.languages[y], y)), D7 && e7.close();
      }, false)), o;
    var f = o.util.currentScript();
    f && (o.filename = f.src, f.hasAttribute("data-manual") && (o.manual = true));
    function v7() {
      o.manual || o.highlightAll();
    }
    if (a2(v7, "highlightAutomaticallyCallback"), !o.manual) {
      var b = document.readyState;
      b === "loading" || b === "interactive" && f && f.defer ? document.addEventListener("DOMContentLoaded", v7) : window.requestAnimationFrame ? window.requestAnimationFrame(v7) : window.setTimeout(v7, 16);
    }
    return o;
  }(iw);
  typeof fi < "u" && fi.exports && (fi.exports = ff);
  typeof global < "u" && (global.Prism = ff);
});
var Ns = _2((E$, mf) => {
  "use strict";
  mf.exports = Os;
  Os.displayName = "markup";
  Os.aliases = ["html", "mathml", "svg", "xml", "ssml", "atom", "rss"];
  function Os(e7) {
    e7.languages.markup = {
      comment: {
        pattern: /<!--(?:(?!<!--)[\s\S])*?-->/,
        greedy: true
      },
      prolog: {
        pattern: /<\?[\s\S]+?\?>/,
        greedy: true
      },
      doctype: {
        // https://www.w3.org/TR/xml/#NT-doctypedecl
        pattern: /<!DOCTYPE(?:[^>"'[\]]|"[^"]*"|'[^']*')+(?:\[(?:[^<"'\]]|"[^"]*"|'[^']*'|<(?!!--)|<!--(?:[^-]|-(?!->))*-->)*\]\s*)?>/i,
        greedy: true,
        inside: {
          "internal-subset": {
            pattern: /(^[^\[]*\[)[\s\S]+(?=\]>$)/,
            lookbehind: true,
            greedy: true,
            inside: null
            // see below
          },
          string: {
            pattern: /"[^"]*"|'[^']*'/,
            greedy: true
          },
          punctuation: /^<!|>$|[[\]]/,
          "doctype-tag": /^DOCTYPE/i,
          name: /[^\s<>'"]+/
        }
      },
      cdata: {
        pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
        greedy: true
      },
      tag: {
        pattern: /<\/?(?!\d)[^\s>\/=$<%]+(?:\s(?:\s*[^\s>\/=]+(?:\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))|(?=[\s/>])))+)?\s*\/?>/,
        greedy: true,
        inside: {
          tag: {
            pattern: /^<\/?[^\s>\/]+/,
            inside: {
              punctuation: /^<\/?/,
              namespace: /^[^\s>\/:]+:/
            }
          },
          "special-attr": [],
          "attr-value": {
            pattern: /=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+)/,
            inside: {
              punctuation: [
                {
                  pattern: /^=/,
                  alias: "attr-equals"
                },
                /"|'/
              ]
            }
          },
          punctuation: /\/?>/,
          "attr-name": {
            pattern: /[^\s>\/]+/,
            inside: {
              namespace: /^[^\s>\/:]+:/
            }
          }
        }
      },
      entity: [
        {
          pattern: /&[\da-z]{1,8};/i,
          alias: "named-entity"
        },
        /&#x?[\da-f]{1,8};/i
      ]
    }, e7.languages.markup.tag.inside["attr-value"].inside.entity = e7.languages.markup.entity, e7.languages.markup.doctype.inside["internal-subset"].inside = e7.languages.markup, e7.hooks.add("wrap", function(t) {
      t.type === "entity" && (t.attributes.title = t.content.value.replace(/&amp;/, "&"));
    }), Object.defineProperty(e7.languages.markup.tag, "addInlined", {
      /**
       * Adds an inlined language to markup.
       *
       * An example of an inlined language is CSS with `<style>` tags.
       *
       * @param {string} tagName The name of the tag that contains the inlined language. This name will be treated as
       * case insensitive.
       * @param {string} lang The language key.
       * @example
       * addInlined('style', 'css');
       */
      value: a2(function(r, n) {
        var o = {};
        o["language-" + n] = {
          pattern: /(^<!\[CDATA\[)[\s\S]+?(?=\]\]>$)/i,
          lookbehind: true,
          inside: e7.languages[n]
        }, o.cdata = /^<!\[CDATA\[|\]\]>$/i;
        var i = {
          "included-cdata": {
            pattern: /<!\[CDATA\[[\s\S]*?\]\]>/i,
            inside: o
          }
        };
        i["language-" + n] = {
          pattern: /[\s\S]+/,
          inside: e7.languages[n]
        };
        var l7 = {};
        l7[r] = {
          pattern: RegExp(
            /(<__[^>]*>)(?:<!\[CDATA\[(?:[^\]]|\](?!\]>))*\]\]>|(?!<!\[CDATA\[)[\s\S])*?(?=<\/__>)/.source.replace(
              /__/g,
              function() {
                return r;
              }
            ),
            "i"
          ),
          lookbehind: true,
          greedy: true,
          inside: i
        }, e7.languages.insertBefore("markup", "cdata", l7);
      }, "addInlined")
    }), Object.defineProperty(e7.languages.markup.tag, "addAttribute", {
      /**
       * Adds an pattern to highlight languages embedded in HTML attributes.
       *
       * An example of an inlined language is CSS with `style` attributes.
       *
       * @param {string} attrName The name of the tag that contains the inlined language. This name will be treated as
       * case insensitive.
       * @param {string} lang The language key.
       * @example
       * addAttribute('style', 'css');
       */
      value: a2(function(t, r) {
        e7.languages.markup.tag.inside["special-attr"].push({
          pattern: RegExp(
            /(^|["'\s])/.source + "(?:" + t + ")" + /\s*=\s*(?:"[^"]*"|'[^']*'|[^\s'">=]+(?=[\s>]))/.source,
            "i"
          ),
          lookbehind: true,
          inside: {
            "attr-name": /^[^\s=]+/,
            "attr-value": {
              pattern: /=[\s\S]+/,
              inside: {
                value: {
                  pattern: /(^=\s*(["']|(?!["'])))\S[\s\S]*(?=\2$)/,
                  lookbehind: true,
                  alias: [r, "language-" + r],
                  inside: e7.languages[r]
                },
                punctuation: [
                  {
                    pattern: /^=/,
                    alias: "attr-equals"
                  },
                  /"|'/
                ]
              }
            }
          }
        });
      }, "value")
    }), e7.languages.html = e7.languages.markup, e7.languages.mathml = e7.languages.markup, e7.languages.svg = e7.languages.markup, e7.languages.xml = e7.languages.extend("markup", {}), e7.languages.ssml = e7.languages.xml, e7.languages.atom = e7.languages.xml, e7.languages.rss = e7.languages.xml;
  }
  a2(Os, "markup");
});
var Vs = _2((R$, gf) => {
  "use strict";
  gf.exports = js;
  js.displayName = "css";
  js.aliases = [];
  function js(e7) {
    (function(t) {
      var r = /(?:"(?:\\(?:\r\n|[\s\S])|[^"\\\r\n])*"|'(?:\\(?:\r\n|[\s\S])|[^'\\\r\n])*')/;
      t.languages.css = {
        comment: /\/\*[\s\S]*?\*\//,
        atrule: {
          pattern: /@[\w-](?:[^;{\s]|\s+(?![\s{]))*(?:;|(?=\s*\{))/,
          inside: {
            rule: /^@[\w-]+/,
            "selector-function-argument": {
              pattern: /(\bselector\s*\(\s*(?![\s)]))(?:[^()\s]|\s+(?![\s)])|\((?:[^()]|\([^()]*\))*\))+(?=\s*\))/,
              lookbehind: true,
              alias: "selector"
            },
            keyword: {
              pattern: /(^|[^\w-])(?:and|not|only|or)(?![\w-])/,
              lookbehind: true
            }
            // See rest below
          }
        },
        url: {
          // https://drafts.csswg.org/css-values-3/#urls
          pattern: RegExp(
            "\\burl\\((?:" + r.source + "|" + /(?:[^\\\r\n()"']|\\[\s\S])*/.source + ")\\)",
            "i"
          ),
          greedy: true,
          inside: {
            function: /^url/i,
            punctuation: /^\(|\)$/,
            string: {
              pattern: RegExp("^" + r.source + "$"),
              alias: "url"
            }
          }
        },
        selector: {
          pattern: RegExp(
            `(^|[{}\\s])[^{}\\s](?:[^{};"'\\s]|\\s+(?![\\s{])|` + r.source + ")*(?=\\s*\\{)"
          ),
          lookbehind: true
        },
        string: {
          pattern: r,
          greedy: true
        },
        property: {
          pattern: /(^|[^-\w\xA0-\uFFFF])(?!\s)[-_a-z\xA0-\uFFFF](?:(?!\s)[-\w\xA0-\uFFFF])*(?=\s*:)/i,
          lookbehind: true
        },
        important: /!important\b/i,
        function: {
          pattern: /(^|[^-a-z0-9])[-a-z0-9]+(?=\()/i,
          lookbehind: true
        },
        punctuation: /[(){};:,]/
      }, t.languages.css.atrule.inside.rest = t.languages.css;
      var n = t.languages.markup;
      n && (n.tag.addInlined("style", "css"), n.tag.addAttribute("style", "css"));
    })(e7);
  }
  a2(js, "css");
});
var wf = _2((F$, vf) => {
  "use strict";
  vf.exports = qs;
  qs.displayName = "clike";
  qs.aliases = [];
  function qs(e7) {
    e7.languages.clike = {
      comment: [
        {
          pattern: /(^|[^\\])\/\*[\s\S]*?(?:\*\/|$)/,
          lookbehind: true,
          greedy: true
        },
        {
          pattern: /(^|[^\\:])\/\/.*/,
          lookbehind: true,
          greedy: true
        }
      ],
      string: {
        pattern: /(["'])(?:\\(?:\r\n|[\s\S])|(?!\1)[^\\\r\n])*\1/,
        greedy: true
      },
      "class-name": {
        pattern: /(\b(?:class|extends|implements|instanceof|interface|new|trait)\s+|\bcatch\s+\()[\w.\\]+/i,
        lookbehind: true,
        inside: {
          punctuation: /[.\\]/
        }
      },
      keyword: /\b(?:break|catch|continue|do|else|finally|for|function|if|in|instanceof|new|null|return|throw|try|while)\b/,
      boolean: /\b(?:false|true)\b/,
      function: /\b\w+(?=\()/,
      number: /\b0x[\da-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:e[+-]?\d+)?/i,
      operator: /[<>]=?|[!=]=?=?|--?|\+\+?|&&?|\|\|?|[?*/~^%]/,
      punctuation: /[{}[\];(),.:]/
    };
  }
  a2(qs, "clike");
});
var yf = _2((T$, bf) => {
  "use strict";
  bf.exports = Ws;
  Ws.displayName = "javascript";
  Ws.aliases = ["js"];
  function Ws(e7) {
    e7.languages.javascript = e7.languages.extend("clike", {
      "class-name": [
        e7.languages.clike["class-name"],
        {
          pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$A-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\.(?:constructor|prototype))/,
          lookbehind: true
        }
      ],
      keyword: [
        {
          pattern: /((?:^|\})\s*)catch\b/,
          lookbehind: true
        },
        {
          pattern: /(^|[^.]|\.\.\.\s*)\b(?:as|assert(?=\s*\{)|async(?=\s*(?:function\b|\(|[$\w\xA0-\uFFFF]|$))|await|break|case|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally(?=\s*(?:\{|$))|for|from(?=\s*(?:['"]|$))|function|(?:get|set)(?=\s*(?:[#\[$\w\xA0-\uFFFF]|$))|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)\b/,
          lookbehind: true
        }
      ],
      // Allow for all non-ASCII characters (See http://stackoverflow.com/a/2008444)
      function: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*(?:\.\s*(?:apply|bind|call)\s*)?\()/,
      number: {
        pattern: RegExp(
          /(^|[^\w$])/.source + "(?:" + // constant
          (/NaN|Infinity/.source + "|" + // binary integer
          /0[bB][01]+(?:_[01]+)*n?/.source + "|" + // octal integer
          /0[oO][0-7]+(?:_[0-7]+)*n?/.source + "|" + // hexadecimal integer
          /0[xX][\dA-Fa-f]+(?:_[\dA-Fa-f]+)*n?/.source + "|" + // decimal bigint
          /\d+(?:_\d+)*n/.source + "|" + // decimal number (integer or float) but no bigint
          /(?:\d+(?:_\d+)*(?:\.(?:\d+(?:_\d+)*)?)?|\.\d+(?:_\d+)*)(?:[Ee][+-]?\d+(?:_\d+)*)?/.source) + ")" + /(?![\w$])/.source
        ),
        lookbehind: true
      },
      operator: /--|\+\+|\*\*=?|=>|&&=?|\|\|=?|[!=]==|<<=?|>>>?=?|[-+*/%&|^!=<>]=?|\.{3}|\?\?=?|\?\.?|[~:]/
    }), e7.languages.javascript["class-name"][0].pattern = /(\b(?:class|extends|implements|instanceof|interface|new)\s+)[\w.\\]+/, e7.languages.insertBefore("javascript", "keyword", {
      regex: {
        // eslint-disable-next-line regexp/no-dupe-characters-character-class
        pattern: /((?:^|[^$\w\xA0-\uFFFF."'\])\s]|\b(?:return|yield))\s*)\/(?:\[(?:[^\]\\\r\n]|\\.)*\]|\\.|[^/\\\[\r\n])+\/[dgimyus]{0,7}(?=(?:\s|\/\*(?:[^*]|\*(?!\/))*\*\/)*(?:$|[\r\n,.;:})\]]|\/\/))/,
        lookbehind: true,
        greedy: true,
        inside: {
          "regex-source": {
            pattern: /^(\/)[\s\S]+(?=\/[a-z]*$)/,
            lookbehind: true,
            alias: "language-regex",
            inside: e7.languages.regex
          },
          "regex-delimiter": /^\/|\/$/,
          "regex-flags": /^[a-z]+$/
        }
      },
      // This must be declared before keyword because we use "function" inside the look-forward
      "function-variable": {
        pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*[=:]\s*(?:async\s*)?(?:\bfunction\b|(?:\((?:[^()]|\([^()]*\))*\)|(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)\s*=>))/,
        alias: "function"
      },
      parameter: [
        {
          pattern: /(function(?:\s+(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*)?\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\))/,
          lookbehind: true,
          inside: e7.languages.javascript
        },
        {
          pattern: /(^|[^$\w\xA0-\uFFFF])(?!\s)[_$a-z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*=>)/i,
          lookbehind: true,
          inside: e7.languages.javascript
        },
        {
          pattern: /(\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*=>)/,
          lookbehind: true,
          inside: e7.languages.javascript
        },
        {
          pattern: /((?:\b|\s|^)(?!(?:as|async|await|break|case|catch|class|const|continue|debugger|default|delete|do|else|enum|export|extends|finally|for|from|function|get|if|implements|import|in|instanceof|interface|let|new|null|of|package|private|protected|public|return|set|static|super|switch|this|throw|try|typeof|undefined|var|void|while|with|yield)(?![$\w\xA0-\uFFFF]))(?:(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*)\(\s*|\]\s*\(\s*)(?!\s)(?:[^()\s]|\s+(?![\s)])|\([^()]*\))+(?=\s*\)\s*\{)/,
          lookbehind: true,
          inside: e7.languages.javascript
        }
      ],
      constant: /\b[A-Z](?:[A-Z_]|\dx?)*\b/
    }), e7.languages.insertBefore("javascript", "string", {
      hashbang: {
        pattern: /^#!.*/,
        greedy: true,
        alias: "comment"
      },
      "template-string": {
        pattern: /`(?:\\[\s\S]|\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}|(?!\$\{)[^\\`])*`/,
        greedy: true,
        inside: {
          "template-punctuation": {
            pattern: /^`|`$/,
            alias: "string"
          },
          interpolation: {
            pattern: /((?:^|[^\\])(?:\\{2})*)\$\{(?:[^{}]|\{(?:[^{}]|\{[^}]*\})*\})+\}/,
            lookbehind: true,
            inside: {
              "interpolation-punctuation": {
                pattern: /^\$\{|\}$/,
                alias: "punctuation"
              },
              rest: e7.languages.javascript
            }
          },
          string: /[\s\S]+/
        }
      },
      "string-property": {
        pattern: /((?:^|[,{])[ \t]*)(["'])(?:\\(?:\r\n|[\s\S])|(?!\2)[^\\\r\n])*\2(?=\s*:)/m,
        lookbehind: true,
        greedy: true,
        alias: "property"
      }
    }), e7.languages.insertBefore("javascript", "operator", {
      "literal-property": {
        pattern: /((?:^|[,{])[ \t]*)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?=\s*:)/m,
        lookbehind: true,
        alias: "property"
      }
    }), e7.languages.markup && (e7.languages.markup.tag.addInlined("script", "javascript"), e7.languages.markup.tag.addAttribute(
      /on(?:abort|blur|change|click|composition(?:end|start|update)|dblclick|error|focus(?:in|out)?|key(?:down|up)|load|mouse(?:down|enter|leave|move|out|over|up)|reset|resize|scroll|select|slotchange|submit|unload|wheel)/.source,
      "javascript"
    )), e7.languages.js = e7.languages.javascript;
  }
  a2(Ws, "javascript");
});
var Ef = _2((I$, Cf) => {
  "use strict";
  var na2 = typeof globalThis == "object" ? globalThis : typeof self == "object" ? self : typeof window == "object" ? window : typeof global == "object" ? global : {}, lw = xw();
  na2.Prism = { manual: true, disableWorkerMessageHandler: true };
  var sw = Od(), uw = df(), Df = hf(), cw = Ns(), pw = Vs(), dw = wf(), fw = yf();
  lw();
  var Us = {}.hasOwnProperty;
  function xf() {
  }
  a2(xf, "Refractor");
  xf.prototype = Df;
  var ae2 = new xf();
  Cf.exports = ae2;
  ae2.highlight = mw;
  ae2.register = oa2;
  ae2.alias = hw;
  ae2.registered = gw;
  ae2.listLanguages = vw;
  oa2(cw);
  oa2(pw);
  oa2(dw);
  oa2(fw);
  ae2.util.encode = yw;
  ae2.Token.stringify = ww;
  function oa2(e7) {
    if (typeof e7 != "function" || !e7.displayName)
      throw new Error("Expected `function` for `grammar`, got `" + e7 + "`");
    ae2.languages[e7.displayName] === void 0 && e7(ae2);
  }
  a2(oa2, "register");
  function hw(e7, t) {
    var r = ae2.languages, n = e7, o, i, l7, u6;
    t && (n = {}, n[e7] = t);
    for (o in n)
      for (i = n[o], i = typeof i == "string" ? [i] : i, l7 = i.length, u6 = -1; ++u6 < l7; )
        r[i[u6]] = r[o];
  }
  a2(hw, "alias");
  function mw(e7, t) {
    var r = Df.highlight, n;
    if (typeof e7 != "string")
      throw new Error("Expected `string` for `value`, got `" + e7 + "`");
    if (ae2.util.type(t) === "Object")
      n = t, t = null;
    else {
      if (typeof t != "string")
        throw new Error("Expected `string` for `name`, got `" + t + "`");
      if (Us.call(ae2.languages, t))
        n = ae2.languages[t];
      else
        throw new Error("Unknown language: `" + t + "` is not registered");
    }
    return r.call(this, e7, n, t);
  }
  a2(mw, "highlight");
  function gw(e7) {
    if (typeof e7 != "string")
      throw new Error("Expected `string` for `language`, got `" + e7 + "`");
    return Us.call(ae2.languages, e7);
  }
  a2(gw, "registered");
  function vw() {
    var e7 = ae2.languages, t = [], r;
    for (r in e7)
      Us.call(e7, r) && typeof e7[r] == "object" && t.push(r);
    return t;
  }
  a2(vw, "listLanguages");
  function ww(e7, t, r) {
    var n;
    return typeof e7 == "string" ? { type: "text", value: e7 } : ae2.util.type(e7) === "Array" ? bw(e7, t) : (n = {
      type: e7.type,
      content: ae2.Token.stringify(e7.content, t, r),
      tag: "span",
      classes: ["token", e7.type],
      attributes: {},
      language: t,
      parent: r
    }, e7.alias && (n.classes = n.classes.concat(e7.alias)), ae2.hooks.run("wrap", n), sw(
      n.tag + "." + n.classes.join("."),
      Dw(n.attributes),
      n.content
    ));
  }
  a2(ww, "stringify");
  function bw(e7, t) {
    for (var r = [], n = e7.length, o = -1, i; ++o < n; )
      i = e7[o], i !== "" && i !== null && i !== void 0 && r.push(i);
    for (o = -1, n = r.length; ++o < n; )
      i = r[o], r[o] = ae2.Token.stringify(i, t, r);
    return r;
  }
  a2(bw, "stringifyAll");
  function yw(e7) {
    return e7;
  }
  a2(yw, "encode");
  function Dw(e7) {
    var t;
    for (t in e7)
      e7[t] = uw(e7[t]);
    return e7;
  }
  a2(Dw, "attributes");
  function xw() {
    var e7 = "Prism" in na2, t = e7 ? na2.Prism : void 0;
    return r;
    function r() {
      e7 ? na2.Prism = t : delete na2.Prism, e7 = void 0, t = void 0;
    }
  }
  a2(xw, "capture");
});
var hi;
var Gs;
var mi;
var Sf = F3(() => {
  Op();
  hi = we2(Ef()), Gs = Cs(hi.default, {});
  Gs.registerLanguage = function(e7, t) {
    return hi.default.register(t);
  };
  Gs.alias = function(e7, t) {
    return hi.default.alias(e7, t);
  };
  mi = Gs;
});
var Rf = F3(() => {
  xs();
});
var Ff = _2(($$, Af) => {
  "use strict";
  Af.exports = Xs;
  Xs.displayName = "bash";
  Xs.aliases = ["shell"];
  function Xs(e7) {
    (function(t) {
      var r = "\\b(?:BASH|BASHOPTS|BASH_ALIASES|BASH_ARGC|BASH_ARGV|BASH_CMDS|BASH_COMPLETION_COMPAT_DIR|BASH_LINENO|BASH_REMATCH|BASH_SOURCE|BASH_VERSINFO|BASH_VERSION|COLORTERM|COLUMNS|COMP_WORDBREAKS|DBUS_SESSION_BUS_ADDRESS|DEFAULTS_PATH|DESKTOP_SESSION|DIRSTACK|DISPLAY|EUID|GDMSESSION|GDM_LANG|GNOME_KEYRING_CONTROL|GNOME_KEYRING_PID|GPG_AGENT_INFO|GROUPS|HISTCONTROL|HISTFILE|HISTFILESIZE|HISTSIZE|HOME|HOSTNAME|HOSTTYPE|IFS|INSTANCE|JOB|LANG|LANGUAGE|LC_ADDRESS|LC_ALL|LC_IDENTIFICATION|LC_MEASUREMENT|LC_MONETARY|LC_NAME|LC_NUMERIC|LC_PAPER|LC_TELEPHONE|LC_TIME|LESSCLOSE|LESSOPEN|LINES|LOGNAME|LS_COLORS|MACHTYPE|MAILCHECK|MANDATORY_PATH|NO_AT_BRIDGE|OLDPWD|OPTERR|OPTIND|ORBIT_SOCKETDIR|OSTYPE|PAPERSIZE|PATH|PIPESTATUS|PPID|PS1|PS2|PS3|PS4|PWD|RANDOM|REPLY|SECONDS|SELINUX_INIT|SESSION|SESSIONTYPE|SESSION_MANAGER|SHELL|SHELLOPTS|SHLVL|SSH_AUTH_SOCK|TERM|UID|UPSTART_EVENTS|UPSTART_INSTANCE|UPSTART_JOB|UPSTART_SESSION|USER|WINDOWID|XAUTHORITY|XDG_CONFIG_DIRS|XDG_CURRENT_DESKTOP|XDG_DATA_DIRS|XDG_GREETER_DATA_DIR|XDG_MENU_PREFIX|XDG_RUNTIME_DIR|XDG_SEAT|XDG_SEAT_PATH|XDG_SESSION_DESKTOP|XDG_SESSION_ID|XDG_SESSION_PATH|XDG_SESSION_TYPE|XDG_VTNR|XMODIFIERS)\\b", n = {
        pattern: /(^(["']?)\w+\2)[ \t]+\S.*/,
        lookbehind: true,
        alias: "punctuation",
        // this looks reasonably well in all themes
        inside: null
        // see below
      }, o = {
        bash: n,
        environment: {
          pattern: RegExp("\\$" + r),
          alias: "constant"
        },
        variable: [
          // [0]: Arithmetic Environment
          {
            pattern: /\$?\(\([\s\S]+?\)\)/,
            greedy: true,
            inside: {
              // If there is a $ sign at the beginning highlight $(( and )) as variable
              variable: [
                {
                  pattern: /(^\$\(\([\s\S]+)\)\)/,
                  lookbehind: true
                },
                /^\$\(\(/
              ],
              number: /\b0x[\dA-Fa-f]+\b|(?:\b\d+(?:\.\d*)?|\B\.\d+)(?:[Ee]-?\d+)?/,
              // Operators according to https://www.gnu.org/software/bash/manual/bashref.html#Shell-Arithmetic
              operator: /--|\+\+|\*\*=?|<<=?|>>=?|&&|\|\||[=!+\-*/%<>^&|]=?|[?~:]/,
              // If there is no $ sign at the beginning highlight (( and )) as punctuation
              punctuation: /\(\(?|\)\)?|,|;/
            }
          },
          // [1]: Command Substitution
          {
            pattern: /\$\((?:\([^)]+\)|[^()])+\)|`[^`]+`/,
            greedy: true,
            inside: {
              variable: /^\$\(|^`|\)$|`$/
            }
          },
          // [2]: Brace expansion
          {
            pattern: /\$\{[^}]+\}/,
            greedy: true,
            inside: {
              operator: /:[-=?+]?|[!\/]|##?|%%?|\^\^?|,,?/,
              punctuation: /[\[\]]/,
              environment: {
                pattern: RegExp("(\\{)" + r),
                lookbehind: true,
                alias: "constant"
              }
            }
          },
          /\$(?:\w+|[#?*!@$])/
        ],
        // Escape sequences from echo and printf's manuals, and escaped quotes.
        entity: /\\(?:[abceEfnrtv\\"]|O?[0-7]{1,3}|U[0-9a-fA-F]{8}|u[0-9a-fA-F]{4}|x[0-9a-fA-F]{1,2})/
      };
      t.languages.bash = {
        shebang: {
          pattern: /^#!\s*\/.*/,
          alias: "important"
        },
        comment: {
          pattern: /(^|[^"{\\$])#.*/,
          lookbehind: true
        },
        "function-name": [
          // a) function foo {
          // b) foo() {
          // c) function foo() {
          // but not “foo {”
          {
            // a) and c)
            pattern: /(\bfunction\s+)[\w-]+(?=(?:\s*\(?:\s*\))?\s*\{)/,
            lookbehind: true,
            alias: "function"
          },
          {
            // b)
            pattern: /\b[\w-]+(?=\s*\(\s*\)\s*\{)/,
            alias: "function"
          }
        ],
        // Highlight variable names as variables in for and select beginnings.
        "for-or-select": {
          pattern: /(\b(?:for|select)\s+)\w+(?=\s+in\s)/,
          alias: "variable",
          lookbehind: true
        },
        // Highlight variable names as variables in the left-hand part
        // of assignments (“=” and “+=”).
        "assign-left": {
          pattern: /(^|[\s;|&]|[<>]\()\w+(?=\+?=)/,
          inside: {
            environment: {
              pattern: RegExp("(^|[\\s;|&]|[<>]\\()" + r),
              lookbehind: true,
              alias: "constant"
            }
          },
          alias: "variable",
          lookbehind: true
        },
        string: [
          // Support for Here-documents https://en.wikipedia.org/wiki/Here_document
          {
            pattern: /((?:^|[^<])<<-?\s*)(\w+)\s[\s\S]*?(?:\r?\n|\r)\2/,
            lookbehind: true,
            greedy: true,
            inside: o
          },
          // Here-document with quotes around the tag
          // → No expansion (so no “inside”).
          {
            pattern: /((?:^|[^<])<<-?\s*)(["'])(\w+)\2\s[\s\S]*?(?:\r?\n|\r)\3/,
            lookbehind: true,
            greedy: true,
            inside: {
              bash: n
            }
          },
          // “Normal” string
          {
            // https://www.gnu.org/software/bash/manual/html_node/Double-Quotes.html
            pattern: /(^|[^\\](?:\\\\)*)"(?:\\[\s\S]|\$\([^)]+\)|\$(?!\()|`[^`]+`|[^"\\`$])*"/,
            lookbehind: true,
            greedy: true,
            inside: o
          },
          {
            // https://www.gnu.org/software/bash/manual/html_node/Single-Quotes.html
            pattern: /(^|[^$\\])'[^']*'/,
            lookbehind: true,
            greedy: true
          },
          {
            // https://www.gnu.org/software/bash/manual/html_node/ANSI_002dC-Quoting.html
            pattern: /\$'(?:[^'\\]|\\[\s\S])*'/,
            greedy: true,
            inside: {
              entity: o.entity
            }
          }
        ],
        environment: {
          pattern: RegExp("\\$?" + r),
          alias: "constant"
        },
        variable: o.variable,
        function: {
          pattern: /(^|[\s;|&]|[<>]\()(?:add|apropos|apt|apt-cache|apt-get|aptitude|aspell|automysqlbackup|awk|basename|bash|bc|bconsole|bg|bzip2|cal|cat|cfdisk|chgrp|chkconfig|chmod|chown|chroot|cksum|clear|cmp|column|comm|composer|cp|cron|crontab|csplit|curl|cut|date|dc|dd|ddrescue|debootstrap|df|diff|diff3|dig|dir|dircolors|dirname|dirs|dmesg|docker|docker-compose|du|egrep|eject|env|ethtool|expand|expect|expr|fdformat|fdisk|fg|fgrep|file|find|fmt|fold|format|free|fsck|ftp|fuser|gawk|git|gparted|grep|groupadd|groupdel|groupmod|groups|grub-mkconfig|gzip|halt|head|hg|history|host|hostname|htop|iconv|id|ifconfig|ifdown|ifup|import|install|ip|jobs|join|kill|killall|less|link|ln|locate|logname|logrotate|look|lpc|lpr|lprint|lprintd|lprintq|lprm|ls|lsof|lynx|make|man|mc|mdadm|mkconfig|mkdir|mke2fs|mkfifo|mkfs|mkisofs|mknod|mkswap|mmv|more|most|mount|mtools|mtr|mutt|mv|nano|nc|netstat|nice|nl|node|nohup|notify-send|npm|nslookup|op|open|parted|passwd|paste|pathchk|ping|pkill|pnpm|podman|podman-compose|popd|pr|printcap|printenv|ps|pushd|pv|quota|quotacheck|quotactl|ram|rar|rcp|reboot|remsync|rename|renice|rev|rm|rmdir|rpm|rsync|scp|screen|sdiff|sed|sendmail|seq|service|sftp|sh|shellcheck|shuf|shutdown|sleep|slocate|sort|split|ssh|stat|strace|su|sudo|sum|suspend|swapon|sync|tac|tail|tar|tee|time|timeout|top|touch|tr|traceroute|tsort|tty|umount|uname|unexpand|uniq|units|unrar|unshar|unzip|update-grub|uptime|useradd|userdel|usermod|users|uudecode|uuencode|v|vcpkg|vdir|vi|vim|virsh|vmstat|wait|watch|wc|wget|whereis|which|who|whoami|write|xargs|xdg-open|yarn|yes|zenity|zip|zsh|zypper)(?=$|[)\s;|&])/,
          lookbehind: true
        },
        keyword: {
          pattern: /(^|[\s;|&]|[<>]\()(?:case|do|done|elif|else|esac|fi|for|function|if|in|select|then|until|while)(?=$|[)\s;|&])/,
          lookbehind: true
        },
        // https://www.gnu.org/software/bash/manual/html_node/Shell-Builtin-Commands.html
        builtin: {
          pattern: /(^|[\s;|&]|[<>]\()(?:\.|:|alias|bind|break|builtin|caller|cd|command|continue|declare|echo|enable|eval|exec|exit|export|getopts|hash|help|let|local|logout|mapfile|printf|pwd|read|readarray|readonly|return|set|shift|shopt|source|test|times|trap|type|typeset|ulimit|umask|unalias|unset)(?=$|[)\s;|&])/,
          lookbehind: true,
          // Alias added to make those easier to distinguish from strings.
          alias: "class-name"
        },
        boolean: {
          pattern: /(^|[\s;|&]|[<>]\()(?:false|true)(?=$|[)\s;|&])/,
          lookbehind: true
        },
        "file-descriptor": {
          pattern: /\B&\d\b/,
          alias: "important"
        },
        operator: {
          // Lots of redirections here, but not just that.
          pattern: /\d?<>|>\||\+=|=[=~]?|!=?|<<[<-]?|[&\d]?>>|\d[<>]&?|[<>][&=]?|&[>&]?|\|[&|]?/,
          inside: {
            "file-descriptor": {
              pattern: /^\d/,
              alias: "important"
            }
          }
        },
        punctuation: /\$?\(\(?|\)\)?|\.\.|[{}[\];\\]/,
        number: {
          pattern: /(^|\s)(?:[1-9]\d*|0)(?:[.,]\d+)?\b/,
          lookbehind: true
        }
      }, n.inside = t.languages.bash;
      for (var i = [
        "comment",
        "function-name",
        "for-or-select",
        "assign-left",
        "string",
        "environment",
        "function",
        "keyword",
        "builtin",
        "boolean",
        "file-descriptor",
        "operator",
        "punctuation",
        "number"
      ], l7 = o.variable[1].inside, u6 = 0; u6 < i.length; u6++)
        l7[i[u6]] = t.languages.bash[i[u6]];
      t.languages.shell = t.languages.bash;
    })(e7);
  }
  a2(Xs, "bash");
});
var kf;
var Tf;
var Lf = F3(() => {
  kf = we2(Ff()), Tf = kf.default;
});
var If;
var Bf;
var Mf = F3(() => {
  If = we2(Vs()), Bf = If.default;
});
var Pf = _2((j$, _f) => {
  "use strict";
  _f.exports = Ys;
  Ys.displayName = "graphql";
  Ys.aliases = [];
  function Ys(e7) {
    e7.languages.graphql = {
      comment: /#.*/,
      description: {
        pattern: /(?:"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*")(?=\s*[a-z_])/i,
        greedy: true,
        alias: "string",
        inside: {
          "language-markdown": {
            pattern: /(^"(?:"")?)(?!\1)[\s\S]+(?=\1$)/,
            lookbehind: true,
            inside: e7.languages.markdown
          }
        }
      },
      string: {
        pattern: /"""(?:[^"]|(?!""")")*"""|"(?:\\.|[^\\"\r\n])*"/,
        greedy: true
      },
      number: /(?:\B-|\b)\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
      boolean: /\b(?:false|true)\b/,
      variable: /\$[a-z_]\w*/i,
      directive: {
        pattern: /@[a-z_]\w*/i,
        alias: "function"
      },
      "attr-name": {
        pattern: /\b[a-z_]\w*(?=\s*(?:\((?:[^()"]|"(?:\\.|[^\\"\r\n])*")*\))?:)/i,
        greedy: true
      },
      "atom-input": {
        pattern: /\b[A-Z]\w*Input\b/,
        alias: "class-name"
      },
      scalar: /\b(?:Boolean|Float|ID|Int|String)\b/,
      constant: /\b[A-Z][A-Z_\d]*\b/,
      "class-name": {
        pattern: /(\b(?:enum|implements|interface|on|scalar|type|union)\s+|&\s*|:\s*|\[)[A-Z_]\w*/,
        lookbehind: true
      },
      fragment: {
        pattern: /(\bfragment\s+|\.{3}\s*(?!on\b))[a-zA-Z_]\w*/,
        lookbehind: true,
        alias: "function"
      },
      "definition-mutation": {
        pattern: /(\bmutation\s+)[a-zA-Z_]\w*/,
        lookbehind: true,
        alias: "function"
      },
      "definition-query": {
        pattern: /(\bquery\s+)[a-zA-Z_]\w*/,
        lookbehind: true,
        alias: "function"
      },
      keyword: /\b(?:directive|enum|extend|fragment|implements|input|interface|mutation|on|query|repeatable|scalar|schema|subscription|type|union)\b/,
      operator: /[!=|&]|\.{3}/,
      "property-query": /\w+(?=\s*\()/,
      object: /\w+(?=\s*\{)/,
      punctuation: /[!(){}\[\]:=,]/,
      property: /\w+/
    }, e7.hooks.add("after-tokenize", a2(function(r) {
      if (r.language !== "graphql")
        return;
      var n = r.tokens.filter(function(g7) {
        return typeof g7 != "string" && g7.type !== "comment" && g7.type !== "scalar";
      }), o = 0;
      function i(g7) {
        return n[o + g7];
      }
      a2(i, "getToken");
      function l7(g7, y) {
        y = y || 0;
        for (var w5 = 0; w5 < g7.length; w5++) {
          var D7 = i(w5 + y);
          if (!D7 || D7.type !== g7[w5])
            return false;
        }
        return true;
      }
      a2(l7, "isTokenType");
      function u6(g7, y) {
        for (var w5 = 1, D7 = o; D7 < n.length; D7++) {
          var x7 = n[D7], C7 = x7.content;
          if (x7.type === "punctuation" && typeof C7 == "string") {
            if (g7.test(C7))
              w5++;
            else if (y.test(C7) && (w5--, w5 === 0))
              return D7;
          }
        }
        return -1;
      }
      a2(u6, "findClosingBracket");
      function c(g7, y) {
        var w5 = g7.alias;
        w5 ? Array.isArray(w5) || (g7.alias = w5 = [w5]) : g7.alias = w5 = [], w5.push(y);
      }
      for (a2(c, "addAlias"); o < n.length; ) {
        var p = n[o++];
        if (p.type === "keyword" && p.content === "mutation") {
          var d = [];
          if (l7(["definition-mutation", "punctuation"]) && i(1).content === "(") {
            o += 2;
            var h7 = u6(/^\($/, /^\)$/);
            if (h7 === -1)
              continue;
            for (; o < h7; o++) {
              var f = i(0);
              f.type === "variable" && (c(f, "variable-input"), d.push(f.content));
            }
            o = h7 + 1;
          }
          if (l7(["punctuation", "property-query"]) && i(0).content === "{" && (o++, c(i(0), "property-mutation"), d.length > 0)) {
            var v7 = u6(/^\{$/, /^\}$/);
            if (v7 === -1)
              continue;
            for (var b = o; b < v7; b++) {
              var m = n[b];
              m.type === "variable" && d.indexOf(m.content) >= 0 && c(m, "variable-input");
            }
          }
        }
      }
    }, "afterTokenizeGraphql"));
  }
  a2(Ys, "graphql");
});
var Hf;
var $f;
var zf = F3(() => {
  Hf = we2(Pf()), $f = Hf.default;
});
var Nf = _2((W$, Of) => {
  "use strict";
  Of.exports = Ks;
  Ks.displayName = "jsExtras";
  Ks.aliases = [];
  function Ks(e7) {
    (function(t) {
      t.languages.insertBefore("javascript", "function-variable", {
        "method-variable": {
          pattern: RegExp(
            "(\\.\\s*)" + t.languages.javascript["function-variable"].pattern.source
          ),
          lookbehind: true,
          alias: ["function-variable", "method", "function", "property-access"]
        }
      }), t.languages.insertBefore("javascript", "function", {
        method: {
          pattern: RegExp(
            "(\\.\\s*)" + t.languages.javascript.function.source
          ),
          lookbehind: true,
          alias: ["function", "property-access"]
        }
      }), t.languages.insertBefore("javascript", "constant", {
        "known-class-name": [
          {
            // standard built-ins
            // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects
            pattern: /\b(?:(?:Float(?:32|64)|(?:Int|Uint)(?:8|16|32)|Uint8Clamped)?Array|ArrayBuffer|BigInt|Boolean|DataView|Date|Error|Function|Intl|JSON|(?:Weak)?(?:Map|Set)|Math|Number|Object|Promise|Proxy|Reflect|RegExp|String|Symbol|WebAssembly)\b/,
            alias: "class-name"
          },
          {
            // errors
            pattern: /\b(?:[A-Z]\w*)Error\b/,
            alias: "class-name"
          }
        ]
      });
      function r(c, p) {
        return RegExp(
          c.replace(/<ID>/g, function() {
            return /(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/.source;
          }),
          p
        );
      }
      a2(r, "withId"), t.languages.insertBefore("javascript", "keyword", {
        imports: {
          // https://tc39.es/ecma262/#sec-imports
          pattern: r(
            /(\bimport\b\s*)(?:<ID>(?:\s*,\s*(?:\*\s*as\s+<ID>|\{[^{}]*\}))?|\*\s*as\s+<ID>|\{[^{}]*\})(?=\s*\bfrom\b)/.source
          ),
          lookbehind: true,
          inside: t.languages.javascript
        },
        exports: {
          // https://tc39.es/ecma262/#sec-exports
          pattern: r(
            /(\bexport\b\s*)(?:\*(?:\s*as\s+<ID>)?(?=\s*\bfrom\b)|\{[^{}]*\})/.source
          ),
          lookbehind: true,
          inside: t.languages.javascript
        }
      }), t.languages.javascript.keyword.unshift(
        {
          pattern: /\b(?:as|default|export|from|import)\b/,
          alias: "module"
        },
        {
          pattern: /\b(?:await|break|catch|continue|do|else|finally|for|if|return|switch|throw|try|while|yield)\b/,
          alias: "control-flow"
        },
        {
          pattern: /\bnull\b/,
          alias: ["null", "nil"]
        },
        {
          pattern: /\bundefined\b/,
          alias: "nil"
        }
      ), t.languages.insertBefore("javascript", "operator", {
        spread: {
          pattern: /\.{3}/,
          alias: "operator"
        },
        arrow: {
          pattern: /=>/,
          alias: "operator"
        }
      }), t.languages.insertBefore("javascript", "punctuation", {
        "property-access": {
          pattern: r(/(\.\s*)#?<ID>/.source),
          lookbehind: true
        },
        "maybe-class-name": {
          pattern: /(^|[^$\w\xA0-\uFFFF])[A-Z][$\w\xA0-\uFFFF]+/,
          lookbehind: true
        },
        dom: {
          // this contains only a few commonly used DOM variables
          pattern: /\b(?:document|(?:local|session)Storage|location|navigator|performance|window)\b/,
          alias: "variable"
        },
        console: {
          pattern: /\bconsole(?=\s*\.)/,
          alias: "class-name"
        }
      });
      for (var n = [
        "function",
        "function-variable",
        "method",
        "method-variable",
        "property-access"
      ], o = 0; o < n.length; o++) {
        var i = n[o], l7 = t.languages.javascript[i];
        t.util.type(l7) === "RegExp" && (l7 = t.languages.javascript[i] = {
          pattern: l7
        });
        var u6 = l7.inside || {};
        l7.inside = u6, u6["maybe-class-name"] = /^[A-Z][\s\S]*/;
      }
    })(e7);
  }
  a2(Ks, "jsExtras");
});
var jf;
var Vf;
var qf = F3(() => {
  jf = we2(Nf()), Vf = jf.default;
});
var Uf = _2((X$, Wf) => {
  "use strict";
  Wf.exports = Zs;
  Zs.displayName = "json";
  Zs.aliases = ["webmanifest"];
  function Zs(e7) {
    e7.languages.json = {
      property: {
        pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?=\s*:)/,
        lookbehind: true,
        greedy: true
      },
      string: {
        pattern: /(^|[^\\])"(?:\\.|[^\\"\r\n])*"(?!\s*:)/,
        lookbehind: true,
        greedy: true
      },
      comment: {
        pattern: /\/\/.*|\/\*[\s\S]*?(?:\*\/|$)/,
        greedy: true
      },
      number: /-?\b\d+(?:\.\d+)?(?:e[+-]?\d+)?\b/i,
      punctuation: /[{}[\],]/,
      operator: /:/,
      boolean: /\b(?:false|true)\b/,
      null: {
        pattern: /\bnull\b/,
        alias: "keyword"
      }
    }, e7.languages.webmanifest = e7.languages.json;
  }
  a2(Zs, "json");
});
var Gf;
var Xf;
var Yf = F3(() => {
  Gf = we2(Uf()), Xf = Gf.default;
});
var Qs = _2((Z$, Kf) => {
  "use strict";
  Kf.exports = Js;
  Js.displayName = "jsx";
  Js.aliases = [];
  function Js(e7) {
    (function(t) {
      var r = t.util.clone(t.languages.javascript), n = /(?:\s|\/\/.*(?!.)|\/\*(?:[^*]|\*(?!\/))\*\/)/.source, o = /(?:\{(?:\{(?:\{[^{}]*\}|[^{}])*\}|[^{}])*\})/.source, i = /(?:\{<S>*\.{3}(?:[^{}]|<BRACES>)*\})/.source;
      function l7(p, d) {
        return p = p.replace(/<S>/g, function() {
          return n;
        }).replace(/<BRACES>/g, function() {
          return o;
        }).replace(/<SPREAD>/g, function() {
          return i;
        }), RegExp(p, d);
      }
      a2(l7, "re"), i = l7(i).source, t.languages.jsx = t.languages.extend("markup", r), t.languages.jsx.tag.pattern = l7(
        /<\/?(?:[\w.:-]+(?:<S>+(?:[\w.:$-]+(?:=(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s{'"/>=]+|<BRACES>))?|<SPREAD>))*<S>*\/?)?>/.source
      ), t.languages.jsx.tag.inside.tag.pattern = /^<\/?[^\s>\/]*/, t.languages.jsx.tag.inside["attr-value"].pattern = /=(?!\{)(?:"(?:\\[\s\S]|[^\\"])*"|'(?:\\[\s\S]|[^\\'])*'|[^\s'">]+)/, t.languages.jsx.tag.inside.tag.inside["class-name"] = /^[A-Z]\w*(?:\.[A-Z]\w*)*$/, t.languages.jsx.tag.inside.comment = r.comment, t.languages.insertBefore(
        "inside",
        "attr-name",
        {
          spread: {
            pattern: l7(/<SPREAD>/.source),
            inside: t.languages.jsx
          }
        },
        t.languages.jsx.tag
      ), t.languages.insertBefore(
        "inside",
        "special-attr",
        {
          script: {
            // Allow for two levels of nesting
            pattern: l7(/=<BRACES>/.source),
            alias: "language-javascript",
            inside: {
              "script-punctuation": {
                pattern: /^=(?=\{)/,
                alias: "punctuation"
              },
              rest: t.languages.jsx
            }
          }
        },
        t.languages.jsx.tag
      );
      var u6 = a2(function(p) {
        return p ? typeof p == "string" ? p : typeof p.content == "string" ? p.content : p.content.map(u6).join("") : "";
      }, "stringifyToken"), c = a2(function(p) {
        for (var d = [], h7 = 0; h7 < p.length; h7++) {
          var f = p[h7], v7 = false;
          if (typeof f != "string" && (f.type === "tag" && f.content[0] && f.content[0].type === "tag" ? f.content[0].content[0].content === "</" ? d.length > 0 && d[d.length - 1].tagName === u6(f.content[0].content[1]) && d.pop() : f.content[f.content.length - 1].content === "/>" || d.push({
            tagName: u6(f.content[0].content[1]),
            openedBraces: 0
          }) : d.length > 0 && f.type === "punctuation" && f.content === "{" ? d[d.length - 1].openedBraces++ : d.length > 0 && d[d.length - 1].openedBraces > 0 && f.type === "punctuation" && f.content === "}" ? d[d.length - 1].openedBraces-- : v7 = true), (v7 || typeof f == "string") && d.length > 0 && d[d.length - 1].openedBraces === 0) {
            var b = u6(f);
            h7 < p.length - 1 && (typeof p[h7 + 1] == "string" || p[h7 + 1].type === "plain-text") && (b += u6(p[h7 + 1]), p.splice(h7 + 1, 1)), h7 > 0 && (typeof p[h7 - 1] == "string" || p[h7 - 1].type === "plain-text") && (b = u6(p[h7 - 1]) + b, p.splice(h7 - 1, 1), h7--), p[h7] = new t.Token(
              "plain-text",
              b,
              null,
              b
            );
          }
          f.content && typeof f.content != "string" && c(f.content);
        }
      }, "walkTokens");
      t.hooks.add("after-tokenize", function(p) {
        p.language !== "jsx" && p.language !== "tsx" || c(p.tokens);
      });
    })(e7);
  }
  a2(Js, "jsx");
});
var Zf;
var Jf;
var Qf = F3(() => {
  Zf = we2(Qs()), Jf = Zf.default;
});
var th = _2((ez, eh) => {
  "use strict";
  eh.exports = eu;
  eu.displayName = "markdown";
  eu.aliases = ["md"];
  function eu(e7) {
    (function(t) {
      var r = /(?:\\.|[^\\\n\r]|(?:\n|\r\n?)(?![\r\n]))/.source;
      function n(h7) {
        return h7 = h7.replace(/<inner>/g, function() {
          return r;
        }), RegExp(/((?:^|[^\\])(?:\\{2})*)/.source + "(?:" + h7 + ")");
      }
      a2(n, "createInline");
      var o = /(?:\\.|``(?:[^`\r\n]|`(?!`))+``|`[^`\r\n]+`|[^\\|\r\n`])+/.source, i = /\|?__(?:\|__)+\|?(?:(?:\n|\r\n?)|(?![\s\S]))/.source.replace(
        /__/g,
        function() {
          return o;
        }
      ), l7 = /\|?[ \t]*:?-{3,}:?[ \t]*(?:\|[ \t]*:?-{3,}:?[ \t]*)+\|?(?:\n|\r\n?)/.source;
      t.languages.markdown = t.languages.extend("markup", {}), t.languages.insertBefore("markdown", "prolog", {
        "front-matter-block": {
          pattern: /(^(?:\s*[\r\n])?)---(?!.)[\s\S]*?[\r\n]---(?!.)/,
          lookbehind: true,
          greedy: true,
          inside: {
            punctuation: /^---|---$/,
            "front-matter": {
              pattern: /\S+(?:\s+\S+)*/,
              alias: ["yaml", "language-yaml"],
              inside: t.languages.yaml
            }
          }
        },
        blockquote: {
          // > ...
          pattern: /^>(?:[\t ]*>)*/m,
          alias: "punctuation"
        },
        table: {
          pattern: RegExp(
            "^" + i + l7 + "(?:" + i + ")*",
            "m"
          ),
          inside: {
            "table-data-rows": {
              pattern: RegExp(
                "^(" + i + l7 + ")(?:" + i + ")*$"
              ),
              lookbehind: true,
              inside: {
                "table-data": {
                  pattern: RegExp(o),
                  inside: t.languages.markdown
                },
                punctuation: /\|/
              }
            },
            "table-line": {
              pattern: RegExp("^(" + i + ")" + l7 + "$"),
              lookbehind: true,
              inside: {
                punctuation: /\||:?-{3,}:?/
              }
            },
            "table-header-row": {
              pattern: RegExp("^" + i + "$"),
              inside: {
                "table-header": {
                  pattern: RegExp(o),
                  alias: "important",
                  inside: t.languages.markdown
                },
                punctuation: /\|/
              }
            }
          }
        },
        code: [
          {
            // Prefixed by 4 spaces or 1 tab and preceded by an empty line
            pattern: /((?:^|\n)[ \t]*\n|(?:^|\r\n?)[ \t]*\r\n?)(?: {4}|\t).+(?:(?:\n|\r\n?)(?: {4}|\t).+)*/,
            lookbehind: true,
            alias: "keyword"
          },
          {
            // ```optional language
            // code block
            // ```
            pattern: /^```[\s\S]*?^```$/m,
            greedy: true,
            inside: {
              "code-block": {
                pattern: /^(```.*(?:\n|\r\n?))[\s\S]+?(?=(?:\n|\r\n?)^```$)/m,
                lookbehind: true
              },
              "code-language": {
                pattern: /^(```).+/,
                lookbehind: true
              },
              punctuation: /```/
            }
          }
        ],
        title: [
          {
            // title 1
            // =======
            // title 2
            // -------
            pattern: /\S.*(?:\n|\r\n?)(?:==+|--+)(?=[ \t]*$)/m,
            alias: "important",
            inside: {
              punctuation: /==+$|--+$/
            }
          },
          {
            // # title 1
            // ###### title 6
            pattern: /(^\s*)#.+/m,
            lookbehind: true,
            alias: "important",
            inside: {
              punctuation: /^#+|#+$/
            }
          }
        ],
        hr: {
          // ***
          // ---
          // * * *
          // -----------
          pattern: /(^\s*)([*-])(?:[\t ]*\2){2,}(?=\s*$)/m,
          lookbehind: true,
          alias: "punctuation"
        },
        list: {
          // * item
          // + item
          // - item
          // 1. item
          pattern: /(^\s*)(?:[*+-]|\d+\.)(?=[\t ].)/m,
          lookbehind: true,
          alias: "punctuation"
        },
        "url-reference": {
          // [id]: http://example.com "Optional title"
          // [id]: http://example.com 'Optional title'
          // [id]: http://example.com (Optional title)
          // [id]: <http://example.com> "Optional title"
          pattern: /!?\[[^\]]+\]:[\t ]+(?:\S+|<(?:\\.|[^>\\])+>)(?:[\t ]+(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\)))?/,
          inside: {
            variable: {
              pattern: /^(!?\[)[^\]]+/,
              lookbehind: true
            },
            string: /(?:"(?:\\.|[^"\\])*"|'(?:\\.|[^'\\])*'|\((?:\\.|[^)\\])*\))$/,
            punctuation: /^[\[\]!:]|[<>]/
          },
          alias: "url"
        },
        bold: {
          // **strong**
          // __strong__
          // allow one nested instance of italic text using the same delimiter
          pattern: n(
            /\b__(?:(?!_)<inner>|_(?:(?!_)<inner>)+_)+__\b|\*\*(?:(?!\*)<inner>|\*(?:(?!\*)<inner>)+\*)+\*\*/.source
          ),
          lookbehind: true,
          greedy: true,
          inside: {
            content: {
              pattern: /(^..)[\s\S]+(?=..$)/,
              lookbehind: true,
              inside: {}
              // see below
            },
            punctuation: /\*\*|__/
          }
        },
        italic: {
          // *em*
          // _em_
          // allow one nested instance of bold text using the same delimiter
          pattern: n(
            /\b_(?:(?!_)<inner>|__(?:(?!_)<inner>)+__)+_\b|\*(?:(?!\*)<inner>|\*\*(?:(?!\*)<inner>)+\*\*)+\*/.source
          ),
          lookbehind: true,
          greedy: true,
          inside: {
            content: {
              pattern: /(^.)[\s\S]+(?=.$)/,
              lookbehind: true,
              inside: {}
              // see below
            },
            punctuation: /[*_]/
          }
        },
        strike: {
          // ~~strike through~~
          // ~strike~
          // eslint-disable-next-line regexp/strict
          pattern: n(/(~~?)(?:(?!~)<inner>)+\2/.source),
          lookbehind: true,
          greedy: true,
          inside: {
            content: {
              pattern: /(^~~?)[\s\S]+(?=\1$)/,
              lookbehind: true,
              inside: {}
              // see below
            },
            punctuation: /~~?/
          }
        },
        "code-snippet": {
          // `code`
          // ``code``
          pattern: /(^|[^\\`])(?:``[^`\r\n]+(?:`[^`\r\n]+)*``(?!`)|`[^`\r\n]+`(?!`))/,
          lookbehind: true,
          greedy: true,
          alias: ["code", "keyword"]
        },
        url: {
          // [example](http://example.com "Optional title")
          // [example][id]
          // [example] [id]
          pattern: n(
            /!?\[(?:(?!\])<inner>)+\](?:\([^\s)]+(?:[\t ]+"(?:\\.|[^"\\])*")?\)|[ \t]?\[(?:(?!\])<inner>)+\])/.source
          ),
          lookbehind: true,
          greedy: true,
          inside: {
            operator: /^!/,
            content: {
              pattern: /(^\[)[^\]]+(?=\])/,
              lookbehind: true,
              inside: {}
              // see below
            },
            variable: {
              pattern: /(^\][ \t]?\[)[^\]]+(?=\]$)/,
              lookbehind: true
            },
            url: {
              pattern: /(^\]\()[^\s)]+/,
              lookbehind: true
            },
            string: {
              pattern: /(^[ \t]+)"(?:\\.|[^"\\])*"(?=\)$)/,
              lookbehind: true
            }
          }
        }
      }), ["url", "bold", "italic", "strike"].forEach(function(h7) {
        ["url", "bold", "italic", "strike", "code-snippet"].forEach(function(f) {
          h7 !== f && (t.languages.markdown[h7].inside.content.inside[f] = t.languages.markdown[f]);
        });
      }), t.hooks.add("after-tokenize", function(h7) {
        if (h7.language !== "markdown" && h7.language !== "md")
          return;
        function f(v7) {
          if (!(!v7 || typeof v7 == "string"))
            for (var b = 0, m = v7.length; b < m; b++) {
              var g7 = v7[b];
              if (g7.type !== "code") {
                f(g7.content);
                continue;
              }
              var y = g7.content[1], w5 = g7.content[3];
              if (y && w5 && y.type === "code-language" && w5.type === "code-block" && typeof y.content == "string") {
                var D7 = y.content.replace(/\b#/g, "sharp").replace(/\b\+\+/g, "pp");
                D7 = (/[a-z][\w-]*/i.exec(D7) || [""])[0].toLowerCase();
                var x7 = "language-" + D7;
                w5.alias ? typeof w5.alias == "string" ? w5.alias = [w5.alias, x7] : w5.alias.push(x7) : w5.alias = [x7];
              }
            }
        }
        a2(f, "walkTokens"), f(h7.tokens);
      }), t.hooks.add("wrap", function(h7) {
        if (h7.type === "code-block") {
          for (var f = "", v7 = 0, b = h7.classes.length; v7 < b; v7++) {
            var m = h7.classes[v7], g7 = /language-(.+)/.exec(m);
            if (g7) {
              f = g7[1];
              break;
            }
          }
          var y = t.languages[f];
          if (y)
            h7.content = t.highlight(
              d(h7.content.value),
              y,
              f
            );
          else if (f && f !== "none" && t.plugins.autoloader) {
            var w5 = "md-" + (/* @__PURE__ */ new Date()).valueOf() + "-" + Math.floor(Math.random() * 1e16);
            h7.attributes.id = w5, t.plugins.autoloader.loadLanguages(f, function() {
              var D7 = document.getElementById(w5);
              D7 && (D7.innerHTML = t.highlight(
                D7.textContent,
                t.languages[f],
                f
              ));
            });
          }
        }
      });
      var u6 = RegExp(t.languages.markup.tag.pattern.source, "gi"), c = {
        amp: "&",
        lt: "<",
        gt: ">",
        quot: '"'
      }, p = String.fromCodePoint || String.fromCharCode;
      function d(h7) {
        var f = h7.replace(u6, "");
        return f = f.replace(/&(\w{1,8}|#x?[\da-f]{1,8});/gi, function(v7, b) {
          if (b = b.toLowerCase(), b[0] === "#") {
            var m;
            return b[1] === "x" ? m = parseInt(b.slice(2), 16) : m = Number(b.slice(1)), p(m);
          } else {
            var g7 = c[b];
            return g7 || v7;
          }
        }), f;
      }
      a2(d, "textContent"), t.languages.md = t.languages.markdown;
    })(e7);
  }
  a2(eu, "markdown");
});
var rh;
var nh;
var oh = F3(() => {
  rh = we2(th()), nh = rh.default;
});
var ah;
var ih;
var lh = F3(() => {
  ah = we2(Ns()), ih = ah.default;
});
var ru = _2((oz, sh) => {
  "use strict";
  sh.exports = tu;
  tu.displayName = "typescript";
  tu.aliases = ["ts"];
  function tu(e7) {
    (function(t) {
      t.languages.typescript = t.languages.extend("javascript", {
        "class-name": {
          pattern: /(\b(?:class|extends|implements|instanceof|interface|new|type)\s+)(?!keyof\b)(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*(?:\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>)?/,
          lookbehind: true,
          greedy: true,
          inside: null
          // see below
        },
        builtin: /\b(?:Array|Function|Promise|any|boolean|console|never|number|string|symbol|unknown)\b/
      }), t.languages.typescript.keyword.push(
        /\b(?:abstract|declare|is|keyof|readonly|require)\b/,
        // keywords that have to be followed by an identifier
        /\b(?:asserts|infer|interface|module|namespace|type)\b(?=\s*(?:[{_$a-zA-Z\xA0-\uFFFF]|$))/,
        // This is for `import type *, {}`
        /\btype\b(?=\s*(?:[\{*]|$))/
      ), delete t.languages.typescript.parameter, delete t.languages.typescript["literal-property"];
      var r = t.languages.extend("typescript", {});
      delete r["class-name"], t.languages.typescript["class-name"].inside = r, t.languages.insertBefore("typescript", "function", {
        decorator: {
          pattern: /@[$\w\xA0-\uFFFF]+/,
          inside: {
            at: {
              pattern: /^@/,
              alias: "operator"
            },
            function: /^[\s\S]+/
          }
        },
        "generic-function": {
          // e.g. foo<T extends "bar" | "baz">( ...
          pattern: /#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*\s*<(?:[^<>]|<(?:[^<>]|<[^<>]*>)*>)*>(?=\s*\()/,
          greedy: true,
          inside: {
            function: /^#?(?!\s)[_$a-zA-Z\xA0-\uFFFF](?:(?!\s)[$\w\xA0-\uFFFF])*/,
            generic: {
              pattern: /<[\s\S]+/,
              // everything after the first <
              alias: "class-name",
              inside: r
            }
          }
        }
      }), t.languages.ts = t.languages.typescript;
    })(e7);
  }
  a2(tu, "typescript");
});
var ch = _2((iz, uh) => {
  "use strict";
  var Cw = Qs(), Ew = ru();
  uh.exports = nu;
  nu.displayName = "tsx";
  nu.aliases = [];
  function nu(e7) {
    e7.register(Cw), e7.register(Ew), function(t) {
      var r = t.util.clone(t.languages.typescript);
      t.languages.tsx = t.languages.extend("jsx", r), delete t.languages.tsx.parameter, delete t.languages.tsx["literal-property"];
      var n = t.languages.tsx.tag;
      n.pattern = RegExp(
        /(^|[^\w$]|(?=<\/))/.source + "(?:" + n.pattern.source + ")",
        n.pattern.flags
      ), n.lookbehind = true;
    }(e7);
  }
  a2(nu, "tsx");
});
var ph;
var dh;
var fh = F3(() => {
  ph = we2(ch()), dh = ph.default;
});
var hh;
var mh;
var gh = F3(() => {
  hh = we2(ru()), mh = hh.default;
});
var wh = _2((cz, vh) => {
  "use strict";
  vh.exports = ou;
  ou.displayName = "yaml";
  ou.aliases = ["yml"];
  function ou(e7) {
    (function(t) {
      var r = /[*&][^\s[\]{},]+/, n = /!(?:<[\w\-%#;/?:@&=+$,.!~*'()[\]]+>|(?:[a-zA-Z\d-]*!)?[\w\-%#;/?:@&=+$.~*'()]+)?/, o = "(?:" + n.source + "(?:[ 	]+" + r.source + ")?|" + r.source + "(?:[ 	]+" + n.source + ")?)", i = /(?:[^\s\x00-\x08\x0e-\x1f!"#%&'*,\-:>?@[\]`{|}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]|[?:-]<PLAIN>)(?:[ \t]*(?:(?![#:])<PLAIN>|:<PLAIN>))*/.source.replace(
        /<PLAIN>/g,
        function() {
          return /[^\s\x00-\x08\x0e-\x1f,[\]{}\x7f-\x84\x86-\x9f\ud800-\udfff\ufffe\uffff]/.source;
        }
      ), l7 = /"(?:[^"\\\r\n]|\\.)*"|'(?:[^'\\\r\n]|\\.)*'/.source;
      function u6(c, p) {
        p = (p || "").replace(/m/g, "") + "m";
        var d = /([:\-,[{]\s*(?:\s<<prop>>[ \t]+)?)(?:<<value>>)(?=[ \t]*(?:$|,|\]|\}|(?:[\r\n]\s*)?#))/.source.replace(/<<prop>>/g, function() {
          return o;
        }).replace(/<<value>>/g, function() {
          return c;
        });
        return RegExp(d, p);
      }
      a2(u6, "createValuePattern"), t.languages.yaml = {
        scalar: {
          pattern: RegExp(
            /([\-:]\s*(?:\s<<prop>>[ \t]+)?[|>])[ \t]*(?:((?:\r?\n|\r)[ \t]+)\S[^\r\n]*(?:\2[^\r\n]+)*)/.source.replace(
              /<<prop>>/g,
              function() {
                return o;
              }
            )
          ),
          lookbehind: true,
          alias: "string"
        },
        comment: /#.*/,
        key: {
          pattern: RegExp(
            /((?:^|[:\-,[{\r\n?])[ \t]*(?:<<prop>>[ \t]+)?)<<key>>(?=\s*:\s)/.source.replace(/<<prop>>/g, function() {
              return o;
            }).replace(/<<key>>/g, function() {
              return "(?:" + i + "|" + l7 + ")";
            })
          ),
          lookbehind: true,
          greedy: true,
          alias: "atrule"
        },
        directive: {
          pattern: /(^[ \t]*)%.+/m,
          lookbehind: true,
          alias: "important"
        },
        datetime: {
          pattern: u6(
            /\d{4}-\d\d?-\d\d?(?:[tT]|[ \t]+)\d\d?:\d{2}:\d{2}(?:\.\d*)?(?:[ \t]*(?:Z|[-+]\d\d?(?::\d{2})?))?|\d{4}-\d{2}-\d{2}|\d\d?:\d{2}(?::\d{2}(?:\.\d*)?)?/.source
          ),
          lookbehind: true,
          alias: "number"
        },
        boolean: {
          pattern: u6(/false|true/.source, "i"),
          lookbehind: true,
          alias: "important"
        },
        null: {
          pattern: u6(/null|~/.source, "i"),
          lookbehind: true,
          alias: "important"
        },
        string: {
          pattern: u6(l7),
          lookbehind: true,
          greedy: true
        },
        number: {
          pattern: u6(
            /[+-]?(?:0x[\da-f]+|0o[0-7]+|(?:\d+(?:\.\d*)?|\.\d+)(?:e[+-]?\d+)?|\.inf|\.nan)/.source,
            "i"
          ),
          lookbehind: true
        },
        tag: n,
        important: r,
        punctuation: /---|[:[\]{}\-,|>?]|\.\.\./
      }, t.languages.yml = t.languages.yaml;
    })(e7);
  }
  a2(ou, "yaml");
});
var bh;
var yh;
var Dh = F3(() => {
  bh = we2(wh()), yh = bh.default;
});
var Sw;
var Eh;
var au;
var iu = F3(() => {
  "use strict";
  Sw = Tr.div(({ theme: e7 }) => ({
    position: "absolute",
    bottom: 0,
    right: 0,
    maxWidth: "100%",
    display: "flex",
    background: e7.background.content,
    zIndex: 1
  })), Eh = Tr.button(
    ({ theme: e7 }) => ({
      margin: 0,
      border: "0 none",
      padding: "4px 10px",
      cursor: "pointer",
      display: "flex",
      alignItems: "center",
      color: e7.color.defaultText,
      background: e7.background.content,
      fontSize: 12,
      lineHeight: "16px",
      fontFamily: e7.typography.fonts.base,
      fontWeight: e7.typography.weight.bold,
      borderTop: `1px solid ${e7.appBorderColor}`,
      borderLeft: `1px solid ${e7.appBorderColor}`,
      marginLeft: -1,
      borderRadius: "4px 0 0 0",
      "&:not(:last-child)": { borderRight: `1px solid ${e7.appBorderColor}` },
      "& + *": {
        borderLeft: `1px solid ${e7.appBorderColor}`,
        borderRadius: 0
      },
      "&:focus": {
        boxShadow: `${e7.color.secondary} 0 -3px 0 0 inset`,
        outline: "0 none"
      }
    }),
    ({ disabled: e7 }) => e7 && {
      cursor: "not-allowed",
      opacity: 0.5
    }
  );
  Eh.displayName = "ActionButton";
  au = a2(({ actionItems: e7, ...t }) => import_react5.default.createElement(Sw, { ...t }, e7.map(({
    title: r,
    className: n,
    onClick: o,
    disabled: i
  }, l7) => import_react5.default.createElement(Eh, { key: l7, className: n, onClick: o, disabled: !!i }, r))), "ActionBar");
});
function Aw(e7, t) {
  typeof e7 == "function" ? e7(t) : e7 != null && (e7.current = t);
}
function Sh(...e7) {
  return (t) => e7.forEach((r) => Aw(r, t));
}
var Rh = F3(() => {
  a2(Aw, "setRef");
  a2(Sh, "composeRefs");
});
function Tw(e7) {
  return ye2.isValidElement(e7) && e7.type === kw;
}
function Lw(e7, t) {
  let r = { ...t };
  for (let n in t) {
    let o = e7[n], i = t[n];
    /^on[A-Z]/.test(n) ? o && i ? r[n] = (...u6) => {
      i(...u6), o(...u6);
    } : o && (r[n] = o) : n === "style" ? r[n] = { ...o, ...i } : n === "className" && (r[n] = [o, i].filter(Boolean).join(" "));
  }
  return { ...e7, ...r };
}
function Iw(e7) {
  var _a3, _b;
  let t = (_a3 = Object.getOwnPropertyDescriptor(e7.props, "ref")) == null ? void 0 : _a3.get, r = t && "isReactWarning" in t && t.isReactWarning;
  return r ? e7.ref : (t = (_b = Object.getOwnPropertyDescriptor(e7, "ref")) == null ? void 0 : _b.get, r = t && "isReactWarning" in t && t.isReactWarning, r ? e7.props.ref : e7.props.ref || e7.ref);
}
var aa2;
var su;
var kw;
var uu = F3(() => {
  Rh();
  aa2 = ye2.forwardRef((e7, t) => {
    let { children: r, ...n } = e7, o = ye2.Children.toArray(r), i = o.find(Tw);
    if (i) {
      let l7 = i.props.children, u6 = o.map((c) => c === i ? ye2.Children.count(l7) > 1 ? ye2.Children.only(null) : ye2.isValidElement(l7) ? l7.props.children : null : c);
      return (0, import_jsx_runtime.jsx)(su, { ...n, ref: t, children: ye2.isValidElement(l7) ? ye2.cloneElement(l7, void 0, u6) : null });
    }
    return (0, import_jsx_runtime.jsx)(su, { ...n, ref: t, children: r });
  });
  aa2.displayName = "Slot";
  su = ye2.forwardRef((e7, t) => {
    let { children: r, ...n } = e7;
    if (ye2.isValidElement(r)) {
      let o = Iw(r);
      return ye2.cloneElement(r, {
        ...Lw(n, r.props),
        // @ts-ignore
        ref: t ? Sh(t, o) : o
      });
    }
    return ye2.Children.count(r) > 1 ? ye2.Children.only(null) : null;
  });
  su.displayName = "SlotClone";
  kw = a2(({ children: e7 }) => (0, import_jsx_runtime.jsx)(import_jsx_runtime.Fragment, { children: e7 }), "Slottable");
  a2(Tw, "isSlottable");
  a2(Lw, "mergeProps");
  a2(Iw, "getElementRef");
});
var _w;
var hn2;
var Fh = F3(() => {
  uu();
  _w = [
    "a",
    "button",
    "div",
    "form",
    "h2",
    "h3",
    "img",
    "input",
    "label",
    "li",
    "nav",
    "ol",
    "p",
    "span",
    "svg",
    "ul"
  ], hn2 = _w.reduce((e7, t) => {
    let r = Ah.forwardRef((n, o) => {
      let { asChild: i, ...l7 } = n, u6 = i ? aa2 : t;
      return typeof window < "u" && (window[Symbol.for("radix-ui")] = true), (0, import_jsx_runtime2.jsx)(u6, { ...l7, ref: o });
    });
    return r.displayName = `Primitive.${t}`, { ...e7, [t]: r };
  }, {});
});
function Pw(e7, t) {
  typeof e7 == "function" ? e7(t) : e7 != null && (e7.current = t);
}
function Hw(...e7) {
  return (t) => e7.forEach((r) => Pw(r, t));
}
function Tt2(...e7) {
  return kh.useCallback(Hw(...e7), e7);
}
var cu = F3(() => {
  a2(Pw, "setRef");
  a2(Hw, "composeRefs");
  a2(Tt2, "useComposedRefs");
});
var ia2;
var pu = F3(() => {
  ia2 = (globalThis == null ? void 0 : globalThis.document) ? Th.useLayoutEffect : () => {
  };
});
function $w(e7, t) {
  return Ih.useReducer((r, n) => t[r][n] ?? r, e7);
}
function zw(e7) {
  let [t, r] = _e2.useState(), n = _e2.useRef({}), o = _e2.useRef(e7), i = _e2.useRef("none"), l7 = e7 ? "mounted" : "unmounted", [u6, c] = $w(l7, {
    mounted: {
      UNMOUNT: "unmounted",
      ANIMATION_OUT: "unmountSuspended"
    },
    unmountSuspended: {
      MOUNT: "mounted",
      ANIMATION_END: "unmounted"
    },
    unmounted: {
      MOUNT: "mounted"
    }
  });
  return _e2.useEffect(() => {
    let p = gi(n.current);
    i.current = u6 === "mounted" ? p : "none";
  }, [u6]), ia2(() => {
    let p = n.current, d = o.current;
    if (d !== e7) {
      let f = i.current, v7 = gi(p);
      e7 ? c("MOUNT") : v7 === "none" || (p == null ? void 0 : p.display) === "none" ? c("UNMOUNT") : c(d && f !== v7 ? "ANIMATION_OUT" : "UNMOUNT"), o.current = e7;
    }
  }, [e7, c]), ia2(() => {
    if (t) {
      let p = a2((h7) => {
        let v7 = gi(n.current).includes(h7.animationName);
        h7.target === t && v7 && Lh.flushSync(() => c("ANIMATION_END"));
      }, "handleAnimationEnd"), d = a2((h7) => {
        h7.target === t && (i.current = gi(n.current));
      }, "handleAnimationStart");
      return t.addEventListener("animationstart", d), t.addEventListener("animationcancel", p), t.addEventListener("animationend", p), () => {
        t.removeEventListener("animationstart", d), t.removeEventListener("animationcancel", p), t.removeEventListener("animationend", p);
      };
    } else
      c("ANIMATION_END");
  }, [t, c]), {
    isPresent: ["mounted", "unmountSuspended"].includes(u6),
    ref: _e2.useCallback((p) => {
      p && (n.current = getComputedStyle(p)), r(p);
    }, [])
  };
}
function gi(e7) {
  return (e7 == null ? void 0 : e7.animationName) || "none";
}
function Ow(e7) {
  var _a3, _b;
  let t = (_a3 = Object.getOwnPropertyDescriptor(e7.props, "ref")) == null ? void 0 : _a3.get, r = t && "isReactWarning" in t && t.isReactWarning;
  return r ? e7.ref : (t = (_b = Object.getOwnPropertyDescriptor(e7, "ref")) == null ? void 0 : _b.get, r = t && "isReactWarning" in t && t.isReactWarning, r ? e7.props.ref : e7.props.ref || e7.ref);
}
var mn2;
var Bh = F3(() => {
  "use client";
  cu();
  pu();
  a2($w, "useStateMachine");
  mn2 = a2((e7) => {
    let { present: t, children: r } = e7, n = zw(t), o = typeof r == "function" ? r({ present: n.isPresent }) : _e2.Children.only(r), i = Tt2(n.ref, Ow(o));
    return typeof r == "function" || n.isPresent ? _e2.cloneElement(o, { ref: i }) : null;
  }, "Presence");
  mn2.displayName = "Presence";
  a2(zw, "usePresence");
  a2(gi, "getAnimationName");
  a2(Ow, "getElementRef");
});
function Mh(e7, t = []) {
  let r = [];
  function n(i, l7) {
    let u6 = Lt2.createContext(l7), c = r.length;
    r = [...r, l7];
    function p(h7) {
      let { scope: f, children: v7, ...b } = h7, m = (f == null ? void 0 : f[e7][c]) || u6, g7 = Lt2.useMemo(() => b, Object.values(b));
      return (0, import_jsx_runtime3.jsx)(m.Provider, { value: g7, children: v7 });
    }
    a2(p, "Provider");
    function d(h7, f) {
      let v7 = (f == null ? void 0 : f[e7][c]) || u6, b = Lt2.useContext(v7);
      if (b) return b;
      if (l7 !== void 0) return l7;
      throw new Error(`\`${h7}\` must be used within \`${i}\``);
    }
    return a2(d, "useContext2"), p.displayName = i + "Provider", [p, d];
  }
  a2(n, "createContext3");
  let o = a2(() => {
    let i = r.map((l7) => Lt2.createContext(l7));
    return a2(function(u6) {
      let c = (u6 == null ? void 0 : u6[e7]) || i;
      return Lt2.useMemo(
        () => ({ [`__scope${e7}`]: { ...u6, [e7]: c } }),
        [u6, c]
      );
    }, "useScope");
  }, "createScope");
  return o.scopeName = e7, [n, jw(o, ...t)];
}
function jw(...e7) {
  let t = e7[0];
  if (e7.length === 1) return t;
  let r = a2(() => {
    let n = e7.map((o) => ({
      useScope: o(),
      scopeName: o.scopeName
    }));
    return a2(function(i) {
      let l7 = n.reduce((u6, { useScope: c, scopeName: p }) => {
        let h7 = c(i)[`__scope${p}`];
        return { ...u6, ...h7 };
      }, {});
      return Lt2.useMemo(() => ({ [`__scope${t.scopeName}`]: l7 }), [l7]);
    }, "useComposedScopes");
  }, "createScope");
  return r.scopeName = t.scopeName, r;
}
var _h = F3(() => {
  a2(Mh, "createContextScope");
  a2(jw, "composeContextScopes");
});
function Jt2(e7) {
  let t = gn2.useRef(e7);
  return gn2.useEffect(() => {
    t.current = e7;
  }), gn2.useMemo(() => (...r) => {
    var _a3;
    return (_a3 = t.current) == null ? void 0 : _a3.call(t, ...r);
  }, []);
}
var Ph = F3(() => {
  a2(Jt2, "useCallbackRef");
});
function Hh(e7) {
  let t = vi2.useContext(Vw);
  return e7 || t || "ltr";
}
var Vw;
var $h = F3(() => {
  Vw = vi2.createContext(void 0);
  a2(Hh, "useDirection");
});
function zh(e7, [t, r]) {
  return Math.min(r, Math.max(t, e7));
}
var Oh = F3(() => {
  a2(zh, "clamp");
});
function Qt2(e7, t, { checkForDefaultPrevented: r = true } = {}) {
  return a2(function(o) {
    if (e7 == null ? void 0 : e7(o), r === false || !o.defaultPrevented)
      return t == null ? void 0 : t(o);
  }, "handleEvent");
}
var Nh = F3(() => {
  a2(Qt2, "composeEventHandlers");
});
function qw(e7, t) {
  return Vh.useReducer((r, n) => t[r][n] ?? r, e7);
}
function bi(e7) {
  return e7 ? parseInt(e7, 10) : 0;
}
function e5(e7, t) {
  let r = e7 / t;
  return isNaN(r) ? 0 : r;
}
function yi(e7) {
  let t = e5(e7.viewport, e7.content), r = e7.scrollbar.paddingStart + e7.scrollbar.paddingEnd, n = (e7.scrollbar.size - r) * t;
  return Math.max(n, 18);
}
function tb(e7, t, r, n = "ltr") {
  let o = yi(r), i = o / 2, l7 = t || i, u6 = o - l7, c = r.scrollbar.paddingStart + l7, p = r.scrollbar.size - r.scrollbar.paddingEnd - u6, d = r.content - r.viewport, h7 = n === "ltr" ? [0, d] : [d * -1, 0];
  return t5([c, p], h7)(e7);
}
function jh(e7, t, r = "ltr") {
  let n = yi(t), o = t.scrollbar.paddingStart + t.scrollbar.paddingEnd, i = t.scrollbar.size - o, l7 = t.content - t.viewport, u6 = i - n, c = r === "ltr" ? [0, l7] : [l7 * -1, 0], p = zh(e7, c);
  return t5([0, l7], [0, u6])(p);
}
function t5(e7, t) {
  return (r) => {
    if (e7[0] === e7[1] || t[0] === t[1]) return t[0];
    let n = (t[1] - t[0]) / (e7[1] - e7[0]);
    return t[0] + n * (r - e7[0]);
  };
}
function r5(e7, t) {
  return e7 > 0 && e7 < t;
}
function Di(e7, t) {
  let r = Jt2(e7), n = I3.useRef(0);
  return I3.useEffect(() => () => window.clearTimeout(n.current), []), I3.useCallback(() => {
    window.clearTimeout(n.current), n.current = window.setTimeout(r, t);
  }, [r, t]);
}
function vn2(e7, t) {
  let r = Jt2(t);
  ia2(() => {
    let n = 0;
    if (e7) {
      let o = new ResizeObserver(() => {
        cancelAnimationFrame(n), n = window.requestAnimationFrame(r);
      });
      return o.observe(e7), () => {
        window.cancelAnimationFrame(n), o.unobserve(e7);
      };
    }
  }, [e7, r]);
}
function nb(e7, t) {
  let { asChild: r, children: n } = e7;
  if (!r) return typeof t == "function" ? t(n) : t;
  let o = I3.Children.only(n);
  return I3.cloneElement(o, {
    children: typeof t == "function" ? t(o.props.children) : t
  });
}
var du;
var qh;
var nO;
var Gw;
var Xe2;
var Wh;
var Uh;
var Gh;
var gt;
var Xh;
var Xw;
var Yw;
var Yh;
var fu;
var Kw;
var Zw;
var Jw;
var Kh;
var Zh;
var wi;
var Jh;
var Qw;
var hu;
var Qh;
var eb;
var rb;
var n5;
var o5;
var a5;
var i5;
var l5;
var s5 = F3(() => {
  "use client";
  Fh();
  Bh();
  _h();
  cu();
  Ph();
  $h();
  pu();
  Oh();
  Nh();
  a2(qw, "useStateMachine");
  du = "ScrollArea", [qh, nO] = Mh(du), [Gw, Xe2] = qh(du), Wh = I3.forwardRef(
    (e7, t) => {
      let {
        __scopeScrollArea: r,
        type: n = "hover",
        dir: o,
        scrollHideDelay: i = 600,
        ...l7
      } = e7, [u6, c] = I3.useState(null), [p, d] = I3.useState(null), [h7, f] = I3.useState(null), [v7, b] = I3.useState(null), [m, g7] = I3.useState(
        null
      ), [y, w5] = I3.useState(0), [D7, x7] = I3.useState(0), [C7, E7] = I3.useState(false), [S4, R] = I3.useState(false), A = Tt2(t, (B6) => c(B6)), k4 = Hh(
        o
      );
      return (0, import_jsx_runtime5.jsx)(
        Gw,
        {
          scope: r,
          type: n,
          dir: k4,
          scrollHideDelay: i,
          scrollArea: u6,
          viewport: p,
          onViewportChange: d,
          content: h7,
          onContentChange: f,
          scrollbarX: v7,
          onScrollbarXChange: b,
          scrollbarXEnabled: C7,
          onScrollbarXEnabledChange: E7,
          scrollbarY: m,
          onScrollbarYChange: g7,
          scrollbarYEnabled: S4,
          onScrollbarYEnabledChange: R,
          onCornerWidthChange: w5,
          onCornerHeightChange: x7,
          children: (0, import_jsx_runtime5.jsx)(
            hn2.div,
            {
              dir: k4,
              ...l7,
              ref: A,
              style: {
                position: "relative",
                // Pass corner sizes as CSS vars to reduce re-renders of context consumers
                "--radix-scroll-area-corner-width": y + "px",
                "--radix-scroll-area-corner-height": D7 + "px",
                ...e7.style
              }
            }
          )
        }
      );
    }
  );
  Wh.displayName = du;
  Uh = "ScrollAreaViewport", Gh = I3.forwardRef(
    (e7, t) => {
      let { __scopeScrollArea: r, children: n, asChild: o, nonce: i, ...l7 } = e7, u6 = Xe2(Uh, r), c = I3.useRef(null), p = Tt2(t, c, u6.onViewportChange);
      return (0, import_jsx_runtime5.jsxs)(import_jsx_runtime5.Fragment, { children: [
        (0, import_jsx_runtime5.jsx)(
          "style",
          {
            dangerouslySetInnerHTML: {
              __html: `
[data-radix-scroll-area-viewport] {
  scrollbar-width: none;
  -ms-overflow-style: none;
  -webkit-overflow-scrolling: touch;
}
[data-radix-scroll-area-viewport]::-webkit-scrollbar {
  display: none;
}
:where([data-radix-scroll-area-viewport]) {
  display: flex;
  flex-direction: column;
  align-items: stretch;
}
:where([data-radix-scroll-area-content]) {
  flex-grow: 1;
}
`
            },
            nonce: i
          }
        ),
        (0, import_jsx_runtime5.jsx)(
          hn2.div,
          {
            "data-radix-scroll-area-viewport": "",
            ...l7,
            asChild: o,
            ref: p,
            style: {
              /**
               * We don't support `visible` because the intention is to have at least one scrollbar
               * if this component is used and `visible` will behave like `auto` in that case
               * https://developer.mozilla.org/en-US/docs/Web/CSS/overflow#description
               *
               * We don't handle `auto` because the intention is for the native implementation
               * to be hidden if using this component. We just want to ensure the node is scrollable
               * so could have used either `scroll` or `auto` here. We picked `scroll` to prevent
               * the browser from having to work out whether to render native scrollbars or not,
               * we tell it to with the intention of hiding them in CSS.
               */
              overflowX: u6.scrollbarXEnabled ? "scroll" : "hidden",
              overflowY: u6.scrollbarYEnabled ? "scroll" : "hidden",
              ...e7.style
            },
            children: nb({ asChild: o, children: n }, (d) => (0, import_jsx_runtime5.jsx)(
              "div",
              {
                "data-radix-scroll-area-content": "",
                ref: u6.onContentChange,
                style: { minWidth: u6.scrollbarXEnabled ? "fit-content" : void 0 },
                children: d
              }
            ))
          }
        )
      ] });
    }
  );
  Gh.displayName = Uh;
  gt = "ScrollAreaScrollbar", Xh = I3.forwardRef(
    (e7, t) => {
      let { forceMount: r, ...n } = e7, o = Xe2(gt, e7.__scopeScrollArea), { onScrollbarXEnabledChange: i, onScrollbarYEnabledChange: l7 } = o, u6 = e7.orientation === "horizontal";
      return I3.useEffect(() => (u6 ? i(true) : l7(true), () => {
        u6 ? i(false) : l7(false);
      }), [u6, i, l7]), o.type === "hover" ? (0, import_jsx_runtime5.jsx)(Xw, { ...n, ref: t, forceMount: r }) : o.type === "scroll" ? (0, import_jsx_runtime5.jsx)(
        Yw,
        { ...n, ref: t, forceMount: r }
      ) : o.type === "auto" ? (0, import_jsx_runtime5.jsx)(Yh, { ...n, ref: t, forceMount: r }) : o.type === "always" ? (0, import_jsx_runtime5.jsx)(fu, { ...n, ref: t }) : null;
    }
  );
  Xh.displayName = gt;
  Xw = I3.forwardRef((e7, t) => {
    let { forceMount: r, ...n } = e7, o = Xe2(gt, e7.__scopeScrollArea), [i, l7] = I3.useState(false);
    return I3.useEffect(() => {
      let u6 = o.scrollArea, c = 0;
      if (u6) {
        let p = a2(() => {
          window.clearTimeout(c), l7(true);
        }, "handlePointerEnter"), d = a2(() => {
          c = window.setTimeout(() => l7(false), o.scrollHideDelay);
        }, "handlePointerLeave");
        return u6.addEventListener("pointerenter", p), u6.addEventListener("pointerleave", d), () => {
          window.clearTimeout(c), u6.removeEventListener("pointerenter", p), u6.removeEventListener("pointerleave", d);
        };
      }
    }, [o.scrollArea, o.scrollHideDelay]), (0, import_jsx_runtime5.jsx)(mn2, { present: r || i, children: (0, import_jsx_runtime5.jsx)(
      Yh,
      {
        "data-state": i ? "visible" : "hidden",
        ...n,
        ref: t
      }
    ) });
  }), Yw = I3.forwardRef((e7, t) => {
    let { forceMount: r, ...n } = e7, o = Xe2(gt, e7.__scopeScrollArea), i = e7.orientation === "horizontal", l7 = Di(() => c("SCROLL_END"), 100), [u6, c] = qw("hidden", {
      hidden: {
        SCROLL: "scrolling"
      },
      scrolling: {
        SCROLL_END: "idle",
        POINTER_ENTER: "interacting"
      },
      interacting: {
        SCROLL: "interacting",
        POINTER_LEAVE: "idle"
      },
      idle: {
        HIDE: "hidden",
        SCROLL: "scrolling",
        POINTER_ENTER: "interacting"
      }
    });
    return I3.useEffect(() => {
      if (u6 === "idle") {
        let p = window.setTimeout(() => c("HIDE"), o.scrollHideDelay);
        return () => window.clearTimeout(p);
      }
    }, [u6, o.scrollHideDelay, c]), I3.useEffect(() => {
      let p = o.viewport, d = i ? "scrollLeft" : "scrollTop";
      if (p) {
        let h7 = p[d], f = a2(() => {
          let v7 = p[d];
          h7 !== v7 && (c("SCROLL"), l7()), h7 = v7;
        }, "handleScroll");
        return p.addEventListener("scroll", f), () => p.removeEventListener("scroll", f);
      }
    }, [o.viewport, i, c, l7]), (0, import_jsx_runtime5.jsx)(mn2, { present: r || u6 !== "hidden", children: (0, import_jsx_runtime5.jsx)(
      fu,
      {
        "data-state": u6 === "hidden" ? "hidden" : "visible",
        ...n,
        ref: t,
        onPointerEnter: Qt2(e7.onPointerEnter, () => c("POINTER_ENTER")),
        onPointerLeave: Qt2(e7.onPointerLeave, () => c("POINTER_LEAVE"))
      }
    ) });
  }), Yh = I3.forwardRef((e7, t) => {
    let r = Xe2(gt, e7.__scopeScrollArea), { forceMount: n, ...o } = e7, [i, l7] = I3.useState(false), u6 = e7.orientation === "horizontal", c = Di(() => {
      if (r.viewport) {
        let p = r.viewport.offsetWidth < r.viewport.scrollWidth, d = r.viewport.offsetHeight < r.viewport.scrollHeight;
        l7(u6 ? p : d);
      }
    }, 10);
    return vn2(r.viewport, c), vn2(r.content, c), (0, import_jsx_runtime5.jsx)(mn2, { present: n || i, children: (0, import_jsx_runtime5.jsx)(
      fu,
      {
        "data-state": i ? "visible" : "hidden",
        ...o,
        ref: t
      }
    ) });
  }), fu = I3.forwardRef((e7, t) => {
    let { orientation: r = "vertical", ...n } = e7, o = Xe2(gt, e7.__scopeScrollArea), i = I3.useRef(null), l7 = I3.useRef(0), [u6, c] = I3.useState(
      {
        content: 0,
        viewport: 0,
        scrollbar: { size: 0, paddingStart: 0, paddingEnd: 0 }
      }
    ), p = e5(u6.viewport, u6.content), d = {
      ...n,
      sizes: u6,
      onSizesChange: c,
      hasThumb: p > 0 && p < 1,
      onThumbChange: a2((f) => i.current = f, "onThumbChange"),
      onThumbPointerUp: a2(() => l7.current = 0, "onThumbPointerUp"),
      onThumbPointerDown: a2((f) => l7.current = f, "onThumbPointerDown")
    };
    function h7(f, v7) {
      return tb(f, l7.current, u6, v7);
    }
    return a2(h7, "getScrollPosition"), r === "horizontal" ? (0, import_jsx_runtime5.jsx)(
      Kw,
      {
        ...d,
        ref: t,
        onThumbPositionChange: a2(() => {
          if (o.viewport && i.current) {
            let f = o.viewport.scrollLeft, v7 = jh(f, u6, o.dir);
            i.current.style.transform = `translate3d(${v7}px, 0, 0)`;
          }
        }, "onThumbPositionChange"),
        onWheelScroll: a2((f) => {
          o.viewport && (o.viewport.scrollLeft = f);
        }, "onWheelScroll"),
        onDragScroll: a2((f) => {
          o.viewport && (o.viewport.scrollLeft = h7(f, o.dir));
        }, "onDragScroll")
      }
    ) : r === "vertical" ? (0, import_jsx_runtime5.jsx)(
      Zw,
      {
        ...d,
        ref: t,
        onThumbPositionChange: a2(() => {
          if (o.viewport && i.current) {
            let f = o.viewport.scrollTop, v7 = jh(f, u6);
            i.current.style.transform = `translate3d(0, ${v7}px, 0)`;
          }
        }, "onThumbPositionChange"),
        onWheelScroll: a2((f) => {
          o.viewport && (o.viewport.scrollTop = f);
        }, "onWheelScroll"),
        onDragScroll: a2((f) => {
          o.viewport && (o.viewport.scrollTop = h7(f));
        }, "onDragScroll")
      }
    ) : null;
  }), Kw = I3.forwardRef((e7, t) => {
    let { sizes: r, onSizesChange: n, ...o } = e7, i = Xe2(gt, e7.__scopeScrollArea), [l7, u6] = I3.useState(), c = I3.useRef(null), p = Tt2(t, c, i.onScrollbarXChange);
    return I3.useEffect(() => {
      c.current && u6(getComputedStyle(c.current));
    }, [c]), (0, import_jsx_runtime5.jsx)(
      Zh,
      {
        "data-orientation": "horizontal",
        ...o,
        ref: p,
        sizes: r,
        style: {
          bottom: 0,
          left: i.dir === "rtl" ? "var(--radix-scroll-area-corner-width)" : 0,
          right: i.dir === "ltr" ? "var(--radix-scroll-area-corner-width)" : 0,
          "--radix-scroll-area-thumb-width": yi(r) + "px",
          ...e7.style
        },
        onThumbPointerDown: a2((d) => e7.onThumbPointerDown(d.x), "onThumbPointerDown"),
        onDragScroll: a2((d) => e7.onDragScroll(d.x), "onDragScroll"),
        onWheelScroll: a2((d, h7) => {
          if (i.viewport) {
            let f = i.viewport.scrollLeft + d.deltaX;
            e7.onWheelScroll(f), r5(f, h7) && d.preventDefault();
          }
        }, "onWheelScroll"),
        onResize: a2(() => {
          c.current && i.viewport && l7 && n({
            content: i.viewport.scrollWidth,
            viewport: i.viewport.offsetWidth,
            scrollbar: {
              size: c.current.clientWidth,
              paddingStart: bi(l7.paddingLeft),
              paddingEnd: bi(l7.paddingRight)
            }
          });
        }, "onResize")
      }
    );
  }), Zw = I3.forwardRef((e7, t) => {
    let { sizes: r, onSizesChange: n, ...o } = e7, i = Xe2(gt, e7.__scopeScrollArea), [l7, u6] = I3.useState(), c = I3.useRef(null), p = Tt2(t, c, i.onScrollbarYChange);
    return I3.useEffect(() => {
      c.current && u6(getComputedStyle(c.current));
    }, [c]), (0, import_jsx_runtime5.jsx)(
      Zh,
      {
        "data-orientation": "vertical",
        ...o,
        ref: p,
        sizes: r,
        style: {
          top: 0,
          right: i.dir === "ltr" ? 0 : void 0,
          left: i.dir === "rtl" ? 0 : void 0,
          bottom: "var(--radix-scroll-area-corner-height)",
          "--radix-scroll-area-thumb-height": yi(r) + "px",
          ...e7.style
        },
        onThumbPointerDown: a2((d) => e7.onThumbPointerDown(d.y), "onThumbPointerDown"),
        onDragScroll: a2((d) => e7.onDragScroll(d.y), "onDragScroll"),
        onWheelScroll: a2((d, h7) => {
          if (i.viewport) {
            let f = i.viewport.scrollTop + d.deltaY;
            e7.onWheelScroll(f), r5(f, h7) && d.preventDefault();
          }
        }, "onWheelScroll"),
        onResize: a2(() => {
          c.current && i.viewport && l7 && n({
            content: i.viewport.scrollHeight,
            viewport: i.viewport.offsetHeight,
            scrollbar: {
              size: c.current.clientHeight,
              paddingStart: bi(l7.paddingTop),
              paddingEnd: bi(l7.paddingBottom)
            }
          });
        }, "onResize")
      }
    );
  }), [Jw, Kh] = qh(gt), Zh = I3.forwardRef((e7, t) => {
    let {
      __scopeScrollArea: r,
      sizes: n,
      hasThumb: o,
      onThumbChange: i,
      onThumbPointerUp: l7,
      onThumbPointerDown: u6,
      onThumbPositionChange: c,
      onDragScroll: p,
      onWheelScroll: d,
      onResize: h7,
      ...f
    } = e7, v7 = Xe2(gt, r), [b, m] = I3.useState(null), g7 = Tt2(t, (A) => m(A)), y = I3.useRef(null), w5 = I3.useRef(""), D7 = v7.viewport, x7 = n.content - n.viewport, C7 = Jt2(d), E7 = Jt2(c), S4 = Di(h7, 10);
    function R(A) {
      if (y.current) {
        let k4 = A.clientX - y.current.left, B6 = A.clientY - y.current.top;
        p({ x: k4, y: B6 });
      }
    }
    return a2(R, "handleDragScroll"), I3.useEffect(() => {
      let A = a2((k4) => {
        let B6 = k4.target;
        (b == null ? void 0 : b.contains(B6)) && C7(k4, x7);
      }, "handleWheel");
      return document.addEventListener("wheel", A, { passive: false }), () => document.removeEventListener("wheel", A, { passive: false });
    }, [D7, b, x7, C7]), I3.useEffect(E7, [n, E7]), vn2(b, S4), vn2(v7.content, S4), (0, import_jsx_runtime5.jsx)(
      Jw,
      {
        scope: r,
        scrollbar: b,
        hasThumb: o,
        onThumbChange: Jt2(i),
        onThumbPointerUp: Jt2(l7),
        onThumbPositionChange: E7,
        onThumbPointerDown: Jt2(u6),
        children: (0, import_jsx_runtime5.jsx)(
          hn2.div,
          {
            ...f,
            ref: g7,
            style: { position: "absolute", ...f.style },
            onPointerDown: Qt2(e7.onPointerDown, (A) => {
              A.button === 0 && (A.target.setPointerCapture(A.pointerId), y.current = b.getBoundingClientRect(), w5.current = document.body.style.webkitUserSelect, document.body.style.webkitUserSelect = "none", v7.viewport && (v7.viewport.style.scrollBehavior = "auto"), R(A));
            }),
            onPointerMove: Qt2(e7.onPointerMove, R),
            onPointerUp: Qt2(e7.onPointerUp, (A) => {
              let k4 = A.target;
              k4.hasPointerCapture(A.pointerId) && k4.releasePointerCapture(A.pointerId), document.body.style.webkitUserSelect = w5.current, v7.viewport && (v7.viewport.style.scrollBehavior = ""), y.current = null;
            })
          }
        )
      }
    );
  }), wi = "ScrollAreaThumb", Jh = I3.forwardRef(
    (e7, t) => {
      let { forceMount: r, ...n } = e7, o = Kh(wi, e7.__scopeScrollArea);
      return (0, import_jsx_runtime5.jsx)(mn2, { present: r || o.hasThumb, children: (0, import_jsx_runtime5.jsx)(Qw, { ref: t, ...n }) });
    }
  ), Qw = I3.forwardRef(
    (e7, t) => {
      let { __scopeScrollArea: r, style: n, ...o } = e7, i = Xe2(wi, r), l7 = Kh(wi, r), { onThumbPositionChange: u6 } = l7, c = Tt2(
        t,
        (h7) => l7.onThumbChange(h7)
      ), p = I3.useRef(), d = Di(() => {
        p.current && (p.current(), p.current = void 0);
      }, 100);
      return I3.useEffect(() => {
        let h7 = i.viewport;
        if (h7) {
          let f = a2(() => {
            if (d(), !p.current) {
              let v7 = rb(h7, u6);
              p.current = v7, u6();
            }
          }, "handleScroll");
          return u6(), h7.addEventListener("scroll", f), () => h7.removeEventListener("scroll", f);
        }
      }, [i.viewport, d, u6]), (0, import_jsx_runtime5.jsx)(
        hn2.div,
        {
          "data-state": l7.hasThumb ? "visible" : "hidden",
          ...o,
          ref: c,
          style: {
            width: "var(--radix-scroll-area-thumb-width)",
            height: "var(--radix-scroll-area-thumb-height)",
            ...n
          },
          onPointerDownCapture: Qt2(e7.onPointerDownCapture, (h7) => {
            let v7 = h7.target.getBoundingClientRect(), b = h7.clientX - v7.left, m = h7.clientY - v7.top;
            l7.onThumbPointerDown({ x: b, y: m });
          }),
          onPointerUp: Qt2(e7.onPointerUp, l7.onThumbPointerUp)
        }
      );
    }
  );
  Jh.displayName = wi;
  hu = "ScrollAreaCorner", Qh = I3.forwardRef(
    (e7, t) => {
      let r = Xe2(hu, e7.__scopeScrollArea), n = !!(r.scrollbarX && r.scrollbarY);
      return r.type !== "scroll" && n ? (0, import_jsx_runtime5.jsx)(eb, { ...e7, ref: t }) : null;
    }
  );
  Qh.displayName = hu;
  eb = I3.forwardRef((e7, t) => {
    let { __scopeScrollArea: r, ...n } = e7, o = Xe2(hu, r), [i, l7] = I3.useState(0), [u6, c] = I3.useState(0), p = !!(i && u6);
    return vn2(o.scrollbarX, () => {
      var _a3;
      let d = ((_a3 = o.scrollbarX) == null ? void 0 : _a3.offsetHeight) || 0;
      o.onCornerHeightChange(d), c(d);
    }), vn2(o.scrollbarY, () => {
      var _a3;
      let d = ((_a3 = o.scrollbarY) == null ? void 0 : _a3.offsetWidth) || 0;
      o.onCornerWidthChange(d), l7(d);
    }), p ? (0, import_jsx_runtime5.jsx)(
      hn2.div,
      {
        ...n,
        ref: t,
        style: {
          width: i,
          height: u6,
          position: "absolute",
          right: o.dir === "ltr" ? 0 : void 0,
          left: o.dir === "rtl" ? 0 : void 0,
          bottom: 0,
          ...e7.style
        }
      }
    ) : null;
  });
  a2(bi, "toInt");
  a2(e5, "getThumbRatio");
  a2(yi, "getThumbSize");
  a2(tb, "getScrollPositionFromPointer");
  a2(jh, "getThumbOffsetFromScroll");
  a2(t5, "linearScale");
  a2(r5, "isScrollingWithinScrollbarBounds");
  rb = a2((e7, t = () => {
  }) => {
    let r = { left: e7.scrollLeft, top: e7.scrollTop }, n = 0;
    return a2(function o() {
      let i = { left: e7.scrollLeft, top: e7.scrollTop }, l7 = r.left !== i.left, u6 = r.top !== i.top;
      (l7 || u6) && t(), r = i, n = window.requestAnimationFrame(o);
    }, "loop")(), () => window.cancelAnimationFrame(n);
  }, "addUnlinkedScrollListener");
  a2(Di, "useDebounceCallback");
  a2(vn2, "useResizeObserver");
  a2(nb, "getSubtree");
  n5 = Wh, o5 = Gh, a5 = Xh, i5 = Jh, l5 = Qh;
});
var ib;
var lb;
var u5;
var c5;
var wn2;
var Ci = F3(() => {
  "use strict";
  s5();
  ib = Tr(n5)(
    ({ scrollbarsize: e7, offset: t }) => ({
      width: "100%",
      height: "100%",
      overflow: "hidden",
      "--scrollbar-size": `${e7 + t}px`,
      "--radix-scroll-area-thumb-width": `${e7}px`
    })
  ), lb = Tr(o5)({
    width: "100%",
    height: "100%"
  }), u5 = Tr(a5)(({ offset: e7, horizontal: t, vertical: r }) => ({
    display: "flex",
    userSelect: "none",
    // ensures no selection
    touchAction: "none",
    // disable browser handling of all panning and zooming gestures on touch devices
    background: "transparent",
    transition: "all 0.2s ease-out",
    borderRadius: "var(--scrollbar-size)",
    zIndex: 1,
    '&[data-orientation="vertical"]': {
      width: "var(--scrollbar-size)",
      paddingRight: e7,
      marginTop: e7,
      marginBottom: t === "true" && r === "true" ? 0 : e7
    },
    '&[data-orientation="horizontal"]': {
      flexDirection: "column",
      height: "var(--scrollbar-size)",
      paddingBottom: e7,
      marginLeft: e7,
      marginRight: t === "true" && r === "true" ? 0 : e7
    }
  })), c5 = Tr(i5)(({ theme: e7 }) => ({
    flex: 1,
    background: e7.textMutedColor,
    opacity: 0.5,
    borderRadius: "var(--scrollbar-size)",
    position: "relative",
    transition: "opacity 0.2s ease-out",
    "&:hover": { opacity: 0.8 },
    /* increase target size for touch devices https://www.w3.org/WAI/WCAG21/Understanding/target-size.html */
    "::before": {
      content: '""',
      position: "absolute",
      top: "50%",
      left: "50%",
      transform: "translate(-50%,-50%)",
      width: "100%",
      height: "100%"
    }
  })), wn2 = (0, import_react6.forwardRef)(
    ({ children: e7, horizontal: t = false, vertical: r = false, offset: n = 2, scrollbarSize: o = 6, className: i }, l7) => import_react6.default.createElement(
      ib,
      { scrollbarsize: o, offset: n, className: i },
      import_react6.default.createElement(lb, { ref: l7 }, e7),
      t && import_react6.default.createElement(
        u5,
        {
          orientation: "horizontal",
          offset: n,
          horizontal: t.toString(),
          vertical: r.toString()
        },
        import_react6.default.createElement(c5, null)
      ),
      r && import_react6.default.createElement(
        u5,
        {
          orientation: "vertical",
          offset: n,
          horizontal: t.toString(),
          vertical: r.toString()
        },
        import_react6.default.createElement(c5, null)
      ),
      t && r && import_react6.default.createElement(l5, null)
    )
  );
  wn2.displayName = "ScrollArea";
});
var gu = {};
an2(gu, {
  SyntaxHighlighter: () => ua,
  createCopyToClipboardFunction: () => mu,
  default: () => Db,
  supportedLanguages: () => h5
});
function mu() {
  return (d5 == null ? void 0 : d5.clipboard) ? (e7) => d5.clipboard.writeText(e7) : async (e7) => {
    let t = la.createElement("TEXTAREA"), r = la.activeElement;
    t.value = e7, la.body.appendChild(t), t.select(), la.execCommand("copy"), la.body.removeChild(t), r.focus();
  };
}
var f5;
var d5;
var la;
var pb;
var h5;
var db;
var fb;
var hb;
var mb;
var gb;
var vb;
var wb;
var m5;
var bb;
var yb;
var ua;
var Db;
var ca = F3(() => {
  "use strict";
  oi();
  f5 = we2(Qo(), 1);
  Rf();
  Lf();
  Mf();
  zf();
  qf();
  Yf();
  Qf();
  oh();
  lh();
  fh();
  gh();
  Dh();
  Sf();
  iu();
  Ci();
  ({ navigator: d5, document: la, window: pb } = ln2), h5 = {
    jsextra: Vf,
    jsx: Jf,
    json: Xf,
    yml: yh,
    md: nh,
    bash: Tf,
    css: Bf,
    html: ih,
    tsx: dh,
    typescript: mh,
    graphql: $f
  };
  Object.entries(h5).forEach(([e7, t]) => {
    mi.registerLanguage(e7, t);
  });
  db = (0, f5.default)(2)(
    (e7) => Object.entries(e7.code || {}).reduce((t, [r, n]) => ({ ...t, [`* .${r}`]: n }), {})
  ), fb = mu();
  a2(mu, "createCopyToClipboardFunction");
  hb = Tr.div(
    ({ theme: e7 }) => ({
      position: "relative",
      overflow: "hidden",
      color: e7.color.defaultText
    }),
    ({ theme: e7, bordered: t }) => t ? {
      border: `1px solid ${e7.appBorderColor}`,
      borderRadius: e7.borderRadius,
      background: e7.background.content
    } : {},
    ({ showLineNumbers: e7 }) => e7 ? {
      // use the before pseudo element to display line numbers
      ".react-syntax-highlighter-line-number::before": {
        content: "attr(data-line-number)"
      }
    } : {}
  ), mb = a2(({ children: e7, className: t }) => import_react7.default.createElement(
    wn2,
    { horizontal: true, vertical: true, className: t },
    e7
  ), "UnstyledScroller"), gb = Tr(mb)(
    {
      position: "relative"
    },
    ({ theme: e7 }) => db(e7)
  ), vb = Tr.pre(({ theme: e7, padded: t }) => ({
    display: "flex",
    justifyContent: "flex-start",
    margin: 0,
    padding: t ? e7.layoutMargin : 0
  })), wb = Tr.div(({ theme: e7 }) => ({
    flex: 1,
    paddingLeft: 2,
    // TODO: To match theming/global.ts for now
    paddingRight: e7.layoutMargin,
    opacity: 1,
    fontFamily: e7.typography.fonts.mono
  })), m5 = a2((e7) => {
    let t = [...e7.children], r = t[0], n = r.children[0].value, o = {
      ...r,
      // empty the line-number element
      children: [],
      properties: {
        ...r.properties,
        // add a data-line-number attribute to line-number element, so we can access the line number with `content: attr(data-line-number)`
        "data-line-number": n,
        // remove the 'userSelect: none' style, which will produce extra empty lines when copy-pasting in firefox
        style: { ...r.properties.style, userSelect: "auto" }
      }
    };
    return t[0] = o, { ...e7, children: t };
  }, "processLineNumber"), bb = a2(({ rows: e7, stylesheet: t, useInlineStyles: r }) => e7.map((n, o) => yr2({
    node: m5(n),
    stylesheet: t,
    useInlineStyles: r,
    key: `code-segement${o}`
  })), "defaultRenderer"), yb = a2((e7, t) => t ? e7 ? ({ rows: r, ...n }) => e7({ rows: r.map((o) => m5(o)), ...n }) : bb : e7, "wrapRenderer"), ua = a2(({
    children: e7,
    language: t = "jsx",
    copyable: r = false,
    bordered: n = false,
    padded: o = false,
    format: i = true,
    formatter: l7 = void 0,
    className: u6 = void 0,
    showLineNumbers: c = false,
    ...p
  }) => {
    if (typeof e7 != "string" || !e7.trim())
      return null;
    let [d, h7] = (0, import_react7.useState)("");
    (0, import_react7.useEffect)(() => {
      l7 ? l7(i, e7).then(h7) : h7(e7.trim());
    }, [e7, i, l7]);
    let [f, v7] = (0, import_react7.useState)(false), b = (0, import_react7.useCallback)(
      (g7) => {
        g7.preventDefault(), fb(d).then(() => {
          v7(true), pb.setTimeout(() => v7(false), 1500);
        }).catch(import_client_logger3.logger.error);
      },
      [d]
    ), m = yb(p.renderer, c);
    return import_react7.default.createElement(
      hb,
      {
        bordered: n,
        padded: o,
        showLineNumbers: c,
        className: u6
      },
      import_react7.default.createElement(gb, null, import_react7.default.createElement(
        mi,
        {
          padded: o || n,
          language: t,
          showLineNumbers: c,
          showInlineLineNumbers: c,
          useInlineStyles: false,
          PreTag: vb,
          CodeTag: wb,
          lineNumberContainerStyle: {},
          ...p,
          renderer: m
        },
        d
      )),
      r ? import_react7.default.createElement(au, { actionItems: [{ title: f ? "Copied" : "Copy", onClick: b }] }) : null
    );
  }, "SyntaxHighlighter");
  ua.registerLanguage = (...e7) => mi.registerLanguage(...e7);
  Db = ua;
});
function kx(e7) {
  if (typeof e7 == "string") return ec;
  if (Array.isArray(e7)) return tc;
  if (!e7) return;
  let { type: t } = e7;
  if (e22.has(t)) return t;
}
function Lx(e7) {
  let t = e7 === null ? "null" : typeof e7;
  if (t !== "string" && t !== "object") return `Unexpected doc '${t}', 
Expected it to be 'string' or 'object'.`;
  if (lc(e7)) throw new Error("doc is valid.");
  let r = Object.prototype.toString.call(e7);
  if (r !== "[object Object]") return `Unexpected doc '${r}'.`;
  let n = Tx([...e22].map((o) => `'${o}'`));
  return `Unexpected doc.type '${e7.type}'.
Expected it to be ${n}.`;
}
function bt(e7) {
  return Tr2(e7), { type: zi, contents: e7 };
}
function n2(e7, t) {
  return Tr2(t), { type: Oi, contents: t, n: e7 };
}
function ue2(e7, t = {}) {
  return Tr2(e7), sc(t.expandedStates, true), { type: wa2, id: t.id, contents: e7, break: !!t.shouldBreak, expandedStates: t.expandedStates };
}
function Bx(e7) {
  return n2(Number.NEGATIVE_INFINITY, e7);
}
function Mx(e7) {
  return n2({ type: "root" }, e7);
}
function o2(e7) {
  return sc(e7), { type: Ni, parts: e7 };
}
function Ii(e7, t = "", r = {}) {
  return Tr2(e7), t !== "" && Tr2(t), { type: ji, breakContents: e7, flatContents: t, groupId: r.groupId };
}
function _x(e7, t) {
  return Tr2(e7), { type: Vi, contents: e7, groupId: t.groupId, negate: t.negate };
}
function Jn2(e7, t) {
  Tr2(e7), sc(t);
  let r = [];
  for (let n = 0; n < t.length; n++) n !== 0 && r.push(e7), r.push(t[n]);
  return r;
}
function uc(e7, t) {
  if (typeof e7 == "string") return t(e7);
  let r = /* @__PURE__ */ new Map();
  return n(e7);
  function n(i) {
    if (r.has(i)) return r.get(i);
    let l7 = o(i);
    return r.set(i, l7), l7;
  }
  function o(i) {
    switch (lc(i)) {
      case tc:
        return t(i.map(n));
      case Ni:
        return t({ ...i, parts: i.parts.map(n) });
      case ji:
        return t({ ...i, breakContents: n(i.breakContents), flatContents: n(i.flatContents) });
      case wa2: {
        let { expandedStates: l7, contents: u6 } = i;
        return l7 ? (l7 = l7.map(n), u6 = l7[0]) : u6 = n(u6), t({ ...i, contents: u6, expandedStates: l7 });
      }
      case Oi:
      case zi:
      case Vi:
      case ic:
      case oc:
        return t({ ...i, contents: n(i.contents) });
      case ec:
      case rc:
      case nc:
      case ac:
      case Mr2:
      case qi:
        return t(i);
      default:
        throw new t2(i);
    }
  }
}
function Ox(e7) {
  switch (lc(e7)) {
    case Ni:
      if (e7.parts.every((t) => t === "")) return "";
      break;
    case wa2:
      if (!e7.contents && !e7.id && !e7.break && !e7.expandedStates) return "";
      if (e7.contents.type === wa2 && e7.contents.id === e7.id && e7.contents.break === e7.break && e7.contents.expandedStates === e7.expandedStates)
        return e7.contents;
      break;
    case Oi:
    case zi:
    case Vi:
    case oc:
      if (!e7.contents) return "";
      break;
    case ji:
      if (!e7.flatContents && !e7.breakContents) return "";
      break;
    case tc: {
      let t = [];
      for (let r of e7) {
        if (!r) continue;
        let [n, ...o] = Array.isArray(r) ? r : [r];
        typeof n == "string" && typeof xa2(false, t, -1) == "string" ? t[t.length - 1] += n : t.push(n), t.push(...o);
      }
      return t.length === 0 ? "" : t.length === 1 ? t[0] : t;
    }
    case ec:
    case rc:
    case nc:
    case ac:
    case Mr2:
    case ic:
    case qi:
      break;
    default:
      throw new t2(e7);
  }
  return e7;
}
function Nx(e7) {
  return uc(e7, (t) => Ox(t));
}
function ot2(e7, t = $x) {
  return uc(e7, (r) => typeof r == "string" ? Jn2(t, r.split(`
`)) : r);
}
function jx(e7, t) {
  let r = t === true || t === Si ? Si : y5, n = r === Si ? y5 : Si, o = 0, i = 0;
  for (let l7 of e7) l7 === r ? o++ : l7 === n && i++;
  return o > i ? n : r;
}
function qx(e7) {
  if (typeof e7 != "string") throw new TypeError("Expected a string");
  return e7.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
function Zx(e7) {
  return (e7 == null ? void 0 : e7.type) === "front-matter";
}
function a22(e7, t) {
  var r;
  if (e7.type === "text" || e7.type === "comment" || Wi(e7) || e7.type === "yaml" || e7.type === "toml") return null;
  if (e7.type === "attribute" && delete t.value, e7.type === "docType" && delete t.value, e7.type === "angularControlFlowBlock" && (r = e7.parameters) != null && r.children) for (let n of t.parameters.children) Qx.has(e7.name) ? delete n.expression : n.expression = n.expression.trim();
  e7.type === "angularIcuExpression" && (t.switchValue = e7.switchValue.trim()), e7.type === "angularLetDeclarationInitializer" && delete t.value;
}
async function tC(e7, t) {
  if (e7.language === "yaml") {
    let r = e7.value.trim(), n = r ? await t(r, { parser: "yaml" }) : "";
    return Mx([e7.startDelimiter, e7.explicitLanguage, Q2, n, n ? Q2 : "", e7.endDelimiter]);
  }
}
function Ui(e7, t = true) {
  return [bt([Ee2, e7]), t ? Ee2 : ""];
}
function Qn2(e7, t) {
  let r = e7.type === "NGRoot" ? e7.node.type === "NGMicrosyntax" && e7.node.body.length === 1 && e7.node.body[0].type === "NGMicrosyntaxExpression" ? e7.node.body[0].expression : e7.node : e7.type === "JsExpressionRoot" ? e7.node : e7;
  return r && (r.type === "ObjectExpression" || r.type === "ArrayExpression" || (t.parser === "__vue_expression" || t.parser === "__vue_ts_expression") && (r.type === "TemplateLiteral" || r.type === "StringLiteral"));
}
async function at2(e7, t, r, n) {
  r = { __isInHtmlAttribute: true, __embeddedInHtml: true, ...r };
  let o = true;
  n && (r.__onHtmlBindingRoot = (l7, u6) => {
    o = n(l7, u6);
  });
  let i = await t(e7, r, t);
  return o ? ue2(i) : Ui(i);
}
function nC(e7, t, r, n) {
  let { node: o } = r, i = n.originalText.slice(o.sourceSpan.start.offset, o.sourceSpan.end.offset);
  return /^\s*$/u.test(i) ? "" : at2(i, e7, { parser: "__ng_directive", __isInHtmlAttribute: false }, Qn2);
}
function D5(e7, t) {
  if (!t) return;
  let r = aC(t).toLowerCase();
  return e7.find(({ filenames: n }) => n == null ? void 0 : n.some((o) => o.toLowerCase() === r)) ?? e7.find(({ extensions: n }) => n == null ? void 0 : n.some((o) => r.endsWith(o)));
}
function iC(e7, t) {
  if (t) return e7.find(({ name: r }) => r.toLowerCase() === t) ?? e7.find(({ aliases: r }) => r == null ? void 0 : r.includes(t)) ?? e7.find(({ extensions: r }) => r == null ? void 0 : r.includes(`.${t}`));
}
function lC(e7, t) {
  let r = e7.plugins.flatMap((o) => o.languages ?? []), n = iC(r, t.language) ?? D5(r, t.physicalFile) ?? D5(r, t.file) ?? (t.physicalFile, void 0);
  return n == null ? void 0 : n.parsers[0];
}
function dC(e7) {
  return e7.type === "element" && !e7.hasExplicitNamespace && !["html", "svg"].includes(e7.namespace);
}
function l2(e7, t) {
  return !!(e7.type === "ieConditionalComment" && e7.lastChild && !e7.lastChild.isSelfClosing && !e7.lastChild.endSourceSpan || e7.type === "ieConditionalComment" && !e7.complete || Zn2(e7) && e7.children.some((r) => r.type !== "text" && r.type !== "interpolation") || pc2(e7, t) && !It2(e7) && e7.type !== "interpolation");
}
function Xi(e7) {
  return e7.type === "attribute" || !e7.parent || !e7.prev ? false : mC(e7.prev);
}
function mC(e7) {
  return e7.type === "comment" && e7.value.trim() === "prettier-ignore";
}
function Ye2(e7) {
  return e7.type === "text" || e7.type === "comment";
}
function It2(e7) {
  return e7.type === "element" && (e7.fullName === "script" || e7.fullName === "style" || e7.fullName === "svg:style" || e7.fullName === "svg:script" || ba2(e7) && (e7.name === "script" || e7.name === "style"));
}
function gC(e7) {
  return e7.children && !It2(e7);
}
function vC(e7) {
  return It2(e7) || e7.type === "interpolation" || s2(e7);
}
function s2(e7) {
  return m2(e7).startsWith("pre");
}
function wC(e7, t) {
  var r, n;
  let o = i();
  if (o && !e7.prev && (n = (r = e7.parent) == null ? void 0 : r.tagDefinition) != null && n.ignoreFirstLf) return e7.type === "interpolation";
  return o;
  function i() {
    return Wi(e7) || e7.type === "angularControlFlowBlock" ? false : (e7.type === "text" || e7.type === "interpolation") && e7.prev && (e7.prev.type === "text" || e7.prev.type === "interpolation") ? true : !e7.parent || e7.parent.cssDisplay === "none" ? false : Zn2(e7.parent) ? true : !(!e7.prev && (e7.parent.type === "root" || Zn2(e7) && e7.parent || It2(e7.parent) || Yi(e7.parent, t) || !AC(e7.parent.cssDisplay)) || e7.prev && !TC(e7.prev.cssDisplay));
  }
}
function bC(e7, t) {
  return Wi(e7) || e7.type === "angularControlFlowBlock" ? false : (e7.type === "text" || e7.type === "interpolation") && e7.next && (e7.next.type === "text" || e7.next.type === "interpolation") ? true : !e7.parent || e7.parent.cssDisplay === "none" ? false : Zn2(e7.parent) ? true : !(!e7.next && (e7.parent.type === "root" || Zn2(e7) && e7.parent || It2(e7.parent) || Yi(e7.parent, t) || !FC(e7.parent.cssDisplay)) || e7.next && !kC(e7.next.cssDisplay));
}
function yC(e7) {
  return LC(e7.cssDisplay) && !It2(e7);
}
function Ri(e7) {
  return Wi(e7) || e7.next && e7.sourceSpan.end && e7.sourceSpan.end.line + 1 < e7.next.sourceSpan.start.line;
}
function DC(e7) {
  return u2(e7) || e7.type === "element" && e7.children.length > 0 && (["body", "script", "style"].includes(e7.name) || e7.children.some((t) => CC(
    t
  ))) || e7.firstChild && e7.firstChild === e7.lastChild && e7.firstChild.type !== "text" && p2(e7.firstChild) && (!e7.lastChild.isTrailingSpaceSensitive || d2(e7.lastChild));
}
function u2(e7) {
  return e7.type === "element" && e7.children.length > 0 && (["html", "head", "ul", "ol", "select"].includes(e7.name) || e7.cssDisplay.startsWith(
    "table"
  ) && e7.cssDisplay !== "table-cell");
}
function Vu(e7) {
  return f2(e7) || e7.prev && xC(e7.prev) || c2(e7);
}
function xC(e7) {
  return f2(e7) || e7.type === "element" && e7.fullName === "br" || c2(e7);
}
function c2(e7) {
  return p2(e7) && d2(e7);
}
function p2(e7) {
  return e7.hasLeadingSpaces && (e7.prev ? e7.prev.sourceSpan.end.line < e7.sourceSpan.start.line : e7.parent.type === "root" || e7.parent.startSourceSpan.end.line < e7.sourceSpan.start.line);
}
function d2(e7) {
  return e7.hasTrailingSpaces && (e7.next ? e7.next.sourceSpan.start.line > e7.sourceSpan.end.line : e7.parent.type === "root" || e7.parent.endSourceSpan && e7.parent.endSourceSpan.start.line > e7.sourceSpan.end.line);
}
function f2(e7) {
  switch (e7.type) {
    case "ieConditionalComment":
    case "comment":
    case "directive":
      return true;
    case "element":
      return ["script", "select"].includes(e7.name);
  }
  return false;
}
function cc(e7) {
  return e7.lastChild ? cc(e7.lastChild) : e7;
}
function CC(e7) {
  var t;
  return (t = e7.children) == null ? void 0 : t.some((r) => r.type !== "text");
}
function h2(e7) {
  if (e7) switch (e7) {
    case "module":
    case "text/javascript":
    case "text/babel":
    case "application/javascript":
      return "babel";
    case "application/x-typescript":
      return "typescript";
    case "text/markdown":
      return "markdown";
    case "text/html":
      return "html";
    case "text/x-handlebars-template":
      return "glimmer";
    default:
      if (e7.endsWith("json") || e7.endsWith("importmap") || e7 === "speculationrules") return "json";
  }
}
function EC(e7, t) {
  let { name: r, attrMap: n } = e7;
  if (r !== "script" || Object.prototype.hasOwnProperty.call(n, "src")) return;
  let { type: o, lang: i } = e7.attrMap;
  return !i && !o ? "babel" : Gi(t, { language: i }) ?? h2(o);
}
function SC(e7, t) {
  if (!pc2(e7, t)) return;
  let { attrMap: r } = e7;
  if (Object.prototype.hasOwnProperty.call(r, "src")) return;
  let { type: n, lang: o } = r;
  return Gi(t, { language: o }) ?? h2(n);
}
function RC(e7, t) {
  if (e7.name !== "style") return;
  let { lang: r } = e7.attrMap;
  return r ? Gi(t, { language: r }) : "css";
}
function x5(e7, t) {
  return EC(e7, t) ?? RC(e7, t) ?? SC(e7, t);
}
function Ca2(e7) {
  return e7 === "block" || e7 === "list-item" || e7.startsWith("table");
}
function AC(e7) {
  return !Ca2(e7) && e7 !== "inline-block";
}
function FC(e7) {
  return !Ca2(e7) && e7 !== "inline-block";
}
function kC(e7) {
  return !Ca2(e7);
}
function TC(e7) {
  return !Ca2(e7);
}
function LC(e7) {
  return !Ca2(e7) && e7 !== "inline-block";
}
function Zn2(e7) {
  return m2(e7).startsWith("pre");
}
function IC(e7, t) {
  let r = e7;
  for (; r; ) {
    if (t(r)) return true;
    r = r.parent;
  }
  return false;
}
function BC(e7, t) {
  var r;
  if (eo2(e7, t)) return "block";
  if (((r = e7.prev) == null ? void 0 : r.type) === "comment") {
    let o = e7.prev.value.match(/^\s*display:\s*([a-z]+)\s*$/u);
    if (o) return o[1];
  }
  let n = false;
  if (e7.type === "element" && e7.namespace === "svg") if (IC(e7, (o) => o.fullName === "svg:foreignObject")) n = true;
  else return e7.name === "svg" ? "inline-block" : "block";
  switch (t.htmlWhitespaceSensitivity) {
    case "strict":
      return "inline";
    case "ignore":
      return "block";
    default:
      return e7.type === "element" && (!e7.namespace || n || ba2(e7)) && uC[e7.name] || sC;
  }
}
function m2(e7) {
  return e7.type === "element" && (!e7.namespace || ba2(e7)) && pC[e7.name] || cC;
}
function MC(e7) {
  let t = Number.POSITIVE_INFINITY;
  for (let r of e7.split(`
`)) {
    if (r.length === 0) continue;
    let n = wt2.getLeadingWhitespaceCount(r);
    if (n === 0) return 0;
    r.length !== n && n < t && (t = n);
  }
  return t === Number.POSITIVE_INFINITY ? 0 : t;
}
function g2(e7, t = MC(e7)) {
  return t === 0 ? e7 : e7.split(`
`).map((r) => r.slice(t)).join(`
`);
}
function v2(e7) {
  return Oe2(false, Oe2(false, e7, "&apos;", "'"), "&quot;", '"');
}
function or2(e7) {
  return v2(e7.value);
}
function Yi(e7, t) {
  return eo2(e7, t) && !_C.has(e7.fullName);
}
function eo2(e7, t) {
  return t.parser === "vue" && e7.type === "element" && e7.parent.type === "root" && e7.fullName.toLowerCase() !== "html";
}
function pc2(e7, t) {
  return eo2(e7, t) && (Yi(e7, t) || e7.attrMap.lang && e7.attrMap.lang !== "html");
}
function PC(e7) {
  let t = e7.fullName;
  return t.charAt(0) === "#" || t === "slot-scope" || t === "v-slot" || t.startsWith("v-slot:");
}
function HC(e7, t) {
  let r = e7.parent;
  if (!eo2(r, t)) return false;
  let n = r.fullName, o = e7.fullName;
  return n === "script" && o === "setup" || n === "style" && o === "vars";
}
function w22(e7, t = e7.value) {
  return e7.parent.isWhitespaceSensitive ? e7.parent.isIndentationSensitive ? ot2(t) : ot2(g2(i2(t)), Q2) : Jn2(fe2, wt2.split(t));
}
function b2(e7, t) {
  return eo2(e7, t) && e7.name === "script";
}
async function $C(e7, t) {
  let r = [];
  for (let [n, o] of e7.split(y2).entries()) if (n % 2 === 0) r.push(ot2(o));
  else try {
    r.push(ue2(["{{", bt([fe2, await at2(o, t, { parser: "__ng_interpolation", __isInHtmlInterpolation: true })]), fe2, "}}"]));
  } catch {
    r.push("{{", ot2(o), "}}");
  }
  return r;
}
function dc({ parser: e7 }) {
  return (t, r, n) => at2(or2(n.node), t, { parser: e7 }, Qn2);
}
function jC(e7, t) {
  if (t.parser !== "angular") return;
  let { node: r } = e7, n = r.fullName;
  if (n.startsWith("(") && n.endsWith(")") || n.startsWith("on-")) return zC;
  if (n.startsWith("[") && n.endsWith("]") || /^bind(?:on)?-/u.test(n) || /^ng-(?:if|show|hide|class|style)$/u.test(n)) return OC;
  if (n.startsWith("*")) return NC;
  let o = or2(r);
  if (/^i18n(?:-.+)?$/u.test(n)) return () => Ui(o2(w22(r, o.trim())), !o.includes("@@"));
  if (y2.test(o)) return (i) => $C(o, i);
}
function qC(e7, t) {
  let { node: r } = e7, n = or2(r);
  if (r.fullName === "class" && !t.parentParser && !n.includes("{{")) return () => n.trim().split(/\s+/u).join(" ");
}
function C5(e7) {
  return e7 === "	" || e7 === `
` || e7 === "\f" || e7 === "\r" || e7 === " ";
}
function ZC(e7) {
  let t = e7.length, r, n, o, i, l7, u6 = 0, c;
  function p(v7) {
    let b, m = v7.exec(e7.substring(u6));
    if (m) return [b] = m, u6 += b.length, b;
  }
  a2(p, "p");
  let d = [];
  for (; ; ) {
    if (p(GC), u6 >= t) {
      if (d.length === 0) throw new Error("Must contain one or more image candidate strings.");
      return d;
    }
    c = u6, r = p(XC), n = [], r.slice(-1) === "," ? (r = r.replace(YC, ""), f()) : h7();
  }
  function h7() {
    for (p(UC), o = "", i = "in descriptor"; ; ) {
      if (l7 = e7.charAt(u6), i === "in descriptor") if (C5(l7)) o && (n.push(o), o = "", i = "after descriptor");
      else if (l7 === ",") {
        u6 += 1, o && n.push(o), f();
        return;
      } else if (l7 === "(") o += l7, i = "in parens";
      else if (l7 === "") {
        o && n.push(o), f();
        return;
      } else o += l7;
      else if (i === "in parens") if (l7 === ")") o += l7, i = "in descriptor";
      else if (l7 === "") {
        n.push(o), f();
        return;
      } else o += l7;
      else if (i === "after descriptor" && !C5(l7)) if (l7 === "") {
        f();
        return;
      } else i = "in descriptor", u6 -= 1;
      u6 += 1;
    }
  }
  a2(h7, "f");
  function f() {
    let v7 = false, b, m, g7, y, w5 = {}, D7, x7, C7, E7, S4;
    for (y = 0; y < n.length; y++) D7 = n[y], x7 = D7[D7.length - 1], C7 = D7.substring(0, D7.length - 1), E7 = parseInt(C7, 10), S4 = parseFloat(C7), E5.test(C7) && x7 === "w" ? ((b || m) && (v7 = true), E7 === 0 ? v7 = true : b = E7) : KC.test(C7) && x7 === "x" ? ((b || m || g7) && (v7 = true), S4 < 0 ? v7 = true : m = S4) : E5.test(C7) && x7 === "h" ? ((g7 || m) && (v7 = true), E7 === 0 ? v7 = true : g7 = E7) : v7 = true;
    if (!v7) w5.source = { value: r, startOffset: c }, b && (w5.width = { value: b }), m && (w5.density = { value: m }), g7 && (w5.height = { value: g7 }), d.push(w5);
    else throw new Error(`Invalid srcset descriptor found in "${e7}" at "${D7}".`);
  }
  a2(f, "d");
}
function QC(e7) {
  if (e7.node.fullName === "srcset" && (e7.parent.fullName === "img" || e7.parent.fullName === "source")) return () => tE(or2(e7.node));
}
function tE(e7) {
  let t = JC(e7), r = eE.filter((d) => t.some((h7) => Object.prototype.hasOwnProperty.call(h7, d)));
  if (r.length > 1) throw new Error("Mixed descriptor in srcset is not supported");
  let [n] = r, o = D2[n], i = t.map((d) => d.source.value), l7 = Math.max(...i.map((d) => d.length)), u6 = t.map((d) => d[n] ? String(d[n].value) : ""), c = u6.map((d) => {
    let h7 = d.indexOf(".");
    return h7 === -1 ? d.length : h7;
  }), p = Math.max(...c);
  return Ui(Jn2([",", fe2], i.map((d, h7) => {
    let f = [d], v7 = u6[h7];
    if (v7) {
      let b = l7 - d.length + 1, m = p - c[h7], g7 = " ".repeat(b + m);
      f.push(Ii(g7, " "), v7 + o);
    }
    return f;
  })));
}
function nE(e7, t) {
  let { node: r } = e7, n = or2(e7.node).trim();
  if (r.fullName === "style" && !t.parentParser && !n.includes("{{")) return async (o) => Ui(await o(n, { parser: "css", __isHTMLStyleAttribute: true }));
}
function oE(e7, t) {
  let { root: r } = e7;
  return qu.has(r) || qu.set(r, r.children.some((n) => b2(n, t) && ["ts", "typescript"].includes(n.attrMap.lang))), qu.get(r);
}
function aE(e7, t, r) {
  let { node: n } = r, o = or2(n);
  return at2(`type T<${o}> = any`, e7, { parser: "babel-ts", __isEmbeddedTypescriptGenericParameters: true }, Qn2);
}
function iE(e7, t, { parseWithTs: r }) {
  return at2(`function _(${e7}) {}`, t, { parser: r ? "babel-ts" : "babel", __isVueBindings: true });
}
function lE(e7) {
  let t = /^(?:[\w$]+|\([^)]*\))\s*=>|^function\s*\(/u, r = /^[$_a-z][\w$]*(?:\.[$_a-z][\w$]*|\['[^']*'\]|\["[^"]*"\]|\[\d+\]|\[[$_a-z][\w$]*\])*$/iu, n = e7.trim();
  return t.test(n) || r.test(n);
}
async function sE(e7, t, r, n) {
  let o = or2(r.node), { left: i, operator: l7, right: u6 } = uE(o), c = fc(r, n);
  return [ue2(await at2(`function _(${i}) {}`, e7, { parser: c ? "babel-ts" : "babel", __isVueForBindingLeft: true })), " ", l7, " ", await at2(
    u6,
    e7,
    { parser: c ? "__ts_expression" : "__js_expression" }
  )];
}
function uE(e7) {
  let t = /(.*?)\s+(in|of)\s+(.*)/su, r = /,([^,\]}]*)(?:,([^,\]}]*))?$/u, n = /^\(|\)$/gu, o = e7.match(t);
  if (!o) return;
  let i = {};
  if (i.for = o[3].trim(), !i.for) return;
  let l7 = Oe2(false, o[1].trim(), n, ""), u6 = l7.match(r);
  u6 ? (i.alias = l7.replace(r, ""), i.iterator1 = u6[1].trim(), u6[2] && (i.iterator2 = u6[2].trim())) : i.alias = l7;
  let c = [i.alias, i.iterator1, i.iterator2];
  if (!c.some((p, d) => !p && (d === 0 || c.slice(d + 1).some(Boolean)))) return { left: c.filter(Boolean).join(","), operator: o[2], right: i.for };
}
function cE(e7, t) {
  if (t.parser !== "vue") return;
  let { node: r } = e7, n = r.fullName;
  if (n === "v-for") return sE;
  if (n === "generic" && b2(r.parent, t)) return aE;
  let o = or2(r), i = fc(e7, t);
  if (PC(r) || HC(r, t)) return (l7) => iE(o, l7, { parseWithTs: i });
  if (n.startsWith("@") || n.startsWith("v-on:")) return (l7) => pE(o, l7, { parseWithTs: i });
  if (n.startsWith(":") || n.startsWith("v-bind:")) return (l7) => dE(o, l7, { parseWithTs: i });
  if (n.startsWith("v-")) return (l7) => x2(o, l7, { parseWithTs: i });
}
function pE(e7, t, { parseWithTs: r }) {
  return lE(e7) ? x2(e7, t, { parseWithTs: r }) : at2(e7, t, { parser: r ? "__vue_ts_event_binding" : "__vue_event_binding" }, Qn2);
}
function dE(e7, t, { parseWithTs: r }) {
  return at2(e7, t, { parser: r ? "__vue_ts_expression" : "__vue_expression" }, Qn2);
}
function x2(e7, t, { parseWithTs: r }) {
  return at2(e7, t, { parser: r ? "__ts_expression" : "__js_expression" }, Qn2);
}
function hE(e7, t) {
  let { node: r } = e7;
  if (r.value) {
    if (/^PRETTIER_HTML_PLACEHOLDER_\d+_\d+_IN_JS$/u.test(t.originalText.slice(r.valueSpan.start.offset, r.valueSpan.end.offset)) || t.parser === "lwc" && r.value.startsWith("{") && r.value.endsWith("}")) return [r.rawName, "=", r.value];
    for (let n of [rE, nE, WC, fE, VC]) {
      let o = n(e7, t);
      if (o) return mE(o);
    }
  }
}
function mE(e7) {
  return async (t, r, n, o) => {
    let i = await e7(t, r, n, o);
    if (i) return i = uc(i, (l7) => typeof l7 == "string" ? Oe2(false, l7, '"', "&quot;") : l7), [n.node.rawName, '="', ue2(i), '"'];
  };
}
function vE(e7) {
  return Array.isArray(e7) && e7.length > 0;
}
function Ki(e7) {
  return e7.sourceSpan.start.offset;
}
function Zi(e7) {
  return e7.sourceSpan.end.offset;
}
function Ku(e7, t) {
  return [e7.isSelfClosing ? "" : wE(e7, t), ma(e7, t)];
}
function wE(e7, t) {
  return e7.lastChild && ya2(e7.lastChild) ? "" : [bE(e7, t), mc(e7, t)];
}
function ma(e7, t) {
  return (e7.next ? Ir(e7.next) : Sa2(e7.parent)) ? "" : [Ea2(e7, t), Lr2(e7, t)];
}
function bE(e7, t) {
  return Sa2(e7) ? Ea2(e7.lastChild, t) : "";
}
function Lr2(e7, t) {
  return ya2(e7) ? mc(e7.parent, t) : Ji(e7) ? gc2(e7.next) : "";
}
function mc(e7, t) {
  if (E2(!e7.isSelfClosing), S2(e7, t)) return "";
  switch (e7.type) {
    case "ieConditionalComment":
      return "<!";
    case "element":
      if (e7.hasHtmComponentClosingTag) return "<//";
    default:
      return `</${e7.rawName}`;
  }
}
function Ea2(e7, t) {
  if (S2(e7, t)) return "";
  switch (e7.type) {
    case "ieConditionalComment":
    case "ieConditionalEndComment":
      return "[endif]-->";
    case "ieConditionalStartComment":
      return "]><!-->";
    case "interpolation":
      return "}}";
    case "angularIcuExpression":
      return "}";
    case "element":
      if (e7.isSelfClosing) return "/>";
    default:
      return ">";
  }
}
function S2(e7, t) {
  return !e7.isSelfClosing && !e7.endSourceSpan && (Xi(e7) || l2(e7.parent, t));
}
function Ir(e7) {
  return e7.prev && e7.prev.type !== "docType" && e7.type !== "angularControlFlowBlock" && !Ye2(e7.prev) && e7.isLeadingSpaceSensitive && !e7.hasLeadingSpaces;
}
function Sa2(e7) {
  var t;
  return ((t = e7.lastChild) == null ? void 0 : t.isTrailingSpaceSensitive) && !e7.lastChild.hasTrailingSpaces && !Ye2(cc(e7.lastChild)) && !Zn2(
    e7
  );
}
function ya2(e7) {
  return !e7.next && !e7.hasTrailingSpaces && e7.isTrailingSpaceSensitive && Ye2(cc(e7));
}
function Ji(e7) {
  return e7.next && !Ye2(e7.next) && Ye2(e7) && e7.isTrailingSpaceSensitive && !e7.hasTrailingSpaces;
}
function yE(e7) {
  let t = e7.trim().match(/^prettier-ignore-attribute(?:\s+(.+))?$/su);
  return t ? t[1] ? t[1].split(/\s+/u) : true : false;
}
function Qi(e7) {
  return !e7.prev && e7.isLeadingSpaceSensitive && !e7.hasLeadingSpaces;
}
function DE(e7, t, r) {
  var n;
  let { node: o } = e7;
  if (!hc(o.attrs)) return o.isSelfClosing ? " " : "";
  let i = ((n = o.prev) == null ? void 0 : n.type) === "comment" && yE(o.prev.value), l7 = typeof i == "boolean" ? () => i : Array.isArray(i) ? (h7) => i.includes(h7.rawName) : () => false, u6 = e7.map(({ node: h7 }) => l7(h7) ? ot2(t.originalText.slice(Ki(h7), Zi(h7))) : r(), "attrs"), c = o.type === "element" && o.fullName === "script" && o.attrs.length === 1 && o.attrs[0].fullName === "src" && o.children.length === 0, p = t.singleAttributePerLine && o.attrs.length > 1 && !eo2(o, t) ? Q2 : fe2, d = [bt([c ? " " : fe2, Jn2(p, u6)])];
  return o.firstChild && Qi(o.firstChild) || o.isSelfClosing && Sa2(o.parent) || c ? d.push(o.isSelfClosing ? " " : "") : d.push(t.bracketSameLine ? o.isSelfClosing ? " " : "" : o.isSelfClosing ? fe2 : Ee2), d;
}
function xE(e7) {
  return e7.firstChild && Qi(e7.firstChild) ? "" : vc(e7);
}
function Zu(e7, t, r) {
  let { node: n } = e7;
  return [ga2(n, t), DE(e7, t, r), n.isSelfClosing ? "" : xE(n)];
}
function ga2(e7, t) {
  return e7.prev && Ji(e7.prev) ? "" : [Br(e7, t), gc2(e7)];
}
function Br(e7, t) {
  return Qi(e7) ? vc(e7.parent) : Ir(e7) ? Ea2(e7.prev, t) : "";
}
function gc2(e7) {
  switch (e7.type) {
    case "ieConditionalComment":
    case "ieConditionalStartComment":
      return `<!--[if ${e7.condition}`;
    case "ieConditionalEndComment":
      return "<!--<!";
    case "interpolation":
      return "{{";
    case "docType":
      return e7.value === "html" ? "<!doctype" : "<!DOCTYPE";
    case "angularIcuExpression":
      return "{";
    case "element":
      if (e7.condition) return `<!--[if ${e7.condition}]><!--><${e7.rawName}`;
    default:
      return `<${e7.rawName}`;
  }
}
function vc(e7) {
  switch (E2(!e7.isSelfClosing), e7.type) {
    case "ieConditionalComment":
      return "]>";
    case "element":
      if (e7.condition) return "><!--<![endif]-->";
    default:
      return ">";
  }
}
function CE(e7, t) {
  if (!e7.endSourceSpan) return "";
  let r = e7.startSourceSpan.end.offset;
  e7.firstChild && Qi(e7.firstChild) && (r -= vc(e7).length);
  let n = e7.endSourceSpan.start.offset;
  return e7.lastChild && ya2(e7.lastChild) ? n += mc(e7, t).length : Sa2(e7) && (n -= Ea2(e7.lastChild, t).length), t.originalText.slice(r, n);
}
function SE(e7, t) {
  let { node: r } = e7;
  switch (r.type) {
    case "element":
      if (It2(r) || r.type === "interpolation") return;
      if (!r.isSelfClosing && pc2(r, t)) {
        let n = x5(r, t);
        return n ? async (o, i) => {
          let l7 = R2(r, t), u6 = /^\s*$/u.test(l7), c = "";
          return u6 || (c = await o(i2(l7), { parser: n, __embeddedInHtml: true }), u6 = c === ""), [Br(r, t), ue2(Zu(e7, t, i)), u6 ? "" : Q2, c, u6 ? "" : Q2, Ku(r, t), Lr2(r, t)];
        } : void 0;
      }
      break;
    case "text":
      if (It2(r.parent)) {
        let n = x5(r.parent, t);
        if (n) return async (o) => {
          let i = n === "markdown" ? g2(r.value.replace(/^[^\S\n]*\n/u, "")) : r.value, l7 = { parser: n, __embeddedInHtml: true };
          if (t.parser === "html" && n === "babel") {
            let u6 = "script", { attrMap: c } = r.parent;
            c && (c.type === "module" || c.type === "text/babel" && c["data-type"] === "module") && (u6 = "module"), l7.__babelSourceType = u6;
          }
          return [Da2, Br(r, t), await o(i, l7), Lr2(r, t)];
        };
      } else if (r.parent.type === "interpolation") return async (n) => {
        let o = { __isInHtmlInterpolation: true, __embeddedInHtml: true };
        return t.parser === "angular" ? o.parser = "__ng_interpolation" : t.parser === "vue" ? o.parser = fc(e7, t) ? "__vue_ts_expression" : "__vue_expression" : o.parser = "__js_expression", [bt([fe2, await n(r.value, o)]), r.parent.next && Ir(r.parent.next) ? " " : fe2];
      };
      break;
    case "attribute":
      return gE(e7, t);
    case "front-matter":
      return (n) => rC(r, n);
    case "angularControlFlowBlockParameters":
      return EE.has(e7.parent.name) ? oC : void 0;
    case "angularLetDeclarationInitializer":
      return (n) => at2(r.value, n, { parser: "__ng_binding", __isInHtmlAttribute: false });
  }
}
function va2(e7) {
  if (pa !== null && typeof pa.property) {
    let t = pa;
    return pa = va2.prototype = null, t;
  }
  return pa = va2.prototype = e7 ?? /* @__PURE__ */ Object.create(null), new va2();
}
function FE(e7) {
  return va2(e7);
}
function kE(e7, t = "type") {
  FE(e7);
  function r(n) {
    let o = n[t], i = e7[o];
    if (!Array.isArray(i)) throw Object.assign(new Error(`Missing visitor keys for '${o}'.`), { node: n });
    return i;
  }
  return a2(r, "r"), r;
}
function _E(e7) {
  return /^\s*<!--\s*@(?:format|prettier)\s*-->/u.test(e7);
}
function PE(e7) {
  return `<!-- @format -->

` + e7;
}
function A2(e7) {
  let t = Zi(e7);
  return e7.type === "element" && !e7.endSourceSpan && hc(e7.children) ? Math.max(t, A2(xa2(false, e7.children, -1))) : t;
}
function da(e7, t, r) {
  let n = e7.node;
  if (Xi(n)) {
    let o = A2(n);
    return [Br(n, t), ot2(wt2.trimEnd(t.originalText.slice(Ki(n) + (n.prev && Ji(n.prev) ? gc2(n).length : 0), o - (n.next && Ir(n.next) ? Ea2(
      n,
      t
    ).length : 0)))), Lr2(n, t)];
  }
  return r();
}
function Ai(e7, t) {
  return Ye2(e7) && Ye2(t) ? e7.isTrailingSpaceSensitive ? e7.hasTrailingSpaces ? Vu(t) ? Q2 : fe2 : "" : Vu(t) ? Q2 : Ee2 : Ji(e7) && (Xi(t) || t.firstChild || t.isSelfClosing || t.type === "element" && t.attrs.length > 0) || e7.type === "element" && e7.isSelfClosing && Ir(t) ? "" : !t.isLeadingSpaceSensitive || Vu(t) || Ir(t) && e7.lastChild && ya2(e7.lastChild) && e7.lastChild.lastChild && ya2(e7.lastChild.lastChild) ? Q2 : t.hasLeadingSpaces ? fe2 : Ee2;
}
function wc(e7, t, r) {
  let { node: n } = e7;
  if (u2(n)) return [Da2, ...e7.map((i) => {
    let l7 = i.node, u6 = l7.prev ? Ai(l7.prev, l7) : "";
    return [u6 ? [u6, Ri(l7.prev) ? Q2 : ""] : "", da(i, t, r)];
  }, "children")];
  let o = n.children.map(() => Symbol(""));
  return e7.map((i, l7) => {
    let u6 = i.node;
    if (Ye2(u6)) {
      if (u6.prev && Ye2(u6.prev)) {
        let b = Ai(u6.prev, u6);
        if (b) return Ri(u6.prev) ? [Q2, Q2, da(i, t, r)] : [b, da(i, t, r)];
      }
      return da(i, t, r);
    }
    let c = [], p = [], d = [], h7 = [], f = u6.prev ? Ai(u6.prev, u6) : "", v7 = u6.next ? Ai(u6, u6.next) : "";
    return f && (Ri(u6.prev) ? c.push(Q2, Q2) : f === Q2 ? c.push(Q2) : Ye2(u6.prev) ? p.push(f) : p.push(Ii("", Ee2, { groupId: o[l7 - 1] }))), v7 && (Ri(u6) ? Ye2(u6.next) && h7.push(Q2, Q2) : v7 === Q2 ? Ye2(u6.next) && h7.push(Q2) : d.push(v7)), [
      ...c,
      ue2([...p, ue2([da(i, t, r), ...d], { id: o[l7] })]),
      ...h7
    ];
  }, "children");
}
function $E(e7, t, r) {
  let { node: n } = e7, o = [];
  zE(e7) && o.push("} "), o.push("@", n.name), n.parameters && o.push(" (", ue2(r("parameters")), ")"), o.push(" {");
  let i = F22(n);
  return n.children.length > 0 ? (n.firstChild.hasLeadingSpaces = true, n.lastChild.hasTrailingSpaces = true, o.push(bt([Q2, wc(e7, t, r)])), i && o.push(Q2, "}")) : i && o.push("}"), ue2(o, { shouldBreak: true });
}
function F22(e7) {
  var t, r;
  return !(((t = e7.next) == null ? void 0 : t.type) === "angularControlFlowBlock" && (r = HE.get(e7.name)) != null && r.has(e7.next.name));
}
function zE(e7) {
  let { previous: t } = e7;
  return (t == null ? void 0 : t.type) === "angularControlFlowBlock" && !Xi(t) && !F22(t);
}
function OE(e7, t, r) {
  return [bt([Ee2, Jn2([";", fe2], e7.map(r, "children"))]), Ee2];
}
function NE(e7, t, r) {
  let { node: n } = e7;
  return [ga2(n, t), ue2([n.switchValue.trim(), ", ", n.clause, n.cases.length > 0 ? [",", bt([fe2, Jn2(fe2, e7.map(r, "cases"))])] : "", Ee2]), ma(
    n,
    t
  )];
}
function jE(e7, t, r) {
  let { node: n } = e7;
  return [n.value, " {", ue2([bt([Ee2, e7.map(({ node: o }) => o.type === "text" && !wt2.trim(o.value) ? "" : r(), "expression")]), Ee2]), "}"];
}
function VE(e7, t, r) {
  let { node: n } = e7;
  if (l2(n, t)) return [Br(n, t), ue2(Zu(e7, t, r)), ot2(R2(n, t)), ...Ku(n, t), Lr2(n, t)];
  let o = n.children.length === 1 && (n.firstChild.type === "interpolation" || n.firstChild.type === "angularIcuExpression") && n.firstChild.isLeadingSpaceSensitive && !n.firstChild.hasLeadingSpaces && n.lastChild.isTrailingSpaceSensitive && !n.lastChild.hasTrailingSpaces, i = Symbol(
    "element-attr-group-id"
  ), l7 = a2((d) => ue2([ue2(Zu(e7, t, r), { id: i }), d, Ku(n, t)]), "a"), u6 = a2((d) => o ? _x(d, { groupId: i }) : (It2(n) || Yi(n, t)) && n.parent.type === "root" && t.parser === "vue" && !t.vueIndentScriptAndStyle ? d : bt(d), "o"), c = a2(() => o ? Ii(Ee2, "", { groupId: i }) : n.firstChild.hasLeadingSpaces && n.firstChild.isLeadingSpaceSensitive ? fe2 : n.firstChild.type === "text" && n.isWhitespaceSensitive && n.isIndentationSensitive ? Bx(Ee2) : Ee2, "u"), p = a2(() => (n.next ? Ir(n.next) : Sa2(n.parent)) ? n.lastChild.hasTrailingSpaces && n.lastChild.isTrailingSpaceSensitive ? " " : "" : o ? Ii(Ee2, "", { groupId: i }) : n.lastChild.hasTrailingSpaces && n.lastChild.isTrailingSpaceSensitive ? fe2 : (n.lastChild.type === "comment" || n.lastChild.type === "text" && n.isWhitespaceSensitive && n.isIndentationSensitive) && new RegExp(`\\n[\\t ]{${t.tabWidth * (e7.ancestors.length - 1)}}$`, "u").test(n.lastChild.value) ? "" : Ee2, "p");
  return n.children.length === 0 ? l7(n.hasDanglingSpaces && n.isDanglingSpaceSensitive ? fe2 : "") : l7([
    DC(n) ? Da2 : "",
    u6([c(), wc(e7, t, r)]),
    p()
  ]);
}
function Bi(e7) {
  return e7 >= 9 && e7 <= 32 || e7 == 160;
}
function bc(e7) {
  return 48 <= e7 && e7 <= 57;
}
function Mi(e7) {
  return e7 >= 97 && e7 <= 122 || e7 >= 65 && e7 <= 90;
}
function qE(e7) {
  return e7 >= 97 && e7 <= 102 || e7 >= 65 && e7 <= 70 || bc(e7);
}
function yc(e7) {
  return e7 === 10 || e7 === 13;
}
function S5(e7) {
  return 48 <= e7 && e7 <= 55;
}
function Wu(e7) {
  return e7 === 39 || e7 === 34 || e7 === 96;
}
function UE(e7) {
  return e7.replace(WE, (...t) => t[1].toUpperCase());
}
function XE(e7, t) {
  for (let r of GE) r(e7, t);
  return e7;
}
function YE(e7) {
  e7.walk((t) => {
    if (t.type === "element" && t.tagDefinition.ignoreFirstLf && t.children.length > 0 && t.children[0].type === "text" && t.children[0].value[0] === `
`) {
      let r = t.children[0];
      r.value.length === 1 ? t.removeChild(r) : r.value = r.value.slice(1);
    }
  });
}
function KE(e7) {
  let t = a2((r) => {
    var n, o;
    return r.type === "element" && ((n = r.prev) == null ? void 0 : n.type) === "ieConditionalStartComment" && r.prev.sourceSpan.end.offset === r.startSourceSpan.start.offset && ((o = r.firstChild) == null ? void 0 : o.type) === "ieConditionalEndComment" && r.firstChild.sourceSpan.start.offset === r.startSourceSpan.end.offset;
  }, "e");
  e7.walk((r) => {
    if (r.children) for (let n = 0; n < r.children.length; n++) {
      let o = r.children[n];
      if (!t(o)) continue;
      let i = o.prev, l7 = o.firstChild;
      r.removeChild(i), n--;
      let u6 = new j2(i.sourceSpan.start, l7.sourceSpan.end), c = new j2(u6.start, o.sourceSpan.end);
      o.condition = i.condition, o.sourceSpan = c, o.startSourceSpan = u6, o.removeChild(l7);
    }
  });
}
function ZE(e7, t, r) {
  e7.walk((n) => {
    if (n.children) for (let o = 0; o < n.children.length; o++) {
      let i = n.children[o];
      if (i.type !== "text" && !t(i)) continue;
      i.type !== "text" && (i.type = "text", i.value = r(i));
      let l7 = i.prev;
      !l7 || l7.type !== "text" || (l7.value += i.value, l7.sourceSpan = new j2(l7.sourceSpan.start, i.sourceSpan.end), n.removeChild(i), o--);
    }
  });
}
function JE(e7) {
  return ZE(e7, (t) => t.type === "cdata", (t) => `<![CDATA[${t.value}]]>`);
}
function QE(e7) {
  let t = a2((r) => {
    var n, o;
    return r.type === "element" && r.attrs.length === 0 && r.children.length === 1 && r.firstChild.type === "text" && !wt2.hasWhitespaceCharacter(
      r.children[0].value
    ) && !r.firstChild.hasLeadingSpaces && !r.firstChild.hasTrailingSpaces && r.isLeadingSpaceSensitive && !r.hasLeadingSpaces && r.isTrailingSpaceSensitive && !r.hasTrailingSpaces && ((n = r.prev) == null ? void 0 : n.type) === "text" && ((o = r.next) == null ? void 0 : o.type) === "text";
  }, "e");
  e7.walk((r) => {
    if (r.children) for (let n = 0; n < r.children.length; n++) {
      let o = r.children[n];
      if (!t(o)) continue;
      let i = o.prev, l7 = o.next;
      i.value += `<${o.rawName}>` + o.firstChild.value + `</${o.rawName}>` + l7.value, i.sourceSpan = new j2(i.sourceSpan.start, l7.sourceSpan.end), i.isTrailingSpaceSensitive = l7.isTrailingSpaceSensitive, i.hasTrailingSpaces = l7.hasTrailingSpaces, r.removeChild(o), n--, r.removeChild(
        l7
      );
    }
  });
}
function eS(e7, t) {
  if (t.parser === "html") return;
  let r = /\{\{(.+?)\}\}/su;
  e7.walk((n) => {
    if (gC(n)) for (let o of n.children) {
      if (o.type !== "text") continue;
      let i = o.sourceSpan.start, l7 = null, u6 = o.value.split(r);
      for (let c = 0; c < u6.length; c++, i = l7) {
        let p = u6[c];
        if (c % 2 === 0) {
          l7 = i.moveBy(p.length), p.length > 0 && n.insertChildBefore(o, { type: "text", value: p, sourceSpan: new j2(i, l7) });
          continue;
        }
        l7 = i.moveBy(p.length + 4), n.insertChildBefore(o, { type: "interpolation", sourceSpan: new j2(i, l7), children: p.length === 0 ? [] : [{ type: "text", value: p, sourceSpan: new j2(i.moveBy(2), l7.moveBy(-2)) }] });
      }
      n.removeChild(o);
    }
  });
}
function tS(e7) {
  e7.walk((t) => {
    if (!t.children) return;
    if (t.children.length === 0 || t.children.length === 1 && t.children[0].type === "text" && wt2.trim(t.children[0].value).length === 0) {
      t.hasDanglingSpaces = t.children.length > 0, t.children = [];
      return;
    }
    let r = vC(t), n = s2(t);
    if (!r) for (let o = 0; o < t.children.length; o++) {
      let i = t.children[o];
      if (i.type !== "text") continue;
      let { leadingWhitespace: l7, text: u6, trailingWhitespace: c } = hC(i.value), p = i.prev, d = i.next;
      u6 ? (i.value = u6, i.sourceSpan = new j2(i.sourceSpan.start.moveBy(l7.length), i.sourceSpan.end.moveBy(-c.length)), l7 && (p && (p.hasTrailingSpaces = true), i.hasLeadingSpaces = true), c && (i.hasTrailingSpaces = true, d && (d.hasLeadingSpaces = true))) : (t.removeChild(i), o--, (l7 || c) && (p && (p.hasTrailingSpaces = true), d && (d.hasLeadingSpaces = true)));
    }
    t.isWhitespaceSensitive = r, t.isIndentationSensitive = n;
  });
}
function rS(e7) {
  e7.walk((t) => {
    t.isSelfClosing = !t.children || t.type === "element" && (t.tagDefinition.isVoid || t.endSourceSpan && t.startSourceSpan.start === t.endSourceSpan.start && t.startSourceSpan.end === t.endSourceSpan.end);
  });
}
function nS(e7, t) {
  e7.walk((r) => {
    r.type === "element" && (r.hasHtmComponentClosingTag = r.endSourceSpan && /^<\s*\/\s*\/\s*>$/u.test(t.originalText.slice(r.endSourceSpan.start.offset, r.endSourceSpan.end.offset)));
  });
}
function oS(e7, t) {
  e7.walk((r) => {
    r.cssDisplay = BC(r, t);
  });
}
function aS(e7, t) {
  e7.walk((r) => {
    let { children: n } = r;
    if (n) {
      if (n.length === 0) {
        r.isDanglingSpaceSensitive = yC(r);
        return;
      }
      for (let o of n) o.isLeadingSpaceSensitive = wC(o, t), o.isTrailingSpaceSensitive = bC(o, t);
      for (let o = 0; o < n.length; o++) {
        let i = n[o];
        i.isLeadingSpaceSensitive = (o === 0 || i.prev.isTrailingSpaceSensitive) && i.isLeadingSpaceSensitive, i.isTrailingSpaceSensitive = (o === n.length - 1 || i.next.isLeadingSpaceSensitive) && i.isTrailingSpaceSensitive;
      }
    }
  });
}
function lS(e7, t, r) {
  let { node: n } = e7;
  switch (n.type) {
    case "front-matter":
      return ot2(n.raw);
    case "root":
      return t.__onHtmlRoot && t.__onHtmlRoot(n), [ue2(wc(e7, t, r)), Q2];
    case "element":
    case "ieConditionalComment":
      return VE(e7, t, r);
    case "angularControlFlowBlock":
      return $E(e7, t, r);
    case "angularControlFlowBlockParameters":
      return OE(e7, t, r);
    case "angularControlFlowBlockParameter":
      return wt2.trim(n.expression);
    case "angularLetDeclaration":
      return ue2(["@let ", ue2([n.id, " =", ue2(bt([fe2, r("init")]))]), ";"]);
    case "angularLetDeclarationInitializer":
      return n.value;
    case "angularIcuExpression":
      return NE(e7, t, r);
    case "angularIcuCase":
      return jE(e7, t, r);
    case "ieConditionalStartComment":
    case "ieConditionalEndComment":
      return [ga2(n), ma(n)];
    case "interpolation":
      return [ga2(n, t), ...e7.map(r, "children"), ma(n, t)];
    case "text": {
      if (n.parent.type === "interpolation") {
        let i = /\n[^\S\n]*$/u, l7 = i.test(n.value), u6 = l7 ? n.value.replace(i, "") : n.value;
        return [ot2(u6), l7 ? Q2 : ""];
      }
      let o = Nx([Br(n, t), ...w22(n), Lr2(n, t)]);
      return Array.isArray(o) ? o2(o) : o;
    }
    case "docType":
      return [ue2([ga2(n, t), " ", Oe2(false, n.value.replace(/^html\b/iu, "html"), /\s+/gu, " ")]), ma(n, t)];
    case "comment":
      return [Br(n, t), ot2(t.originalText.slice(Ki(n), Zi(n))), Lr2(n, t)];
    case "attribute": {
      if (n.value === null) return n.rawName;
      let o = v2(n.value), i = Vx(o, '"');
      return [n.rawName, "=", i, ot2(i === '"' ? Oe2(false, o, '"', "&quot;") : Oe2(false, o, "'", "&apos;")), i];
    }
    case "cdata":
    default:
      throw new Kx(n, "HTML");
  }
}
function el(e7, t = true) {
  if (e7[0] != ":") return [null, e7];
  let r = e7.indexOf(":", 1);
  if (r === -1) {
    if (t) throw new Error(`Unsupported format "${e7}" expecting ":namespace:name"`);
    return [null, e7];
  }
  return [e7.slice(1, r), e7.slice(r + 1)];
}
function M5(e7) {
  return el(e7)[1] === "ng-container";
}
function _5(e7) {
  return el(e7)[1] === "ng-content";
}
function Ti(e7) {
  return e7 === null ? null : el(e7)[0];
}
function Pi(e7, t) {
  return e7 ? `:${e7}:${t}` : t;
}
function P5() {
  return Li || (Li = {}, Fi(Sr2.HTML, ["iframe|srcdoc", "*|innerHTML", "*|outerHTML"]), Fi(Sr2.STYLE, ["*|style"]), Fi(Sr2.URL, [
    "*|formAction",
    "area|href",
    "area|ping",
    "audio|src",
    "a|href",
    "a|ping",
    "blockquote|cite",
    "body|background",
    "del|cite",
    "form|action",
    "img|src",
    "input|src",
    "ins|cite",
    "q|cite",
    "source|src",
    "track|src",
    "video|poster",
    "video|src"
  ]), Fi(Sr2.RESOURCE_URL, ["applet|code", "applet|codebase", "base|href", "embed|src", "frame|src", "head|profile", "html|manifest", "iframe|src", "link|href", "media|src", "object|codebase", "object|data", "script|src"])), Li;
}
function Fi(e7, t) {
  for (let r of t) Li[r.toLowerCase()] = e7;
}
function DS(e7) {
  switch (e7) {
    case "width":
    case "height":
    case "minWidth":
    case "minHeight":
    case "maxWidth":
    case "maxHeight":
    case "left":
    case "top":
    case "bottom":
    case "right":
    case "fontSize":
    case "outlineWidth":
    case "outlineOffset":
    case "paddingTop":
    case "paddingLeft":
    case "paddingBottom":
    case "paddingRight":
    case "marginTop":
    case "marginLeft":
    case "marginBottom":
    case "marginRight":
    case "borderRadius":
    case "borderWidth":
    case "borderTopWidth":
    case "borderLeftWidth":
    case "borderRightWidth":
    case "borderBottomWidth":
    case "textIndent":
      return true;
    default:
      return false;
  }
}
function Qu(e7) {
  return fa || (H5 = new O3({ canSelfClose: true }), fa = Object.assign(/* @__PURE__ */ Object.create(null), {
    base: new O3({ isVoid: true }),
    meta: new O3(
      { isVoid: true }
    ),
    area: new O3({ isVoid: true }),
    embed: new O3({ isVoid: true }),
    link: new O3({ isVoid: true }),
    img: new O3({ isVoid: true }),
    input: new O3(
      { isVoid: true }
    ),
    param: new O3({ isVoid: true }),
    hr: new O3({ isVoid: true }),
    br: new O3({ isVoid: true }),
    source: new O3({ isVoid: true }),
    track: new O3(
      { isVoid: true }
    ),
    wbr: new O3({ isVoid: true }),
    p: new O3({ closedByChildren: ["address", "article", "aside", "blockquote", "div", "dl", "fieldset", "footer", "form", "h1", "h2", "h3", "h4", "h5", "h6", "header", "hgroup", "hr", "main", "nav", "ol", "p", "pre", "section", "table", "ul"], closedByParent: true }),
    thead: new O3({ closedByChildren: ["tbody", "tfoot"] }),
    tbody: new O3({ closedByChildren: ["tbody", "tfoot"], closedByParent: true }),
    tfoot: new O3({ closedByChildren: ["tbody"], closedByParent: true }),
    tr: new O3({ closedByChildren: ["tr"], closedByParent: true }),
    td: new O3(
      { closedByChildren: ["td", "th"], closedByParent: true }
    ),
    th: new O3({ closedByChildren: ["td", "th"], closedByParent: true }),
    col: new O3({ isVoid: true }),
    svg: new O3({ implicitNamespacePrefix: "svg" }),
    foreignObject: new O3({ implicitNamespacePrefix: "svg", preventNamespaceInheritance: true }),
    math: new O3({ implicitNamespacePrefix: "math" }),
    li: new O3({ closedByChildren: ["li"], closedByParent: true }),
    dt: new O3({ closedByChildren: [
      "dt",
      "dd"
    ] }),
    dd: new O3({ closedByChildren: ["dt", "dd"], closedByParent: true }),
    rb: new O3({
      closedByChildren: ["rb", "rt", "rtc", "rp"],
      closedByParent: true
    }),
    rt: new O3({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: true }),
    rtc: new O3({ closedByChildren: [
      "rb",
      "rtc",
      "rp"
    ], closedByParent: true }),
    rp: new O3({ closedByChildren: ["rb", "rt", "rtc", "rp"], closedByParent: true }),
    optgroup: new O3({ closedByChildren: [
      "optgroup"
    ], closedByParent: true }),
    option: new O3({ closedByChildren: ["option", "optgroup"], closedByParent: true }),
    pre: new O3({ ignoreFirstLf: true }),
    listing: new O3({ ignoreFirstLf: true }),
    style: new O3({ contentType: nt2.RAW_TEXT }),
    script: new O3({ contentType: nt2.RAW_TEXT }),
    title: new O3(
      { contentType: { default: nt2.ESCAPABLE_RAW_TEXT, svg: nt2.PARSABLE_DATA } }
    ),
    textarea: new O3({ contentType: nt2.ESCAPABLE_RAW_TEXT, ignoreFirstLf: true })
  }), new yS().allKnownElementNames().forEach((t) => {
    !fa[t] && Ti(t) === null && (fa[t] = new O3({ canSelfClose: false }));
  })), fa[e7] ?? H5;
}
function B22(e7, t, r = null) {
  let n = [], o = e7.visit ? (i) => e7.visit(i, r) || i.visit(e7, r) : (i) => i.visit(e7, r);
  return t.forEach((i) => {
    let l7 = o(i);
    l7 && n.push(l7);
  }), n;
}
function IS(e7, t) {
  if (t != null && !(Array.isArray(t) && t.length == 2)) throw new Error(`Expected '${e7}' to be an array, [start, end].`);
  if (t != null) {
    let r = t[0], n = t[1];
    LS.forEach((o) => {
      if (o.test(r) || o.test(n)) throw new Error(`['${r}', '${n}'] contains unusable interpolation symbol.`);
    });
  }
}
function _S(e7, t, r, n = {}) {
  let o = new $S(new k22(e7, t), r, n);
  return o.tokenize(), new MS(qS(o.tokens), o.errors, o.nonNormalizedIcuExpressions);
}
function yn2(e7) {
  return `Unexpected character "${e7 === 0 ? "EOF" : String.fromCharCode(e7)}"`;
}
function O5(e7) {
  return `Unknown entity "${e7}" - use the "&#<decimal>;" or  "&#x<hex>;" syntax`;
}
function HS(e7, t) {
  return `Unable to parse entity "${t}" - ${e7} character reference entities must end with ";"`;
}
function ie2(e7) {
  return !Bi(e7) || e7 === 0;
}
function N5(e7) {
  return Bi(e7) || e7 === 62 || e7 === 60 || e7 === 47 || e7 === 39 || e7 === 34 || e7 === 61 || e7 === 0;
}
function zS(e7) {
  return (e7 < 97 || 122 < e7) && (e7 < 65 || 90 < e7) && (e7 < 48 || e7 > 57);
}
function OS(e7) {
  return e7 === 59 || e7 === 0 || !qE(e7);
}
function NS(e7) {
  return e7 === 59 || e7 === 0 || !Mi(e7);
}
function jS(e7) {
  return e7 !== 125;
}
function VS(e7, t) {
  return j5(e7) === j5(t);
}
function j5(e7) {
  return e7 >= 97 && e7 <= 122 ? e7 - 97 + 65 : e7;
}
function V5(e7) {
  return Mi(e7) || bc(e7) || e7 === 95;
}
function q5(e7) {
  return e7 !== 59 && ie2(e7);
}
function qS(e7) {
  let t = [], r;
  for (let n = 0; n < e7.length; n++) {
    let o = e7[n];
    r && r.type === 5 && o.type === 5 || r && r.type === 16 && o.type === 16 ? (r.parts[0] += o.parts[0], r.sourceSpan.end = o.sourceSpan.end) : (r = o, t.push(r));
  }
  return t;
}
function W5(e7, t) {
  return e7.length > 0 && e7[e7.length - 1] === t;
}
function U5(e7, t) {
  return Hi[t] !== void 0 ? Hi[t] || e7 : /^#x[a-f0-9]+$/i.test(t) ? String.fromCodePoint(parseInt(t.slice(2), 16)) : /^#\d+$/.test(t) ? String.fromCodePoint(parseInt(t.slice(1), 10)) : e7;
}
function G5(e7, t = {}) {
  let {
    canSelfClose: r = false,
    allowHtmComponentClosingTags: n = false,
    isTagNameCaseSensitive: o = false,
    getTagContentType: i,
    tokenizeAngularBlocks: l7 = false,
    tokenizeAngularLetDeclaration: u6 = false
  } = t;
  return KS().parse(e7, "angular-html-parser", {
    tokenizeExpansionForms: l7,
    interpolationConfig: void 0,
    canSelfClose: r,
    allowHtmComponentClosingTags: n,
    tokenizeBlocks: l7,
    tokenizeLet: u6
  }, o, i);
}
function ZS(e7, t) {
  let r = new SyntaxError(e7 + " (" + t.loc.start.line + ":" + t.loc.start.column + ")");
  return Object.assign(r, t);
}
function QS(e7) {
  let t = e7.slice(0, ha2);
  if (t !== "---" && t !== "+++") return;
  let r = e7.indexOf(`
`, ha2);
  if (r === -1) return;
  let n = e7.slice(ha2, r).trim(), o = e7.indexOf(`
${t}`, r), i = n;
  if (i || (i = t === "+++" ? "toml" : "yaml"), o === -1 && t === "---" && i === "yaml" && (o = e7.indexOf(`
...`, r)), o === -1) return;
  let l7 = o + 1 + ha2, u6 = e7.charAt(l7 + 1);
  if (!/\s?/u.test(u6)) return;
  let c = e7.slice(0, l7);
  return { type: "front-matter", language: i, explicitLanguage: n, value: e7.slice(r + 1, o), startDelimiter: t, endDelimiter: c.slice(-ha2), raw: c };
}
function eR(e7) {
  let t = QS(e7);
  if (!t) return { content: e7 };
  let { raw: r } = t;
  return { frontMatter: t, content: Oe2(false, r, /[^\n]/gu, " ") + e7.slice(r.length) };
}
function nR(e7, t) {
  let r = e7.map(t);
  return r.some((n, o) => n !== e7[o]) ? r : e7;
}
function aR(e7, t) {
  if (e7.value) for (let { regex: r, parse: n } of oR) {
    let o = e7.value.match(r);
    if (o) return n(e7, t, o);
  }
  return null;
}
function iR(e7, t, r) {
  let [, n, o, i] = r, l7 = 4 + n.length, u6 = e7.sourceSpan.start.moveBy(l7), c = u6.moveBy(i.length), [p, d] = (() => {
    try {
      return [true, t(i, u6).children];
    } catch {
      return [false, [{ type: "text", value: i, sourceSpan: new j2(u6, c) }]];
    }
  })();
  return { type: "ieConditionalComment", complete: p, children: d, condition: Oe2(false, o.trim(), /\s+/gu, " "), sourceSpan: e7.sourceSpan, startSourceSpan: new j2(
    e7.sourceSpan.start,
    u6
  ), endSourceSpan: new j2(c, e7.sourceSpan.end) };
}
function lR(e7, t, r) {
  let [, n] = r;
  return { type: "ieConditionalStartComment", condition: Oe2(false, n.trim(), /\s+/gu, " "), sourceSpan: e7.sourceSpan };
}
function sR(e7) {
  return { type: "ieConditionalEndComment", sourceSpan: e7.sourceSpan };
}
function cR(e7) {
  if (e7.type === "block") {
    if (e7.name = Oe2(false, e7.name.toLowerCase(), /\s+/gu, " ").trim(), e7.type = "angularControlFlowBlock", !hc(e7.parameters)) {
      delete e7.parameters;
      return;
    }
    for (let t of e7.parameters) t.type = "angularControlFlowBlockParameter";
    e7.parameters = { type: "angularControlFlowBlockParameters", children: e7.parameters, sourceSpan: new j2(e7.parameters[0].sourceSpan.start, xa2(
      false,
      e7.parameters,
      -1
    ).sourceSpan.end) };
  }
}
function pR(e7) {
  e7.type === "letDeclaration" && (e7.type = "angularLetDeclaration", e7.id = e7.name, e7.init = { type: "angularLetDeclarationInitializer", sourceSpan: new j2(
    e7.valueSpan.start,
    e7.valueSpan.end
  ), value: e7.value }, delete e7.name, delete e7.value);
}
function dR(e7) {
  (e7.type === "plural" || e7.type === "select") && (e7.clause = e7.type, e7.type = "angularIcuExpression"), e7.type === "expansionCase" && (e7.type = "angularIcuCase");
}
function P22(e7, t, r) {
  let {
    name: n,
    canSelfClose: o = true,
    normalizeTagName: i = false,
    normalizeAttributeName: l7 = false,
    allowHtmComponentClosingTags: u6 = false,
    isTagNameCaseSensitive: c = false,
    shouldParseAsRawText: p
  } = t, { rootNodes: d, errors: h7 } = G5(e7, {
    canSelfClose: o,
    allowHtmComponentClosingTags: u6,
    isTagNameCaseSensitive: c,
    getTagContentType: p ? (...w5) => p(...w5) ? nt2.RAW_TEXT : void 0 : void 0,
    tokenizeAngularBlocks: n === "angular" ? true : void 0,
    tokenizeAngularLetDeclaration: n === "angular" ? true : void 0
  });
  if (n === "vue") {
    if (d.some((C7) => C7.type === "docType" && C7.value === "html" || C7.type === "element" && C7.name.toLowerCase() === "html")) return P22(
      e7,
      $2,
      r
    );
    let w5, D7 = a2(() => w5 ?? (w5 = G5(e7, { canSelfClose: o, allowHtmComponentClosingTags: u6, isTagNameCaseSensitive: c })), "y"), x7 = a2(
      (C7) => D7().rootNodes.find(({ startSourceSpan: E7 }) => E7 && E7.start.offset === C7.startSourceSpan.start.offset) ?? C7,
      "M"
    );
    for (let [C7, E7] of d.entries()) {
      let { endSourceSpan: S4, startSourceSpan: R } = E7;
      if (S4 === null) h7 = D7().errors, d[C7] = x7(E7);
      else if (fR(E7, r)) {
        let A = D7().errors.find((k4) => k4.span.start.offset > R.start.offset && k4.span.start.offset < S4.end.offset);
        A && Y5(A), d[C7] = x7(E7);
      }
    }
  }
  h7.length > 0 && Y5(h7[0]);
  let f = a2((w5) => {
    let D7 = w5.name.startsWith(":") ? w5.name.slice(1).split(":")[0] : null, x7 = w5.nameSpan.toString(), C7 = D7 !== null && x7.startsWith(`${D7}:`), E7 = C7 ? x7.slice(D7.length + 1) : x7;
    w5.name = E7, w5.namespace = D7, w5.hasExplicitNamespace = C7;
  }, "d"), v7 = a2((w5) => {
    switch (w5.type) {
      case "element":
        f(w5);
        for (let D7 of w5.attrs) f(D7), D7.valueSpan ? (D7.value = D7.valueSpan.toString(), /["']/u.test(D7.value[0]) && (D7.value = D7.value.slice(
          1,
          -1
        ))) : D7.value = null;
        break;
      case "comment":
        w5.value = w5.sourceSpan.toString().slice(4, -3);
        break;
      case "text":
        w5.value = w5.sourceSpan.toString();
        break;
    }
  }, "C"), b = a2((w5, D7) => {
    let x7 = w5.toLowerCase();
    return D7(x7) ? x7 : w5;
  }, "A"), m = a2((w5) => {
    if (w5.type === "element" && (i && (!w5.namespace || w5.namespace === w5.tagDefinition.implicitNamespacePrefix || ba2(w5)) && (w5.name = b(
      w5.name,
      (D7) => uR.has(D7)
    )), l7)) for (let D7 of w5.attrs) D7.namespace || (D7.name = b(D7.name, (x7) => Yu.has(w5.name) && (Yu.get("*").has(x7) || Yu.get(
      w5.name
    ).has(x7))));
  }, "D"), g7 = a2((w5) => {
    w5.sourceSpan && w5.endSourceSpan && (w5.sourceSpan = new j2(w5.sourceSpan.start, w5.endSourceSpan.end));
  }, "R"), y = a2((w5) => {
    if (w5.type === "element") {
      let D7 = Qu(c ? w5.name : w5.name.toLowerCase());
      !w5.namespace || w5.namespace === D7.implicitNamespacePrefix || ba2(w5) ? w5.tagDefinition = D7 : w5.tagDefinition = Qu("");
    }
  }, "F");
  return B22(new class extends kS {
    visitExpansionCase(w5, D7) {
      n === "angular" && this.visitChildren(D7, (x7) => {
        x7(w5.expression);
      });
    }
    visit(w5) {
      v7(w5), y(w5), m(w5), g7(w5);
    }
  }(), d), d;
}
function fR(e7, t) {
  var r;
  if (e7.type !== "element" || e7.name !== "template") return false;
  let n = (r = e7.attrs.find((o) => o.name === "lang")) == null ? void 0 : r.value;
  return !n || Gi(t, { language: n }) === "html";
}
function Y5(e7) {
  let { msg: t, span: { start: r, end: n } } = e7;
  throw JS(t, { loc: { start: { line: r.line + 1, column: r.col + 1 }, end: { line: n.line + 1, column: n.col + 1 } }, cause: e7 });
}
function H22(e7, t, r = {}, n = true) {
  let { frontMatter: o, content: i } = n ? tR(e7) : { frontMatter: null, content: e7 }, l7 = new k22(e7, r.filepath), u6 = new Ju(l7, 0, 0, 0), c = u6.moveBy(e7.length), p = { type: "root", sourceSpan: new j2(u6, c), children: P22(i, t, r) };
  if (o) {
    let f = new Ju(l7, 0, 0, 0), v7 = f.moveBy(o.raw.length);
    o.sourceSpan = new j2(f, v7), p.children.unshift(o);
  }
  let d = new rR(p), h7 = a2((f, v7) => {
    let { offset: b } = v7, m = Oe2(false, e7.slice(0, b), /[^\n\r]/gu, " "), g7 = H22(m + f, t, r, false);
    g7.sourceSpan = new j2(v7, xa2(false, g7.children, -1).sourceSpan.end);
    let y = g7.children[0];
    return y.length === b ? g7.children.shift() : (y.sourceSpan = new j2(y.sourceSpan.start.moveBy(b), y.sourceSpan.end), y.value = y.value.slice(
      b
    )), g7;
  }, "f");
  return d.walk((f) => {
    if (f.type === "comment") {
      let v7 = aR(f, h7);
      v7 && f.parent.replaceChild(f, v7);
    }
    cR(f), pR(f), dR(f);
  }), d;
}
function tl(e7) {
  return { parse: a2((t, r) => H22(t, e7, r), "parse"), hasPragma: _E, astFormat: "html", locStart: Ki, locEnd: Zi };
}
var Sx;
var K5;
var Z5;
var J5;
var er;
var Rx;
var Ax;
var Q5;
var Fx;
var Oe2;
var ec;
var tc;
var rc;
var zi;
var Oi;
var nc;
var wa2;
var Ni;
var ji;
var Vi;
var oc;
var ac;
var Mr2;
var ic;
var qi;
var e22;
var lc;
var Tx;
var Dn;
var Ix;
var t2;
var r2;
var Tr2;
var sc;
var Da2;
var Px;
var Hx;
var fe2;
var Ee2;
var Q2;
var $x;
var zx;
var xa2;
var Si;
var y5;
var Vx;
var rt2;
var xn2;
var Wx;
var Ux;
var Gx;
var Xx;
var wt2;
var Cn;
var Yx;
var Kx;
var Wi;
var Jx;
var Qx;
var eC;
var rC;
var oC;
var aC;
var Gi;
var sC;
var uC;
var cC;
var pC;
var ba2;
var fC;
var i2;
var hC;
var _C;
var y2;
var zC;
var OC;
var NC;
var VC;
var WC;
var UC;
var GC;
var XC;
var YC;
var E5;
var KC;
var JC;
var D2;
var eE;
var rE;
var qu;
var fc;
var fE;
var gE;
var C2;
var E2;
var hc;
var R2;
var EE;
var RE;
var pa;
var AE;
var TE;
var LE;
var IE;
var BE;
var ME;
var HE;
var WE;
var Rr2;
var Ju;
var En2;
var k22;
var Sn2;
var j2;
var _i;
var Rn;
var T2;
var GE;
var iS;
var sS;
var uS;
var cS;
var R5;
var A5;
var pS;
var dS;
var L2;
var bj;
var F5;
var k5;
var T5;
var L5;
var I5;
var Sr2;
var B5;
var nt2;
var Li;
var An;
var fS;
var hS;
var mS;
var gS;
var vS;
var wS;
var I22;
var bS;
var Fn;
var yS;
var kn;
var O3;
var H5;
var fa;
var Tn;
var to2;
var Ln;
var xS;
var In;
var CS;
var Bn2;
var ES;
var Mn;
var SS;
var _n;
var RS;
var Pn;
var tr;
var Hn2;
var AS;
var $n2;
var FS;
var zn;
var bn2;
var On2;
var $5;
var Nn;
var z5;
var jn;
var kS;
var Hi;
var TS;
var LS;
var Ar2;
var BS;
var M2;
var Vn2;
var Uu;
var qn2;
var MS;
var PS;
var $i;
var Wn2;
var Gu;
var Un2;
var $S;
var rr;
var _22;
var nr;
var WS;
var Gn2;
var Dc;
var Fr2;
var Ae2;
var Xn2;
var US;
var Yn2;
var GS;
var kr2;
var XS;
var Kn2;
var YS;
var Xu;
var KS;
var JS;
var ha2;
var tR;
var ki;
var X5;
var vt2;
var rR;
var oR;
var Yu;
var uR;
var $2;
var hR;
var mR;
var gR;
var vR;
var wR;
var z2;
var O22 = F3(() => {
  Sx = Object.defineProperty, K5 = a2((e7) => {
    throw TypeError(e7);
  }, "Xr"), Z5 = a2((e7, t) => {
    for (var r in t) Sx(e7, r, { get: t[r], enumerable: true });
  }, "Jr"), J5 = a2((e7, t, r) => t.has(e7) || K5("Cannot " + r), "Zr"), er = a2((e7, t, r) => (J5(e7, t, "read from private field"), r ? r.call(e7) : t.get(e7)), "Q"), Rx = a2((e7, t, r) => t.has(e7) ? K5("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(e7) : t.set(e7, r), "en"), Ax = a2((e7, t, r, n) => (J5(e7, t, "write to private field"), n ? n.call(e7, r) : t.set(e7, r), r), "tn"), Q5 = {};
  Z5(Q5, { languages: a2(() => cS, "languages"), options: a2(() => dS, "options"), parsers: a2(
    () => L2,
    "parsers"
  ), printers: a2(() => wR, "printers") });
  Fx = a2((e7, t, r, n) => {
    if (!(e7 && t == null)) return t.replaceAll ? t.replaceAll(r, n) : r.global ? t.replace(r, n) : t.split(r).join(n);
  }, "si"), Oe2 = Fx, ec = "string", tc = "array", rc = "cursor", zi = "indent", Oi = "align", nc = "trim", wa2 = "group", Ni = "fill", ji = "if-break", Vi = "indent-if-break", oc = "line-suffix", ac = "line-suffix-boundary", Mr2 = "line", ic = "label", qi = "break-parent", e22 = /* @__PURE__ */ new Set(
    [rc, zi, Oi, nc, wa2, Ni, ji, Vi, oc, ac, Mr2, ic, qi]
  );
  a2(kx, "ii");
  lc = kx, Tx = a2((e7) => new Intl.ListFormat("en-US", { type: "disjunction" }).format(e7), "ai");
  a2(Lx, "oi");
  Ix = (Dn = class extends Error {
    constructor(t) {
      super(Lx(t));
      __publicField(this, "name", "InvalidDocError");
      this.doc = t;
    }
  }, a2(Dn, "lr"), Dn), t2 = Ix, r2 = a2(() => {
  }, "rn"), Tr2 = r2, sc = r2;
  a2(bt, "k");
  a2(n2, "nn");
  a2(ue2, "_");
  a2(Bx, "sn");
  a2(Mx, "an");
  a2(o2, "At");
  a2(Ii, "ge");
  a2(_x, "on");
  Da2 = { type: qi }, Px = { type: Mr2, hard: true }, Hx = { type: Mr2, hard: true, literal: true }, fe2 = { type: Mr2 }, Ee2 = { type: Mr2, soft: true }, Q2 = [Px, Da2], $x = [Hx, Da2];
  a2(Jn2, "q");
  zx = a2((e7, t, r) => {
    if (!(e7 && t == null)) return Array.isArray(t) || typeof t == "string" ? t[r < 0 ? t.length + r : r] : t.at(r);
  }, "ci"), xa2 = zx;
  a2(uc, "Dt");
  a2(Ox, "pi");
  a2(Nx, "ln");
  a2(ot2, "B");
  Si = "'", y5 = '"';
  a2(jx, "hi");
  Vx = jx;
  a2(qx, "cr");
  Wx = (xn2 = class {
    constructor(t) {
      Rx(this, rt2), Ax(this, rt2, new Set(t));
    }
    getLeadingWhitespaceCount(t) {
      let r = er(this, rt2), n = 0;
      for (let o = 0; o < t.length && r.has(t.charAt(o)); o++) n++;
      return n;
    }
    getTrailingWhitespaceCount(t) {
      let r = er(this, rt2), n = 0;
      for (let o = t.length - 1; o >= 0 && r.has(t.charAt(o)); o--) n++;
      return n;
    }
    getLeadingWhitespace(t) {
      let r = this.getLeadingWhitespaceCount(t);
      return t.slice(0, r);
    }
    getTrailingWhitespace(t) {
      let r = this.getTrailingWhitespaceCount(t);
      return t.slice(t.length - r);
    }
    hasLeadingWhitespace(t) {
      return er(this, rt2).has(t.charAt(0));
    }
    hasTrailingWhitespace(t) {
      return er(this, rt2).has(xa2(false, t, -1));
    }
    trimStart(t) {
      let r = this.getLeadingWhitespaceCount(t);
      return t.slice(r);
    }
    trimEnd(t) {
      let r = this.getTrailingWhitespaceCount(t);
      return t.slice(0, t.length - r);
    }
    trim(t) {
      return this.trimEnd(this.trimStart(t));
    }
    split(t, r = false) {
      let n = `[${qx([...er(this, rt2)].join(""))}]+`, o = new RegExp(r ? `(${n})` : n, "u");
      return t.split(o);
    }
    hasWhitespaceCharacter(t) {
      let r = er(this, rt2);
      return Array.prototype.some.call(t, (n) => r.has(n));
    }
    hasNonWhitespaceCharacter(t) {
      let r = er(this, rt2);
      return Array.prototype.some.call(t, (n) => !r.has(n));
    }
    isWhitespaceOnly(t) {
      let r = er(this, rt2);
      return Array.prototype.every.call(t, (n) => r.has(n));
    }
  }, a2(xn2, "pr"), xn2);
  rt2 = /* @__PURE__ */ new WeakMap();
  Ux = Wx, Gx = ["	", `
`, "\f", "\r", " "], Xx = new Ux(Gx), wt2 = Xx, Yx = (Cn = class extends Error {
    constructor(t, r, n = "type") {
      super(`Unexpected ${r} node ${n}: ${JSON.stringify(t[n])}.`);
      __publicField(this, "name", "UnexpectedNodeError");
      this.node = t;
    }
  }, a2(Cn, "hr"), Cn), Kx = Yx;
  a2(Zx, "di");
  Wi = Zx, Jx = /* @__PURE__ */ new Set(["sourceSpan", "startSourceSpan", "endSourceSpan", "nameSpan", "valueSpan", "keySpan", "tagDefinition", "tokens", "valueTokens", "switchValueSourceSpan", "expSourceSpan", "valueSourceSpan"]), Qx = /* @__PURE__ */ new Set(["if", "else if", "for", "switch", "case"]);
  a2(a22, "fn");
  a22.ignoredProperties = Jx;
  eC = a22;
  a2(tC, "Si");
  rC = tC;
  a2(Ui, "Ce");
  a2(Qn2, "j");
  a2(at2, "T");
  a2(nC, "_i");
  oC = nC, aC = a2((e7) => String(e7).split(/[/\\]/u).pop(), "Ei");
  a2(D5, "Sn");
  a2(iC, "Ai");
  a2(lC, "Di");
  Gi = lC, sC = "inline", uC = { area: "none", base: "none", basefont: "none", datalist: "none", head: "none", link: "none", meta: "none", noembed: "none", noframes: "none", param: "block", rp: "none", script: "block", style: "none", template: "inline", title: "none", html: "block", body: "block", address: "block", blockquote: "block", center: "block", dialog: "block", div: "block", figure: "block", figcaption: "block", footer: "block", form: "block", header: "block", hr: "block", legend: "block", listing: "block", main: "block", p: "block", plaintext: "block", pre: "block", search: "block", xmp: "block", slot: "contents", ruby: "ruby", rt: "ruby-text", article: "block", aside: "block", h1: "block", h2: "block", h3: "block", h4: "block", h5: "block", h6: "block", hgroup: "block", nav: "block", section: "block", dir: "block", dd: "block", dl: "block", dt: "block", menu: "block", ol: "block", ul: "block", li: "list-item", table: "table", caption: "table-caption", colgroup: "table-column-group", col: "table-column", thead: "table-header-group", tbody: "table-row-group", tfoot: "table-footer-group", tr: "table-row", td: "table-cell", th: "table-cell", input: "inline-block", button: "inline-block", fieldset: "block", marquee: "inline-block", source: "block", track: "block", details: "block", summary: "block", meter: "inline-block", progress: "inline-block", object: "inline-block", video: "inline-block", audio: "inline-block", select: "inline-block", option: "block", optgroup: "block" }, cC = "normal", pC = { listing: "pre", plaintext: "pre", pre: "pre", xmp: "pre", nobr: "nowrap", table: "initial", textarea: "pre-wrap" };
  a2(dC, "vi");
  ba2 = dC, fC = a2((e7) => Oe2(false, e7, /^[\t\f\r ]*\n/gu, ""), "yi"), i2 = a2((e7) => fC(wt2.trimEnd(e7)), "mr"), hC = a2((e7) => {
    let t = e7, r = wt2.getLeadingWhitespace(t);
    r && (t = t.slice(r.length));
    let n = wt2.getTrailingWhitespace(t);
    return n && (t = t.slice(0, -n.length)), { leadingWhitespace: r, trailingWhitespace: n, text: t };
  }, "vn");
  a2(l2, "yt");
  a2(Xi, "Ee");
  a2(mC, "wi");
  a2(Ye2, "$");
  a2(It2, "U");
  a2(gC, "yn");
  a2(vC, "wn");
  a2(s2, "fr");
  a2(wC, "bn");
  a2(bC, "Tn");
  a2(yC, "xn");
  a2(Ri, "Qe");
  a2(DC, "kn");
  a2(u2, "dr");
  a2(Vu, "wt");
  a2(xC, "bi");
  a2(c2, "Bn");
  a2(p2, "Ln");
  a2(d2, "Fn");
  a2(f2, "Nn");
  a2(cc, "bt");
  a2(CC, "Ti");
  a2(h2, "Pn");
  a2(EC, "xi");
  a2(SC, "ki");
  a2(RC, "Bi");
  a2(x5, "gr");
  a2(Ca2, "Xe");
  a2(AC, "Li");
  a2(FC, "Fi");
  a2(kC, "Ni");
  a2(TC, "Pi");
  a2(LC, "Ii");
  a2(Zn2, "_e");
  a2(IC, "Ri");
  a2(BC, "In");
  a2(m2, "Rn");
  a2(MC, "$i");
  a2(g2, "Cr");
  a2(v2, "Sr");
  a2(or2, "P");
  _C = /* @__PURE__ */ new Set(["template", "style", "script"]);
  a2(Yi, "Je");
  a2(eo2, "Ae");
  a2(pc2, "Tt");
  a2(PC, "$n");
  a2(HC, "On");
  a2(w22, "xt");
  a2(b2, "kt");
  y2 = /\{\{(.+?)\}\}/su;
  a2($C, "Mn");
  a2(dc, "Er");
  zC = dc({ parser: "__ng_action" }), OC = dc({ parser: "__ng_binding" }), NC = dc({ parser: "__ng_directive" });
  a2(jC, "Vi");
  VC = jC;
  a2(qC, "Ui");
  WC = qC;
  a2(C5, "Vn");
  UC = /^[ \t\n\r\u000c]+/, GC = /^[, \t\n\r\u000c]+/, XC = /^[^ \t\n\r\u000c]+/, YC = /[,]+$/, E5 = /^\d+$/, KC = /^-?(?:[0-9]+|[0-9]*\.[0-9]+)(?:[eE][+-]?[0-9]+)?$/;
  a2(ZC, "Ki");
  JC = ZC;
  a2(QC, "Qi");
  D2 = { width: "w", height: "h", density: "x" }, eE = Object.keys(D2);
  a2(tE, "Ji");
  rE = QC;
  a2(nE, "Yn");
  qu = /* @__PURE__ */ new WeakMap();
  a2(oE, "Zi");
  fc = oE;
  a2(aE, "jn");
  a2(iE, "Kn");
  a2(lE, "Qn");
  a2(sE, "Xn");
  a2(uE, "ea");
  a2(cE, "ta");
  a2(pE, "ra");
  a2(dE, "na");
  a2(x2, "Jn");
  fE = cE;
  a2(hE, "sa");
  a2(mE, "ia");
  gE = hE, C2 = new Proxy(() => {
  }, { get: a2(() => C2, "get") }), E2 = C2;
  a2(vE, "aa");
  hc = vE;
  a2(Ki, "se");
  a2(Zi, "ie");
  a2(Ku, "Ze");
  a2(wE, "oa");
  a2(ma, "De");
  a2(bE, "ua");
  a2(Lr2, "W");
  a2(mc, "Bt");
  a2(Ea2, "ve");
  a2(S2, "rs");
  a2(Ir, "K");
  a2(Sa2, "ye");
  a2(ya2, "we");
  a2(Ji, "et");
  a2(yE, "la");
  a2(Qi, "tt");
  a2(DE, "ca");
  a2(xE, "pa");
  a2(Zu, "rt");
  a2(ga2, "be");
  a2(Br, "z");
  a2(gc2, "Lt");
  a2(vc, "Ft");
  a2(CE, "ha");
  R2 = CE, EE = /* @__PURE__ */ new Set(["if", "else if", "for", "switch", "case"]);
  a2(SE, "fa");
  RE = SE, pa = null;
  a2(va2, "st");
  AE = 10;
  for (let e7 = 0; e7 <= AE; e7++) va2();
  a2(FE, "vr");
  a2(kE, "ga");
  TE = kE, LE = {
    "front-matter": [],
    root: ["children"],
    element: ["attrs", "children"],
    ieConditionalComment: ["children"],
    ieConditionalStartComment: [],
    ieConditionalEndComment: [],
    interpolation: ["children"],
    text: ["children"],
    docType: [],
    comment: [],
    attribute: [],
    cdata: [],
    angularControlFlowBlock: [
      "children",
      "parameters"
    ],
    angularControlFlowBlockParameters: ["children"],
    angularControlFlowBlockParameter: [],
    angularLetDeclaration: [
      "init"
    ],
    angularLetDeclarationInitializer: [],
    angularIcuExpression: ["cases"],
    angularIcuCase: ["expression"]
  }, IE = LE, BE = TE(IE), ME = BE;
  a2(_E, "os");
  a2(PE, "us");
  HE = /* @__PURE__ */ new Map([
    ["if", /* @__PURE__ */ new Set(["else if", "else"])],
    ["else if", /* @__PURE__ */ new Set(["else if", "else"])],
    ["for", /* @__PURE__ */ new Set(["empty"])],
    ["defer", /* @__PURE__ */ new Set(["placeholder", "error", "loading"])],
    ["placeholder", /* @__PURE__ */ new Set(
      ["placeholder", "error", "loading"]
    )],
    ["error", /* @__PURE__ */ new Set(["placeholder", "error", "loading"])],
    ["loading", /* @__PURE__ */ new Set(
      ["placeholder", "error", "loading"]
    )]
  ]);
  a2(A2, "cs");
  a2(da, "it");
  a2(Ai, "Pt");
  a2(wc, "He");
  a2($E, "ps");
  a2(F22, "hs");
  a2(zE, "_a");
  a2(OE, "ms");
  a2(NE, "fs");
  a2(jE, "ds");
  a2(VE, "gs");
  a2(Bi, "at");
  a2(bc, "It");
  a2(Mi, "ot");
  a2(qE, "Cs");
  a2(yc, "Rt");
  a2(S5, "yr");
  a2(Wu, "$t");
  WE = /-+([a-z0-9])/g;
  a2(UE, "_s");
  Ju = (Rr2 = class {
    constructor(t, r, n, o) {
      this.file = t, this.offset = r, this.line = n, this.col = o;
    }
    toString() {
      return this.offset != null ? `${this.file.url}@${this.line}:${this.col}` : this.file.url;
    }
    moveBy(t) {
      let r = this.file.content, n = r.length, o = this.offset, i = this.line, l7 = this.col;
      for (; o > 0 && t < 0; ) if (o--, t++, r.charCodeAt(o) == 10) {
        i--;
        let u6 = r.substring(0, o - 1).lastIndexOf(`
`);
        l7 = u6 > 0 ? o - u6 : o;
      } else l7--;
      for (; o < n && t > 0; ) {
        let u6 = r.charCodeAt(o);
        o++, t--, u6 == 10 ? (i++, l7 = 0) : l7++;
      }
      return new Rr2(this.file, o, i, l7);
    }
    getContext(t, r) {
      let n = this.file.content, o = this.offset;
      if (o != null) {
        o > n.length - 1 && (o = n.length - 1);
        let i = o, l7 = 0, u6 = 0;
        for (; l7 < t && o > 0 && (o--, l7++, !(n[o] == `
` && ++u6 == r)); ) ;
        for (l7 = 0, u6 = 0; l7 < t && i < n.length - 1 && (i++, l7++, !(n[i] == `
` && ++u6 == r)); ) ;
        return { before: n.substring(o, this.offset), after: n.substring(this.offset, i + 1) };
      }
      return null;
    }
  }, a2(Rr2, "t"), Rr2), k22 = (En2 = class {
    constructor(t, r) {
      this.content = t, this.url = r;
    }
  }, a2(En2, "Te"), En2), j2 = (Sn2 = class {
    constructor(t, r, n = t, o = null) {
      this.start = t, this.end = r, this.fullStart = n, this.details = o;
    }
    toString() {
      return this.start.file.content.substring(this.start.offset, this.end.offset);
    }
  }, a2(Sn2, "h"), Sn2);
  (function(e7) {
    e7[e7.WARNING = 0] = "WARNING", e7[e7.ERROR = 1] = "ERROR";
  })(_i || (_i = {}));
  T2 = (Rn = class {
    constructor(t, r, n = _i.ERROR) {
      this.span = t, this.msg = r, this.level = n;
    }
    contextualMessage() {
      let t = this.span.start.getContext(100, 3);
      return t ? `${this.msg} ("${t.before}[${_i[this.level]} ->]${t.after}")` : this.msg;
    }
    toString() {
      let t = this.span.details ? `, ${this.span.details}` : "";
      return `${this.contextualMessage()}: ${this.span.start}${t}`;
    }
  }, a2(Rn, "Ue"), Rn), GE = [YE, KE, JE, eS, tS, oS, rS, nS, aS, QE];
  a2(XE, "Da");
  a2(YE, "va");
  a2(KE, "ya");
  a2(ZE, "wa");
  a2(JE, "ba");
  a2(QE, "Ta");
  a2(eS, "xa");
  a2(tS, "ka");
  a2(rS, "Ba");
  a2(nS, "La");
  a2(oS, "Fa");
  a2(aS, "Na");
  iS = XE;
  a2(lS, "Pa");
  sS = { preprocess: iS, print: lS, insertPragma: PE, massageAstNode: eC, embed: RE, getVisitorKeys: ME }, uS = sS, cS = [
    {
      linguistLanguageId: 146,
      name: "Angular",
      type: "markup",
      tmScope: "text.html.basic",
      aceMode: "html",
      codemirrorMode: "htmlmixed",
      codemirrorMimeType: "text/html",
      color: "#e34c26",
      aliases: ["xhtml"],
      extensions: [".component.html"],
      parsers: ["angular"],
      vscodeLanguageIds: ["html"],
      filenames: []
    },
    { linguistLanguageId: 146, name: "HTML", type: "markup", tmScope: "text.html.basic", aceMode: "html", codemirrorMode: "htmlmixed", codemirrorMimeType: "text/html", color: "#e34c26", aliases: ["xhtml"], extensions: [".html", ".hta", ".htm", ".html.hl", ".inc", ".xht", ".xhtml", ".mjml"], parsers: [
      "html"
    ], vscodeLanguageIds: ["html"] },
    { linguistLanguageId: 146, name: "Lightning Web Components", type: "markup", tmScope: "text.html.basic", aceMode: "html", codemirrorMode: "htmlmixed", codemirrorMimeType: "text/html", color: "#e34c26", aliases: ["xhtml"], extensions: [], parsers: [
      "lwc"
    ], vscodeLanguageIds: ["html"], filenames: [] },
    { linguistLanguageId: 391, name: "Vue", type: "markup", color: "#41b883", extensions: [
      ".vue"
    ], tmScope: "text.html.vue", aceMode: "html", parsers: ["vue"], vscodeLanguageIds: ["vue"] }
  ], R5 = { bracketSpacing: { category: "Common", type: "boolean", default: true, description: "Print spaces between brackets.", oppositeDescription: "Do not print spaces between brackets." }, singleQuote: { category: "Common", type: "boolean", default: false, description: "Use single quotes instead of double quotes." }, proseWrap: {
    category: "Common",
    type: "choice",
    default: "preserve",
    description: "How to wrap prose.",
    choices: [{ value: "always", description: "Wrap prose if it exceeds the print width." }, { value: "never", description: "Do not wrap prose." }, { value: "preserve", description: "Wrap prose as-is." }]
  }, bracketSameLine: { category: "Common", type: "boolean", default: false, description: "Put > of opening tags on the last line instead of on a new line." }, singleAttributePerLine: { category: "Common", type: "boolean", default: false, description: "Enforce single attribute per line in HTML, Vue and JSX." } }, A5 = "HTML", pS = { bracketSameLine: R5.bracketSameLine, htmlWhitespaceSensitivity: {
    category: A5,
    type: "choice",
    default: "css",
    description: "How to handle whitespaces in HTML.",
    choices: [{ value: "css", description: "Respect the default value of CSS display property." }, { value: "strict", description: "Whitespaces are considered sensitive." }, { value: "ignore", description: "Whitespaces are considered insensitive." }]
  }, singleAttributePerLine: R5.singleAttributePerLine, vueIndentScriptAndStyle: { category: A5, type: "boolean", default: false, description: "Indent script and style tags in Vue files." } }, dS = pS, L2 = {};
  Z5(L2, {
    angular: a2(() => mR, "angular"),
    html: a2(() => hR, "html"),
    lwc: a2(() => vR, "lwc"),
    vue: a2(() => gR, "vue")
  });
  bj = new RegExp(`(\\:not\\()|(([\\.\\#]?)[-\\w]+)|(?:\\[([-.\\w*\\\\$]+)(?:=(["']?)([^\\]"']*)\\5)?\\])|(\\))|(\\s*,\\s*)`, "g");
  (function(e7) {
    e7[e7.Emulated = 0] = "Emulated", e7[e7.None = 2] = "None", e7[e7.ShadowDom = 3] = "ShadowDom";
  })(F5 || (F5 = {}));
  (function(e7) {
    e7[e7.OnPush = 0] = "OnPush", e7[e7.Default = 1] = "Default";
  })(k5 || (k5 = {}));
  (function(e7) {
    e7[e7.None = 0] = "None", e7[e7.SignalBased = 1] = "SignalBased", e7[e7.HasDecoratorInputTransform = 2] = "HasDecoratorInputTransform";
  })(T5 || (T5 = {}));
  L5 = { name: "custom-elements" }, I5 = { name: "no-errors-schema" };
  (function(e7) {
    e7[e7.NONE = 0] = "NONE", e7[e7.HTML = 1] = "HTML", e7[e7.STYLE = 2] = "STYLE", e7[e7.SCRIPT = 3] = "SCRIPT", e7[e7.URL = 4] = "URL", e7[e7.RESOURCE_URL = 5] = "RESOURCE_URL";
  })(Sr2 || (Sr2 = {}));
  (function(e7) {
    e7[e7.Error = 0] = "Error", e7[e7.Warning = 1] = "Warning", e7[e7.Ignore = 2] = "Ignore";
  })(B5 || (B5 = {}));
  (function(e7) {
    e7[e7.RAW_TEXT = 0] = "RAW_TEXT", e7[e7.ESCAPABLE_RAW_TEXT = 1] = "ESCAPABLE_RAW_TEXT", e7[e7.PARSABLE_DATA = 2] = "PARSABLE_DATA";
  })(nt2 || (nt2 = {}));
  a2(el, "ut");
  a2(M5, "xr");
  a2(_5, "kr");
  a2(Ti, "We");
  a2(Pi, "ze");
  a2(P5, "Br");
  a2(Fi, "Mt");
  fS = (An = class {
  }, a2(An, "Ht"), An), hS = "boolean", mS = "number", gS = "string", vS = "object", wS = [
    "[Element]|textContent,%ariaAtomic,%ariaAutoComplete,%ariaBusy,%ariaChecked,%ariaColCount,%ariaColIndex,%ariaColSpan,%ariaCurrent,%ariaDescription,%ariaDisabled,%ariaExpanded,%ariaHasPopup,%ariaHidden,%ariaKeyShortcuts,%ariaLabel,%ariaLevel,%ariaLive,%ariaModal,%ariaMultiLine,%ariaMultiSelectable,%ariaOrientation,%ariaPlaceholder,%ariaPosInSet,%ariaPressed,%ariaReadOnly,%ariaRelevant,%ariaRequired,%ariaRoleDescription,%ariaRowCount,%ariaRowIndex,%ariaRowSpan,%ariaSelected,%ariaSetSize,%ariaSort,%ariaValueMax,%ariaValueMin,%ariaValueNow,%ariaValueText,%classList,className,elementTiming,id,innerHTML,*beforecopy,*beforecut,*beforepaste,*fullscreenchange,*fullscreenerror,*search,*webkitfullscreenchange,*webkitfullscreenerror,outerHTML,%part,#scrollLeft,#scrollTop,slot,*message,*mozfullscreenchange,*mozfullscreenerror,*mozpointerlockchange,*mozpointerlockerror,*webglcontextcreationerror,*webglcontextlost,*webglcontextrestored",
    "[HTMLElement]^[Element]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,!inert,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy",
    "abbr,address,article,aside,b,bdi,bdo,cite,content,code,dd,dfn,dt,em,figcaption,figure,footer,header,hgroup,i,kbd,main,mark,nav,noscript,rb,rp,rt,rtc,ruby,s,samp,section,small,strong,sub,sup,u,var,wbr^[HTMLElement]|accessKey,autocapitalize,!autofocus,contentEditable,dir,!draggable,enterKeyHint,!hidden,innerText,inputMode,lang,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,outerText,!spellcheck,%style,#tabIndex,title,!translate,virtualKeyboardPolicy",
    "media^[HTMLElement]|!autoplay,!controls,%controlsList,%crossOrigin,#currentTime,!defaultMuted,#defaultPlaybackRate,!disableRemotePlayback,!loop,!muted,*encrypted,*waitingforkey,#playbackRate,preload,!preservesPitch,src,%srcObject,#volume",
    ":svg:^[HTMLElement]|!autofocus,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contextmenu,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,%style,#tabIndex",
    ":svg:graphics^:svg:|",
    ":svg:animation^:svg:|*begin,*end,*repeat",
    ":svg:geometry^:svg:|",
    ":svg:componentTransferFunction^:svg:|",
    ":svg:gradient^:svg:|",
    ":svg:textContent^:svg:graphics|",
    ":svg:textPositioning^:svg:textContent|",
    "a^[HTMLElement]|charset,coords,download,hash,host,hostname,href,hreflang,name,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,rev,search,shape,target,text,type,username",
    "area^[HTMLElement]|alt,coords,download,hash,host,hostname,href,!noHref,password,pathname,ping,port,protocol,referrerPolicy,rel,%relList,search,shape,target,username",
    "audio^media|",
    "br^[HTMLElement]|clear",
    "base^[HTMLElement]|href,target",
    "body^[HTMLElement]|aLink,background,bgColor,link,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,text,vLink",
    "button^[HTMLElement]|!disabled,formAction,formEnctype,formMethod,!formNoValidate,formTarget,name,type,value",
    "canvas^[HTMLElement]|#height,#width",
    "content^[HTMLElement]|select",
    "dl^[HTMLElement]|!compact",
    "data^[HTMLElement]|value",
    "datalist^[HTMLElement]|",
    "details^[HTMLElement]|!open",
    "dialog^[HTMLElement]|!open,returnValue",
    "dir^[HTMLElement]|!compact",
    "div^[HTMLElement]|align",
    "embed^[HTMLElement]|align,height,name,src,type,width",
    "fieldset^[HTMLElement]|!disabled,name",
    "font^[HTMLElement]|color,face,size",
    "form^[HTMLElement]|acceptCharset,action,autocomplete,encoding,enctype,method,name,!noValidate,target",
    "frame^[HTMLElement]|frameBorder,longDesc,marginHeight,marginWidth,name,!noResize,scrolling,src",
    "frameset^[HTMLElement]|cols,*afterprint,*beforeprint,*beforeunload,*blur,*error,*focus,*hashchange,*languagechange,*load,*message,*messageerror,*offline,*online,*pagehide,*pageshow,*popstate,*rejectionhandled,*resize,*scroll,*storage,*unhandledrejection,*unload,rows",
    "hr^[HTMLElement]|align,color,!noShade,size,width",
    "head^[HTMLElement]|",
    "h1,h2,h3,h4,h5,h6^[HTMLElement]|align",
    "html^[HTMLElement]|version",
    "iframe^[HTMLElement]|align,allow,!allowFullscreen,!allowPaymentRequest,csp,frameBorder,height,loading,longDesc,marginHeight,marginWidth,name,referrerPolicy,%sandbox,scrolling,src,srcdoc,width",
    "img^[HTMLElement]|align,alt,border,%crossOrigin,decoding,#height,#hspace,!isMap,loading,longDesc,lowsrc,name,referrerPolicy,sizes,src,srcset,useMap,#vspace,#width",
    "input^[HTMLElement]|accept,align,alt,autocomplete,!checked,!defaultChecked,defaultValue,dirName,!disabled,%files,formAction,formEnctype,formMethod,!formNoValidate,formTarget,#height,!incremental,!indeterminate,max,#maxLength,min,#minLength,!multiple,name,pattern,placeholder,!readOnly,!required,selectionDirection,#selectionEnd,#selectionStart,#size,src,step,type,useMap,value,%valueAsDate,#valueAsNumber,#width",
    "li^[HTMLElement]|type,#value",
    "label^[HTMLElement]|htmlFor",
    "legend^[HTMLElement]|align",
    "link^[HTMLElement]|as,charset,%crossOrigin,!disabled,href,hreflang,imageSizes,imageSrcset,integrity,media,referrerPolicy,rel,%relList,rev,%sizes,target,type",
    "map^[HTMLElement]|name",
    "marquee^[HTMLElement]|behavior,bgColor,direction,height,#hspace,#loop,#scrollAmount,#scrollDelay,!trueSpeed,#vspace,width",
    "menu^[HTMLElement]|!compact",
    "meta^[HTMLElement]|content,httpEquiv,media,name,scheme",
    "meter^[HTMLElement]|#high,#low,#max,#min,#optimum,#value",
    "ins,del^[HTMLElement]|cite,dateTime",
    "ol^[HTMLElement]|!compact,!reversed,#start,type",
    "object^[HTMLElement]|align,archive,border,code,codeBase,codeType,data,!declare,height,#hspace,name,standby,type,useMap,#vspace,width",
    "optgroup^[HTMLElement]|!disabled,label",
    "option^[HTMLElement]|!defaultSelected,!disabled,label,!selected,text,value",
    "output^[HTMLElement]|defaultValue,%htmlFor,name,value",
    "p^[HTMLElement]|align",
    "param^[HTMLElement]|name,type,value,valueType",
    "picture^[HTMLElement]|",
    "pre^[HTMLElement]|#width",
    "progress^[HTMLElement]|#max,#value",
    "q,blockquote,cite^[HTMLElement]|",
    "script^[HTMLElement]|!async,charset,%crossOrigin,!defer,event,htmlFor,integrity,!noModule,%referrerPolicy,src,text,type",
    "select^[HTMLElement]|autocomplete,!disabled,#length,!multiple,name,!required,#selectedIndex,#size,value",
    "slot^[HTMLElement]|name",
    "source^[HTMLElement]|#height,media,sizes,src,srcset,type,#width",
    "span^[HTMLElement]|",
    "style^[HTMLElement]|!disabled,media,type",
    "caption^[HTMLElement]|align",
    "th,td^[HTMLElement]|abbr,align,axis,bgColor,ch,chOff,#colSpan,headers,height,!noWrap,#rowSpan,scope,vAlign,width",
    "col,colgroup^[HTMLElement]|align,ch,chOff,#span,vAlign,width",
    "table^[HTMLElement]|align,bgColor,border,%caption,cellPadding,cellSpacing,frame,rules,summary,%tFoot,%tHead,width",
    "tr^[HTMLElement]|align,bgColor,ch,chOff,vAlign",
    "tfoot,thead,tbody^[HTMLElement]|align,ch,chOff,vAlign",
    "template^[HTMLElement]|",
    "textarea^[HTMLElement]|autocomplete,#cols,defaultValue,dirName,!disabled,#maxLength,#minLength,name,placeholder,!readOnly,!required,#rows,selectionDirection,#selectionEnd,#selectionStart,value,wrap",
    "time^[HTMLElement]|dateTime",
    "title^[HTMLElement]|text",
    "track^[HTMLElement]|!default,kind,label,src,srclang",
    "ul^[HTMLElement]|!compact,type",
    "unknown^[HTMLElement]|",
    "video^media|!disablePictureInPicture,#height,*enterpictureinpicture,*leavepictureinpicture,!playsInline,poster,#width",
    ":svg:a^:svg:graphics|",
    ":svg:animate^:svg:animation|",
    ":svg:animateMotion^:svg:animation|",
    ":svg:animateTransform^:svg:animation|",
    ":svg:circle^:svg:geometry|",
    ":svg:clipPath^:svg:graphics|",
    ":svg:defs^:svg:graphics|",
    ":svg:desc^:svg:|",
    ":svg:discard^:svg:|",
    ":svg:ellipse^:svg:geometry|",
    ":svg:feBlend^:svg:|",
    ":svg:feColorMatrix^:svg:|",
    ":svg:feComponentTransfer^:svg:|",
    ":svg:feComposite^:svg:|",
    ":svg:feConvolveMatrix^:svg:|",
    ":svg:feDiffuseLighting^:svg:|",
    ":svg:feDisplacementMap^:svg:|",
    ":svg:feDistantLight^:svg:|",
    ":svg:feDropShadow^:svg:|",
    ":svg:feFlood^:svg:|",
    ":svg:feFuncA^:svg:componentTransferFunction|",
    ":svg:feFuncB^:svg:componentTransferFunction|",
    ":svg:feFuncG^:svg:componentTransferFunction|",
    ":svg:feFuncR^:svg:componentTransferFunction|",
    ":svg:feGaussianBlur^:svg:|",
    ":svg:feImage^:svg:|",
    ":svg:feMerge^:svg:|",
    ":svg:feMergeNode^:svg:|",
    ":svg:feMorphology^:svg:|",
    ":svg:feOffset^:svg:|",
    ":svg:fePointLight^:svg:|",
    ":svg:feSpecularLighting^:svg:|",
    ":svg:feSpotLight^:svg:|",
    ":svg:feTile^:svg:|",
    ":svg:feTurbulence^:svg:|",
    ":svg:filter^:svg:|",
    ":svg:foreignObject^:svg:graphics|",
    ":svg:g^:svg:graphics|",
    ":svg:image^:svg:graphics|decoding",
    ":svg:line^:svg:geometry|",
    ":svg:linearGradient^:svg:gradient|",
    ":svg:mpath^:svg:|",
    ":svg:marker^:svg:|",
    ":svg:mask^:svg:|",
    ":svg:metadata^:svg:|",
    ":svg:path^:svg:geometry|",
    ":svg:pattern^:svg:|",
    ":svg:polygon^:svg:geometry|",
    ":svg:polyline^:svg:geometry|",
    ":svg:radialGradient^:svg:gradient|",
    ":svg:rect^:svg:geometry|",
    ":svg:svg^:svg:graphics|#currentScale,#zoomAndPan",
    ":svg:script^:svg:|type",
    ":svg:set^:svg:animation|",
    ":svg:stop^:svg:|",
    ":svg:style^:svg:|!disabled,media,title,type",
    ":svg:switch^:svg:graphics|",
    ":svg:symbol^:svg:|",
    ":svg:tspan^:svg:textPositioning|",
    ":svg:text^:svg:textPositioning|",
    ":svg:textPath^:svg:textContent|",
    ":svg:title^:svg:|",
    ":svg:use^:svg:graphics|",
    ":svg:view^:svg:|#zoomAndPan",
    "data^[HTMLElement]|value",
    "keygen^[HTMLElement]|!autofocus,challenge,!disabled,form,keytype,name",
    "menuitem^[HTMLElement]|type,label,icon,!disabled,!checked,radiogroup,!default",
    "summary^[HTMLElement]|",
    "time^[HTMLElement]|dateTime",
    ":svg:cursor^:svg:|",
    ":math:^[HTMLElement]|!autofocus,nonce,*abort,*animationend,*animationiteration,*animationstart,*auxclick,*beforeinput,*beforematch,*beforetoggle,*beforexrselect,*blur,*cancel,*canplay,*canplaythrough,*change,*click,*close,*contentvisibilityautostatechange,*contextlost,*contextmenu,*contextrestored,*copy,*cuechange,*cut,*dblclick,*drag,*dragend,*dragenter,*dragleave,*dragover,*dragstart,*drop,*durationchange,*emptied,*ended,*error,*focus,*formdata,*gotpointercapture,*input,*invalid,*keydown,*keypress,*keyup,*load,*loadeddata,*loadedmetadata,*loadstart,*lostpointercapture,*mousedown,*mouseenter,*mouseleave,*mousemove,*mouseout,*mouseover,*mouseup,*mousewheel,*paste,*pause,*play,*playing,*pointercancel,*pointerdown,*pointerenter,*pointerleave,*pointermove,*pointerout,*pointerover,*pointerrawupdate,*pointerup,*progress,*ratechange,*reset,*resize,*scroll,*scrollend,*securitypolicyviolation,*seeked,*seeking,*select,*selectionchange,*selectstart,*slotchange,*stalled,*submit,*suspend,*timeupdate,*toggle,*transitioncancel,*transitionend,*transitionrun,*transitionstart,*volumechange,*waiting,*webkitanimationend,*webkitanimationiteration,*webkitanimationstart,*webkittransitionend,*wheel,%style,#tabIndex",
    ":math:math^:math:|",
    ":math:maction^:math:|",
    ":math:menclose^:math:|",
    ":math:merror^:math:|",
    ":math:mfenced^:math:|",
    ":math:mfrac^:math:|",
    ":math:mi^:math:|",
    ":math:mmultiscripts^:math:|",
    ":math:mn^:math:|",
    ":math:mo^:math:|",
    ":math:mover^:math:|",
    ":math:mpadded^:math:|",
    ":math:mphantom^:math:|",
    ":math:mroot^:math:|",
    ":math:mrow^:math:|",
    ":math:ms^:math:|",
    ":math:mspace^:math:|",
    ":math:msqrt^:math:|",
    ":math:mstyle^:math:|",
    ":math:msub^:math:|",
    ":math:msubsup^:math:|",
    ":math:msup^:math:|",
    ":math:mtable^:math:|",
    ":math:mtd^:math:|",
    ":math:mtext^:math:|",
    ":math:mtr^:math:|",
    ":math:munder^:math:|",
    ":math:munderover^:math:|",
    ":math:semantics^:math:|"
  ], I22 = new Map(Object.entries({ class: "className", for: "htmlFor", formaction: "formAction", innerHtml: "innerHTML", readonly: "readOnly", tabindex: "tabIndex" })), bS = Array.from(I22).reduce((e7, [t, r]) => (e7.set(t, r), e7), /* @__PURE__ */ new Map()), yS = (Fn = class extends fS {
    constructor() {
      super(), this._schema = /* @__PURE__ */ new Map(), this._eventSchema = /* @__PURE__ */ new Map(), wS.forEach((t) => {
        let r = /* @__PURE__ */ new Map(), n = /* @__PURE__ */ new Set(), [o, i] = t.split("|"), l7 = i.split(","), [u6, c] = o.split("^");
        u6.split(",").forEach((d) => {
          this._schema.set(d.toLowerCase(), r), this._eventSchema.set(d.toLowerCase(), n);
        });
        let p = c && this._schema.get(c.toLowerCase());
        if (p) {
          for (let [d, h7] of p) r.set(d, h7);
          for (let d of this._eventSchema.get(c.toLowerCase())) n.add(d);
        }
        l7.forEach((d) => {
          if (d.length > 0) switch (d[0]) {
            case "*":
              n.add(d.substring(1));
              break;
            case "!":
              r.set(d.substring(1), hS);
              break;
            case "#":
              r.set(d.substring(1), mS);
              break;
            case "%":
              r.set(d.substring(1), vS);
              break;
            default:
              r.set(d, gS);
          }
        });
      });
    }
    hasProperty(t, r, n) {
      if (n.some((o) => o.name === I5.name)) return true;
      if (t.indexOf("-") > -1) {
        if (M5(t) || _5(t)) return false;
        if (n.some((o) => o.name === L5.name)) return true;
      }
      return (this._schema.get(t.toLowerCase()) || this._schema.get("unknown")).has(r);
    }
    hasElement(t, r) {
      return r.some((n) => n.name === I5.name) || t.indexOf("-") > -1 && (M5(t) || _5(t) || r.some((n) => n.name === L5.name)) ? true : this._schema.has(t.toLowerCase());
    }
    securityContext(t, r, n) {
      n && (r = this.getMappedPropName(r)), t = t.toLowerCase(), r = r.toLowerCase();
      let o = P5()[t + "|" + r];
      return o || (o = P5()["*|" + r], o || Sr2.NONE);
    }
    getMappedPropName(t) {
      return I22.get(t) ?? t;
    }
    getDefaultComponentElementName() {
      return "ng-component";
    }
    validateProperty(t) {
      return t.toLowerCase().startsWith("on") ? { error: true, msg: `Binding to event property '${t}' is disallowed for security reasons, please use (${t.slice(2)})=...
If '${t}' is a directive input, make sure the directive is imported by the current module.` } : { error: false };
    }
    validateAttribute(t) {
      return t.toLowerCase().startsWith("on") ? { error: true, msg: `Binding to event attribute '${t}' is disallowed for security reasons, please use (${t.slice(2)})=...` } : { error: false };
    }
    allKnownElementNames() {
      return Array.from(this._schema.keys());
    }
    allKnownAttributesOfElement(t) {
      let r = this._schema.get(t.toLowerCase()) || this._schema.get("unknown");
      return Array.from(r.keys()).map((n) => bS.get(n) ?? n);
    }
    allKnownEventsOfElement(t) {
      return Array.from(this._eventSchema.get(t.toLowerCase()) ?? []);
    }
    normalizeAnimationStyleProperty(t) {
      return UE(t);
    }
    normalizeAnimationStyleValue(t, r, n) {
      let o = "", i = n.toString().trim(), l7 = null;
      if (DS(t) && n !== 0 && n !== "0") if (typeof n == "number") o = "px";
      else {
        let u6 = n.match(/^[+-]?[\d\.]+([a-z]*)$/);
        u6 && u6[1].length == 0 && (l7 = `Please provide a CSS unit value for ${r}:${n}`);
      }
      return { error: l7, value: i + o };
    }
  }, a2(Fn, "Vt"), Fn);
  a2(DS, "Ua");
  O3 = (kn = class {
    constructor({
      closedByChildren: t,
      implicitNamespacePrefix: r,
      contentType: n = nt2.PARSABLE_DATA,
      closedByParent: o = false,
      isVoid: i = false,
      ignoreFirstLf: l7 = false,
      preventNamespaceInheritance: u6 = false,
      canSelfClose: c = false
    } = {}) {
      this.closedByChildren = {}, this.closedByParent = false, t && t.length > 0 && t.forEach((p) => this.closedByChildren[p] = true), this.isVoid = i, this.closedByParent = o || i, this.implicitNamespacePrefix = r || null, this.contentType = n, this.ignoreFirstLf = l7, this.preventNamespaceInheritance = u6, this.canSelfClose = c ?? i;
    }
    isClosedByChild(t) {
      return this.isVoid || t.toLowerCase() in this.closedByChildren;
    }
    getContentType(t) {
      return typeof this.contentType == "object" ? (t === void 0 ? void 0 : this.contentType[t]) ?? this.contentType.default : this.contentType;
    }
  }, a2(kn, "m"), kn);
  a2(Qu, "Ge");
  to2 = (Tn = class {
    constructor(t, r) {
      this.sourceSpan = t, this.i18n = r;
    }
  }, a2(Tn, "oe"), Tn), xS = (Ln = class extends to2 {
    constructor(t, r, n, o) {
      super(r, o), this.value = t, this.tokens = n, this.type = "text";
    }
    visit(t, r) {
      return t.visitText(this, r);
    }
  }, a2(Ln, "Ut"), Ln), CS = (In = class extends to2 {
    constructor(t, r, n, o) {
      super(r, o), this.value = t, this.tokens = n, this.type = "cdata";
    }
    visit(t, r) {
      return t.visitCdata(this, r);
    }
  }, a2(In, "Wt"), In), ES = (Bn2 = class extends to2 {
    constructor(t, r, n, o, i, l7) {
      super(o, l7), this.switchValue = t, this.type = r, this.cases = n, this.switchValueSourceSpan = i;
    }
    visit(t, r) {
      return t.visitExpansion(this, r);
    }
  }, a2(Bn2, "zt"), Bn2), SS = (Mn = class {
    constructor(t, r, n, o, i) {
      this.value = t, this.expression = r, this.sourceSpan = n, this.valueSourceSpan = o, this.expSourceSpan = i, this.type = "expansionCase";
    }
    visit(t, r) {
      return t.visitExpansionCase(this, r);
    }
  }, a2(Mn, "Gt"), Mn), RS = (_n = class extends to2 {
    constructor(t, r, n, o, i, l7, u6) {
      super(n, u6), this.name = t, this.value = r, this.keySpan = o, this.valueSpan = i, this.valueTokens = l7, this.type = "attribute";
    }
    visit(t, r) {
      return t.visitAttribute(this, r);
    }
    get nameSpan() {
      return this.keySpan;
    }
  }, a2(_n, "Yt"), _n), tr = (Pn = class extends to2 {
    constructor(t, r, n, o, i, l7 = null, u6 = null, c) {
      super(o, c), this.name = t, this.attrs = r, this.children = n, this.startSourceSpan = i, this.endSourceSpan = l7, this.nameSpan = u6, this.type = "element";
    }
    visit(t, r) {
      return t.visitElement(this, r);
    }
  }, a2(Pn, "G"), Pn), AS = (Hn2 = class {
    constructor(t, r) {
      this.value = t, this.sourceSpan = r, this.type = "comment";
    }
    visit(t, r) {
      return t.visitComment(this, r);
    }
  }, a2(Hn2, "jt"), Hn2), FS = ($n2 = class {
    constructor(t, r) {
      this.value = t, this.sourceSpan = r, this.type = "docType";
    }
    visit(t, r) {
      return t.visitDocType(this, r);
    }
  }, a2($n2, "Kt"), $n2), bn2 = (zn = class extends to2 {
    constructor(t, r, n, o, i, l7, u6 = null, c) {
      super(o, c), this.name = t, this.parameters = r, this.children = n, this.nameSpan = i, this.startSourceSpan = l7, this.endSourceSpan = u6, this.type = "block";
    }
    visit(t, r) {
      return t.visitBlock(this, r);
    }
  }, a2(zn, "Z"), zn), $5 = (On2 = class {
    constructor(t, r) {
      this.expression = t, this.sourceSpan = r, this.type = "blockParameter", this.startSourceSpan = null, this.endSourceSpan = null;
    }
    visit(t, r) {
      return t.visitBlockParameter(this, r);
    }
  }, a2(On2, "ct"), On2), z5 = (Nn = class {
    constructor(t, r, n, o, i) {
      this.name = t, this.value = r, this.sourceSpan = n, this.nameSpan = o, this.valueSpan = i, this.type = "letDeclaration", this.startSourceSpan = null, this.endSourceSpan = null;
    }
    visit(t, r) {
      return t.visitLetDeclaration(this, r);
    }
  }, a2(Nn, "pt"), Nn);
  a2(B22, "Qt");
  kS = (jn = class {
    constructor() {
    }
    visitElement(t, r) {
      this.visitChildren(r, (n) => {
        n(t.attrs), n(t.children);
      });
    }
    visitAttribute(t, r) {
    }
    visitText(t, r) {
    }
    visitCdata(t, r) {
    }
    visitComment(t, r) {
    }
    visitDocType(t, r) {
    }
    visitExpansion(t, r) {
      return this.visitChildren(r, (n) => {
        n(t.cases);
      });
    }
    visitExpansionCase(t, r) {
    }
    visitBlock(t, r) {
      this.visitChildren(r, (n) => {
        n(t.parameters), n(t.children);
      });
    }
    visitBlockParameter(t, r) {
    }
    visitLetDeclaration(t, r) {
    }
    visitChildren(t, r) {
      let n = [], o = this;
      function i(l7) {
        l7 && n.push(B22(o, l7, t));
      }
      return a2(i, "i"), r(i), Array.prototype.concat.apply([], n);
    }
  }, a2(jn, "ht"), jn), Hi = {
    AElig: "Æ",
    AMP: "&",
    amp: "&",
    Aacute: "Á",
    Abreve: "Ă",
    Acirc: "Â",
    Acy: "А",
    Afr: "𝔄",
    Agrave: "À",
    Alpha: "Α",
    Amacr: "Ā",
    And: "⩓",
    Aogon: "Ą",
    Aopf: "𝔸",
    ApplyFunction: "⁡",
    af: "⁡",
    Aring: "Å",
    angst: "Å",
    Ascr: "𝒜",
    Assign: "≔",
    colone: "≔",
    coloneq: "≔",
    Atilde: "Ã",
    Auml: "Ä",
    Backslash: "∖",
    setminus: "∖",
    setmn: "∖",
    smallsetminus: "∖",
    ssetmn: "∖",
    Barv: "⫧",
    Barwed: "⌆",
    doublebarwedge: "⌆",
    Bcy: "Б",
    Because: "∵",
    becaus: "∵",
    because: "∵",
    Bernoullis: "ℬ",
    Bscr: "ℬ",
    bernou: "ℬ",
    Beta: "Β",
    Bfr: "𝔅",
    Bopf: "𝔹",
    Breve: "˘",
    breve: "˘",
    Bumpeq: "≎",
    HumpDownHump: "≎",
    bump: "≎",
    CHcy: "Ч",
    COPY: "©",
    copy: "©",
    Cacute: "Ć",
    Cap: "⋒",
    CapitalDifferentialD: "ⅅ",
    DD: "ⅅ",
    Cayleys: "ℭ",
    Cfr: "ℭ",
    Ccaron: "Č",
    Ccedil: "Ç",
    Ccirc: "Ĉ",
    Cconint: "∰",
    Cdot: "Ċ",
    Cedilla: "¸",
    cedil: "¸",
    CenterDot: "·",
    centerdot: "·",
    middot: "·",
    Chi: "Χ",
    CircleDot: "⊙",
    odot: "⊙",
    CircleMinus: "⊖",
    ominus: "⊖",
    CirclePlus: "⊕",
    oplus: "⊕",
    CircleTimes: "⊗",
    otimes: "⊗",
    ClockwiseContourIntegral: "∲",
    cwconint: "∲",
    CloseCurlyDoubleQuote: "”",
    rdquo: "”",
    rdquor: "”",
    CloseCurlyQuote: "’",
    rsquo: "’",
    rsquor: "’",
    Colon: "∷",
    Proportion: "∷",
    Colone: "⩴",
    Congruent: "≡",
    equiv: "≡",
    Conint: "∯",
    DoubleContourIntegral: "∯",
    ContourIntegral: "∮",
    conint: "∮",
    oint: "∮",
    Copf: "ℂ",
    complexes: "ℂ",
    Coproduct: "∐",
    coprod: "∐",
    CounterClockwiseContourIntegral: "∳",
    awconint: "∳",
    Cross: "⨯",
    Cscr: "𝒞",
    Cup: "⋓",
    CupCap: "≍",
    asympeq: "≍",
    DDotrahd: "⤑",
    DJcy: "Ђ",
    DScy: "Ѕ",
    DZcy: "Џ",
    Dagger: "‡",
    ddagger: "‡",
    Darr: "↡",
    Dashv: "⫤",
    DoubleLeftTee: "⫤",
    Dcaron: "Ď",
    Dcy: "Д",
    Del: "∇",
    nabla: "∇",
    Delta: "Δ",
    Dfr: "𝔇",
    DiacriticalAcute: "´",
    acute: "´",
    DiacriticalDot: "˙",
    dot: "˙",
    DiacriticalDoubleAcute: "˝",
    dblac: "˝",
    DiacriticalGrave: "`",
    grave: "`",
    DiacriticalTilde: "˜",
    tilde: "˜",
    Diamond: "⋄",
    diam: "⋄",
    diamond: "⋄",
    DifferentialD: "ⅆ",
    dd: "ⅆ",
    Dopf: "𝔻",
    Dot: "¨",
    DoubleDot: "¨",
    die: "¨",
    uml: "¨",
    DotDot: "⃜",
    DotEqual: "≐",
    doteq: "≐",
    esdot: "≐",
    DoubleDownArrow: "⇓",
    Downarrow: "⇓",
    dArr: "⇓",
    DoubleLeftArrow: "⇐",
    Leftarrow: "⇐",
    lArr: "⇐",
    DoubleLeftRightArrow: "⇔",
    Leftrightarrow: "⇔",
    hArr: "⇔",
    iff: "⇔",
    DoubleLongLeftArrow: "⟸",
    Longleftarrow: "⟸",
    xlArr: "⟸",
    DoubleLongLeftRightArrow: "⟺",
    Longleftrightarrow: "⟺",
    xhArr: "⟺",
    DoubleLongRightArrow: "⟹",
    Longrightarrow: "⟹",
    xrArr: "⟹",
    DoubleRightArrow: "⇒",
    Implies: "⇒",
    Rightarrow: "⇒",
    rArr: "⇒",
    DoubleRightTee: "⊨",
    vDash: "⊨",
    DoubleUpArrow: "⇑",
    Uparrow: "⇑",
    uArr: "⇑",
    DoubleUpDownArrow: "⇕",
    Updownarrow: "⇕",
    vArr: "⇕",
    DoubleVerticalBar: "∥",
    par: "∥",
    parallel: "∥",
    shortparallel: "∥",
    spar: "∥",
    DownArrow: "↓",
    ShortDownArrow: "↓",
    darr: "↓",
    downarrow: "↓",
    DownArrowBar: "⤓",
    DownArrowUpArrow: "⇵",
    duarr: "⇵",
    DownBreve: "̑",
    DownLeftRightVector: "⥐",
    DownLeftTeeVector: "⥞",
    DownLeftVector: "↽",
    leftharpoondown: "↽",
    lhard: "↽",
    DownLeftVectorBar: "⥖",
    DownRightTeeVector: "⥟",
    DownRightVector: "⇁",
    rhard: "⇁",
    rightharpoondown: "⇁",
    DownRightVectorBar: "⥗",
    DownTee: "⊤",
    top: "⊤",
    DownTeeArrow: "↧",
    mapstodown: "↧",
    Dscr: "𝒟",
    Dstrok: "Đ",
    ENG: "Ŋ",
    ETH: "Ð",
    Eacute: "É",
    Ecaron: "Ě",
    Ecirc: "Ê",
    Ecy: "Э",
    Edot: "Ė",
    Efr: "𝔈",
    Egrave: "È",
    Element: "∈",
    in: "∈",
    isin: "∈",
    isinv: "∈",
    Emacr: "Ē",
    EmptySmallSquare: "◻",
    EmptyVerySmallSquare: "▫",
    Eogon: "Ę",
    Eopf: "𝔼",
    Epsilon: "Ε",
    Equal: "⩵",
    EqualTilde: "≂",
    eqsim: "≂",
    esim: "≂",
    Equilibrium: "⇌",
    rightleftharpoons: "⇌",
    rlhar: "⇌",
    Escr: "ℰ",
    expectation: "ℰ",
    Esim: "⩳",
    Eta: "Η",
    Euml: "Ë",
    Exists: "∃",
    exist: "∃",
    ExponentialE: "ⅇ",
    ee: "ⅇ",
    exponentiale: "ⅇ",
    Fcy: "Ф",
    Ffr: "𝔉",
    FilledSmallSquare: "◼",
    FilledVerySmallSquare: "▪",
    blacksquare: "▪",
    squarf: "▪",
    squf: "▪",
    Fopf: "𝔽",
    ForAll: "∀",
    forall: "∀",
    Fouriertrf: "ℱ",
    Fscr: "ℱ",
    GJcy: "Ѓ",
    GT: ">",
    gt: ">",
    Gamma: "Γ",
    Gammad: "Ϝ",
    Gbreve: "Ğ",
    Gcedil: "Ģ",
    Gcirc: "Ĝ",
    Gcy: "Г",
    Gdot: "Ġ",
    Gfr: "𝔊",
    Gg: "⋙",
    ggg: "⋙",
    Gopf: "𝔾",
    GreaterEqual: "≥",
    ge: "≥",
    geq: "≥",
    GreaterEqualLess: "⋛",
    gel: "⋛",
    gtreqless: "⋛",
    GreaterFullEqual: "≧",
    gE: "≧",
    geqq: "≧",
    GreaterGreater: "⪢",
    GreaterLess: "≷",
    gl: "≷",
    gtrless: "≷",
    GreaterSlantEqual: "⩾",
    geqslant: "⩾",
    ges: "⩾",
    GreaterTilde: "≳",
    gsim: "≳",
    gtrsim: "≳",
    Gscr: "𝒢",
    Gt: "≫",
    NestedGreaterGreater: "≫",
    gg: "≫",
    HARDcy: "Ъ",
    Hacek: "ˇ",
    caron: "ˇ",
    Hat: "^",
    Hcirc: "Ĥ",
    Hfr: "ℌ",
    Poincareplane: "ℌ",
    HilbertSpace: "ℋ",
    Hscr: "ℋ",
    hamilt: "ℋ",
    Hopf: "ℍ",
    quaternions: "ℍ",
    HorizontalLine: "─",
    boxh: "─",
    Hstrok: "Ħ",
    HumpEqual: "≏",
    bumpe: "≏",
    bumpeq: "≏",
    IEcy: "Е",
    IJlig: "Ĳ",
    IOcy: "Ё",
    Iacute: "Í",
    Icirc: "Î",
    Icy: "И",
    Idot: "İ",
    Ifr: "ℑ",
    Im: "ℑ",
    image: "ℑ",
    imagpart: "ℑ",
    Igrave: "Ì",
    Imacr: "Ī",
    ImaginaryI: "ⅈ",
    ii: "ⅈ",
    Int: "∬",
    Integral: "∫",
    int: "∫",
    Intersection: "⋂",
    bigcap: "⋂",
    xcap: "⋂",
    InvisibleComma: "⁣",
    ic: "⁣",
    InvisibleTimes: "⁢",
    it: "⁢",
    Iogon: "Į",
    Iopf: "𝕀",
    Iota: "Ι",
    Iscr: "ℐ",
    imagline: "ℐ",
    Itilde: "Ĩ",
    Iukcy: "І",
    Iuml: "Ï",
    Jcirc: "Ĵ",
    Jcy: "Й",
    Jfr: "𝔍",
    Jopf: "𝕁",
    Jscr: "𝒥",
    Jsercy: "Ј",
    Jukcy: "Є",
    KHcy: "Х",
    KJcy: "Ќ",
    Kappa: "Κ",
    Kcedil: "Ķ",
    Kcy: "К",
    Kfr: "𝔎",
    Kopf: "𝕂",
    Kscr: "𝒦",
    LJcy: "Љ",
    LT: "<",
    lt: "<",
    Lacute: "Ĺ",
    Lambda: "Λ",
    Lang: "⟪",
    Laplacetrf: "ℒ",
    Lscr: "ℒ",
    lagran: "ℒ",
    Larr: "↞",
    twoheadleftarrow: "↞",
    Lcaron: "Ľ",
    Lcedil: "Ļ",
    Lcy: "Л",
    LeftAngleBracket: "⟨",
    lang: "⟨",
    langle: "⟨",
    LeftArrow: "←",
    ShortLeftArrow: "←",
    larr: "←",
    leftarrow: "←",
    slarr: "←",
    LeftArrowBar: "⇤",
    larrb: "⇤",
    LeftArrowRightArrow: "⇆",
    leftrightarrows: "⇆",
    lrarr: "⇆",
    LeftCeiling: "⌈",
    lceil: "⌈",
    LeftDoubleBracket: "⟦",
    lobrk: "⟦",
    LeftDownTeeVector: "⥡",
    LeftDownVector: "⇃",
    dharl: "⇃",
    downharpoonleft: "⇃",
    LeftDownVectorBar: "⥙",
    LeftFloor: "⌊",
    lfloor: "⌊",
    LeftRightArrow: "↔",
    harr: "↔",
    leftrightarrow: "↔",
    LeftRightVector: "⥎",
    LeftTee: "⊣",
    dashv: "⊣",
    LeftTeeArrow: "↤",
    mapstoleft: "↤",
    LeftTeeVector: "⥚",
    LeftTriangle: "⊲",
    vartriangleleft: "⊲",
    vltri: "⊲",
    LeftTriangleBar: "⧏",
    LeftTriangleEqual: "⊴",
    ltrie: "⊴",
    trianglelefteq: "⊴",
    LeftUpDownVector: "⥑",
    LeftUpTeeVector: "⥠",
    LeftUpVector: "↿",
    uharl: "↿",
    upharpoonleft: "↿",
    LeftUpVectorBar: "⥘",
    LeftVector: "↼",
    leftharpoonup: "↼",
    lharu: "↼",
    LeftVectorBar: "⥒",
    LessEqualGreater: "⋚",
    leg: "⋚",
    lesseqgtr: "⋚",
    LessFullEqual: "≦",
    lE: "≦",
    leqq: "≦",
    LessGreater: "≶",
    lessgtr: "≶",
    lg: "≶",
    LessLess: "⪡",
    LessSlantEqual: "⩽",
    leqslant: "⩽",
    les: "⩽",
    LessTilde: "≲",
    lesssim: "≲",
    lsim: "≲",
    Lfr: "𝔏",
    Ll: "⋘",
    Lleftarrow: "⇚",
    lAarr: "⇚",
    Lmidot: "Ŀ",
    LongLeftArrow: "⟵",
    longleftarrow: "⟵",
    xlarr: "⟵",
    LongLeftRightArrow: "⟷",
    longleftrightarrow: "⟷",
    xharr: "⟷",
    LongRightArrow: "⟶",
    longrightarrow: "⟶",
    xrarr: "⟶",
    Lopf: "𝕃",
    LowerLeftArrow: "↙",
    swarr: "↙",
    swarrow: "↙",
    LowerRightArrow: "↘",
    searr: "↘",
    searrow: "↘",
    Lsh: "↰",
    lsh: "↰",
    Lstrok: "Ł",
    Lt: "≪",
    NestedLessLess: "≪",
    ll: "≪",
    Map: "⤅",
    Mcy: "М",
    MediumSpace: " ",
    Mellintrf: "ℳ",
    Mscr: "ℳ",
    phmmat: "ℳ",
    Mfr: "𝔐",
    MinusPlus: "∓",
    mnplus: "∓",
    mp: "∓",
    Mopf: "𝕄",
    Mu: "Μ",
    NJcy: "Њ",
    Nacute: "Ń",
    Ncaron: "Ň",
    Ncedil: "Ņ",
    Ncy: "Н",
    NegativeMediumSpace: "​",
    NegativeThickSpace: "​",
    NegativeThinSpace: "​",
    NegativeVeryThinSpace: "​",
    ZeroWidthSpace: "​",
    NewLine: `
`,
    Nfr: "𝔑",
    NoBreak: "⁠",
    NonBreakingSpace: " ",
    nbsp: " ",
    Nopf: "ℕ",
    naturals: "ℕ",
    Not: "⫬",
    NotCongruent: "≢",
    nequiv: "≢",
    NotCupCap: "≭",
    NotDoubleVerticalBar: "∦",
    npar: "∦",
    nparallel: "∦",
    nshortparallel: "∦",
    nspar: "∦",
    NotElement: "∉",
    notin: "∉",
    notinva: "∉",
    NotEqual: "≠",
    ne: "≠",
    NotEqualTilde: "≂̸",
    nesim: "≂̸",
    NotExists: "∄",
    nexist: "∄",
    nexists: "∄",
    NotGreater: "≯",
    ngt: "≯",
    ngtr: "≯",
    NotGreaterEqual: "≱",
    nge: "≱",
    ngeq: "≱",
    NotGreaterFullEqual: "≧̸",
    ngE: "≧̸",
    ngeqq: "≧̸",
    NotGreaterGreater: "≫̸",
    nGtv: "≫̸",
    NotGreaterLess: "≹",
    ntgl: "≹",
    NotGreaterSlantEqual: "⩾̸",
    ngeqslant: "⩾̸",
    nges: "⩾̸",
    NotGreaterTilde: "≵",
    ngsim: "≵",
    NotHumpDownHump: "≎̸",
    nbump: "≎̸",
    NotHumpEqual: "≏̸",
    nbumpe: "≏̸",
    NotLeftTriangle: "⋪",
    nltri: "⋪",
    ntriangleleft: "⋪",
    NotLeftTriangleBar: "⧏̸",
    NotLeftTriangleEqual: "⋬",
    nltrie: "⋬",
    ntrianglelefteq: "⋬",
    NotLess: "≮",
    nless: "≮",
    nlt: "≮",
    NotLessEqual: "≰",
    nle: "≰",
    nleq: "≰",
    NotLessGreater: "≸",
    ntlg: "≸",
    NotLessLess: "≪̸",
    nLtv: "≪̸",
    NotLessSlantEqual: "⩽̸",
    nleqslant: "⩽̸",
    nles: "⩽̸",
    NotLessTilde: "≴",
    nlsim: "≴",
    NotNestedGreaterGreater: "⪢̸",
    NotNestedLessLess: "⪡̸",
    NotPrecedes: "⊀",
    npr: "⊀",
    nprec: "⊀",
    NotPrecedesEqual: "⪯̸",
    npre: "⪯̸",
    npreceq: "⪯̸",
    NotPrecedesSlantEqual: "⋠",
    nprcue: "⋠",
    NotReverseElement: "∌",
    notni: "∌",
    notniva: "∌",
    NotRightTriangle: "⋫",
    nrtri: "⋫",
    ntriangleright: "⋫",
    NotRightTriangleBar: "⧐̸",
    NotRightTriangleEqual: "⋭",
    nrtrie: "⋭",
    ntrianglerighteq: "⋭",
    NotSquareSubset: "⊏̸",
    NotSquareSubsetEqual: "⋢",
    nsqsube: "⋢",
    NotSquareSuperset: "⊐̸",
    NotSquareSupersetEqual: "⋣",
    nsqsupe: "⋣",
    NotSubset: "⊂⃒",
    nsubset: "⊂⃒",
    vnsub: "⊂⃒",
    NotSubsetEqual: "⊈",
    nsube: "⊈",
    nsubseteq: "⊈",
    NotSucceeds: "⊁",
    nsc: "⊁",
    nsucc: "⊁",
    NotSucceedsEqual: "⪰̸",
    nsce: "⪰̸",
    nsucceq: "⪰̸",
    NotSucceedsSlantEqual: "⋡",
    nsccue: "⋡",
    NotSucceedsTilde: "≿̸",
    NotSuperset: "⊃⃒",
    nsupset: "⊃⃒",
    vnsup: "⊃⃒",
    NotSupersetEqual: "⊉",
    nsupe: "⊉",
    nsupseteq: "⊉",
    NotTilde: "≁",
    nsim: "≁",
    NotTildeEqual: "≄",
    nsime: "≄",
    nsimeq: "≄",
    NotTildeFullEqual: "≇",
    ncong: "≇",
    NotTildeTilde: "≉",
    nap: "≉",
    napprox: "≉",
    NotVerticalBar: "∤",
    nmid: "∤",
    nshortmid: "∤",
    nsmid: "∤",
    Nscr: "𝒩",
    Ntilde: "Ñ",
    Nu: "Ν",
    OElig: "Œ",
    Oacute: "Ó",
    Ocirc: "Ô",
    Ocy: "О",
    Odblac: "Ő",
    Ofr: "𝔒",
    Ograve: "Ò",
    Omacr: "Ō",
    Omega: "Ω",
    ohm: "Ω",
    Omicron: "Ο",
    Oopf: "𝕆",
    OpenCurlyDoubleQuote: "“",
    ldquo: "“",
    OpenCurlyQuote: "‘",
    lsquo: "‘",
    Or: "⩔",
    Oscr: "𝒪",
    Oslash: "Ø",
    Otilde: "Õ",
    Otimes: "⨷",
    Ouml: "Ö",
    OverBar: "‾",
    oline: "‾",
    OverBrace: "⏞",
    OverBracket: "⎴",
    tbrk: "⎴",
    OverParenthesis: "⏜",
    PartialD: "∂",
    part: "∂",
    Pcy: "П",
    Pfr: "𝔓",
    Phi: "Φ",
    Pi: "Π",
    PlusMinus: "±",
    plusmn: "±",
    pm: "±",
    Popf: "ℙ",
    primes: "ℙ",
    Pr: "⪻",
    Precedes: "≺",
    pr: "≺",
    prec: "≺",
    PrecedesEqual: "⪯",
    pre: "⪯",
    preceq: "⪯",
    PrecedesSlantEqual: "≼",
    prcue: "≼",
    preccurlyeq: "≼",
    PrecedesTilde: "≾",
    precsim: "≾",
    prsim: "≾",
    Prime: "″",
    Product: "∏",
    prod: "∏",
    Proportional: "∝",
    prop: "∝",
    propto: "∝",
    varpropto: "∝",
    vprop: "∝",
    Pscr: "𝒫",
    Psi: "Ψ",
    QUOT: '"',
    quot: '"',
    Qfr: "𝔔",
    Qopf: "ℚ",
    rationals: "ℚ",
    Qscr: "𝒬",
    RBarr: "⤐",
    drbkarow: "⤐",
    REG: "®",
    circledR: "®",
    reg: "®",
    Racute: "Ŕ",
    Rang: "⟫",
    Rarr: "↠",
    twoheadrightarrow: "↠",
    Rarrtl: "⤖",
    Rcaron: "Ř",
    Rcedil: "Ŗ",
    Rcy: "Р",
    Re: "ℜ",
    Rfr: "ℜ",
    real: "ℜ",
    realpart: "ℜ",
    ReverseElement: "∋",
    SuchThat: "∋",
    ni: "∋",
    niv: "∋",
    ReverseEquilibrium: "⇋",
    leftrightharpoons: "⇋",
    lrhar: "⇋",
    ReverseUpEquilibrium: "⥯",
    duhar: "⥯",
    Rho: "Ρ",
    RightAngleBracket: "⟩",
    rang: "⟩",
    rangle: "⟩",
    RightArrow: "→",
    ShortRightArrow: "→",
    rarr: "→",
    rightarrow: "→",
    srarr: "→",
    RightArrowBar: "⇥",
    rarrb: "⇥",
    RightArrowLeftArrow: "⇄",
    rightleftarrows: "⇄",
    rlarr: "⇄",
    RightCeiling: "⌉",
    rceil: "⌉",
    RightDoubleBracket: "⟧",
    robrk: "⟧",
    RightDownTeeVector: "⥝",
    RightDownVector: "⇂",
    dharr: "⇂",
    downharpoonright: "⇂",
    RightDownVectorBar: "⥕",
    RightFloor: "⌋",
    rfloor: "⌋",
    RightTee: "⊢",
    vdash: "⊢",
    RightTeeArrow: "↦",
    map: "↦",
    mapsto: "↦",
    RightTeeVector: "⥛",
    RightTriangle: "⊳",
    vartriangleright: "⊳",
    vrtri: "⊳",
    RightTriangleBar: "⧐",
    RightTriangleEqual: "⊵",
    rtrie: "⊵",
    trianglerighteq: "⊵",
    RightUpDownVector: "⥏",
    RightUpTeeVector: "⥜",
    RightUpVector: "↾",
    uharr: "↾",
    upharpoonright: "↾",
    RightUpVectorBar: "⥔",
    RightVector: "⇀",
    rharu: "⇀",
    rightharpoonup: "⇀",
    RightVectorBar: "⥓",
    Ropf: "ℝ",
    reals: "ℝ",
    RoundImplies: "⥰",
    Rrightarrow: "⇛",
    rAarr: "⇛",
    Rscr: "ℛ",
    realine: "ℛ",
    Rsh: "↱",
    rsh: "↱",
    RuleDelayed: "⧴",
    SHCHcy: "Щ",
    SHcy: "Ш",
    SOFTcy: "Ь",
    Sacute: "Ś",
    Sc: "⪼",
    Scaron: "Š",
    Scedil: "Ş",
    Scirc: "Ŝ",
    Scy: "С",
    Sfr: "𝔖",
    ShortUpArrow: "↑",
    UpArrow: "↑",
    uarr: "↑",
    uparrow: "↑",
    Sigma: "Σ",
    SmallCircle: "∘",
    compfn: "∘",
    Sopf: "𝕊",
    Sqrt: "√",
    radic: "√",
    Square: "□",
    squ: "□",
    square: "□",
    SquareIntersection: "⊓",
    sqcap: "⊓",
    SquareSubset: "⊏",
    sqsub: "⊏",
    sqsubset: "⊏",
    SquareSubsetEqual: "⊑",
    sqsube: "⊑",
    sqsubseteq: "⊑",
    SquareSuperset: "⊐",
    sqsup: "⊐",
    sqsupset: "⊐",
    SquareSupersetEqual: "⊒",
    sqsupe: "⊒",
    sqsupseteq: "⊒",
    SquareUnion: "⊔",
    sqcup: "⊔",
    Sscr: "𝒮",
    Star: "⋆",
    sstarf: "⋆",
    Sub: "⋐",
    Subset: "⋐",
    SubsetEqual: "⊆",
    sube: "⊆",
    subseteq: "⊆",
    Succeeds: "≻",
    sc: "≻",
    succ: "≻",
    SucceedsEqual: "⪰",
    sce: "⪰",
    succeq: "⪰",
    SucceedsSlantEqual: "≽",
    sccue: "≽",
    succcurlyeq: "≽",
    SucceedsTilde: "≿",
    scsim: "≿",
    succsim: "≿",
    Sum: "∑",
    sum: "∑",
    Sup: "⋑",
    Supset: "⋑",
    Superset: "⊃",
    sup: "⊃",
    supset: "⊃",
    SupersetEqual: "⊇",
    supe: "⊇",
    supseteq: "⊇",
    THORN: "Þ",
    TRADE: "™",
    trade: "™",
    TSHcy: "Ћ",
    TScy: "Ц",
    Tab: "	",
    Tau: "Τ",
    Tcaron: "Ť",
    Tcedil: "Ţ",
    Tcy: "Т",
    Tfr: "𝔗",
    Therefore: "∴",
    there4: "∴",
    therefore: "∴",
    Theta: "Θ",
    ThickSpace: "  ",
    ThinSpace: " ",
    thinsp: " ",
    Tilde: "∼",
    sim: "∼",
    thicksim: "∼",
    thksim: "∼",
    TildeEqual: "≃",
    sime: "≃",
    simeq: "≃",
    TildeFullEqual: "≅",
    cong: "≅",
    TildeTilde: "≈",
    ap: "≈",
    approx: "≈",
    asymp: "≈",
    thickapprox: "≈",
    thkap: "≈",
    Topf: "𝕋",
    TripleDot: "⃛",
    tdot: "⃛",
    Tscr: "𝒯",
    Tstrok: "Ŧ",
    Uacute: "Ú",
    Uarr: "↟",
    Uarrocir: "⥉",
    Ubrcy: "Ў",
    Ubreve: "Ŭ",
    Ucirc: "Û",
    Ucy: "У",
    Udblac: "Ű",
    Ufr: "𝔘",
    Ugrave: "Ù",
    Umacr: "Ū",
    UnderBar: "_",
    lowbar: "_",
    UnderBrace: "⏟",
    UnderBracket: "⎵",
    bbrk: "⎵",
    UnderParenthesis: "⏝",
    Union: "⋃",
    bigcup: "⋃",
    xcup: "⋃",
    UnionPlus: "⊎",
    uplus: "⊎",
    Uogon: "Ų",
    Uopf: "𝕌",
    UpArrowBar: "⤒",
    UpArrowDownArrow: "⇅",
    udarr: "⇅",
    UpDownArrow: "↕",
    updownarrow: "↕",
    varr: "↕",
    UpEquilibrium: "⥮",
    udhar: "⥮",
    UpTee: "⊥",
    bot: "⊥",
    bottom: "⊥",
    perp: "⊥",
    UpTeeArrow: "↥",
    mapstoup: "↥",
    UpperLeftArrow: "↖",
    nwarr: "↖",
    nwarrow: "↖",
    UpperRightArrow: "↗",
    nearr: "↗",
    nearrow: "↗",
    Upsi: "ϒ",
    upsih: "ϒ",
    Upsilon: "Υ",
    Uring: "Ů",
    Uscr: "𝒰",
    Utilde: "Ũ",
    Uuml: "Ü",
    VDash: "⊫",
    Vbar: "⫫",
    Vcy: "В",
    Vdash: "⊩",
    Vdashl: "⫦",
    Vee: "⋁",
    bigvee: "⋁",
    xvee: "⋁",
    Verbar: "‖",
    Vert: "‖",
    VerticalBar: "∣",
    mid: "∣",
    shortmid: "∣",
    smid: "∣",
    VerticalLine: "|",
    verbar: "|",
    vert: "|",
    VerticalSeparator: "❘",
    VerticalTilde: "≀",
    wr: "≀",
    wreath: "≀",
    VeryThinSpace: " ",
    hairsp: " ",
    Vfr: "𝔙",
    Vopf: "𝕍",
    Vscr: "𝒱",
    Vvdash: "⊪",
    Wcirc: "Ŵ",
    Wedge: "⋀",
    bigwedge: "⋀",
    xwedge: "⋀",
    Wfr: "𝔚",
    Wopf: "𝕎",
    Wscr: "𝒲",
    Xfr: "𝔛",
    Xi: "Ξ",
    Xopf: "𝕏",
    Xscr: "𝒳",
    YAcy: "Я",
    YIcy: "Ї",
    YUcy: "Ю",
    Yacute: "Ý",
    Ycirc: "Ŷ",
    Ycy: "Ы",
    Yfr: "𝔜",
    Yopf: "𝕐",
    Yscr: "𝒴",
    Yuml: "Ÿ",
    ZHcy: "Ж",
    Zacute: "Ź",
    Zcaron: "Ž",
    Zcy: "З",
    Zdot: "Ż",
    Zeta: "Ζ",
    Zfr: "ℨ",
    zeetrf: "ℨ",
    Zopf: "ℤ",
    integers: "ℤ",
    Zscr: "𝒵",
    aacute: "á",
    abreve: "ă",
    ac: "∾",
    mstpos: "∾",
    acE: "∾̳",
    acd: "∿",
    acirc: "â",
    acy: "а",
    aelig: "æ",
    afr: "𝔞",
    agrave: "à",
    alefsym: "ℵ",
    aleph: "ℵ",
    alpha: "α",
    amacr: "ā",
    amalg: "⨿",
    and: "∧",
    wedge: "∧",
    andand: "⩕",
    andd: "⩜",
    andslope: "⩘",
    andv: "⩚",
    ang: "∠",
    angle: "∠",
    ange: "⦤",
    angmsd: "∡",
    measuredangle: "∡",
    angmsdaa: "⦨",
    angmsdab: "⦩",
    angmsdac: "⦪",
    angmsdad: "⦫",
    angmsdae: "⦬",
    angmsdaf: "⦭",
    angmsdag: "⦮",
    angmsdah: "⦯",
    angrt: "∟",
    angrtvb: "⊾",
    angrtvbd: "⦝",
    angsph: "∢",
    angzarr: "⍼",
    aogon: "ą",
    aopf: "𝕒",
    apE: "⩰",
    apacir: "⩯",
    ape: "≊",
    approxeq: "≊",
    apid: "≋",
    apos: "'",
    aring: "å",
    ascr: "𝒶",
    ast: "*",
    midast: "*",
    atilde: "ã",
    auml: "ä",
    awint: "⨑",
    bNot: "⫭",
    backcong: "≌",
    bcong: "≌",
    backepsilon: "϶",
    bepsi: "϶",
    backprime: "‵",
    bprime: "‵",
    backsim: "∽",
    bsim: "∽",
    backsimeq: "⋍",
    bsime: "⋍",
    barvee: "⊽",
    barwed: "⌅",
    barwedge: "⌅",
    bbrktbrk: "⎶",
    bcy: "б",
    bdquo: "„",
    ldquor: "„",
    bemptyv: "⦰",
    beta: "β",
    beth: "ℶ",
    between: "≬",
    twixt: "≬",
    bfr: "𝔟",
    bigcirc: "◯",
    xcirc: "◯",
    bigodot: "⨀",
    xodot: "⨀",
    bigoplus: "⨁",
    xoplus: "⨁",
    bigotimes: "⨂",
    xotime: "⨂",
    bigsqcup: "⨆",
    xsqcup: "⨆",
    bigstar: "★",
    starf: "★",
    bigtriangledown: "▽",
    xdtri: "▽",
    bigtriangleup: "△",
    xutri: "△",
    biguplus: "⨄",
    xuplus: "⨄",
    bkarow: "⤍",
    rbarr: "⤍",
    blacklozenge: "⧫",
    lozf: "⧫",
    blacktriangle: "▴",
    utrif: "▴",
    blacktriangledown: "▾",
    dtrif: "▾",
    blacktriangleleft: "◂",
    ltrif: "◂",
    blacktriangleright: "▸",
    rtrif: "▸",
    blank: "␣",
    blk12: "▒",
    blk14: "░",
    blk34: "▓",
    block: "█",
    bne: "=⃥",
    bnequiv: "≡⃥",
    bnot: "⌐",
    bopf: "𝕓",
    bowtie: "⋈",
    boxDL: "╗",
    boxDR: "╔",
    boxDl: "╖",
    boxDr: "╓",
    boxH: "═",
    boxHD: "╦",
    boxHU: "╩",
    boxHd: "╤",
    boxHu: "╧",
    boxUL: "╝",
    boxUR: "╚",
    boxUl: "╜",
    boxUr: "╙",
    boxV: "║",
    boxVH: "╬",
    boxVL: "╣",
    boxVR: "╠",
    boxVh: "╫",
    boxVl: "╢",
    boxVr: "╟",
    boxbox: "⧉",
    boxdL: "╕",
    boxdR: "╒",
    boxdl: "┐",
    boxdr: "┌",
    boxhD: "╥",
    boxhU: "╨",
    boxhd: "┬",
    boxhu: "┴",
    boxminus: "⊟",
    minusb: "⊟",
    boxplus: "⊞",
    plusb: "⊞",
    boxtimes: "⊠",
    timesb: "⊠",
    boxuL: "╛",
    boxuR: "╘",
    boxul: "┘",
    boxur: "└",
    boxv: "│",
    boxvH: "╪",
    boxvL: "╡",
    boxvR: "╞",
    boxvh: "┼",
    boxvl: "┤",
    boxvr: "├",
    brvbar: "¦",
    bscr: "𝒷",
    bsemi: "⁏",
    bsol: "\\",
    bsolb: "⧅",
    bsolhsub: "⟈",
    bull: "•",
    bullet: "•",
    bumpE: "⪮",
    cacute: "ć",
    cap: "∩",
    capand: "⩄",
    capbrcup: "⩉",
    capcap: "⩋",
    capcup: "⩇",
    capdot: "⩀",
    caps: "∩︀",
    caret: "⁁",
    ccaps: "⩍",
    ccaron: "č",
    ccedil: "ç",
    ccirc: "ĉ",
    ccups: "⩌",
    ccupssm: "⩐",
    cdot: "ċ",
    cemptyv: "⦲",
    cent: "¢",
    cfr: "𝔠",
    chcy: "ч",
    check: "✓",
    checkmark: "✓",
    chi: "χ",
    cir: "○",
    cirE: "⧃",
    circ: "ˆ",
    circeq: "≗",
    cire: "≗",
    circlearrowleft: "↺",
    olarr: "↺",
    circlearrowright: "↻",
    orarr: "↻",
    circledS: "Ⓢ",
    oS: "Ⓢ",
    circledast: "⊛",
    oast: "⊛",
    circledcirc: "⊚",
    ocir: "⊚",
    circleddash: "⊝",
    odash: "⊝",
    cirfnint: "⨐",
    cirmid: "⫯",
    cirscir: "⧂",
    clubs: "♣",
    clubsuit: "♣",
    colon: ":",
    comma: ",",
    commat: "@",
    comp: "∁",
    complement: "∁",
    congdot: "⩭",
    copf: "𝕔",
    copysr: "℗",
    crarr: "↵",
    cross: "✗",
    cscr: "𝒸",
    csub: "⫏",
    csube: "⫑",
    csup: "⫐",
    csupe: "⫒",
    ctdot: "⋯",
    cudarrl: "⤸",
    cudarrr: "⤵",
    cuepr: "⋞",
    curlyeqprec: "⋞",
    cuesc: "⋟",
    curlyeqsucc: "⋟",
    cularr: "↶",
    curvearrowleft: "↶",
    cularrp: "⤽",
    cup: "∪",
    cupbrcap: "⩈",
    cupcap: "⩆",
    cupcup: "⩊",
    cupdot: "⊍",
    cupor: "⩅",
    cups: "∪︀",
    curarr: "↷",
    curvearrowright: "↷",
    curarrm: "⤼",
    curlyvee: "⋎",
    cuvee: "⋎",
    curlywedge: "⋏",
    cuwed: "⋏",
    curren: "¤",
    cwint: "∱",
    cylcty: "⌭",
    dHar: "⥥",
    dagger: "†",
    daleth: "ℸ",
    dash: "‐",
    hyphen: "‐",
    dbkarow: "⤏",
    rBarr: "⤏",
    dcaron: "ď",
    dcy: "д",
    ddarr: "⇊",
    downdownarrows: "⇊",
    ddotseq: "⩷",
    eDDot: "⩷",
    deg: "°",
    delta: "δ",
    demptyv: "⦱",
    dfisht: "⥿",
    dfr: "𝔡",
    diamondsuit: "♦",
    diams: "♦",
    digamma: "ϝ",
    gammad: "ϝ",
    disin: "⋲",
    div: "÷",
    divide: "÷",
    divideontimes: "⋇",
    divonx: "⋇",
    djcy: "ђ",
    dlcorn: "⌞",
    llcorner: "⌞",
    dlcrop: "⌍",
    dollar: "$",
    dopf: "𝕕",
    doteqdot: "≑",
    eDot: "≑",
    dotminus: "∸",
    minusd: "∸",
    dotplus: "∔",
    plusdo: "∔",
    dotsquare: "⊡",
    sdotb: "⊡",
    drcorn: "⌟",
    lrcorner: "⌟",
    drcrop: "⌌",
    dscr: "𝒹",
    dscy: "ѕ",
    dsol: "⧶",
    dstrok: "đ",
    dtdot: "⋱",
    dtri: "▿",
    triangledown: "▿",
    dwangle: "⦦",
    dzcy: "џ",
    dzigrarr: "⟿",
    eacute: "é",
    easter: "⩮",
    ecaron: "ě",
    ecir: "≖",
    eqcirc: "≖",
    ecirc: "ê",
    ecolon: "≕",
    eqcolon: "≕",
    ecy: "э",
    edot: "ė",
    efDot: "≒",
    fallingdotseq: "≒",
    efr: "𝔢",
    eg: "⪚",
    egrave: "è",
    egs: "⪖",
    eqslantgtr: "⪖",
    egsdot: "⪘",
    el: "⪙",
    elinters: "⏧",
    ell: "ℓ",
    els: "⪕",
    eqslantless: "⪕",
    elsdot: "⪗",
    emacr: "ē",
    empty: "∅",
    emptyset: "∅",
    emptyv: "∅",
    varnothing: "∅",
    emsp13: " ",
    emsp14: " ",
    emsp: " ",
    eng: "ŋ",
    ensp: " ",
    eogon: "ę",
    eopf: "𝕖",
    epar: "⋕",
    eparsl: "⧣",
    eplus: "⩱",
    epsi: "ε",
    epsilon: "ε",
    epsiv: "ϵ",
    straightepsilon: "ϵ",
    varepsilon: "ϵ",
    equals: "=",
    equest: "≟",
    questeq: "≟",
    equivDD: "⩸",
    eqvparsl: "⧥",
    erDot: "≓",
    risingdotseq: "≓",
    erarr: "⥱",
    escr: "ℯ",
    eta: "η",
    eth: "ð",
    euml: "ë",
    euro: "€",
    excl: "!",
    fcy: "ф",
    female: "♀",
    ffilig: "ﬃ",
    fflig: "ﬀ",
    ffllig: "ﬄ",
    ffr: "𝔣",
    filig: "ﬁ",
    fjlig: "fj",
    flat: "♭",
    fllig: "ﬂ",
    fltns: "▱",
    fnof: "ƒ",
    fopf: "𝕗",
    fork: "⋔",
    pitchfork: "⋔",
    forkv: "⫙",
    fpartint: "⨍",
    frac12: "½",
    half: "½",
    frac13: "⅓",
    frac14: "¼",
    frac15: "⅕",
    frac16: "⅙",
    frac18: "⅛",
    frac23: "⅔",
    frac25: "⅖",
    frac34: "¾",
    frac35: "⅗",
    frac38: "⅜",
    frac45: "⅘",
    frac56: "⅚",
    frac58: "⅝",
    frac78: "⅞",
    frasl: "⁄",
    frown: "⌢",
    sfrown: "⌢",
    fscr: "𝒻",
    gEl: "⪌",
    gtreqqless: "⪌",
    gacute: "ǵ",
    gamma: "γ",
    gap: "⪆",
    gtrapprox: "⪆",
    gbreve: "ğ",
    gcirc: "ĝ",
    gcy: "г",
    gdot: "ġ",
    gescc: "⪩",
    gesdot: "⪀",
    gesdoto: "⪂",
    gesdotol: "⪄",
    gesl: "⋛︀",
    gesles: "⪔",
    gfr: "𝔤",
    gimel: "ℷ",
    gjcy: "ѓ",
    glE: "⪒",
    gla: "⪥",
    glj: "⪤",
    gnE: "≩",
    gneqq: "≩",
    gnap: "⪊",
    gnapprox: "⪊",
    gne: "⪈",
    gneq: "⪈",
    gnsim: "⋧",
    gopf: "𝕘",
    gscr: "ℊ",
    gsime: "⪎",
    gsiml: "⪐",
    gtcc: "⪧",
    gtcir: "⩺",
    gtdot: "⋗",
    gtrdot: "⋗",
    gtlPar: "⦕",
    gtquest: "⩼",
    gtrarr: "⥸",
    gvertneqq: "≩︀",
    gvnE: "≩︀",
    hardcy: "ъ",
    harrcir: "⥈",
    harrw: "↭",
    leftrightsquigarrow: "↭",
    hbar: "ℏ",
    hslash: "ℏ",
    planck: "ℏ",
    plankv: "ℏ",
    hcirc: "ĥ",
    hearts: "♥",
    heartsuit: "♥",
    hellip: "…",
    mldr: "…",
    hercon: "⊹",
    hfr: "𝔥",
    hksearow: "⤥",
    searhk: "⤥",
    hkswarow: "⤦",
    swarhk: "⤦",
    hoarr: "⇿",
    homtht: "∻",
    hookleftarrow: "↩",
    larrhk: "↩",
    hookrightarrow: "↪",
    rarrhk: "↪",
    hopf: "𝕙",
    horbar: "―",
    hscr: "𝒽",
    hstrok: "ħ",
    hybull: "⁃",
    iacute: "í",
    icirc: "î",
    icy: "и",
    iecy: "е",
    iexcl: "¡",
    ifr: "𝔦",
    igrave: "ì",
    iiiint: "⨌",
    qint: "⨌",
    iiint: "∭",
    tint: "∭",
    iinfin: "⧜",
    iiota: "℩",
    ijlig: "ĳ",
    imacr: "ī",
    imath: "ı",
    inodot: "ı",
    imof: "⊷",
    imped: "Ƶ",
    incare: "℅",
    infin: "∞",
    infintie: "⧝",
    intcal: "⊺",
    intercal: "⊺",
    intlarhk: "⨗",
    intprod: "⨼",
    iprod: "⨼",
    iocy: "ё",
    iogon: "į",
    iopf: "𝕚",
    iota: "ι",
    iquest: "¿",
    iscr: "𝒾",
    isinE: "⋹",
    isindot: "⋵",
    isins: "⋴",
    isinsv: "⋳",
    itilde: "ĩ",
    iukcy: "і",
    iuml: "ï",
    jcirc: "ĵ",
    jcy: "й",
    jfr: "𝔧",
    jmath: "ȷ",
    jopf: "𝕛",
    jscr: "𝒿",
    jsercy: "ј",
    jukcy: "є",
    kappa: "κ",
    kappav: "ϰ",
    varkappa: "ϰ",
    kcedil: "ķ",
    kcy: "к",
    kfr: "𝔨",
    kgreen: "ĸ",
    khcy: "х",
    kjcy: "ќ",
    kopf: "𝕜",
    kscr: "𝓀",
    lAtail: "⤛",
    lBarr: "⤎",
    lEg: "⪋",
    lesseqqgtr: "⪋",
    lHar: "⥢",
    lacute: "ĺ",
    laemptyv: "⦴",
    lambda: "λ",
    langd: "⦑",
    lap: "⪅",
    lessapprox: "⪅",
    laquo: "«",
    larrbfs: "⤟",
    larrfs: "⤝",
    larrlp: "↫",
    looparrowleft: "↫",
    larrpl: "⤹",
    larrsim: "⥳",
    larrtl: "↢",
    leftarrowtail: "↢",
    lat: "⪫",
    latail: "⤙",
    late: "⪭",
    lates: "⪭︀",
    lbarr: "⤌",
    lbbrk: "❲",
    lbrace: "{",
    lcub: "{",
    lbrack: "[",
    lsqb: "[",
    lbrke: "⦋",
    lbrksld: "⦏",
    lbrkslu: "⦍",
    lcaron: "ľ",
    lcedil: "ļ",
    lcy: "л",
    ldca: "⤶",
    ldrdhar: "⥧",
    ldrushar: "⥋",
    ldsh: "↲",
    le: "≤",
    leq: "≤",
    leftleftarrows: "⇇",
    llarr: "⇇",
    leftthreetimes: "⋋",
    lthree: "⋋",
    lescc: "⪨",
    lesdot: "⩿",
    lesdoto: "⪁",
    lesdotor: "⪃",
    lesg: "⋚︀",
    lesges: "⪓",
    lessdot: "⋖",
    ltdot: "⋖",
    lfisht: "⥼",
    lfr: "𝔩",
    lgE: "⪑",
    lharul: "⥪",
    lhblk: "▄",
    ljcy: "љ",
    llhard: "⥫",
    lltri: "◺",
    lmidot: "ŀ",
    lmoust: "⎰",
    lmoustache: "⎰",
    lnE: "≨",
    lneqq: "≨",
    lnap: "⪉",
    lnapprox: "⪉",
    lne: "⪇",
    lneq: "⪇",
    lnsim: "⋦",
    loang: "⟬",
    loarr: "⇽",
    longmapsto: "⟼",
    xmap: "⟼",
    looparrowright: "↬",
    rarrlp: "↬",
    lopar: "⦅",
    lopf: "𝕝",
    loplus: "⨭",
    lotimes: "⨴",
    lowast: "∗",
    loz: "◊",
    lozenge: "◊",
    lpar: "(",
    lparlt: "⦓",
    lrhard: "⥭",
    lrm: "‎",
    lrtri: "⊿",
    lsaquo: "‹",
    lscr: "𝓁",
    lsime: "⪍",
    lsimg: "⪏",
    lsquor: "‚",
    sbquo: "‚",
    lstrok: "ł",
    ltcc: "⪦",
    ltcir: "⩹",
    ltimes: "⋉",
    ltlarr: "⥶",
    ltquest: "⩻",
    ltrPar: "⦖",
    ltri: "◃",
    triangleleft: "◃",
    lurdshar: "⥊",
    luruhar: "⥦",
    lvertneqq: "≨︀",
    lvnE: "≨︀",
    mDDot: "∺",
    macr: "¯",
    strns: "¯",
    male: "♂",
    malt: "✠",
    maltese: "✠",
    marker: "▮",
    mcomma: "⨩",
    mcy: "м",
    mdash: "—",
    mfr: "𝔪",
    mho: "℧",
    micro: "µ",
    midcir: "⫰",
    minus: "−",
    minusdu: "⨪",
    mlcp: "⫛",
    models: "⊧",
    mopf: "𝕞",
    mscr: "𝓂",
    mu: "μ",
    multimap: "⊸",
    mumap: "⊸",
    nGg: "⋙̸",
    nGt: "≫⃒",
    nLeftarrow: "⇍",
    nlArr: "⇍",
    nLeftrightarrow: "⇎",
    nhArr: "⇎",
    nLl: "⋘̸",
    nLt: "≪⃒",
    nRightarrow: "⇏",
    nrArr: "⇏",
    nVDash: "⊯",
    nVdash: "⊮",
    nacute: "ń",
    nang: "∠⃒",
    napE: "⩰̸",
    napid: "≋̸",
    napos: "ŉ",
    natur: "♮",
    natural: "♮",
    ncap: "⩃",
    ncaron: "ň",
    ncedil: "ņ",
    ncongdot: "⩭̸",
    ncup: "⩂",
    ncy: "н",
    ndash: "–",
    neArr: "⇗",
    nearhk: "⤤",
    nedot: "≐̸",
    nesear: "⤨",
    toea: "⤨",
    nfr: "𝔫",
    nharr: "↮",
    nleftrightarrow: "↮",
    nhpar: "⫲",
    nis: "⋼",
    nisd: "⋺",
    njcy: "њ",
    nlE: "≦̸",
    nleqq: "≦̸",
    nlarr: "↚",
    nleftarrow: "↚",
    nldr: "‥",
    nopf: "𝕟",
    not: "¬",
    notinE: "⋹̸",
    notindot: "⋵̸",
    notinvb: "⋷",
    notinvc: "⋶",
    notnivb: "⋾",
    notnivc: "⋽",
    nparsl: "⫽⃥",
    npart: "∂̸",
    npolint: "⨔",
    nrarr: "↛",
    nrightarrow: "↛",
    nrarrc: "⤳̸",
    nrarrw: "↝̸",
    nscr: "𝓃",
    nsub: "⊄",
    nsubE: "⫅̸",
    nsubseteqq: "⫅̸",
    nsup: "⊅",
    nsupE: "⫆̸",
    nsupseteqq: "⫆̸",
    ntilde: "ñ",
    nu: "ν",
    num: "#",
    numero: "№",
    numsp: " ",
    nvDash: "⊭",
    nvHarr: "⤄",
    nvap: "≍⃒",
    nvdash: "⊬",
    nvge: "≥⃒",
    nvgt: ">⃒",
    nvinfin: "⧞",
    nvlArr: "⤂",
    nvle: "≤⃒",
    nvlt: "<⃒",
    nvltrie: "⊴⃒",
    nvrArr: "⤃",
    nvrtrie: "⊵⃒",
    nvsim: "∼⃒",
    nwArr: "⇖",
    nwarhk: "⤣",
    nwnear: "⤧",
    oacute: "ó",
    ocirc: "ô",
    ocy: "о",
    odblac: "ő",
    odiv: "⨸",
    odsold: "⦼",
    oelig: "œ",
    ofcir: "⦿",
    ofr: "𝔬",
    ogon: "˛",
    ograve: "ò",
    ogt: "⧁",
    ohbar: "⦵",
    olcir: "⦾",
    olcross: "⦻",
    olt: "⧀",
    omacr: "ō",
    omega: "ω",
    omicron: "ο",
    omid: "⦶",
    oopf: "𝕠",
    opar: "⦷",
    operp: "⦹",
    or: "∨",
    vee: "∨",
    ord: "⩝",
    order: "ℴ",
    orderof: "ℴ",
    oscr: "ℴ",
    ordf: "ª",
    ordm: "º",
    origof: "⊶",
    oror: "⩖",
    orslope: "⩗",
    orv: "⩛",
    oslash: "ø",
    osol: "⊘",
    otilde: "õ",
    otimesas: "⨶",
    ouml: "ö",
    ovbar: "⌽",
    para: "¶",
    parsim: "⫳",
    parsl: "⫽",
    pcy: "п",
    percnt: "%",
    period: ".",
    permil: "‰",
    pertenk: "‱",
    pfr: "𝔭",
    phi: "φ",
    phiv: "ϕ",
    straightphi: "ϕ",
    varphi: "ϕ",
    phone: "☎",
    pi: "π",
    piv: "ϖ",
    varpi: "ϖ",
    planckh: "ℎ",
    plus: "+",
    plusacir: "⨣",
    pluscir: "⨢",
    plusdu: "⨥",
    pluse: "⩲",
    plussim: "⨦",
    plustwo: "⨧",
    pointint: "⨕",
    popf: "𝕡",
    pound: "£",
    prE: "⪳",
    prap: "⪷",
    precapprox: "⪷",
    precnapprox: "⪹",
    prnap: "⪹",
    precneqq: "⪵",
    prnE: "⪵",
    precnsim: "⋨",
    prnsim: "⋨",
    prime: "′",
    profalar: "⌮",
    profline: "⌒",
    profsurf: "⌓",
    prurel: "⊰",
    pscr: "𝓅",
    psi: "ψ",
    puncsp: " ",
    qfr: "𝔮",
    qopf: "𝕢",
    qprime: "⁗",
    qscr: "𝓆",
    quatint: "⨖",
    quest: "?",
    rAtail: "⤜",
    rHar: "⥤",
    race: "∽̱",
    racute: "ŕ",
    raemptyv: "⦳",
    rangd: "⦒",
    range: "⦥",
    raquo: "»",
    rarrap: "⥵",
    rarrbfs: "⤠",
    rarrc: "⤳",
    rarrfs: "⤞",
    rarrpl: "⥅",
    rarrsim: "⥴",
    rarrtl: "↣",
    rightarrowtail: "↣",
    rarrw: "↝",
    rightsquigarrow: "↝",
    ratail: "⤚",
    ratio: "∶",
    rbbrk: "❳",
    rbrace: "}",
    rcub: "}",
    rbrack: "]",
    rsqb: "]",
    rbrke: "⦌",
    rbrksld: "⦎",
    rbrkslu: "⦐",
    rcaron: "ř",
    rcedil: "ŗ",
    rcy: "р",
    rdca: "⤷",
    rdldhar: "⥩",
    rdsh: "↳",
    rect: "▭",
    rfisht: "⥽",
    rfr: "𝔯",
    rharul: "⥬",
    rho: "ρ",
    rhov: "ϱ",
    varrho: "ϱ",
    rightrightarrows: "⇉",
    rrarr: "⇉",
    rightthreetimes: "⋌",
    rthree: "⋌",
    ring: "˚",
    rlm: "‏",
    rmoust: "⎱",
    rmoustache: "⎱",
    rnmid: "⫮",
    roang: "⟭",
    roarr: "⇾",
    ropar: "⦆",
    ropf: "𝕣",
    roplus: "⨮",
    rotimes: "⨵",
    rpar: ")",
    rpargt: "⦔",
    rppolint: "⨒",
    rsaquo: "›",
    rscr: "𝓇",
    rtimes: "⋊",
    rtri: "▹",
    triangleright: "▹",
    rtriltri: "⧎",
    ruluhar: "⥨",
    rx: "℞",
    sacute: "ś",
    scE: "⪴",
    scap: "⪸",
    succapprox: "⪸",
    scaron: "š",
    scedil: "ş",
    scirc: "ŝ",
    scnE: "⪶",
    succneqq: "⪶",
    scnap: "⪺",
    succnapprox: "⪺",
    scnsim: "⋩",
    succnsim: "⋩",
    scpolint: "⨓",
    scy: "с",
    sdot: "⋅",
    sdote: "⩦",
    seArr: "⇘",
    sect: "§",
    semi: ";",
    seswar: "⤩",
    tosa: "⤩",
    sext: "✶",
    sfr: "𝔰",
    sharp: "♯",
    shchcy: "щ",
    shcy: "ш",
    shy: "­",
    sigma: "σ",
    sigmaf: "ς",
    sigmav: "ς",
    varsigma: "ς",
    simdot: "⩪",
    simg: "⪞",
    simgE: "⪠",
    siml: "⪝",
    simlE: "⪟",
    simne: "≆",
    simplus: "⨤",
    simrarr: "⥲",
    smashp: "⨳",
    smeparsl: "⧤",
    smile: "⌣",
    ssmile: "⌣",
    smt: "⪪",
    smte: "⪬",
    smtes: "⪬︀",
    softcy: "ь",
    sol: "/",
    solb: "⧄",
    solbar: "⌿",
    sopf: "𝕤",
    spades: "♠",
    spadesuit: "♠",
    sqcaps: "⊓︀",
    sqcups: "⊔︀",
    sscr: "𝓈",
    star: "☆",
    sub: "⊂",
    subset: "⊂",
    subE: "⫅",
    subseteqq: "⫅",
    subdot: "⪽",
    subedot: "⫃",
    submult: "⫁",
    subnE: "⫋",
    subsetneqq: "⫋",
    subne: "⊊",
    subsetneq: "⊊",
    subplus: "⪿",
    subrarr: "⥹",
    subsim: "⫇",
    subsub: "⫕",
    subsup: "⫓",
    sung: "♪",
    sup1: "¹",
    sup2: "²",
    sup3: "³",
    supE: "⫆",
    supseteqq: "⫆",
    supdot: "⪾",
    supdsub: "⫘",
    supedot: "⫄",
    suphsol: "⟉",
    suphsub: "⫗",
    suplarr: "⥻",
    supmult: "⫂",
    supnE: "⫌",
    supsetneqq: "⫌",
    supne: "⊋",
    supsetneq: "⊋",
    supplus: "⫀",
    supsim: "⫈",
    supsub: "⫔",
    supsup: "⫖",
    swArr: "⇙",
    swnwar: "⤪",
    szlig: "ß",
    target: "⌖",
    tau: "τ",
    tcaron: "ť",
    tcedil: "ţ",
    tcy: "т",
    telrec: "⌕",
    tfr: "𝔱",
    theta: "θ",
    thetasym: "ϑ",
    thetav: "ϑ",
    vartheta: "ϑ",
    thorn: "þ",
    times: "×",
    timesbar: "⨱",
    timesd: "⨰",
    topbot: "⌶",
    topcir: "⫱",
    topf: "𝕥",
    topfork: "⫚",
    tprime: "‴",
    triangle: "▵",
    utri: "▵",
    triangleq: "≜",
    trie: "≜",
    tridot: "◬",
    triminus: "⨺",
    triplus: "⨹",
    trisb: "⧍",
    tritime: "⨻",
    trpezium: "⏢",
    tscr: "𝓉",
    tscy: "ц",
    tshcy: "ћ",
    tstrok: "ŧ",
    uHar: "⥣",
    uacute: "ú",
    ubrcy: "ў",
    ubreve: "ŭ",
    ucirc: "û",
    ucy: "у",
    udblac: "ű",
    ufisht: "⥾",
    ufr: "𝔲",
    ugrave: "ù",
    uhblk: "▀",
    ulcorn: "⌜",
    ulcorner: "⌜",
    ulcrop: "⌏",
    ultri: "◸",
    umacr: "ū",
    uogon: "ų",
    uopf: "𝕦",
    upsi: "υ",
    upsilon: "υ",
    upuparrows: "⇈",
    uuarr: "⇈",
    urcorn: "⌝",
    urcorner: "⌝",
    urcrop: "⌎",
    uring: "ů",
    urtri: "◹",
    uscr: "𝓊",
    utdot: "⋰",
    utilde: "ũ",
    uuml: "ü",
    uwangle: "⦧",
    vBar: "⫨",
    vBarv: "⫩",
    vangrt: "⦜",
    varsubsetneq: "⊊︀",
    vsubne: "⊊︀",
    varsubsetneqq: "⫋︀",
    vsubnE: "⫋︀",
    varsupsetneq: "⊋︀",
    vsupne: "⊋︀",
    varsupsetneqq: "⫌︀",
    vsupnE: "⫌︀",
    vcy: "в",
    veebar: "⊻",
    veeeq: "≚",
    vellip: "⋮",
    vfr: "𝔳",
    vopf: "𝕧",
    vscr: "𝓋",
    vzigzag: "⦚",
    wcirc: "ŵ",
    wedbar: "⩟",
    wedgeq: "≙",
    weierp: "℘",
    wp: "℘",
    wfr: "𝔴",
    wopf: "𝕨",
    wscr: "𝓌",
    xfr: "𝔵",
    xi: "ξ",
    xnis: "⋻",
    xopf: "𝕩",
    xscr: "𝓍",
    yacute: "ý",
    yacy: "я",
    ycirc: "ŷ",
    ycy: "ы",
    yen: "¥",
    yfr: "𝔶",
    yicy: "ї",
    yopf: "𝕪",
    yscr: "𝓎",
    yucy: "ю",
    yuml: "ÿ",
    zacute: "ź",
    zcaron: "ž",
    zcy: "з",
    zdot: "ż",
    zeta: "ζ",
    zfr: "𝔷",
    zhcy: "ж",
    zigrarr: "⇝",
    zopf: "𝕫",
    zscr: "𝓏",
    zwj: "‍",
    zwnj: "‌"
  }, TS = "";
  Hi.ngsp = TS;
  LS = [/@/, /^\s*$/, /[<>]/, /^[{}]$/, /&(#|[a-z])/i, /^\/\//];
  a2(IS, "Ls");
  BS = (Ar2 = class {
    static fromArray(t) {
      return t ? (IS("interpolation", t), new Ar2(t[0], t[1])) : M2;
    }
    constructor(t, r) {
      this.start = t, this.end = r;
    }
  }, a2(Ar2, "t"), Ar2), M2 = new BS("{{", "}}"), Uu = (Vn2 = class extends T2 {
    constructor(t, r, n) {
      super(n, t), this.tokenType = r;
    }
  }, a2(Vn2, "ft"), Vn2), MS = (qn2 = class {
    constructor(t, r, n) {
      this.tokens = t, this.errors = r, this.nonNormalizedIcuExpressions = n;
    }
  }, a2(qn2, "$r"), qn2);
  a2(_S, "Ws");
  PS = /\r\n?/g;
  a2(yn2, "je");
  a2(O5, "Rs");
  a2(HS, "ho");
  (function(e7) {
    e7.HEX = "hexadecimal", e7.DEC = "decimal";
  })($i || ($i = {}));
  Gu = (Wn2 = class {
    constructor(t) {
      this.error = t;
    }
  }, a2(Wn2, "dt"), Wn2), $S = (Un2 = class {
    constructor(t, r, n) {
      this._getTagContentType = r, this._currentTokenStart = null, this._currentTokenType = null, this._expansionCaseStack = [], this._inInterpolation = false, this._fullNameStack = [], this.tokens = [], this.errors = [], this.nonNormalizedIcuExpressions = [], this._tokenizeIcu = n.tokenizeExpansionForms || false, this._interpolationConfig = n.interpolationConfig || M2, this._leadingTriviaCodePoints = n.leadingTriviaChars && n.leadingTriviaChars.map((i) => i.codePointAt(0) || 0), this._canSelfClose = n.canSelfClose || false, this._allowHtmComponentClosingTags = n.allowHtmComponentClosingTags || false;
      let o = n.range || { endPos: t.content.length, startPos: 0, startLine: 0, startCol: 0 };
      this._cursor = n.escapedString ? new WS(t, o) : new _22(t, o), this._preserveLineEndings = n.preserveLineEndings || false, this._i18nNormalizeLineEndingsInICUs = n.i18nNormalizeLineEndingsInICUs || false, this._tokenizeBlocks = n.tokenizeBlocks ?? true, this._tokenizeLet = n.tokenizeLet ?? true;
      try {
        this._cursor.init();
      } catch (i) {
        this.handleError(i);
      }
    }
    _processCarriageReturns(t) {
      return this._preserveLineEndings ? t : t.replace(PS, `
`);
    }
    tokenize() {
      for (; this._cursor.peek() !== 0; ) {
        let t = this._cursor.clone();
        try {
          if (this._attemptCharCode(60)) if (this._attemptCharCode(33)) this._attemptStr("[CDATA[") ? this._consumeCdata(t) : this._attemptStr(
            "--"
          ) ? this._consumeComment(t) : this._attemptStrCaseInsensitive("doctype") ? this._consumeDocType(t) : this._consumeBogusComment(
            t
          );
          else if (this._attemptCharCode(47)) this._consumeTagClose(t);
          else {
            let r = this._cursor.clone();
            this._attemptCharCode(63) ? (this._cursor = r, this._consumeBogusComment(t)) : this._consumeTagOpen(t);
          }
          else this._tokenizeLet && this._cursor.peek() === 64 && !this._inInterpolation && this._attemptStr("@let") ? this._consumeLetDeclaration(
            t
          ) : this._tokenizeBlocks && this._attemptCharCode(64) ? this._consumeBlockStart(t) : this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansionCase() && !this._isInExpansionForm() && this._attemptCharCode(125) ? this._consumeBlockEnd(t) : this._tokenizeIcu && this._tokenizeExpansionForm() || this._consumeWithInterpolation(5, 8, () => this._isTextEnd(), () => this._isTagStart());
        } catch (r) {
          this.handleError(r);
        }
      }
      this._beginToken(34), this._endToken([]);
    }
    _getBlockName() {
      let t = false, r = this._cursor.clone();
      return this._attemptCharCodeUntilFn((n) => Bi(n) ? !t : V5(n) ? (t = true, false) : true), this._cursor.getChars(r).trim();
    }
    _consumeBlockStart(t) {
      this._beginToken(25, t);
      let r = this._endToken([this._getBlockName()]);
      if (this._cursor.peek() === 40) if (this._cursor.advance(), this._consumeBlockParameters(), this._attemptCharCodeUntilFn(ie2), this._attemptCharCode(
        41
      )) this._attemptCharCodeUntilFn(ie2);
      else {
        r.type = 29;
        return;
      }
      this._attemptCharCode(123) ? (this._beginToken(26), this._endToken([])) : r.type = 29;
    }
    _consumeBlockEnd(t) {
      this._beginToken(27, t), this._endToken([]);
    }
    _consumeBlockParameters() {
      for (this._attemptCharCodeUntilFn(q5); this._cursor.peek() !== 41 && this._cursor.peek() !== 0; ) {
        this._beginToken(28);
        let t = this._cursor.clone(), r = null, n = 0;
        for (; this._cursor.peek() !== 59 && this._cursor.peek() !== 0 || r !== null; ) {
          let o = this._cursor.peek();
          if (o === 92) this._cursor.advance();
          else if (o === r) r = null;
          else if (r === null && Wu(o)) r = o;
          else if (o === 40 && r === null) n++;
          else if (o === 41 && r === null) {
            if (n === 0) break;
            n > 0 && n--;
          }
          this._cursor.advance();
        }
        this._endToken([this._cursor.getChars(t)]), this._attemptCharCodeUntilFn(q5);
      }
    }
    _consumeLetDeclaration(t) {
      if (this._beginToken(30, t), Bi(this._cursor.peek())) this._attemptCharCodeUntilFn(ie2);
      else {
        let n = this._endToken([this._cursor.getChars(t)]);
        n.type = 33;
        return;
      }
      let r = this._endToken([this._getLetDeclarationName()]);
      if (this._attemptCharCodeUntilFn(ie2), !this._attemptCharCode(61)) {
        r.type = 33;
        return;
      }
      this._attemptCharCodeUntilFn((n) => ie2(n) && !yc(n)), this._consumeLetDeclarationValue(), this._cursor.peek() === 59 ? (this._beginToken(
        32
      ), this._endToken([]), this._cursor.advance()) : (r.type = 33, r.sourceSpan = this._cursor.getSpan(t));
    }
    _getLetDeclarationName() {
      let t = this._cursor.clone(), r = false;
      return this._attemptCharCodeUntilFn((n) => Mi(n) || n == 36 || n === 95 || r && bc(n) ? (r = true, false) : true), this._cursor.getChars(t).trim();
    }
    _consumeLetDeclarationValue() {
      let t = this._cursor.clone();
      for (this._beginToken(31, t); this._cursor.peek() !== 0; ) {
        let r = this._cursor.peek();
        if (r === 59) break;
        Wu(r) && (this._cursor.advance(), this._attemptCharCodeUntilFn((n) => n === 92 ? (this._cursor.advance(), false) : n === r)), this._cursor.advance();
      }
      this._endToken([this._cursor.getChars(t)]);
    }
    _tokenizeExpansionForm() {
      if (this.isExpansionFormStart()) return this._consumeExpansionFormStart(), true;
      if (jS(this._cursor.peek()) && this._isInExpansionForm()) return this._consumeExpansionCaseStart(), true;
      if (this._cursor.peek() === 125) {
        if (this._isInExpansionCase()) return this._consumeExpansionCaseEnd(), true;
        if (this._isInExpansionForm()) return this._consumeExpansionFormEnd(), true;
      }
      return false;
    }
    _beginToken(t, r = this._cursor.clone()) {
      this._currentTokenStart = r, this._currentTokenType = t;
    }
    _endToken(t, r) {
      if (this._currentTokenStart === null) throw new Uu(
        "Programming error - attempted to end a token when there was no start to the token",
        this._currentTokenType,
        this._cursor.getSpan(r)
      );
      if (this._currentTokenType === null) throw new Uu("Programming error - attempted to end a token which has no token type", null, this._cursor.getSpan(this._currentTokenStart));
      let n = { type: this._currentTokenType, parts: t, sourceSpan: (r ?? this._cursor).getSpan(this._currentTokenStart, this._leadingTriviaCodePoints) };
      return this.tokens.push(n), this._currentTokenStart = null, this._currentTokenType = null, n;
    }
    _createError(t, r) {
      this._isInExpansionForm() && (t += ` (Do you have an unescaped "{" in your template? Use "{{ '{' }}") to escape it.)`);
      let n = new Uu(t, this._currentTokenType, r);
      return this._currentTokenStart = null, this._currentTokenType = null, new Gu(n);
    }
    handleError(t) {
      if (t instanceof Dc && (t = this._createError(t.msg, this._cursor.getSpan(t.cursor))), t instanceof Gu) this.errors.push(t.error);
      else throw t;
    }
    _attemptCharCode(t) {
      return this._cursor.peek() === t ? (this._cursor.advance(), true) : false;
    }
    _attemptCharCodeCaseInsensitive(t) {
      return VS(this._cursor.peek(), t) ? (this._cursor.advance(), true) : false;
    }
    _requireCharCode(t) {
      let r = this._cursor.clone();
      if (!this._attemptCharCode(t)) throw this._createError(yn2(this._cursor.peek()), this._cursor.getSpan(r));
    }
    _attemptStr(t) {
      let r = t.length;
      if (this._cursor.charsLeft() < r) return false;
      let n = this._cursor.clone();
      for (let o = 0; o < r; o++) if (!this._attemptCharCode(t.charCodeAt(o))) return this._cursor = n, false;
      return true;
    }
    _attemptStrCaseInsensitive(t) {
      for (let r = 0; r < t.length; r++) if (!this._attemptCharCodeCaseInsensitive(t.charCodeAt(r))) return false;
      return true;
    }
    _requireStr(t) {
      let r = this._cursor.clone();
      if (!this._attemptStr(t)) throw this._createError(yn2(this._cursor.peek()), this._cursor.getSpan(r));
    }
    _requireStrCaseInsensitive(t) {
      let r = this._cursor.clone();
      if (!this._attemptStrCaseInsensitive(t)) throw this._createError(yn2(this._cursor.peek()), this._cursor.getSpan(r));
    }
    _attemptCharCodeUntilFn(t) {
      for (; !t(this._cursor.peek()); ) this._cursor.advance();
    }
    _requireCharCodeUntilFn(t, r) {
      let n = this._cursor.clone();
      if (this._attemptCharCodeUntilFn(t), this._cursor.diff(n) < r) throw this._createError(yn2(this._cursor.peek()), this._cursor.getSpan(n));
    }
    _attemptUntilChar(t) {
      for (; this._cursor.peek() !== t; ) this._cursor.advance();
    }
    _readChar() {
      let t = String.fromCodePoint(this._cursor.peek());
      return this._cursor.advance(), t;
    }
    _consumeEntity(t) {
      this._beginToken(9);
      let r = this._cursor.clone();
      if (this._cursor.advance(), this._attemptCharCode(35)) {
        let n = this._attemptCharCode(120) || this._attemptCharCode(88), o = this._cursor.clone();
        if (this._attemptCharCodeUntilFn(OS), this._cursor.peek() != 59) {
          this._cursor.advance();
          let l7 = n ? $i.HEX : $i.DEC;
          throw this._createError(HS(l7, this._cursor.getChars(r)), this._cursor.getSpan());
        }
        let i = this._cursor.getChars(o);
        this._cursor.advance();
        try {
          let l7 = parseInt(i, n ? 16 : 10);
          this._endToken([String.fromCharCode(l7), this._cursor.getChars(r)]);
        } catch {
          throw this._createError(O5(this._cursor.getChars(r)), this._cursor.getSpan());
        }
      } else {
        let n = this._cursor.clone();
        if (this._attemptCharCodeUntilFn(NS), this._cursor.peek() != 59) this._beginToken(t, r), this._cursor = n, this._endToken(["&"]);
        else {
          let o = this._cursor.getChars(n);
          this._cursor.advance();
          let i = Hi[o];
          if (!i) throw this._createError(O5(o), this._cursor.getSpan(r));
          this._endToken([i, `&${o};`]);
        }
      }
    }
    _consumeRawText(t, r) {
      this._beginToken(t ? 6 : 7);
      let n = [];
      for (; ; ) {
        let o = this._cursor.clone(), i = r();
        if (this._cursor = o, i) break;
        t && this._cursor.peek() === 38 ? (this._endToken([this._processCarriageReturns(n.join(""))]), n.length = 0, this._consumeEntity(6), this._beginToken(6)) : n.push(this._readChar());
      }
      this._endToken([this._processCarriageReturns(n.join(""))]);
    }
    _consumeComment(t) {
      this._beginToken(10, t), this._endToken([]), this._consumeRawText(false, () => this._attemptStr("-->")), this._beginToken(11), this._requireStr(
        "-->"
      ), this._endToken([]);
    }
    _consumeBogusComment(t) {
      this._beginToken(10, t), this._endToken([]), this._consumeRawText(false, () => this._cursor.peek() === 62), this._beginToken(11), this._cursor.advance(), this._endToken([]);
    }
    _consumeCdata(t) {
      this._beginToken(12, t), this._endToken([]), this._consumeRawText(false, () => this._attemptStr("]]>")), this._beginToken(13), this._requireStr(
        "]]>"
      ), this._endToken([]);
    }
    _consumeDocType(t) {
      this._beginToken(18, t), this._endToken([]), this._consumeRawText(false, () => this._cursor.peek() === 62), this._beginToken(19), this._cursor.advance(), this._endToken([]);
    }
    _consumePrefixAndName() {
      let t = this._cursor.clone(), r = "";
      for (; this._cursor.peek() !== 58 && !zS(this._cursor.peek()); ) this._cursor.advance();
      let n;
      this._cursor.peek() === 58 ? (r = this._cursor.getChars(t), this._cursor.advance(), n = this._cursor.clone()) : n = t, this._requireCharCodeUntilFn(
        N5,
        r === "" ? 0 : 1
      );
      let o = this._cursor.getChars(n);
      return [r, o];
    }
    _consumeTagOpen(t) {
      let r, n, o, i = [];
      try {
        if (!Mi(this._cursor.peek())) throw this._createError(yn2(this._cursor.peek()), this._cursor.getSpan(t));
        for (o = this._consumeTagOpenStart(t), n = o.parts[0], r = o.parts[1], this._attemptCharCodeUntilFn(ie2); this._cursor.peek() !== 47 && this._cursor.peek() !== 62 && this._cursor.peek() !== 60 && this._cursor.peek() !== 0; ) {
          let [u6, c] = this._consumeAttributeName();
          if (this._attemptCharCodeUntilFn(ie2), this._attemptCharCode(61)) {
            this._attemptCharCodeUntilFn(ie2);
            let p = this._consumeAttributeValue();
            i.push({ prefix: u6, name: c, value: p });
          } else i.push({ prefix: u6, name: c });
          this._attemptCharCodeUntilFn(ie2);
        }
        this._consumeTagOpenEnd();
      } catch (u6) {
        if (u6 instanceof Gu) {
          o ? o.type = 4 : (this._beginToken(5, t), this._endToken(["<"]));
          return;
        }
        throw u6;
      }
      if (this._canSelfClose && this.tokens[this.tokens.length - 1].type === 2) return;
      let l7 = this._getTagContentType(r, n, this._fullNameStack.length > 0, i);
      this._handleFullNameStackForTagOpen(n, r), l7 === nt2.RAW_TEXT ? this._consumeRawTextWithTagClose(n, r, false) : l7 === nt2.ESCAPABLE_RAW_TEXT && this._consumeRawTextWithTagClose(n, r, true);
    }
    _consumeRawTextWithTagClose(t, r, n) {
      this._consumeRawText(n, () => !this._attemptCharCode(60) || !this._attemptCharCode(47) || (this._attemptCharCodeUntilFn(ie2), !this._attemptStrCaseInsensitive(
        t ? `${t}:${r}` : r
      )) ? false : (this._attemptCharCodeUntilFn(ie2), this._attemptCharCode(62))), this._beginToken(3), this._requireCharCodeUntilFn(
        (o) => o === 62,
        3
      ), this._cursor.advance(), this._endToken([t, r]), this._handleFullNameStackForTagClose(t, r);
    }
    _consumeTagOpenStart(t) {
      this._beginToken(0, t);
      let r = this._consumePrefixAndName();
      return this._endToken(r);
    }
    _consumeAttributeName() {
      let t = this._cursor.peek();
      if (t === 39 || t === 34) throw this._createError(yn2(t), this._cursor.getSpan());
      this._beginToken(14);
      let r = this._consumePrefixAndName();
      return this._endToken(r), r;
    }
    _consumeAttributeValue() {
      let t;
      if (this._cursor.peek() === 39 || this._cursor.peek() === 34) {
        let r = this._cursor.peek();
        this._consumeQuote(r);
        let n = a2(() => this._cursor.peek() === r, "n");
        t = this._consumeWithInterpolation(16, 17, n, n), this._consumeQuote(r);
      } else {
        let r = a2(() => N5(this._cursor.peek()), "r");
        t = this._consumeWithInterpolation(16, 17, r, r);
      }
      return t;
    }
    _consumeQuote(t) {
      this._beginToken(15), this._requireCharCode(t), this._endToken([String.fromCodePoint(t)]);
    }
    _consumeTagOpenEnd() {
      let t = this._attemptCharCode(47) ? 2 : 1;
      this._beginToken(t), this._requireCharCode(62), this._endToken([]);
    }
    _consumeTagClose(t) {
      if (this._beginToken(3, t), this._attemptCharCodeUntilFn(ie2), this._allowHtmComponentClosingTags && this._attemptCharCode(47)) this._attemptCharCodeUntilFn(
        ie2
      ), this._requireCharCode(62), this._endToken([]);
      else {
        let [r, n] = this._consumePrefixAndName();
        this._attemptCharCodeUntilFn(ie2), this._requireCharCode(62), this._endToken([r, n]), this._handleFullNameStackForTagClose(r, n);
      }
    }
    _consumeExpansionFormStart() {
      this._beginToken(20), this._requireCharCode(123), this._endToken([]), this._expansionCaseStack.push(20), this._beginToken(7);
      let t = this._readUntil(44), r = this._processCarriageReturns(t);
      if (this._i18nNormalizeLineEndingsInICUs) this._endToken([r]);
      else {
        let o = this._endToken([t]);
        r !== t && this.nonNormalizedIcuExpressions.push(o);
      }
      this._requireCharCode(44), this._attemptCharCodeUntilFn(ie2), this._beginToken(7);
      let n = this._readUntil(44);
      this._endToken([n]), this._requireCharCode(44), this._attemptCharCodeUntilFn(ie2);
    }
    _consumeExpansionCaseStart() {
      this._beginToken(21);
      let t = this._readUntil(123).trim();
      this._endToken([t]), this._attemptCharCodeUntilFn(ie2), this._beginToken(22), this._requireCharCode(123), this._endToken([]), this._attemptCharCodeUntilFn(
        ie2
      ), this._expansionCaseStack.push(22);
    }
    _consumeExpansionCaseEnd() {
      this._beginToken(23), this._requireCharCode(125), this._endToken([]), this._attemptCharCodeUntilFn(ie2), this._expansionCaseStack.pop();
    }
    _consumeExpansionFormEnd() {
      this._beginToken(24), this._requireCharCode(125), this._endToken([]), this._expansionCaseStack.pop();
    }
    _consumeWithInterpolation(t, r, n, o) {
      this._beginToken(t);
      let i = [];
      for (; !n(); ) {
        let u6 = this._cursor.clone();
        this._interpolationConfig && this._attemptStr(this._interpolationConfig.start) ? (this._endToken([this._processCarriageReturns(i.join(
          ""
        ))], u6), i.length = 0, this._consumeInterpolation(r, u6, o), this._beginToken(t)) : this._cursor.peek() === 38 ? (this._endToken([this._processCarriageReturns(i.join(""))]), i.length = 0, this._consumeEntity(t), this._beginToken(t)) : i.push(this._readChar());
      }
      this._inInterpolation = false;
      let l7 = this._processCarriageReturns(i.join(""));
      return this._endToken([l7]), l7;
    }
    _consumeInterpolation(t, r, n) {
      let o = [];
      this._beginToken(t, r), o.push(this._interpolationConfig.start);
      let i = this._cursor.clone(), l7 = null, u6 = false;
      for (; this._cursor.peek() !== 0 && (n === null || !n()); ) {
        let c = this._cursor.clone();
        if (this._isTagStart()) {
          this._cursor = c, o.push(this._getProcessedChars(i, c)), this._endToken(o);
          return;
        }
        if (l7 === null) if (this._attemptStr(this._interpolationConfig.end)) {
          o.push(this._getProcessedChars(i, c)), o.push(this._interpolationConfig.end), this._endToken(o);
          return;
        } else this._attemptStr("//") && (u6 = true);
        let p = this._cursor.peek();
        this._cursor.advance(), p === 92 ? this._cursor.advance() : p === l7 ? l7 = null : !u6 && l7 === null && Wu(p) && (l7 = p);
      }
      o.push(this._getProcessedChars(i, this._cursor)), this._endToken(o);
    }
    _getProcessedChars(t, r) {
      return this._processCarriageReturns(r.getChars(t));
    }
    _isTextEnd() {
      return !!(this._isTagStart() || this._cursor.peek() === 0 || this._tokenizeIcu && !this._inInterpolation && (this.isExpansionFormStart() || this._cursor.peek() === 125 && this._isInExpansionCase()) || this._tokenizeBlocks && !this._inInterpolation && !this._isInExpansion() && (this._isBlockStart() || this._cursor.peek() === 64 || this._cursor.peek() === 125));
    }
    _isTagStart() {
      if (this._cursor.peek() === 60) {
        let t = this._cursor.clone();
        t.advance();
        let r = t.peek();
        if (97 <= r && r <= 122 || 65 <= r && r <= 90 || r === 47 || r === 33) return true;
      }
      return false;
    }
    _isBlockStart() {
      if (this._tokenizeBlocks && this._cursor.peek() === 64) {
        let t = this._cursor.clone();
        if (t.advance(), V5(t.peek())) return true;
      }
      return false;
    }
    _readUntil(t) {
      let r = this._cursor.clone();
      return this._attemptUntilChar(t), this._cursor.getChars(r);
    }
    _isInExpansion() {
      return this._isInExpansionCase() || this._isInExpansionForm();
    }
    _isInExpansionCase() {
      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 22;
    }
    _isInExpansionForm() {
      return this._expansionCaseStack.length > 0 && this._expansionCaseStack[this._expansionCaseStack.length - 1] === 20;
    }
    isExpansionFormStart() {
      if (this._cursor.peek() !== 123) return false;
      if (this._interpolationConfig) {
        let t = this._cursor.clone(), r = this._attemptStr(this._interpolationConfig.start);
        return this._cursor = t, !r;
      }
      return true;
    }
    _handleFullNameStackForTagOpen(t, r) {
      let n = Pi(t, r);
      (this._fullNameStack.length === 0 || this._fullNameStack[this._fullNameStack.length - 1] === n) && this._fullNameStack.push(n);
    }
    _handleFullNameStackForTagClose(t, r) {
      let n = Pi(t, r);
      this._fullNameStack.length !== 0 && this._fullNameStack[this._fullNameStack.length - 1] === n && this._fullNameStack.pop();
    }
  }, a2(Un2, "Or"), Un2);
  a2(ie2, "b");
  a2(N5, "$s");
  a2(zS, "mo");
  a2(OS, "fo");
  a2(NS, "go");
  a2(jS, "Co");
  a2(VS, "So");
  a2(j5, "Os");
  a2(V5, "Ms");
  a2(q5, "qs");
  a2(qS, "_o");
  _22 = (rr = class {
    constructor(t, r) {
      if (t instanceof rr) {
        this.file = t.file, this.input = t.input, this.end = t.end;
        let n = t.state;
        this.state = { peek: n.peek, offset: n.offset, line: n.line, column: n.column };
      } else {
        if (!r) throw new Error("Programming error: the range argument must be provided with a file argument.");
        this.file = t, this.input = t.content, this.end = r.endPos, this.state = { peek: -1, offset: r.startPos, line: r.startLine, column: r.startCol };
      }
    }
    clone() {
      return new rr(this);
    }
    peek() {
      return this.state.peek;
    }
    charsLeft() {
      return this.end - this.state.offset;
    }
    diff(t) {
      return this.state.offset - t.state.offset;
    }
    advance() {
      this.advanceState(this.state);
    }
    init() {
      this.updatePeek(this.state);
    }
    getSpan(t, r) {
      t = t || this;
      let n = t;
      if (r) for (; this.diff(t) > 0 && r.indexOf(t.peek()) !== -1; ) n === t && (t = t.clone()), t.advance();
      let o = this.locationFromCursor(t), i = this.locationFromCursor(this), l7 = n !== t ? this.locationFromCursor(n) : o;
      return new j2(o, i, l7);
    }
    getChars(t) {
      return this.input.substring(t.state.offset, this.state.offset);
    }
    charAt(t) {
      return this.input.charCodeAt(t);
    }
    advanceState(t) {
      if (t.offset >= this.end) throw this.state = t, new Dc('Unexpected character "EOF"', this);
      let r = this.charAt(t.offset);
      r === 10 ? (t.line++, t.column = 0) : yc(r) || t.column++, t.offset++, this.updatePeek(t);
    }
    updatePeek(t) {
      t.peek = t.offset >= this.end ? 0 : this.charAt(t.offset);
    }
    locationFromCursor(t) {
      return new Ju(t.file, t.state.offset, t.state.line, t.state.column);
    }
  }, a2(rr, "t"), rr), WS = (nr = class extends _22 {
    constructor(t, r) {
      t instanceof nr ? (super(t), this.internalState = { ...t.internalState }) : (super(t, r), this.internalState = this.state);
    }
    advance() {
      this.state = this.internalState, super.advance(), this.processEscapeSequence();
    }
    init() {
      super.init(), this.processEscapeSequence();
    }
    clone() {
      return new nr(this);
    }
    getChars(t) {
      let r = t.clone(), n = "";
      for (; r.internalState.offset < this.internalState.offset; ) n += String.fromCodePoint(r.peek()), r.advance();
      return n;
    }
    processEscapeSequence() {
      let t = a2(() => this.internalState.peek, "e");
      if (t() === 92) if (this.internalState = { ...this.state }, this.advanceState(this.internalState), t() === 110) this.state.peek = 10;
      else if (t() === 114) this.state.peek = 13;
      else if (t() === 118) this.state.peek = 11;
      else if (t() === 116) this.state.peek = 9;
      else if (t() === 98) this.state.peek = 8;
      else if (t() === 102) this.state.peek = 12;
      else if (t() === 117) if (this.advanceState(this.internalState), t() === 123) {
        this.advanceState(this.internalState);
        let r = this.clone(), n = 0;
        for (; t() !== 125; ) this.advanceState(this.internalState), n++;
        this.state.peek = this.decodeHexDigits(r, n);
      } else {
        let r = this.clone();
        this.advanceState(this.internalState), this.advanceState(this.internalState), this.advanceState(this.internalState), this.state.peek = this.decodeHexDigits(r, 4);
      }
      else if (t() === 120) {
        this.advanceState(this.internalState);
        let r = this.clone();
        this.advanceState(this.internalState), this.state.peek = this.decodeHexDigits(r, 2);
      } else if (S5(t())) {
        let r = "", n = 0, o = this.clone();
        for (; S5(t()) && n < 3; ) o = this.clone(), r += String.fromCodePoint(t()), this.advanceState(this.internalState), n++;
        this.state.peek = parseInt(r, 8), this.internalState = o.internalState;
      } else yc(this.internalState.peek) ? (this.advanceState(this.internalState), this.state = this.internalState) : this.state.peek = this.internalState.peek;
    }
    decodeHexDigits(t, r) {
      let n = this.input.slice(t.internalState.offset, t.internalState.offset + r), o = parseInt(n, 16);
      if (isNaN(o)) throw t.state = t.internalState, new Dc("Invalid hexadecimal escape sequence", t);
      return o;
    }
  }, a2(nr, "t"), nr), Dc = (Gn2 = class {
    constructor(t, r) {
      this.msg = t, this.cursor = r;
    }
  }, a2(Gn2, "gt"), Gn2), Ae2 = (Fr2 = class extends T2 {
    static create(t, r, n) {
      return new Fr2(t, r, n);
    }
    constructor(t, r, n) {
      super(r, n), this.elementName = t;
    }
  }, a2(Fr2, "t"), Fr2), US = (Xn2 = class {
    constructor(t, r) {
      this.rootNodes = t, this.errors = r;
    }
  }, a2(Xn2, "Vr"), Xn2), GS = (Yn2 = class {
    constructor(t) {
      this.getTagDefinition = t;
    }
    parse(t, r, n, o = false, i) {
      let l7 = a2((b) => (m, ...g7) => b(m.toLowerCase(), ...g7), "a"), u6 = o ? this.getTagDefinition : l7(this.getTagDefinition), c = a2((b) => u6(b).getContentType(), "u"), p = o ? i : l7(i), d = _S(t, r, i ? (b, m, g7, y) => {
        let w5 = p(b, m, g7, y);
        return w5 !== void 0 ? w5 : c(b);
      } : c, n), h7 = n && n.canSelfClose || false, f = n && n.allowHtmComponentClosingTags || false, v7 = new XS(d.tokens, u6, h7, f, o);
      return v7.build(), new US(v7.rootNodes, d.errors.concat(v7.errors));
    }
  }, a2(Yn2, "nr"), Yn2), XS = (kr2 = class {
    constructor(t, r, n, o, i) {
      this.tokens = t, this.getTagDefinition = r, this.canSelfClose = n, this.allowHtmComponentClosingTags = o, this.isTagNameCaseSensitive = i, this._index = -1, this._containerStack = [], this.rootNodes = [], this.errors = [], this._advance();
    }
    build() {
      for (; this._peek.type !== 34; ) this._peek.type === 0 || this._peek.type === 4 ? this._consumeStartTag(this._advance()) : this._peek.type === 3 ? (this._closeVoidElement(), this._consumeEndTag(this._advance())) : this._peek.type === 12 ? (this._closeVoidElement(), this._consumeCdata(this._advance())) : this._peek.type === 10 ? (this._closeVoidElement(), this._consumeComment(this._advance())) : this._peek.type === 5 || this._peek.type === 7 || this._peek.type === 6 ? (this._closeVoidElement(), this._consumeText(this._advance())) : this._peek.type === 20 ? this._consumeExpansion(this._advance()) : this._peek.type === 25 ? (this._closeVoidElement(), this._consumeBlockOpen(this._advance())) : this._peek.type === 27 ? (this._closeVoidElement(), this._consumeBlockClose(this._advance())) : this._peek.type === 29 ? (this._closeVoidElement(), this._consumeIncompleteBlock(this._advance())) : this._peek.type === 30 ? (this._closeVoidElement(), this._consumeLet(
        this._advance()
      )) : this._peek.type === 18 ? this._consumeDocType(this._advance()) : this._peek.type === 33 ? (this._closeVoidElement(), this._consumeIncompleteLet(this._advance())) : this._advance();
      for (let t of this._containerStack) t instanceof bn2 && this.errors.push(Ae2.create(t.name, t.sourceSpan, `Unclosed block "${t.name}"`));
    }
    _advance() {
      let t = this._peek;
      return this._index < this.tokens.length - 1 && this._index++, this._peek = this.tokens[this._index], t;
    }
    _advanceIf(t) {
      return this._peek.type === t ? this._advance() : null;
    }
    _consumeCdata(t) {
      let r = this._advance(), n = this._getText(r), o = this._advanceIf(13);
      this._addToParent(new CS(n, new j2(t.sourceSpan.start, (o || r).sourceSpan.end), [r]));
    }
    _consumeComment(t) {
      let r = this._advanceIf(7), n = this._advanceIf(11), o = r != null ? r.parts[0].trim() : null, i = n == null ? t.sourceSpan : new j2(t.sourceSpan.start, n.sourceSpan.end, t.sourceSpan.fullStart);
      this._addToParent(new AS(o, i));
    }
    _consumeDocType(t) {
      let r = this._advanceIf(7), n = this._advanceIf(19), o = r != null ? r.parts[0].trim() : null, i = new j2(t.sourceSpan.start, (n || r || t).sourceSpan.end);
      this._addToParent(new FS(o, i));
    }
    _consumeExpansion(t) {
      let r = this._advance(), n = this._advance(), o = [];
      for (; this._peek.type === 21; ) {
        let l7 = this._parseExpansionCase();
        if (!l7) return;
        o.push(l7);
      }
      if (this._peek.type !== 24) {
        this.errors.push(Ae2.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '}'."));
        return;
      }
      let i = new j2(t.sourceSpan.start, this._peek.sourceSpan.end, t.sourceSpan.fullStart);
      this._addToParent(new ES(r.parts[0], n.parts[0], o, i, r.sourceSpan)), this._advance();
    }
    _parseExpansionCase() {
      let t = this._advance();
      if (this._peek.type !== 22) return this.errors.push(Ae2.create(null, this._peek.sourceSpan, "Invalid ICU message. Missing '{'.")), null;
      let r = this._advance(), n = this._collectExpansionExpTokens(r);
      if (!n) return null;
      let o = this._advance();
      n.push({ type: 34, parts: [], sourceSpan: o.sourceSpan });
      let i = new kr2(n, this.getTagDefinition, this.canSelfClose, this.allowHtmComponentClosingTags, this.isTagNameCaseSensitive);
      if (i.build(), i.errors.length > 0) return this.errors = this.errors.concat(i.errors), null;
      let l7 = new j2(t.sourceSpan.start, o.sourceSpan.end, t.sourceSpan.fullStart), u6 = new j2(r.sourceSpan.start, o.sourceSpan.end, r.sourceSpan.fullStart);
      return new SS(t.parts[0], i.rootNodes, l7, t.sourceSpan, u6);
    }
    _collectExpansionExpTokens(t) {
      let r = [], n = [22];
      for (; ; ) {
        if ((this._peek.type === 20 || this._peek.type === 22) && n.push(this._peek.type), this._peek.type === 23) if (W5(n, 22)) {
          if (n.pop(), n.length === 0) return r;
        } else return this.errors.push(Ae2.create(null, t.sourceSpan, "Invalid ICU message. Missing '}'.")), null;
        if (this._peek.type === 24) if (W5(n, 20)) n.pop();
        else return this.errors.push(Ae2.create(null, t.sourceSpan, "Invalid ICU message. Missing '}'.")), null;
        if (this._peek.type === 34) return this.errors.push(Ae2.create(null, t.sourceSpan, "Invalid ICU message. Missing '}'.")), null;
        r.push(this._advance());
      }
    }
    _getText(t) {
      let r = t.parts[0];
      if (r.length > 0 && r[0] == `
`) {
        let n = this._getClosestParentElement();
        n != null && n.children.length == 0 && this.getTagDefinition(n.name).ignoreFirstLf && (r = r.substring(1));
      }
      return r;
    }
    _consumeText(t) {
      let r = [t], n = t.sourceSpan, o = t.parts[0];
      if (o.length > 0 && o[0] === `
`) {
        let i = this._getContainer();
        i != null && i.children.length === 0 && this.getTagDefinition(i.name).ignoreFirstLf && (o = o.substring(1), r[0] = { type: t.type, sourceSpan: t.sourceSpan, parts: [o] });
      }
      for (; this._peek.type === 8 || this._peek.type === 5 || this._peek.type === 9; ) t = this._advance(), r.push(t), t.type === 8 ? o += t.parts.join("").replace(/&([^;]+);/g, U5) : t.type === 9 ? o += t.parts[0] : o += t.parts.join("");
      if (o.length > 0) {
        let i = t.sourceSpan;
        this._addToParent(new xS(o, new j2(n.start, i.end, n.fullStart, n.details), r));
      }
    }
    _closeVoidElement() {
      let t = this._getContainer();
      t instanceof tr && this.getTagDefinition(t.name).isVoid && this._containerStack.pop();
    }
    _consumeStartTag(t) {
      let [r, n] = t.parts, o = [];
      for (; this._peek.type === 14; ) o.push(this._consumeAttr(this._advance()));
      let i = this._getElementFullName(r, n, this._getClosestParentElement()), l7 = false;
      if (this._peek.type === 2) {
        this._advance(), l7 = true;
        let v7 = this.getTagDefinition(i);
        this.canSelfClose || v7.canSelfClose || Ti(i) !== null || v7.isVoid || this.errors.push(Ae2.create(i, t.sourceSpan, `Only void, custom and foreign elements can be self closed "${t.parts[1]}"`));
      } else this._peek.type === 1 && (this._advance(), l7 = false);
      let u6 = this._peek.sourceSpan.fullStart, c = new j2(t.sourceSpan.start, u6, t.sourceSpan.fullStart), p = new j2(t.sourceSpan.start, u6, t.sourceSpan.fullStart), d = new j2(t.sourceSpan.start.moveBy(1), t.sourceSpan.end), h7 = new tr(i, o, [], c, p, void 0, d), f = this._getContainer();
      this._pushContainer(h7, f instanceof tr && this.getTagDefinition(f.name).isClosedByChild(h7.name)), l7 ? this._popContainer(i, tr, c) : t.type === 4 && (this._popContainer(i, tr, null), this.errors.push(Ae2.create(i, c, `Opening tag "${i}" not terminated.`)));
    }
    _pushContainer(t, r) {
      r && this._containerStack.pop(), this._addToParent(t), this._containerStack.push(t);
    }
    _consumeEndTag(t) {
      let r = this.allowHtmComponentClosingTags && t.parts.length === 0 ? null : this._getElementFullName(t.parts[0], t.parts[1], this._getClosestParentElement());
      if (r && this.getTagDefinition(r).isVoid) this.errors.push(Ae2.create(r, t.sourceSpan, `Void elements do not have end tags "${t.parts[1]}"`));
      else if (!this._popContainer(r, tr, t.sourceSpan)) {
        let n = `Unexpected closing tag "${r}". It may happen when the tag has already been closed by another tag. For more info see https://www.w3.org/TR/html5/syntax.html#closing-elements-that-have-implied-end-tags`;
        this.errors.push(Ae2.create(r, t.sourceSpan, n));
      }
    }
    _popContainer(t, r, n) {
      let o = false;
      for (let i = this._containerStack.length - 1; i >= 0; i--) {
        let l7 = this._containerStack[i];
        if (Ti(l7.name) ? l7.name === t : (t == null || l7.name.toLowerCase() === t.toLowerCase()) && l7 instanceof r) return l7.endSourceSpan = n, l7.sourceSpan.end = n !== null ? n.end : l7.sourceSpan.end, this._containerStack.splice(i, this._containerStack.length - i), !o;
        (l7 instanceof bn2 || l7 instanceof tr && !this.getTagDefinition(l7.name).closedByParent) && (o = true);
      }
      return false;
    }
    _consumeAttr(t) {
      let r = Pi(t.parts[0], t.parts[1]), n = t.sourceSpan.end, o;
      this._peek.type === 15 && (o = this._advance());
      let i = "", l7 = [], u6, c;
      if (this._peek.type === 16) for (u6 = this._peek.sourceSpan, c = this._peek.sourceSpan.end; this._peek.type === 16 || this._peek.type === 17 || this._peek.type === 9; ) {
        let d = this._advance();
        l7.push(d), d.type === 17 ? i += d.parts.join("").replace(/&([^;]+);/g, U5) : d.type === 9 ? i += d.parts[0] : i += d.parts.join(""), c = n = d.sourceSpan.end;
      }
      this._peek.type === 15 && (c = n = this._advance().sourceSpan.end);
      let p = u6 && c && new j2((o == null ? void 0 : o.sourceSpan.start) ?? u6.start, c, (o == null ? void 0 : o.sourceSpan.fullStart) ?? u6.fullStart);
      return new RS(r, i, new j2(t.sourceSpan.start, n, t.sourceSpan.fullStart), t.sourceSpan, p, l7.length > 0 ? l7 : void 0, void 0);
    }
    _consumeBlockOpen(t) {
      let r = [];
      for (; this._peek.type === 28; ) {
        let u6 = this._advance();
        r.push(new $5(u6.parts[0], u6.sourceSpan));
      }
      this._peek.type === 26 && this._advance();
      let n = this._peek.sourceSpan.fullStart, o = new j2(t.sourceSpan.start, n, t.sourceSpan.fullStart), i = new j2(t.sourceSpan.start, n, t.sourceSpan.fullStart), l7 = new bn2(t.parts[0], r, [], o, t.sourceSpan, i);
      this._pushContainer(l7, false);
    }
    _consumeBlockClose(t) {
      this._popContainer(null, bn2, t.sourceSpan) || this.errors.push(Ae2.create(null, t.sourceSpan, 'Unexpected closing block. The block may have been closed earlier. If you meant to write the } character, you should use the "&#125;" HTML entity instead.'));
    }
    _consumeIncompleteBlock(t) {
      let r = [];
      for (; this._peek.type === 28; ) {
        let u6 = this._advance();
        r.push(new $5(u6.parts[0], u6.sourceSpan));
      }
      let n = this._peek.sourceSpan.fullStart, o = new j2(t.sourceSpan.start, n, t.sourceSpan.fullStart), i = new j2(t.sourceSpan.start, n, t.sourceSpan.fullStart), l7 = new bn2(t.parts[0], r, [], o, t.sourceSpan, i);
      this._pushContainer(l7, false), this._popContainer(null, bn2, null), this.errors.push(Ae2.create(t.parts[0], o, `Incomplete block "${t.parts[0]}". If you meant to write the @ character, you should use the "&#64;" HTML entity instead.`));
    }
    _consumeLet(t) {
      let r = t.parts[0], n, o;
      if (this._peek.type !== 31) {
        this.errors.push(Ae2.create(t.parts[0], t.sourceSpan, `Invalid @let declaration "${r}". Declaration must have a value.`));
        return;
      } else n = this._advance();
      if (this._peek.type !== 32) {
        this.errors.push(Ae2.create(t.parts[0], t.sourceSpan, `Unterminated @let declaration "${r}". Declaration must be terminated with a semicolon.`));
        return;
      } else o = this._advance();
      let i = o.sourceSpan.fullStart, l7 = new j2(t.sourceSpan.start, i, t.sourceSpan.fullStart), u6 = t.sourceSpan.toString().lastIndexOf(r), c = t.sourceSpan.start.moveBy(u6), p = new j2(c, t.sourceSpan.end), d = new z5(r, n.parts[0], l7, p, n.sourceSpan);
      this._addToParent(d);
    }
    _consumeIncompleteLet(t) {
      let r = t.parts[0] ?? "", n = r ? ` "${r}"` : "";
      if (r.length > 0) {
        let o = t.sourceSpan.toString().lastIndexOf(r), i = t.sourceSpan.start.moveBy(o), l7 = new j2(i, t.sourceSpan.end), u6 = new j2(t.sourceSpan.start, t.sourceSpan.start.moveBy(0)), c = new z5(r, "", t.sourceSpan, l7, u6);
        this._addToParent(c);
      }
      this.errors.push(Ae2.create(t.parts[0], t.sourceSpan, `Incomplete @let declaration${n}. @let declarations must be written as \`@let <name> = <value>;\``));
    }
    _getContainer() {
      return this._containerStack.length > 0 ? this._containerStack[this._containerStack.length - 1] : null;
    }
    _getClosestParentElement() {
      for (let t = this._containerStack.length - 1; t > -1; t--) if (this._containerStack[t] instanceof tr) return this._containerStack[t];
      return null;
    }
    _addToParent(t) {
      let r = this._getContainer();
      r === null ? this.rootNodes.push(t) : r.children.push(t);
    }
    _getElementFullName(t, r, n) {
      if (t === "" && (t = this.getTagDefinition(r).implicitNamespacePrefix || "", t === "" && n != null)) {
        let o = el(n.name)[1];
        this.getTagDefinition(o).preventNamespaceInheritance || (t = Ti(n.name));
      }
      return Pi(t, r);
    }
  }, a2(kr2, "t"), kr2);
  a2(W5, "zs");
  a2(U5, "Gs");
  YS = (Kn2 = class extends GS {
    constructor() {
      super(Qu);
    }
    parse(t, r, n, o = false, i) {
      return super.parse(t, r, n, o, i);
    }
  }, a2(Kn2, "sr"), Kn2), Xu = null, KS = a2(() => (Xu || (Xu = new YS()), Xu), "Eo");
  a2(G5, "zr");
  a2(ZS, "Ao");
  JS = ZS, ha2 = 3;
  a2(QS, "Do");
  a2(eR, "vo");
  tR = eR, ki = { attrs: true, children: true, cases: true, expression: true }, X5 = /* @__PURE__ */ new Set(["parent"]), rR = (vt2 = class {
    constructor(t = {}) {
      for (let r of /* @__PURE__ */ new Set([...X5, ...Object.keys(t)])) this.setProperty(r, t[r]);
    }
    setProperty(t, r) {
      if (this[t] !== r) {
        if (t in ki && (r = r.map((n) => this.createChild(n))), !X5.has(t)) {
          this[t] = r;
          return;
        }
        Object.defineProperty(this, t, { value: r, enumerable: false, configurable: true });
      }
    }
    map(t) {
      let r;
      for (let n in ki) {
        let o = this[n];
        if (o) {
          let i = nR(o, (l7) => l7.map(t));
          r !== o && (r || (r = new vt2({ parent: this.parent })), r.setProperty(n, i));
        }
      }
      if (r) for (let n in this) n in ki || (r[n] = this[n]);
      return t(r || this);
    }
    walk(t) {
      for (let r in ki) {
        let n = this[r];
        if (n) for (let o = 0; o < n.length; o++) n[o].walk(t);
      }
      t(this);
    }
    createChild(t) {
      let r = t instanceof vt2 ? t.clone() : new vt2(t);
      return r.setProperty("parent", this), r;
    }
    insertChildBefore(t, r) {
      this.children.splice(this.children.indexOf(t), 0, this.createChild(r));
    }
    removeChild(t) {
      this.children.splice(this.children.indexOf(t), 1);
    }
    replaceChild(t, r) {
      this.children[this.children.indexOf(t)] = this.createChild(r);
    }
    clone() {
      return new vt2(this);
    }
    get firstChild() {
      var t;
      return (t = this.children) == null ? void 0 : t[0];
    }
    get lastChild() {
      var t;
      return (t = this.children) == null ? void 0 : t[this.children.length - 1];
    }
    get prev() {
      var t, r;
      return (r = (t = this.parent) == null ? void 0 : t.children) == null ? void 0 : r[this.parent.children.indexOf(this) - 1];
    }
    get next() {
      var t, r;
      return (r = (t = this.parent) == null ? void 0 : t.children) == null ? void 0 : r[this.parent.children.indexOf(this) + 1];
    }
    get rawName() {
      return this.hasExplicitNamespace ? this.fullName : this.name;
    }
    get fullName() {
      return this.namespace ? this.namespace + ":" + this.name : this.name;
    }
    get attrMap() {
      return Object.fromEntries(this.attrs.map((t) => [t.fullName, t.value]));
    }
  }, a2(vt2, "t"), vt2);
  a2(nR, "yo");
  oR = [{ regex: /^(\[if([^\]]*)\]>)(.*?)<!\s*\[endif\]$/su, parse: iR }, { regex: /^\[if([^\]]*)\]><!$/u, parse: lR }, {
    regex: /^<!\s*\[endif\]$/u,
    parse: sR
  }];
  a2(aR, "Qs");
  a2(iR, "bo");
  a2(lR, "To");
  a2(sR, "xo");
  Yu = /* @__PURE__ */ new Map([
    ["*", /* @__PURE__ */ new Set([
      "accesskey",
      "autocapitalize",
      "autofocus",
      "class",
      "contenteditable",
      "dir",
      "draggable",
      "enterkeyhint",
      "hidden",
      "id",
      "inert",
      "inputmode",
      "is",
      "itemid",
      "itemprop",
      "itemref",
      "itemscope",
      "itemtype",
      "lang",
      "nonce",
      "popover",
      "slot",
      "spellcheck",
      "style",
      "tabindex",
      "title",
      "translate",
      "writingsuggestions"
    ])],
    ["a", /* @__PURE__ */ new Set(
      ["charset", "coords", "download", "href", "hreflang", "name", "ping", "referrerpolicy", "rel", "rev", "shape", "target", "type"]
    )],
    ["applet", /* @__PURE__ */ new Set(["align", "alt", "archive", "code", "codebase", "height", "hspace", "name", "object", "vspace", "width"])],
    ["area", /* @__PURE__ */ new Set([
      "alt",
      "coords",
      "download",
      "href",
      "hreflang",
      "nohref",
      "ping",
      "referrerpolicy",
      "rel",
      "shape",
      "target",
      "type"
    ])],
    ["audio", /* @__PURE__ */ new Set(["autoplay", "controls", "crossorigin", "loop", "muted", "preload", "src"])],
    ["base", /* @__PURE__ */ new Set(
      ["href", "target"]
    )],
    ["basefont", /* @__PURE__ */ new Set(["color", "face", "size"])],
    ["blockquote", /* @__PURE__ */ new Set(["cite"])],
    ["body", /* @__PURE__ */ new Set(["alink", "background", "bgcolor", "link", "text", "vlink"])],
    ["br", /* @__PURE__ */ new Set(["clear"])],
    ["button", /* @__PURE__ */ new Set([
      "disabled",
      "form",
      "formaction",
      "formenctype",
      "formmethod",
      "formnovalidate",
      "formtarget",
      "name",
      "popovertarget",
      "popovertargetaction",
      "type",
      "value"
    ])],
    ["canvas", /* @__PURE__ */ new Set(["height", "width"])],
    ["caption", /* @__PURE__ */ new Set(
      ["align"]
    )],
    ["col", /* @__PURE__ */ new Set(["align", "char", "charoff", "span", "valign", "width"])],
    ["colgroup", /* @__PURE__ */ new Set(
      ["align", "char", "charoff", "span", "valign", "width"]
    )],
    ["data", /* @__PURE__ */ new Set(["value"])],
    ["del", /* @__PURE__ */ new Set([
      "cite",
      "datetime"
    ])],
    ["details", /* @__PURE__ */ new Set(["name", "open"])],
    ["dialog", /* @__PURE__ */ new Set(["open"])],
    ["dir", /* @__PURE__ */ new Set(
      ["compact"]
    )],
    ["div", /* @__PURE__ */ new Set(["align"])],
    ["dl", /* @__PURE__ */ new Set(["compact"])],
    ["embed", /* @__PURE__ */ new Set(
      ["height", "src", "type", "width"]
    )],
    ["fieldset", /* @__PURE__ */ new Set(["disabled", "form", "name"])],
    ["font", /* @__PURE__ */ new Set(
      ["color", "face", "size"]
    )],
    ["form", /* @__PURE__ */ new Set(["accept", "accept-charset", "action", "autocomplete", "enctype", "method", "name", "novalidate", "target"])],
    ["frame", /* @__PURE__ */ new Set(["frameborder", "longdesc", "marginheight", "marginwidth", "name", "noresize", "scrolling", "src"])],
    ["frameset", /* @__PURE__ */ new Set(["cols", "rows"])],
    ["h1", /* @__PURE__ */ new Set(["align"])],
    ["h2", /* @__PURE__ */ new Set(
      ["align"]
    )],
    ["h3", /* @__PURE__ */ new Set(["align"])],
    ["h4", /* @__PURE__ */ new Set(["align"])],
    ["h5", /* @__PURE__ */ new Set(["align"])],
    ["h6", /* @__PURE__ */ new Set(["align"])],
    ["head", /* @__PURE__ */ new Set(["profile"])],
    ["hr", /* @__PURE__ */ new Set(["align", "noshade", "size", "width"])],
    ["html", /* @__PURE__ */ new Set(["manifest", "version"])],
    ["iframe", /* @__PURE__ */ new Set([
      "align",
      "allow",
      "allowfullscreen",
      "allowpaymentrequest",
      "allowusermedia",
      "frameborder",
      "height",
      "loading",
      "longdesc",
      "marginheight",
      "marginwidth",
      "name",
      "referrerpolicy",
      "sandbox",
      "scrolling",
      "src",
      "srcdoc",
      "width"
    ])],
    ["img", /* @__PURE__ */ new Set(["align", "alt", "border", "crossorigin", "decoding", "fetchpriority", "height", "hspace", "ismap", "loading", "longdesc", "name", "referrerpolicy", "sizes", "src", "srcset", "usemap", "vspace", "width"])],
    ["input", /* @__PURE__ */ new Set(["accept", "align", "alt", "autocomplete", "checked", "dirname", "disabled", "form", "formaction", "formenctype", "formmethod", "formnovalidate", "formtarget", "height", "ismap", "list", "max", "maxlength", "min", "minlength", "multiple", "name", "pattern", "placeholder", "popovertarget", "popovertargetaction", "readonly", "required", "size", "src", "step", "type", "usemap", "value", "width"])],
    ["ins", /* @__PURE__ */ new Set(["cite", "datetime"])],
    ["isindex", /* @__PURE__ */ new Set(
      ["prompt"]
    )],
    ["label", /* @__PURE__ */ new Set(["for", "form"])],
    ["legend", /* @__PURE__ */ new Set(["align"])],
    ["li", /* @__PURE__ */ new Set(
      ["type", "value"]
    )],
    ["link", /* @__PURE__ */ new Set(["as", "blocking", "charset", "color", "crossorigin", "disabled", "fetchpriority", "href", "hreflang", "imagesizes", "imagesrcset", "integrity", "media", "referrerpolicy", "rel", "rev", "sizes", "target", "type"])],
    ["map", /* @__PURE__ */ new Set(
      ["name"]
    )],
    ["menu", /* @__PURE__ */ new Set(["compact"])],
    ["meta", /* @__PURE__ */ new Set([
      "charset",
      "content",
      "http-equiv",
      "media",
      "name",
      "scheme"
    ])],
    ["meter", /* @__PURE__ */ new Set(["high", "low", "max", "min", "optimum", "value"])],
    ["object", /* @__PURE__ */ new Set(
      [
        "align",
        "archive",
        "border",
        "classid",
        "codebase",
        "codetype",
        "data",
        "declare",
        "form",
        "height",
        "hspace",
        "name",
        "standby",
        "type",
        "typemustmatch",
        "usemap",
        "vspace",
        "width"
      ]
    )],
    ["ol", /* @__PURE__ */ new Set(["compact", "reversed", "start", "type"])],
    ["optgroup", /* @__PURE__ */ new Set(
      ["disabled", "label"]
    )],
    ["option", /* @__PURE__ */ new Set(["disabled", "label", "selected", "value"])],
    ["output", /* @__PURE__ */ new Set(
      ["for", "form", "name"]
    )],
    ["p", /* @__PURE__ */ new Set(["align"])],
    ["param", /* @__PURE__ */ new Set(["name", "type", "value", "valuetype"])],
    ["pre", /* @__PURE__ */ new Set(["width"])],
    ["progress", /* @__PURE__ */ new Set(["max", "value"])],
    ["q", /* @__PURE__ */ new Set(
      ["cite"]
    )],
    ["script", /* @__PURE__ */ new Set(["async", "blocking", "charset", "crossorigin", "defer", "fetchpriority", "integrity", "language", "nomodule", "referrerpolicy", "src", "type"])],
    ["select", /* @__PURE__ */ new Set(["autocomplete", "disabled", "form", "multiple", "name", "required", "size"])],
    ["slot", /* @__PURE__ */ new Set(["name"])],
    ["source", /* @__PURE__ */ new Set(["height", "media", "sizes", "src", "srcset", "type", "width"])],
    ["style", /* @__PURE__ */ new Set(["blocking", "media", "type"])],
    ["table", /* @__PURE__ */ new Set(["align", "bgcolor", "border", "cellpadding", "cellspacing", "frame", "rules", "summary", "width"])],
    ["tbody", /* @__PURE__ */ new Set([
      "align",
      "char",
      "charoff",
      "valign"
    ])],
    ["td", /* @__PURE__ */ new Set([
      "abbr",
      "align",
      "axis",
      "bgcolor",
      "char",
      "charoff",
      "colspan",
      "headers",
      "height",
      "nowrap",
      "rowspan",
      "scope",
      "valign",
      "width"
    ])],
    ["template", /* @__PURE__ */ new Set(["shadowrootclonable", "shadowrootdelegatesfocus", "shadowrootmode"])],
    ["textarea", /* @__PURE__ */ new Set(["autocomplete", "cols", "dirname", "disabled", "form", "maxlength", "minlength", "name", "placeholder", "readonly", "required", "rows", "wrap"])],
    ["tfoot", /* @__PURE__ */ new Set([
      "align",
      "char",
      "charoff",
      "valign"
    ])],
    ["th", /* @__PURE__ */ new Set(["abbr", "align", "axis", "bgcolor", "char", "charoff", "colspan", "headers", "height", "nowrap", "rowspan", "scope", "valign", "width"])],
    ["thead", /* @__PURE__ */ new Set(["align", "char", "charoff", "valign"])],
    ["time", /* @__PURE__ */ new Set(
      ["datetime"]
    )],
    ["tr", /* @__PURE__ */ new Set(["align", "bgcolor", "char", "charoff", "valign"])],
    ["track", /* @__PURE__ */ new Set(["default", "kind", "label", "src", "srclang"])],
    ["ul", /* @__PURE__ */ new Set(["compact", "type"])],
    ["video", /* @__PURE__ */ new Set(["autoplay", "controls", "crossorigin", "height", "loop", "muted", "playsinline", "poster", "preload", "src", "width"])]
  ]), uR = /* @__PURE__ */ new Set(
    [
      "a",
      "abbr",
      "acronym",
      "address",
      "applet",
      "area",
      "article",
      "aside",
      "audio",
      "b",
      "base",
      "basefont",
      "bdi",
      "bdo",
      "bgsound",
      "big",
      "blink",
      "blockquote",
      "body",
      "br",
      "button",
      "canvas",
      "caption",
      "center",
      "cite",
      "code",
      "col",
      "colgroup",
      "command",
      "content",
      "data",
      "datalist",
      "dd",
      "del",
      "details",
      "dfn",
      "dialog",
      "dir",
      "div",
      "dl",
      "dt",
      "element",
      "em",
      "embed",
      "fieldset",
      "figcaption",
      "figure",
      "font",
      "footer",
      "form",
      "frame",
      "frameset",
      "h1",
      "h2",
      "h3",
      "h4",
      "h5",
      "h6",
      "head",
      "header",
      "hgroup",
      "hr",
      "html",
      "i",
      "iframe",
      "image",
      "img",
      "input",
      "ins",
      "isindex",
      "kbd",
      "keygen",
      "label",
      "legend",
      "li",
      "link",
      "listing",
      "main",
      "map",
      "mark",
      "marquee",
      "math",
      "menu",
      "menuitem",
      "meta",
      "meter",
      "multicol",
      "nav",
      "nextid",
      "nobr",
      "noembed",
      "noframes",
      "noscript",
      "object",
      "ol",
      "optgroup",
      "option",
      "output",
      "p",
      "param",
      "picture",
      "plaintext",
      "pre",
      "progress",
      "q",
      "rb",
      "rbc",
      "rp",
      "rt",
      "rtc",
      "ruby",
      "s",
      "samp",
      "script",
      "search",
      "section",
      "select",
      "shadow",
      "slot",
      "small",
      "source",
      "spacer",
      "span",
      "strike",
      "strong",
      "style",
      "sub",
      "summary",
      "sup",
      "svg",
      "table",
      "tbody",
      "td",
      "template",
      "textarea",
      "tfoot",
      "th",
      "thead",
      "time",
      "title",
      "tr",
      "track",
      "tt",
      "u",
      "ul",
      "var",
      "video",
      "wbr",
      "xmp"
    ]
  );
  a2(cR, "ko");
  a2(pR, "Bo");
  a2(dR, "Lo");
  a2(P22, "Zs");
  a2(fR, "Fo");
  a2(Y5, "Js");
  a2(H22, "ei");
  a2(tl, "ur");
  $2 = { name: "html", normalizeTagName: true, normalizeAttributeName: true, allowHtmComponentClosingTags: true }, hR = tl($2), mR = tl({ name: "angular" }), gR = tl({ name: "vue", isTagNameCaseSensitive: true, shouldParseAsRawText(e7, t, r, n) {
    return e7.toLowerCase() !== "html" && !r && (e7 !== "template" || n.some(({ name: o, value: i }) => o === "lang" && i !== "html" && i !== "" && i !== void 0));
  } }), vR = tl({ name: "lwc", canSelfClose: false }), wR = { html: uS }, z2 = Q5;
});
function _t2() {
}
function IR(e7, t, r, n, o) {
  for (var i = [], l7; t; ) i.push(t), l7 = t.previousComponent, delete t.previousComponent, t = l7;
  i.reverse();
  for (var u6 = 0, c = i.length, p = 0, d = 0; u6 < c; u6++) {
    var h7 = i[u6];
    if (h7.removed) {
      if (h7.value = e7.join(n.slice(d, d + h7.count)), d += h7.count, u6 && i[u6 - 1].added) {
        var f = i[u6 - 1];
        i[u6 - 1] = i[u6], i[u6] = f;
      }
    } else {
      if (!h7.added && o) {
        var v7 = r.slice(p, p + h7.count);
        v7 = v7.map(function(m, g7) {
          var y = n[d + g7];
          return y.length > m.length ? y : m;
        }), h7.value = e7.join(v7);
      } else h7.value = e7.join(r.slice(p, p + h7.count));
      p += h7.count, h7.added || (d += h7.count);
    }
  }
  var b = i[c - 1];
  return c > 1 && typeof b.value == "string" && (b.added || b.removed) && e7.equals("", b.value) && (i[c - 2].value += b.value, i.pop()), i;
}
function nl(e7) {
  "@babel/helpers - typeof";
  return typeof Symbol == "function" && typeof Symbol.iterator == "symbol" ? nl = a2(function(t) {
    return typeof t;
  }, "$e") : nl = a2(function(t) {
    return t && typeof Symbol == "function" && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t;
  }, "$e"), nl(e7);
}
function Fc(e7, t, r, n, o) {
  t = t || [], r = r || [], n && (e7 = n(o, e7));
  var i;
  for (i = 0; i < t.length; i += 1) if (t[i] === e7) return r[i];
  var l7;
  if (_R.call(e7) === "[object Array]") {
    for (t.push(e7), l7 = new Array(e7.length), r.push(l7), i = 0; i < e7.length; i += 1) l7[i] = Fc(e7[i], t, r, n, o);
    return t.pop(), r.pop(), l7;
  }
  if (e7 && e7.toJSON && (e7 = e7.toJSON()), nl(e7) === "object" && e7 !== null) {
    t.push(e7), l7 = {}, r.push(l7);
    var u6 = [], c;
    for (c in e7) e7.hasOwnProperty(c) && u6.push(c);
    for (u6.sort(), i = 0; i < u6.length; i += 1) c = u6[i], l7[c] = Fc(e7[c], t, r, n, c);
    t.pop(), r.pop();
  } else l7 = e7;
  return l7;
}
function PR(e7, t, r) {
  return il.diff(e7, t, r);
}
function HR(e7) {
  let t = e7.indexOf("\r");
  return t >= 0 ? e7.charAt(t + 1) === `
` ? "crlf" : "cr" : "lf";
}
function zc(e7) {
  switch (e7) {
    case "cr":
      return "\r";
    case "crlf":
      return `\r
`;
    default:
      return `
`;
  }
}
function xm(e7, t) {
  let r;
  switch (t) {
    case `
`:
      r = /\n/gu;
      break;
    case "\r":
      r = /\r/gu;
      break;
    case `\r
`:
      r = /\r\n/gu;
      break;
    default:
      throw new Error(`Unexpected "eol" ${JSON.stringify(t)}.`);
  }
  let n = e7.match(r);
  return n ? n.length : 0;
}
function $R(e7) {
  return pl(false, e7, /\r\n?/gu, `
`);
}
function zR(e7) {
  if (typeof e7 == "string") return Or2;
  if (Array.isArray(e7)) return Mt2;
  if (!e7) return;
  let { type: t } = e7;
  if (Cm.has(t)) return t;
}
function NR(e7) {
  let t = e7 === null ? "null" : typeof e7;
  if (t !== "string" && t !== "object") return `Unexpected doc '${t}', 
Expected it to be 'string' or 'object'.`;
  if (jr(e7)) throw new Error("doc is valid.");
  let r = Object.prototype.toString.call(e7);
  if (r !== "[object Object]") return `Unexpected doc '${r}'.`;
  let n = OR([...Cm].map((o) => `'${o}'`));
  return `Unexpected doc.type '${e7.type}'.
Expected it to be ${n}.`;
}
function VR(e7, t, r, n) {
  let o = [e7];
  for (; o.length > 0; ) {
    let i = o.pop();
    if (i === V2) {
      r(o.pop());
      continue;
    }
    r && o.push(i, V2);
    let l7 = jr(i);
    if (!l7) throw new Do(i);
    if ((t == null ? void 0 : t(i)) !== false) switch (l7) {
      case Mt2:
      case xt2: {
        let u6 = l7 === Mt2 ? i : i.parts;
        for (let c = u6.length, p = c - 1; p >= 0; --p) o.push(u6[p]);
        break;
      }
      case Ne2:
        o.push(i.flatContents, i.breakContents);
        break;
      case He2:
        if (n && i.expandedStates) for (let u6 = i.expandedStates.length, c = u6 - 1; c >= 0; --c) o.push(i.expandedStates[c]);
        else o.push(i.contents);
        break;
      case Ht2:
      case Pt2:
      case zt2:
      case Ct2:
      case Ot2:
        o.push(i.contents);
        break;
      case Or2:
      case Nr2:
      case $t2:
      case Nt2:
      case De2:
      case Ke2:
        break;
      default:
        throw new Do(i);
    }
  }
}
function ll(e7) {
  return Dt2(e7), { type: Pt2, contents: e7 };
}
function xo2(e7, t) {
  return Dt2(t), { type: Ht2, contents: t, n: e7 };
}
function Sm(e7, t = {}) {
  return Dt2(e7), Nc(t.expandedStates, true), { type: He2, id: t.id, contents: e7, break: !!t.shouldBreak, expandedStates: t.expandedStates };
}
function qR(e7) {
  return xo2(Number.NEGATIVE_INFINITY, e7);
}
function WR(e7) {
  return xo2({ type: "root" }, e7);
}
function UR(e7) {
  return xo2(-1, e7);
}
function GR(e7, t) {
  return Sm(e7[0], { ...t, expandedStates: e7 });
}
function Rm(e7) {
  return Nc(e7), { type: xt2, parts: e7 };
}
function XR(e7, t = "", r = {}) {
  return Dt2(e7), t !== "" && Dt2(t), { type: Ne2, breakContents: e7, flatContents: t, groupId: r.groupId };
}
function YR(e7, t) {
  return Dt2(e7), { type: zt2, contents: e7, groupId: t.groupId, negate: t.negate };
}
function kc(e7) {
  return Dt2(e7), { type: Ot2, contents: e7 };
}
function Tm(e7, t) {
  Dt2(e7), Nc(t);
  let r = [];
  for (let n = 0; n < t.length; n++) n !== 0 && r.push(e7), r.push(t[n]);
  return r;
}
function Lm(e7, t, r) {
  Dt2(e7);
  let n = e7;
  if (t > 0) {
    for (let o = 0; o < Math.floor(t / r); ++o) n = ll(n);
    n = xo2(t % r, n), n = xo2(Number.NEGATIVE_INFINITY, n);
  }
  return n;
}
function QR(e7, t) {
  return Dt2(t), e7 ? { type: Ct2, label: e7, contents: t } : t;
}
function Bt2(e7) {
  var t;
  if (!e7) return "";
  if (Array.isArray(e7)) {
    let r = [];
    for (let n of e7) if (Array.isArray(n)) r.push(...Bt2(n));
    else {
      let o = Bt2(n);
      o !== "" && r.push(o);
    }
    return r;
  }
  return e7.type === Ne2 ? { ...e7, breakContents: Bt2(e7.breakContents), flatContents: Bt2(e7.flatContents) } : e7.type === He2 ? { ...e7, contents: Bt2(
    e7.contents
  ), expandedStates: (t = e7.expandedStates) == null ? void 0 : t.map(Bt2) } : e7.type === xt2 ? { type: "fill", parts: e7.parts.map(Bt2) } : e7.contents ? { ...e7, contents: Bt2(e7.contents) } : e7;
}
function eA(e7) {
  let t = /* @__PURE__ */ Object.create(null), r = /* @__PURE__ */ new Set();
  return n(Bt2(e7));
  function n(i, l7, u6) {
    var c, p;
    if (typeof i == "string") return JSON.stringify(i);
    if (Array.isArray(i)) {
      let d = i.map(n).filter(Boolean);
      return d.length === 1 ? d[0] : `[${d.join(", ")}]`;
    }
    if (i.type === De2) {
      let d = ((c = u6 == null ? void 0 : u6[l7 + 1]) == null ? void 0 : c.type) === Ke2;
      return i.literal ? d ? "literalline" : "literallineWithoutBreakParent" : i.hard ? d ? "hardline" : "hardlineWithoutBreakParent" : i.soft ? "softline" : "line";
    }
    if (i.type === Ke2) return ((p = u6 == null ? void 0 : u6[l7 - 1]) == null ? void 0 : p.type) === De2 && u6[l7 - 1].hard ? void 0 : "breakParent";
    if (i.type === $t2) return "trim";
    if (i.type === Pt2) return "indent(" + n(i.contents) + ")";
    if (i.type === Ht2) return i.n === Number.NEGATIVE_INFINITY ? "dedentToRoot(" + n(i.contents) + ")" : i.n < 0 ? "dedent(" + n(i.contents) + ")" : i.n.type === "root" ? "markAsRoot(" + n(i.contents) + ")" : "align(" + JSON.stringify(i.n) + ", " + n(i.contents) + ")";
    if (i.type === Ne2) return "ifBreak(" + n(i.breakContents) + (i.flatContents ? ", " + n(i.flatContents) : "") + (i.groupId ? (i.flatContents ? "" : ', ""') + `, { groupId: ${o(i.groupId)} }` : "") + ")";
    if (i.type === zt2) {
      let d = [];
      i.negate && d.push("negate: true"), i.groupId && d.push(`groupId: ${o(i.groupId)}`);
      let h7 = d.length > 0 ? `, { ${d.join(", ")} }` : "";
      return `indentIfBreak(${n(i.contents)}${h7})`;
    }
    if (i.type === He2) {
      let d = [];
      i.break && i.break !== "propagated" && d.push("shouldBreak: true"), i.id && d.push(`id: ${o(i.id)}`);
      let h7 = d.length > 0 ? `, { ${d.join(", ")} }` : "";
      return i.expandedStates ? `conditionalGroup([${i.expandedStates.map((f) => n(f)).join(",")}]${h7})` : `group(${n(i.contents)}${h7})`;
    }
    if (i.type === xt2) return `fill([${i.parts.map((d) => n(d)).join(", ")}])`;
    if (i.type === Ot2) return "lineSuffix(" + n(i.contents) + ")";
    if (i.type === Nt2) return "lineSuffixBoundary";
    if (i.type === Ct2) return `label(${JSON.stringify(i.label)}, ${n(i.contents)})`;
    throw new Error("Unknown doc type " + i.type);
  }
  function o(i) {
    if (typeof i != "symbol") return JSON.stringify(String(i));
    if (i in t) return t[i];
    let l7 = i.description || "symbol";
    for (let u6 = 0; ; u6++) {
      let c = l7 + (u6 > 0 ? ` #${u6}` : "");
      if (!r.has(c)) return r.add(c), t[i] = `Symbol.for(${JSON.stringify(c)})`;
    }
  }
}
function nA(e7) {
  return e7 === 12288 || e7 >= 65281 && e7 <= 65376 || e7 >= 65504 && e7 <= 65510;
}
function oA(e7) {
  return e7 >= 4352 && e7 <= 4447 || e7 === 8986 || e7 === 8987 || e7 === 9001 || e7 === 9002 || e7 >= 9193 && e7 <= 9196 || e7 === 9200 || e7 === 9203 || e7 === 9725 || e7 === 9726 || e7 === 9748 || e7 === 9749 || e7 >= 9800 && e7 <= 9811 || e7 === 9855 || e7 === 9875 || e7 === 9889 || e7 === 9898 || e7 === 9899 || e7 === 9917 || e7 === 9918 || e7 === 9924 || e7 === 9925 || e7 === 9934 || e7 === 9940 || e7 === 9962 || e7 === 9970 || e7 === 9971 || e7 === 9973 || e7 === 9978 || e7 === 9981 || e7 === 9989 || e7 === 9994 || e7 === 9995 || e7 === 10024 || e7 === 10060 || e7 === 10062 || e7 >= 10067 && e7 <= 10069 || e7 === 10071 || e7 >= 10133 && e7 <= 10135 || e7 === 10160 || e7 === 10175 || e7 === 11035 || e7 === 11036 || e7 === 11088 || e7 === 11093 || e7 >= 11904 && e7 <= 11929 || e7 >= 11931 && e7 <= 12019 || e7 >= 12032 && e7 <= 12245 || e7 >= 12272 && e7 <= 12287 || e7 >= 12289 && e7 <= 12350 || e7 >= 12353 && e7 <= 12438 || e7 >= 12441 && e7 <= 12543 || e7 >= 12549 && e7 <= 12591 || e7 >= 12593 && e7 <= 12686 || e7 >= 12688 && e7 <= 12771 || e7 >= 12783 && e7 <= 12830 || e7 >= 12832 && e7 <= 12871 || e7 >= 12880 && e7 <= 19903 || e7 >= 19968 && e7 <= 42124 || e7 >= 42128 && e7 <= 42182 || e7 >= 43360 && e7 <= 43388 || e7 >= 44032 && e7 <= 55203 || e7 >= 63744 && e7 <= 64255 || e7 >= 65040 && e7 <= 65049 || e7 >= 65072 && e7 <= 65106 || e7 >= 65108 && e7 <= 65126 || e7 >= 65128 && e7 <= 65131 || e7 >= 94176 && e7 <= 94180 || e7 === 94192 || e7 === 94193 || e7 >= 94208 && e7 <= 100343 || e7 >= 100352 && e7 <= 101589 || e7 >= 101632 && e7 <= 101640 || e7 >= 110576 && e7 <= 110579 || e7 >= 110581 && e7 <= 110587 || e7 === 110589 || e7 === 110590 || e7 >= 110592 && e7 <= 110882 || e7 === 110898 || e7 >= 110928 && e7 <= 110930 || e7 === 110933 || e7 >= 110948 && e7 <= 110951 || e7 >= 110960 && e7 <= 111355 || e7 === 126980 || e7 === 127183 || e7 === 127374 || e7 >= 127377 && e7 <= 127386 || e7 >= 127488 && e7 <= 127490 || e7 >= 127504 && e7 <= 127547 || e7 >= 127552 && e7 <= 127560 || e7 === 127568 || e7 === 127569 || e7 >= 127584 && e7 <= 127589 || e7 >= 127744 && e7 <= 127776 || e7 >= 127789 && e7 <= 127797 || e7 >= 127799 && e7 <= 127868 || e7 >= 127870 && e7 <= 127891 || e7 >= 127904 && e7 <= 127946 || e7 >= 127951 && e7 <= 127955 || e7 >= 127968 && e7 <= 127984 || e7 === 127988 || e7 >= 127992 && e7 <= 128062 || e7 === 128064 || e7 >= 128066 && e7 <= 128252 || e7 >= 128255 && e7 <= 128317 || e7 >= 128331 && e7 <= 128334 || e7 >= 128336 && e7 <= 128359 || e7 === 128378 || e7 === 128405 || e7 === 128406 || e7 === 128420 || e7 >= 128507 && e7 <= 128591 || e7 >= 128640 && e7 <= 128709 || e7 === 128716 || e7 >= 128720 && e7 <= 128722 || e7 >= 128725 && e7 <= 128727 || e7 >= 128732 && e7 <= 128735 || e7 === 128747 || e7 === 128748 || e7 >= 128756 && e7 <= 128764 || e7 >= 128992 && e7 <= 129003 || e7 === 129008 || e7 >= 129292 && e7 <= 129338 || e7 >= 129340 && e7 <= 129349 || e7 >= 129351 && e7 <= 129535 || e7 >= 129648 && e7 <= 129660 || e7 >= 129664 && e7 <= 129672 || e7 >= 129680 && e7 <= 129725 || e7 >= 129727 && e7 <= 129733 || e7 >= 129742 && e7 <= 129755 || e7 >= 129760 && e7 <= 129768 || e7 >= 129776 && e7 <= 129784 || e7 >= 131072 && e7 <= 196605 || e7 >= 196608 && e7 <= 262141;
}
function lA(e7) {
  if (!e7) return 0;
  if (!iA.test(e7)) return e7.length;
  e7 = e7.replace(rA(), "  ");
  let t = 0;
  for (let r of e7) {
    let n = r.codePointAt(0);
    n <= 31 || n >= 127 && n <= 159 || n >= 768 && n <= 879 || (t += aA(n) ? 1 : 2);
  }
  return t;
}
function fl(e7, t) {
  if (typeof e7 == "string") return t(e7);
  let r = /* @__PURE__ */ new Map();
  return n(e7);
  function n(i) {
    if (r.has(i)) return r.get(i);
    let l7 = o(i);
    return r.set(i, l7), l7;
  }
  function o(i) {
    switch (jr(i)) {
      case Mt2:
        return t(i.map(n));
      case xt2:
        return t({ ...i, parts: i.parts.map(n) });
      case Ne2:
        return t({ ...i, breakContents: n(i.breakContents), flatContents: n(i.flatContents) });
      case He2: {
        let { expandedStates: l7, contents: u6 } = i;
        return l7 ? (l7 = l7.map(n), u6 = l7[0]) : u6 = n(u6), t({ ...i, contents: u6, expandedStates: l7 });
      }
      case Ht2:
      case Pt2:
      case zt2:
      case Ct2:
      case Ot2:
        return t({ ...i, contents: n(i.contents) });
      case Or2:
      case Nr2:
      case $t2:
      case Nt2:
      case De2:
      case Ke2:
        return t(i);
      default:
        throw new Do(i);
    }
  }
}
function qc(e7, t, r) {
  let n = r, o = false;
  function i(l7) {
    if (o) return false;
    let u6 = t(l7);
    u6 !== void 0 && (o = true, n = u6);
  }
  return a2(i, "u"), Oc(e7, i), n;
}
function sA(e7) {
  if (e7.type === He2 && e7.break || e7.type === De2 && e7.hard || e7.type === Ke2) return true;
}
function uA(e7) {
  return qc(e7, sA, false);
}
function q2(e7) {
  if (e7.length > 0) {
    let t = he2(false, e7, -1);
    !t.expandedStates && !t.break && (t.break = "propagated");
  }
  return null;
}
function cA(e7) {
  let t = /* @__PURE__ */ new Set(), r = [];
  function n(i) {
    if (i.type === Ke2 && q2(r), i.type === He2) {
      if (r.push(i), t.has(i)) return false;
      t.add(i);
    }
  }
  a2(n, "n");
  function o(i) {
    i.type === He2 && r.pop().break && q2(r);
  }
  a2(o, "o"), Oc(e7, n, o, true);
}
function pA(e7) {
  return e7.type === De2 && !e7.hard ? e7.soft ? "" : " " : e7.type === Ne2 ? e7.flatContents : e7;
}
function dA(e7) {
  return fl(e7, pA);
}
function W2(e7) {
  for (e7 = [...e7]; e7.length >= 2 && he2(false, e7, -2).type === De2 && he2(false, e7, -1).type === Ke2; ) e7.length -= 2;
  if (e7.length > 0) {
    let t = Aa2(he2(false, e7, -1));
    e7[e7.length - 1] = t;
  }
  return e7;
}
function Aa2(e7) {
  switch (jr(e7)) {
    case Pt2:
    case zt2:
    case He2:
    case Ot2:
    case Ct2: {
      let t = Aa2(e7.contents);
      return { ...e7, contents: t };
    }
    case Ne2:
      return { ...e7, breakContents: Aa2(e7.breakContents), flatContents: Aa2(e7.flatContents) };
    case xt2:
      return { ...e7, parts: W2(e7.parts) };
    case Mt2:
      return W2(e7);
    case Or2:
      return e7.replace(/[\n\r]*$/u, "");
    case Ht2:
    case Nr2:
    case $t2:
    case Nt2:
    case De2:
    case Ke2:
      break;
    default:
      throw new Do(e7);
  }
  return e7;
}
function Im(e7) {
  return Aa2(hA(e7));
}
function fA(e7) {
  switch (jr(e7)) {
    case xt2:
      if (e7.parts.every((t) => t === "")) return "";
      break;
    case He2:
      if (!e7.contents && !e7.id && !e7.break && !e7.expandedStates) return "";
      if (e7.contents.type === He2 && e7.contents.id === e7.id && e7.contents.break === e7.break && e7.contents.expandedStates === e7.expandedStates)
        return e7.contents;
      break;
    case Ht2:
    case Pt2:
    case zt2:
    case Ot2:
      if (!e7.contents) return "";
      break;
    case Ne2:
      if (!e7.flatContents && !e7.breakContents) return "";
      break;
    case Mt2: {
      let t = [];
      for (let r of e7) {
        if (!r) continue;
        let [n, ...o] = Array.isArray(r) ? r : [r];
        typeof n == "string" && typeof he2(false, t, -1) == "string" ? t[t.length - 1] += n : t.push(n), t.push(...o);
      }
      return t.length === 0 ? "" : t.length === 1 ? t[0] : t;
    }
    case Or2:
    case Nr2:
    case $t2:
    case Nt2:
    case De2:
    case Ct2:
    case Ke2:
      break;
    default:
      throw new Do(e7);
  }
  return e7;
}
function hA(e7) {
  return fl(e7, (t) => fA(t));
}
function mA(e7, t = km) {
  return fl(e7, (r) => typeof r == "string" ? Tm(t, r.split(`
`)) : r);
}
function gA(e7) {
  if (e7.type === De2) return true;
}
function vA(e7) {
  return qc(e7, gA, false);
}
function Bm(e7, t) {
  return e7.type === Ct2 ? { ...e7, contents: t(e7.contents) } : t(e7);
}
function Mm() {
  return { value: "", length: 0, queue: [] };
}
function wA(e7, t) {
  return Lc(e7, { type: "indent" }, t);
}
function bA(e7, t, r) {
  return t === Number.NEGATIVE_INFINITY ? e7.root || Mm() : t < 0 ? Lc(e7, { type: "dedent" }, r) : t ? t.type === "root" ? { ...e7, root: e7 } : Lc(e7, { type: typeof t == "string" ? "stringAlign" : "numberAlign", n: t }, r) : e7;
}
function Lc(e7, t, r) {
  let n = t.type === "dedent" ? e7.queue.slice(0, -1) : [...e7.queue, t], o = "", i = 0, l7 = 0, u6 = 0;
  for (let b of n) switch (b.type) {
    case "indent":
      d(), r.useTabs ? c(1) : p(r.tabWidth);
      break;
    case "stringAlign":
      d(), o += b.n, i += b.n.length;
      break;
    case "numberAlign":
      l7 += 1, u6 += b.n;
      break;
    default:
      throw new Error(`Unexpected type '${b.type}'`);
  }
  return f(), { ...e7, value: o, length: i, queue: n };
  function c(b) {
    o += "	".repeat(b), i += r.tabWidth * b;
  }
  function p(b) {
    o += " ".repeat(b), i += b;
  }
  function d() {
    r.useTabs ? h7() : f();
  }
  function h7() {
    l7 > 0 && c(l7), v7();
  }
  function f() {
    u6 > 0 && p(u6), v7();
  }
  function v7() {
    l7 = 0, u6 = 0;
  }
}
function Ic(e7) {
  let t = 0, r = 0, n = e7.length;
  e: for (; n--; ) {
    let o = e7[n];
    if (o === Fa2) {
      r++;
      continue;
    }
    for (let i = o.length - 1; i >= 0; i--) {
      let l7 = o[i];
      if (l7 === " " || l7 === "	") t++;
      else {
        e7[n] = o.slice(0, i + 1);
        break e;
      }
    }
  }
  if (t > 0 || r > 0) for (e7.length = n + 1; r-- > 0; ) e7.push(Fa2);
  return t;
}
function rl(e7, t, r, n, o, i) {
  if (r === Number.POSITIVE_INFINITY) return true;
  let l7 = t.length, u6 = [e7], c = [];
  for (; r >= 0; ) {
    if (u6.length === 0) {
      if (l7 === 0) return true;
      u6.push(t[--l7]);
      continue;
    }
    let { mode: p, doc: d } = u6.pop(), h7 = jr(d);
    switch (h7) {
      case Or2:
        c.push(d), r -= Vc(d);
        break;
      case Mt2:
      case xt2: {
        let f = h7 === Mt2 ? d : d.parts;
        for (let v7 = f.length - 1; v7 >= 0; v7--) u6.push({ mode: p, doc: f[v7] });
        break;
      }
      case Pt2:
      case Ht2:
      case zt2:
      case Ct2:
        u6.push({ mode: p, doc: d.contents });
        break;
      case $t2:
        r += Ic(c);
        break;
      case He2: {
        if (i && d.break) return false;
        let f = d.break ? Pe : p, v7 = d.expandedStates && f === Pe ? he2(false, d.expandedStates, -1) : d.contents;
        u6.push({ mode: f, doc: v7 });
        break;
      }
      case Ne2: {
        let f = (d.groupId ? o[d.groupId] || yt2 : p) === Pe ? d.breakContents : d.flatContents;
        f && u6.push({ mode: p, doc: f });
        break;
      }
      case De2:
        if (p === Pe || d.hard) return true;
        d.soft || (c.push(" "), r--);
        break;
      case Ot2:
        n = true;
        break;
      case Nt2:
        if (n) return false;
        break;
    }
  }
  return false;
}
function hl(e7, t) {
  let r = {}, n = t.printWidth, o = zc(t.endOfLine), i = 0, l7 = [{ ind: Mm(), mode: Pe, doc: e7 }], u6 = [], c = false, p = [], d = 0;
  for (cA(e7); l7.length > 0; ) {
    let { ind: f, mode: v7, doc: b } = l7.pop();
    switch (jr(b)) {
      case Or2: {
        let m = o !== `
` ? pl(false, b, `
`, o) : b;
        u6.push(m), l7.length > 0 && (i += Vc(m));
        break;
      }
      case Mt2:
        for (let m = b.length - 1; m >= 0; m--) l7.push({ ind: f, mode: v7, doc: b[m] });
        break;
      case Nr2:
        if (d >= 2) throw new Error("There are too many 'cursor' in doc.");
        u6.push(Fa2), d++;
        break;
      case Pt2:
        l7.push({ ind: wA(f, t), mode: v7, doc: b.contents });
        break;
      case Ht2:
        l7.push({ ind: bA(f, b.n, t), mode: v7, doc: b.contents });
        break;
      case $t2:
        i -= Ic(u6);
        break;
      case He2:
        switch (v7) {
          case yt2:
            if (!c) {
              l7.push({ ind: f, mode: b.break ? Pe : yt2, doc: b.contents });
              break;
            }
          case Pe: {
            c = false;
            let m = { ind: f, mode: yt2, doc: b.contents }, g7 = n - i, y = p.length > 0;
            if (!b.break && rl(m, l7, g7, y, r)) l7.push(m);
            else if (b.expandedStates) {
              let w5 = he2(false, b.expandedStates, -1);
              if (b.break) {
                l7.push({ ind: f, mode: Pe, doc: w5 });
                break;
              } else for (let D7 = 1; D7 < b.expandedStates.length + 1; D7++) if (D7 >= b.expandedStates.length) {
                l7.push({ ind: f, mode: Pe, doc: w5 });
                break;
              } else {
                let x7 = b.expandedStates[D7], C7 = { ind: f, mode: yt2, doc: x7 };
                if (rl(C7, l7, g7, y, r)) {
                  l7.push(C7);
                  break;
                }
              }
            } else l7.push({ ind: f, mode: Pe, doc: b.contents });
            break;
          }
        }
        b.id && (r[b.id] = he2(false, l7, -1).mode);
        break;
      case xt2: {
        let m = n - i, { parts: g7 } = b;
        if (g7.length === 0) break;
        let [y, w5] = g7, D7 = { ind: f, mode: yt2, doc: y }, x7 = { ind: f, mode: Pe, doc: y }, C7 = rl(D7, [], m, p.length > 0, r, true);
        if (g7.length === 1) {
          C7 ? l7.push(D7) : l7.push(x7);
          break;
        }
        let E7 = { ind: f, mode: yt2, doc: w5 }, S4 = { ind: f, mode: Pe, doc: w5 };
        if (g7.length === 2) {
          C7 ? l7.push(E7, D7) : l7.push(S4, x7);
          break;
        }
        g7.splice(0, 2);
        let R = { ind: f, mode: v7, doc: Rm(g7) }, A = g7[0];
        rl({ ind: f, mode: yt2, doc: [y, w5, A] }, [], m, p.length > 0, r, true) ? l7.push(R, E7, D7) : C7 ? l7.push(R, S4, D7) : l7.push(R, S4, x7);
        break;
      }
      case Ne2:
      case zt2: {
        let m = b.groupId ? r[b.groupId] : v7;
        if (m === Pe) {
          let g7 = b.type === Ne2 ? b.breakContents : b.negate ? b.contents : ll(b.contents);
          g7 && l7.push({ ind: f, mode: v7, doc: g7 });
        }
        if (m === yt2) {
          let g7 = b.type === Ne2 ? b.flatContents : b.negate ? ll(b.contents) : b.contents;
          g7 && l7.push({ ind: f, mode: v7, doc: g7 });
        }
        break;
      }
      case Ot2:
        p.push({ ind: f, mode: v7, doc: b.contents });
        break;
      case Nt2:
        p.length > 0 && l7.push({ ind: f, mode: v7, doc: jc });
        break;
      case De2:
        switch (v7) {
          case yt2:
            if (b.hard) c = true;
            else {
              b.soft || (u6.push(" "), i += 1);
              break;
            }
          case Pe:
            if (p.length > 0) {
              l7.push({ ind: f, mode: v7, doc: b }, ...p.reverse()), p.length = 0;
              break;
            }
            b.literal ? f.root ? (u6.push(o, f.root.value), i = f.root.length) : (u6.push(o), i = 0) : (i -= Ic(u6), u6.push(o + f.value), i = f.length);
            break;
        }
        break;
      case Ct2:
        l7.push({ ind: f, mode: v7, doc: b.contents });
        break;
      case Ke2:
        break;
      default:
        throw new Do(b);
    }
    l7.length === 0 && p.length > 0 && (l7.push(...p.reverse()), p.length = 0);
  }
  let h7 = u6.indexOf(Fa2);
  if (h7 !== -1) {
    let f = u6.indexOf(Fa2, h7 + 1), v7 = u6.slice(0, h7).join(""), b = u6.slice(h7 + 1, f).join(""), m = u6.slice(f + 1).join("");
    return { formatted: v7 + b + m, cursorNodeStart: v7.length, cursorNodeText: b };
  }
  return { formatted: u6.join("") };
}
function yA(e7, t, r = 0) {
  let n = 0;
  for (let o = r; o < e7.length; ++o) e7[o] === "	" ? n = n + t - n % t : n++;
  return n;
}
function CA(e7) {
  return e7 !== null && typeof e7 == "object";
}
function* Pm(e7, t) {
  let { getVisitorKeys: r, filter: n = a2(() => true, "n") } = t, o = a2((i) => EA(i) && n(i), "o");
  for (let i of r(e7)) {
    let l7 = e7[i];
    if (Array.isArray(l7)) for (let u6 of l7) o(u6) && (yield u6);
    else o(l7) && (yield l7);
  }
}
function* SA(e7, t) {
  let r = [e7];
  for (let n = 0; n < r.length; n++) {
    let o = r[n];
    for (let i of Pm(o, t)) yield i, r.push(i);
  }
}
function Ta2(e7) {
  return (t, r, n) => {
    let o = !!(n != null && n.backwards);
    if (r === false) return false;
    let { length: i } = t, l7 = r;
    for (; l7 >= 0 && l7 < i; ) {
      let u6 = t.charAt(l7);
      if (e7 instanceof RegExp) {
        if (!e7.test(u6)) return l7;
      } else if (!e7.includes(u6)) return l7;
      o ? l7-- : l7++;
    }
    return l7 === -1 || l7 === i ? l7 : false;
  };
}
function AA(e7, t, r) {
  let n = !!(r != null && r.backwards);
  if (t === false) return false;
  let o = e7.charAt(t);
  if (n) {
    if (e7.charAt(t - 1) === "\r" && o === `
`) return t - 2;
    if (o === `
` || o === "\r" || o === "\u2028" || o === "\u2029") return t - 1;
  } else {
    if (o === "\r" && e7.charAt(t + 1) === `
`) return t + 2;
    if (o === `
` || o === "\r" || o === "\u2028" || o === "\u2029") return t + 1;
  }
  return t;
}
function FA(e7, t, r = {}) {
  let n = ir2(e7, r.backwards ? t - 1 : t, r), o = zr2(e7, n, r);
  return n !== o;
}
function kA(e7) {
  return Array.isArray(e7) && e7.length > 0;
}
function IA(e7) {
  return e7 ? (t) => e7(t, zm) : LA;
}
function BA(e7) {
  let t = e7.type || e7.kind || "(unknown type)", r = String(e7.name || e7.id && (typeof e7.id == "object" ? e7.id.name : e7.id) || e7.key && (typeof e7.key == "object" ? e7.key.name : e7.key) || e7.value && (typeof e7.value == "object" ? "" : String(e7.value)) || e7.operator || "");
  return r.length > 20 && (r = r.slice(0, 19) + "…"), t + (r ? " " + r : "");
}
function Uc(e7, t) {
  (e7.comments ?? (e7.comments = [])).push(t), t.printed = false, t.nodeDescription = BA(e7);
}
function ro2(e7, t) {
  t.leading = true, t.trailing = false, Uc(e7, t);
}
function Pr2(e7, t, r) {
  t.leading = false, t.trailing = false, r && (t.marker = r), Uc(e7, t);
}
function no2(e7, t) {
  t.leading = false, t.trailing = true, Uc(e7, t);
}
function Gc(e7, t) {
  if (xc.has(e7)) return xc.get(e7);
  let { printer: { getCommentChildNodes: r, canAttachComment: n, getVisitorKeys: o }, locStart: i, locEnd: l7 } = t;
  if (!n) return [];
  let u6 = ((r == null ? void 0 : r(e7, t)) ?? [...Pm(e7, { getVisitorKeys: ml(o) })]).flatMap((c) => n(c) ? [c] : Gc(c, t));
  return u6.sort((c, p) => i(c) - i(p) || l7(c) - l7(p)), xc.set(e7, u6), u6;
}
function Om(e7, t, r, n) {
  let { locStart: o, locEnd: i } = r, l7 = o(t), u6 = i(t), c = Gc(e7, r), p, d, h7 = 0, f = c.length;
  for (; h7 < f; ) {
    let v7 = h7 + f >> 1, b = c[v7], m = o(b), g7 = i(b);
    if (m <= l7 && u6 <= g7) return Om(b, t, r, b);
    if (g7 <= l7) {
      p = b, h7 = v7 + 1;
      continue;
    }
    if (u6 <= m) {
      d = b, f = v7;
      continue;
    }
    throw new Error("Comment location overlaps with node location");
  }
  if ((n == null ? void 0 : n.type) === "TemplateLiteral") {
    let { quasis: v7 } = n, b = Ec(v7, t, r);
    p && Ec(v7, p, r) !== b && (p = null), d && Ec(v7, d, r) !== b && (d = null);
  }
  return { enclosingNode: n, precedingNode: p, followingNode: d };
}
function MA(e7, t) {
  let { comments: r } = e7;
  if (delete e7.comments, !TA(r) || !t.printer.canAttachComment) return;
  let n = [], { locStart: o, locEnd: i, printer: { experimentalFeatures: { avoidAstMutation: l7 = false } = {}, handleComments: u6 = {} }, originalText: c } = t, { ownLine: p = Cc, endOfLine: d = Cc, remaining: h7 = Cc } = u6, f = r.map((v7, b) => ({
    ...Om(e7, v7, t),
    comment: v7,
    text: c,
    options: t,
    ast: e7,
    isLastComment: r.length - 1 === b
  }));
  for (let [v7, b] of f.entries()) {
    let { comment: m, precedingNode: g7, enclosingNode: y, followingNode: w5, text: D7, options: x7, ast: C7, isLastComment: E7 } = b;
    if (x7.parser === "json" || x7.parser === "json5" || x7.parser === "jsonc" || x7.parser === "__js_expression" || x7.parser === "__ts_expression" || x7.parser === "__vue_expression" || x7.parser === "__vue_ts_expression") {
      if (o(m) - o(C7) <= 0) {
        ro2(C7, m);
        continue;
      }
      if (i(m) - i(C7) >= 0) {
        no2(C7, m);
        continue;
      }
    }
    let S4;
    if (l7 ? S4 = [b] : (m.enclosingNode = y, m.precedingNode = g7, m.followingNode = w5, S4 = [m, D7, x7, C7, E7]), _A(D7, x7, f, v7)) m.placement = "ownLine", p(...S4) || (w5 ? ro2(w5, m) : g7 ? no2(g7, m) : Pr2(y || C7, m));
    else if (PA(D7, x7, f, v7)) m.placement = "endOfLine", d(...S4) || (g7 ? no2(g7, m) : w5 ? ro2(w5, m) : Pr2(y || C7, m));
    else if (m.placement = "remaining", !h7(...S4)) if (g7 && w5) {
      let R = n.length;
      R > 0 && n[R - 1].followingNode !== w5 && U2(n, x7), n.push(b);
    } else g7 ? no2(g7, m) : w5 ? ro2(w5, m) : Pr2(y || C7, m);
  }
  if (U2(n, t), !l7) for (let v7 of r) delete v7.precedingNode, delete v7.enclosingNode, delete v7.followingNode;
}
function _A(e7, t, r, n) {
  let { comment: o, precedingNode: i } = r[n], { locStart: l7, locEnd: u6 } = t, c = l7(o);
  if (i) for (let p = n - 1; p >= 0; p--) {
    let { comment: d, precedingNode: h7 } = r[p];
    if (h7 !== i || !Nm(e7.slice(u6(d), c))) break;
    c = l7(d);
  }
  return ar(e7, c, { backwards: true });
}
function PA(e7, t, r, n) {
  let { comment: o, followingNode: i } = r[n], { locStart: l7, locEnd: u6 } = t, c = u6(o);
  if (i) for (let p = n + 1; p < r.length; p++) {
    let { comment: d, followingNode: h7 } = r[p];
    if (h7 !== i || !Nm(e7.slice(c, l7(d)))) break;
    c = u6(d);
  }
  return ar(e7, c);
}
function U2(e7, t) {
  var r, n;
  let o = e7.length;
  if (o === 0) return;
  let { precedingNode: i, followingNode: l7 } = e7[0], u6 = t.locStart(l7), c;
  for (c = o; c > 0; --c) {
    let { comment: p, precedingNode: d, followingNode: h7 } = e7[c - 1];
    Mc.strictEqual(d, i), Mc.strictEqual(h7, l7);
    let f = t.originalText.slice(t.locEnd(p), u6);
    if (((n = (r = t.printer).isGap) == null ? void 0 : n.call(r, f, t)) ?? /^[\s(]*$/u.test(f)) u6 = t.locStart(p);
    else break;
  }
  for (let [p, { comment: d }] of e7.entries()) p < c ? no2(i, d) : ro2(l7, d);
  for (let p of [i, l7]) p.comments && p.comments.length > 1 && p.comments.sort((d, h7) => t.locStart(d) - t.locStart(h7));
  e7.length = 0;
}
function Ec(e7, t, r) {
  let n = r.locStart(t) - 1;
  for (let o = 1; o < e7.length; ++o) if (n < r.locStart(e7[o])) return o - 1;
  return 0;
}
function HA(e7, t) {
  let r = t - 1;
  r = ir2(e7, r, { backwards: true }), r = zr2(e7, r, { backwards: true }), r = ir2(e7, r, { backwards: true });
  let n = zr2(e7, r, { backwards: true });
  return r !== n;
}
function jm(e7, t) {
  let r = e7.node;
  return r.printed = true, t.printer.printComment(e7, t);
}
function $A(e7, t) {
  var r;
  let n = e7.node, o = [jm(e7, t)], { printer: i, originalText: l7, locStart: u6, locEnd: c } = t;
  if ((r = i.isBlockComment) != null && r.call(i, n)) {
    let d = ar(l7, c(n)) ? ar(l7, u6(n), { backwards: true }) ? $r2 : Fm : " ";
    o.push(d);
  } else o.push($r2);
  let p = zr2(l7, ir2(l7, c(n)));
  return p !== false && ar(l7, p) && o.push($r2), o;
}
function zA(e7, t, r) {
  var n;
  let o = e7.node, i = jm(e7, t), { printer: l7, originalText: u6, locStart: c } = t, p = (n = l7.isBlockComment) == null ? void 0 : n.call(l7, o);
  if (r != null && r.hasLineSuffix && !(r != null && r.isBlock) || ar(u6, c(o), { backwards: true })) {
    let d = Xc(u6, c(o));
    return { doc: kc([$r2, d ? $r2 : "", i]), isBlock: p, hasLineSuffix: true };
  }
  return !p || r != null && r.hasLineSuffix ? { doc: [kc([" ", i]), dl], isBlock: p, hasLineSuffix: true } : { doc: [" ", i], isBlock: p, hasLineSuffix: false };
}
function OA(e7, t) {
  let r = e7.node;
  if (!r) return {};
  let n = t[Symbol.for("printedComments")];
  if ((r.comments || []).filter((u6) => !n.has(u6)).length === 0) return { leading: "", trailing: "" };
  let o = [], i = [], l7;
  return e7.each(() => {
    let u6 = e7.node;
    if (n != null && n.has(u6)) return;
    let { leading: c, trailing: p } = u6;
    c ? o.push($A(e7, t)) : p && (l7 = zA(e7, t, l7), i.push(l7.doc));
  }, "comments"), { leading: o, trailing: i };
}
function NA(e7, t, r) {
  let { leading: n, trailing: o } = OA(e7, r);
  return !n && !o ? t : Bm(t, (i) => [n, i, o]);
}
function jA(e7) {
  let { [Symbol.for("comments")]: t, [Symbol.for("printedComments")]: r } = e7;
  for (let n of t) {
    if (!n.printed && !r.has(n)) throw new Error('Comment "' + n.value.trim() + '" was not printed. Please report this error!');
    delete n.printed;
  }
}
function VA(e7) {
  return () => {
  };
}
function qm({ plugins: e7 = [], showDeprecated: t = false } = {}) {
  let r = e7.flatMap((o) => o.languages ?? []), n = [];
  for (let o of GA(Object.assign({}, ...e7.map(({ options: i }) => i), WA))) !t && o.deprecated || (Array.isArray(o.choices) && (t || (o.choices = o.choices.filter((i) => !i.deprecated)), o.name === "parser" && (o.choices = [...o.choices, ...UA(o.choices, r, e7)])), o.pluginDefaults = Object.fromEntries(e7.filter((i) => {
    var l7;
    return ((l7 = i.defaultOptions) == null ? void 0 : l7[o.name]) !== void 0;
  }).map((i) => [i.name, i.defaultOptions[o.name]])), n.push(o));
  return { languages: r, options: n };
}
function* UA(e7, t, r) {
  let n = new Set(e7.map((o) => o.value));
  for (let o of t) if (o.parsers) {
    for (let i of o.parsers) if (!n.has(i)) {
      n.add(i);
      let l7 = r.find((c) => c.parsers && Object.prototype.hasOwnProperty.call(c.parsers, i)), u6 = o.name;
      l7 != null && l7.name && (u6 += ` (plugin: ${l7.name})`), yield { value: i, description: u6 };
    }
  }
}
function GA(e7) {
  let t = [];
  for (let [r, n] of Object.entries(e7)) {
    let o = { name: r, ...n };
    Array.isArray(o.default) && (o.default = he2(false, o.default, -1).value), t.push(o);
  }
  return t;
}
function X22(e7, t) {
  if (!t) return;
  let r = XA(t).toLowerCase();
  return e7.find(({ filenames: n }) => n == null ? void 0 : n.some((o) => o.toLowerCase() === r)) ?? e7.find(({ extensions: n }) => n == null ? void 0 : n.some((o) => r.endsWith(o)));
}
function YA(e7, t) {
  if (t) return e7.find(({ name: r }) => r.toLowerCase() === t) ?? e7.find(({ aliases: r }) => r == null ? void 0 : r.includes(t)) ?? e7.find(({ extensions: r }) => r == null ? void 0 : r.includes(`.${t}`));
}
function KA(e7, t) {
  let r = e7.plugins.flatMap((o) => o.languages ?? []), n = YA(r, t.language) ?? X22(r, t.physicalFile) ?? X22(r, t.file) ?? (t.physicalFile, void 0);
  return n == null ? void 0 : n.parsers[0];
}
function Z2(e7, t, r, n) {
  return [`Invalid ${ao2.default.red(n.key(e7))} value.`, `Expected ${ao2.default.blue(r)},`, `but received ${t === Wm ? ao2.default.gray("nothing") : ao2.default.red(n.value(t))}.`].join(" ");
}
function Um({ text: e7, list: t }, r) {
  let n = [];
  return e7 && n.push(`- ${ao2.default.blue(e7)}`), t && n.push([`- ${ao2.default.blue(t.title)}:`].concat(t.values.map((o) => Um(o, r - K2.length).replace(/^|\n/g, `$&${K2}`))).join(`
`)), Gm(n, r);
}
function Gm(e7, t) {
  if (e7.length === 1) return e7[0];
  let [r, n] = e7, [o, i] = e7.map((l7) => l7.split(`
`, 1)[0].length);
  return o > t && o > i ? n : r;
}
function eF(e7, t) {
  if (e7 === t) return 0;
  let r = e7;
  e7.length > t.length && (e7 = t, t = r);
  let n = e7.length, o = t.length;
  for (; n > 0 && e7.charCodeAt(~-n) === t.charCodeAt(~-o); ) n--, o--;
  let i = 0;
  for (; i < n && e7.charCodeAt(i) === t.charCodeAt(i); ) i++;
  if (n -= i, o -= i, n === 0) return o;
  let l7, u6, c, p, d = 0, h7 = 0;
  for (; d < n; ) Q22[d] = e7.charCodeAt(i + d), Sc[d] = ++d;
  for (; h7 < o; ) for (l7 = t.charCodeAt(i + h7), c = h7++, u6 = h7, d = 0; d < n; d++) p = l7 === Q22[d] ? c : c + 1, c = Sc[d], u6 = Sc[d] = c > u6 ? p > u6 ? u6 + 1 : p : p > c ? c + 1 : p;
  return u6;
}
function rF(e7, t) {
  let r = new e7(t), n = Object.create(r);
  for (let o of tF) o in t && (n[o] = nF(t[o], r, lr2.prototype[o].length));
  return n;
}
function nF(e7, t, r) {
  return typeof e7 == "function" ? (...n) => e7(...n.slice(0, r - 1), t, ...n.slice(r - 1)) : () => e7;
}
function em({ from: e7, to: t }) {
  return { from: [e7], to: t };
}
function sF(e7, t) {
  let r = /* @__PURE__ */ Object.create(null);
  for (let n of e7) {
    let o = n[t];
    if (r[o]) throw new Error(`Duplicate ${t} ${JSON.stringify(o)}`);
    r[o] = n;
  }
  return r;
}
function uF(e7, t) {
  let r = /* @__PURE__ */ new Map();
  for (let n of e7) {
    let o = n[t];
    if (r.has(o)) throw new Error(`Duplicate ${t} ${JSON.stringify(o)}`);
    r.set(o, n);
  }
  return r;
}
function cF() {
  let e7 = /* @__PURE__ */ Object.create(null);
  return (t) => {
    let r = JSON.stringify(t);
    return e7[r] ? true : (e7[r] = true, false);
  };
}
function pF(e7, t) {
  let r = [], n = [];
  for (let o of e7) t(o) ? r.push(o) : n.push(o);
  return [r, n];
}
function dF(e7) {
  return e7 === Math.floor(e7);
}
function fF(e7, t) {
  if (e7 === t) return 0;
  let r = typeof e7, n = typeof t, o = ["undefined", "object", "boolean", "number", "string"];
  return r !== n ? o.indexOf(r) - o.indexOf(n) : r !== "string" ? Number(e7) - Number(t) : e7.localeCompare(t);
}
function hF(e7) {
  return (...t) => {
    let r = e7(...t);
    return typeof r == "string" ? new Error(r) : r;
  };
}
function tm(e7) {
  return e7 === void 0 ? {} : e7;
}
function Ym(e7) {
  if (typeof e7 == "string") return { text: e7 };
  let { text: t, list: r } = e7;
  return mF((t || r) !== void 0, "Unexpected `expected` result, there should be at least one field."), r ? { text: t, list: {
    title: r.title,
    values: r.values.map(Ym)
  } } : { text: t };
}
function rm(e7, t) {
  return e7 === true ? true : e7 === false ? { value: t } : e7;
}
function nm(e7, t, r = false) {
  return e7 === false ? false : e7 === true ? r ? true : [{ value: t }] : "value" in e7 ? [e7] : e7.length === 0 ? false : e7;
}
function om(e7, t) {
  return typeof e7 == "string" || "key" in e7 ? { from: t, to: e7 } : "from" in e7 ? { from: e7.from, to: e7.to } : { from: t, to: e7.to };
}
function _c(e7, t) {
  return e7 === void 0 ? [] : Array.isArray(e7) ? e7.map((r) => om(r, t)) : [om(e7, t)];
}
function am(e7, t) {
  let r = _c(typeof e7 == "object" && "redirect" in e7 ? e7.redirect : e7, t);
  return r.length === 0 ? { remain: t, redirect: r } : typeof e7 == "object" && "remain" in e7 ? { remain: e7.remain, redirect: r } : { redirect: r };
}
function mF(e7, t) {
  if (!e7) throw new Error(t);
}
function EF(e7, t, { logger: r = false, isCLI: n = false, passThrough: o = false, FlagSchema: i, descriptor: l7 } = {}) {
  if (n) {
    if (!i) throw new Error("'FlagSchema' option is required.");
    if (!l7) throw new Error("'descriptor' option is required.");
  } else l7 = oo2;
  let u6 = o ? Array.isArray(o) ? (f, v7) => o.includes(f) ? { [f]: v7 } : void 0 : (f, v7) => ({ [f]: v7 }) : (f, v7, b) => {
    let { _: m, ...g7 } = b.schemas;
    return Xm(f, v7, { ...b, schemas: g7 });
  }, c = SF(t, { isCLI: n, FlagSchema: i }), p = new CF(c, { logger: r, unknown: u6, descriptor: l7 }), d = r !== false;
  d && Rc && (p._hasDeprecationWarned = Rc);
  let h7 = p.normalize(e7);
  return d && (Rc = p._hasDeprecationWarned), h7;
}
function SF(e7, { isCLI: t, FlagSchema: r }) {
  let n = [];
  t && n.push(aF.create({ name: "_" }));
  for (let o of e7) n.push(RF(o, { isCLI: t, optionInfos: e7, FlagSchema: r })), o.alias && t && n.push(oF.create({ name: o.alias, sourceName: o.name }));
  return n;
}
function RF(e7, { isCLI: t, optionInfos: r, FlagSchema: n }) {
  let { name: o } = e7, i = { name: o }, l7, u6 = {};
  switch (e7.type) {
    case "int":
      l7 = wF, t && (i.preprocess = Number);
      break;
    case "string":
      l7 = im;
      break;
    case "choice":
      l7 = gF, i.choices = e7.choices.map((c) => c != null && c.redirect ? { ...c, redirect: { to: { key: e7.name, value: c.redirect } } } : c);
      break;
    case "boolean":
      l7 = lF;
      break;
    case "flag":
      l7 = n, i.flags = r.flatMap((c) => [c.alias, c.description && c.name, c.oppositeDescription && `no-${c.name}`].filter(Boolean));
      break;
    case "path":
      l7 = im;
      break;
    default:
      throw new Error(`Unexpected type ${e7.type}`);
  }
  if (e7.exception ? i.validate = (c, p, d) => e7.exception(c) || p.validate(c, d) : i.validate = (c, p, d) => c === void 0 || p.validate(c, d), e7.redirect && (u6.redirect = (c) => c ? { to: typeof e7.redirect == "string" ? e7.redirect : { key: e7.redirect.option, value: e7.redirect.value } } : void 0), e7.deprecated && (u6.deprecated = true), t && !e7.array) {
    let c = i.preprocess || ((p) => p);
    i.preprocess = (p, d, h7) => d.preprocess(c(Array.isArray(p) ? he2(false, p, -1) : p), h7);
  }
  return e7.array ? iF.create({ ...t ? { preprocess: a2((c) => Array.isArray(c) ? c : [c], "preprocess") } : {}, ...u6, valueSchema: l7.create(i) }) : l7.create({ ...i, ...u6 });
}
function Zm(e7, t) {
  if (!t) throw new Error("parserName is required.");
  let r = Km(false, e7, (o) => o.parsers && Object.prototype.hasOwnProperty.call(o.parsers, t));
  if (r) return r;
  let n = `Couldn't resolve parser "${t}".`;
  throw n += " Plugins must be explicitly added to the standalone bundle.", new Vm(n);
}
function kF(e7, t) {
  if (!t) throw new Error("astFormat is required.");
  let r = Km(false, e7, (o) => o.printers && Object.prototype.hasOwnProperty.call(o.printers, t));
  if (r) return r;
  let n = `Couldn't find plugin for AST format "${t}".`;
  throw n += " Plugins must be explicitly added to the standalone bundle.", new Vm(n);
}
function Jm({ plugins: e7, parser: t }) {
  let r = Zm(e7, t);
  return Qm(r, t);
}
function Qm(e7, t) {
  let r = e7.parsers[t];
  return typeof r == "function" ? r() : r;
}
function TF(e7, t) {
  let r = e7.printers[t];
  return typeof r == "function" ? r() : r;
}
async function LF(e7, t = {}) {
  var r;
  let n = { ...e7 };
  if (!n.parser) if (n.filepath) {
    if (n.parser = ZA(n, { physicalFile: n.filepath }), !n.parser) throw new G2(`No parser could be inferred for file "${n.filepath}".`);
  } else throw new G2("No parser and no file path given, couldn't infer a parser.");
  let o = qm({ plugins: e7.plugins, showDeprecated: true }).options, i = { ...lm, ...Object.fromEntries(o.filter((f) => f.default !== void 0).map(
    (f) => [f.name, f.default]
  )) }, l7 = Zm(n.plugins, n.parser), u6 = await Qm(l7, n.parser);
  n.astFormat = u6.astFormat, n.locEnd = u6.locEnd, n.locStart = u6.locStart;
  let c = (r = l7.printers) != null && r[u6.astFormat] ? l7 : kF(n.plugins, u6.astFormat), p = await TF(c, u6.astFormat);
  n.printer = p;
  let d = c.defaultOptions ? Object.fromEntries(Object.entries(c.defaultOptions).filter(([, f]) => f !== void 0)) : {}, h7 = { ...i, ...d };
  for (let [f, v7] of Object.entries(h7)) (n[f] === null || n[f] === void 0) && (n[f] = v7);
  return n.parser === "json" && (n.trailingComma = "none"), AF(n, o, { passThrough: Object.keys(lm), ...t });
}
async function BF(e7, t) {
  let r = await Jm(t), n = r.preprocess ? r.preprocess(e7, t) : e7;
  t.originalText = n;
  let o;
  try {
    o = await r.parse(n, t, t);
  } catch (i) {
    MF(i, e7);
  }
  return { text: n, ast: o };
}
function MF(e7, t) {
  let { loc: r } = e7;
  if (r) {
    let n = (0, IF.codeFrameColumns)(t, r, { highlightCode: true });
    throw e7.message += `
` + n, e7.codeFrame = n, e7;
  }
  throw e7;
}
async function _F(e7, t, r, n, o) {
  let { embeddedLanguageFormatting: i, printer: { embed: l7, hasPrettierIgnore: u6 = a2(() => false, "s"), getVisitorKeys: c } } = r;
  if (!l7 || i !== "auto") return;
  if (l7.length > 2) throw new Error("printer.embed has too many parameters. The API changed in Prettier v3. Please update your plugin. See https://prettier.io/docs/en/plugins.html#optional-embed");
  let p = ml(l7.getVisitorKeys ?? c), d = [];
  v7();
  let h7 = e7.stack;
  for (let { print: b, node: m, pathStack: g7 } of d) try {
    e7.stack = g7;
    let y = await b(f, t, e7, r);
    y && o.set(m, y);
  } catch (y) {
    if (globalThis.PRETTIER_DEBUG) throw y;
  }
  e7.stack = h7;
  function f(b, m) {
    return PF(b, m, r, n);
  }
  a2(f, "f");
  function v7() {
    let { node: b } = e7;
    if (b === null || typeof b != "object" || u6(e7)) return;
    for (let g7 of p(b)) Array.isArray(b[g7]) ? e7.each(v7, g7) : e7.call(v7, g7);
    let m = l7(e7, r);
    if (m) {
      if (typeof m == "function") {
        d.push({ print: m, node: b, pathStack: [...e7.stack] });
        return;
      }
      o.set(b, m);
    }
  }
  a2(v7, "p");
}
async function PF(e7, t, r, n) {
  let o = await Co2({ ...r, ...t, parentParser: r.parser, originalText: e7 }, { passThrough: true }), { ast: i } = await La2(e7, o), l7 = await n(
    i,
    o
  );
  return Im(l7);
}
function HF(e7, t) {
  let { originalText: r, [Symbol.for("comments")]: n, locStart: o, locEnd: i, [Symbol.for("printedComments")]: l7 } = t, { node: u6 } = e7, c = o(
    u6
  ), p = i(u6);
  for (let d of n) o(d) >= c && i(d) <= p && l7.add(d);
  return r.slice(c, p);
}
async function gl(e7, t) {
  ({ ast: e7 } = await eg(e7, t));
  let r = /* @__PURE__ */ new Map(), n = new xA(e7), o = qA(t), i = /* @__PURE__ */ new Map();
  await _F(n, u6, t, gl, i);
  let l7 = await sm(n, t, u6, void 0, i);
  return jA(t), l7;
  function u6(p, d) {
    return p === void 0 || p === n ? c(d) : Array.isArray(p) ? n.call(() => c(d), ...p) : n.call(() => c(d), p);
  }
  function c(p) {
    o(n);
    let d = n.node;
    if (d == null) return "";
    let h7 = d && typeof d == "object" && p === void 0;
    if (h7 && r.has(d)) return r.get(d);
    let f = sm(n, t, u6, p, i);
    return h7 && r.set(d, f), f;
  }
}
function sm(e7, t, r, n, o) {
  var i;
  let { node: l7 } = e7, { printer: u6 } = t, c;
  return (i = u6.hasPrettierIgnore) != null && i.call(u6, e7) ? c = $F(e7, t) : o.has(l7) ? c = o.get(l7) : c = u6.print(e7, t, r, n), l7 === t.cursorNode && (c = Bm(c, (p) => [Tc, p, Tc])), u6.printComment && (!u6.willPrintOwnComments || !u6.willPrintOwnComments(e7, t)) && (c = NA(e7, c, t)), c;
}
async function eg(e7, t) {
  let r = e7.comments ?? [];
  t[Symbol.for("comments")] = r, t[Symbol.for("tokens")] = e7.tokens ?? [], t[Symbol.for("printedComments")] = /* @__PURE__ */ new Set(), MA(
    e7,
    t
  );
  let { printer: { preprocess: n } } = t;
  return e7 = n ? await n(e7, t) : e7, { ast: e7, comments: r };
}
function zF(e7, t) {
  let { cursorOffset: r, locStart: n, locEnd: o } = t, i = ml(t.printer.getVisitorKeys), l7 = a2(
    (c) => n(c) <= r && o(c) >= r,
    "i"
  ), u6 = e7;
  for (let c of SA(e7, { getVisitorKeys: i, filter: l7 })) u6 = c;
  return u6;
}
function NF(e7, t) {
  let { printer: { massageAstNode: r, getVisitorKeys: n } } = t;
  if (!r) return e7;
  let o = ml(n), i = r.ignoredProperties ?? /* @__PURE__ */ new Set();
  return l7(e7);
  function l7(u6, c) {
    if (!(u6 !== null && typeof u6 == "object")) return u6;
    if (Array.isArray(u6)) return u6.map((f) => l7(f, c)).filter(Boolean);
    let p = {}, d = new Set(o(u6));
    for (let f in u6) !Object.prototype.hasOwnProperty.call(u6, f) || i.has(f) || (d.has(f) ? p[f] = l7(u6[f], u6) : p[f] = u6[f]);
    let h7 = r(u6, p, c);
    if (h7 !== null) return h7 ?? p;
  }
}
function UF(e7, t) {
  let r = [e7.node, ...e7.parentNodes], n = /* @__PURE__ */ new Set([t.node, ...t.parentNodes]);
  return r.find((o) => tg.has(o.type) && n.has(o));
}
function um(e7) {
  let t = qF(false, e7, (r) => r.type !== "Program" && r.type !== "File");
  return t === -1 ? e7 : e7.slice(0, t + 1);
}
function GF(e7, t, { locStart: r, locEnd: n }) {
  let o = e7.node, i = t.node;
  if (o === i) return { startNode: o, endNode: i };
  let l7 = r(e7.node);
  for (let c of um(t.parentNodes)) if (r(c) >= l7) i = c;
  else break;
  let u6 = n(t.node);
  for (let c of um(e7.parentNodes)) {
    if (n(c) <= u6) o = c;
    else break;
    if (o === i) break;
  }
  return { startNode: o, endNode: i };
}
function Pc(e7, t, r, n, o = [], i) {
  let { locStart: l7, locEnd: u6 } = r, c = l7(e7), p = u6(e7);
  if (!(t > p || t < c || i === "rangeEnd" && t === c || i === "rangeStart" && t === p)) {
    for (let d of Gc(e7, r)) {
      let h7 = Pc(d, t, r, n, [e7, ...o], i);
      if (h7) return h7;
    }
    if (!n || n(e7, o[0])) return { node: e7, parentNodes: o };
  }
}
function XF(e7, t) {
  return t !== "DeclareExportDeclaration" && e7 !== "TypeParameterDeclaration" && (e7 === "Directive" || e7 === "TypeAlias" || e7 === "TSExportAssignment" || e7.startsWith("Declare") || e7.startsWith("TSDeclare") || e7.endsWith("Statement") || e7.endsWith("Declaration"));
}
function cm(e7, t, r) {
  if (!t) return false;
  switch (e7.parser) {
    case "flow":
    case "babel":
    case "babel-flow":
    case "babel-ts":
    case "typescript":
    case "acorn":
    case "espree":
    case "meriyah":
    case "__babel_estree":
      return XF(t.type, r == null ? void 0 : r.type);
    case "json":
    case "json5":
    case "jsonc":
    case "json-stringify":
      return tg.has(t.type);
    case "graphql":
      return YF.has(t.kind);
    case "vue":
      return t.tag !== "root";
  }
  return false;
}
function KF(e7, t, r) {
  let { rangeStart: n, rangeEnd: o, locStart: i, locEnd: l7 } = t;
  Mc.ok(o > n);
  let u6 = e7.slice(n, o).search(/\S/u), c = u6 === -1;
  if (!c) for (n += u6; o > n && !/\S/u.test(e7[o - 1]); --o) ;
  let p = Pc(r, n, t, (v7, b) => cm(t, v7, b), [], "rangeStart"), d = c ? p : Pc(r, o, t, (v7) => cm(t, v7), [], "rangeEnd");
  if (!p || !d) return { rangeStart: 0, rangeEnd: 0 };
  let h7, f;
  if (WF(t)) {
    let v7 = UF(p, d);
    h7 = v7, f = v7;
  } else ({ startNode: h7, endNode: f } = GF(p, d, t));
  return { rangeStart: Math.min(i(h7), i(f)), rangeEnd: Math.max(l7(h7), l7(f)) };
}
async function ng(e7, t, r = 0) {
  if (!e7 || e7.trim().length === 0) return { formatted: "", cursorOffset: -1, comments: [] };
  let { ast: n, text: o } = await La2(e7, t);
  t.cursorOffset >= 0 && (t.cursorNode = OF(n, t));
  let i = await gl(n, t, r);
  r > 0 && (i = Lm([$r2, i], r, t.tabWidth));
  let l7 = hl(i, t);
  if (r > 0) {
    let c = l7.formatted.trim();
    l7.cursorNodeStart !== void 0 && (l7.cursorNodeStart -= l7.formatted.indexOf(c)), l7.formatted = c + zc(t.endOfLine);
  }
  let u6 = t[Symbol.for("comments")];
  if (t.cursorOffset >= 0) {
    let c, p, d, h7, f;
    if (t.cursorNode && l7.cursorNodeText ? (c = t.locStart(t.cursorNode), p = o.slice(c, t.locEnd(t.cursorNode)), d = t.cursorOffset - c, h7 = l7.cursorNodeStart, f = l7.cursorNodeText) : (c = 0, p = o, d = t.cursorOffset, h7 = 0, f = l7.formatted), p === f) return {
      formatted: l7.formatted,
      cursorOffset: h7 + d,
      comments: u6
    };
    let v7 = p.split("");
    v7.splice(d, 0, pm);
    let b = f.split(""), m = PR(v7, b), g7 = h7;
    for (let y of m) if (y.removed) {
      if (y.value.includes(pm)) break;
    } else g7 += y.count;
    return { formatted: l7.formatted, cursorOffset: g7, comments: u6 };
  }
  return { formatted: l7.formatted, cursorOffset: -1, comments: u6 };
}
async function ZF(e7, t) {
  let { ast: r, text: n } = await La2(e7, t), { rangeStart: o, rangeEnd: i } = KF(n, t, r), l7 = n.slice(o, i), u6 = Math.min(o, n.lastIndexOf(`
`, o) + 1), c = n.slice(u6, o).match(/^\s*/u)[0], p = Wc(c, t.tabWidth), d = await ng(l7, {
    ...t,
    rangeStart: 0,
    rangeEnd: Number.POSITIVE_INFINITY,
    cursorOffset: t.cursorOffset > o && t.cursorOffset <= i ? t.cursorOffset - o : -1,
    endOfLine: "lf"
  }, p), h7 = d.formatted.trimEnd(), { cursorOffset: f } = t;
  f > i ? f += h7.length - l7.length : d.cursorOffset >= 0 && (f = d.cursorOffset + o);
  let v7 = n.slice(0, o) + h7 + n.slice(i);
  if (t.endOfLine !== "lf") {
    let b = zc(t.endOfLine);
    f >= 0 && b === `\r
` && (f += xm(v7.slice(0, f), `
`)), v7 = pl(false, v7, `
`, b);
  }
  return { formatted: v7, cursorOffset: f, comments: d.comments };
}
function Ac(e7, t, r) {
  return typeof t != "number" || Number.isNaN(t) || t < 0 || t > e7.length ? r : t;
}
function dm(e7, t) {
  let { cursorOffset: r, rangeStart: n, rangeEnd: o } = t;
  return r = Ac(e7, r, -1), n = Ac(e7, n, 0), o = Ac(e7, o, e7.length), { ...t, cursorOffset: r, rangeStart: n, rangeEnd: o };
}
function og(e7, t) {
  let { cursorOffset: r, rangeStart: n, rangeEnd: o, endOfLine: i } = dm(e7, t), l7 = e7.charAt(0) === rg;
  if (l7 && (e7 = e7.slice(1), r--, n--, o--), i === "auto" && (i = HR(e7)), e7.includes("\r")) {
    let u6 = a2((c) => xm(e7.slice(0, Math.max(c, 0)), `\r
`), "s");
    r -= u6(r), n -= u6(n), o -= u6(o), e7 = $R(e7);
  }
  return { hasBOM: l7, text: e7, options: dm(e7, { ...t, cursorOffset: r, rangeStart: n, rangeEnd: o, endOfLine: i }) };
}
async function fm(e7, t) {
  let r = await Jm(t);
  return !r.hasPragma || r.hasPragma(e7);
}
async function ag(e7, t) {
  let { hasBOM: r, text: n, options: o } = og(e7, await Co2(t));
  if (o.rangeStart >= o.rangeEnd && n !== "" || o.requirePragma && !await fm(n, o)) return { formatted: e7, cursorOffset: t.cursorOffset, comments: [] };
  let i;
  return o.rangeStart > 0 || o.rangeEnd < n.length ? i = await ZF(n, o) : (!o.requirePragma && o.insertPragma && o.printer.insertPragma && !await fm(
    n,
    o
  ) && (n = o.printer.insertPragma(n)), i = await ng(n, o)), r && (i.formatted = rg + i.formatted, i.cursorOffset >= 0 && i.cursorOffset++), i;
}
async function JF(e7, t, r) {
  let { text: n, options: o } = og(e7, await Co2(t)), i = await La2(n, o);
  return r && (r.preprocessForPrint && (i.ast = await eg(i.ast, o)), r.massage && (i.ast = jF(i.ast, o))), i;
}
async function QF(e7, t) {
  t = await Co2(t);
  let r = await gl(e7, t);
  return hl(r, t);
}
async function ek(e7, t) {
  let r = eA(e7), { formatted: n } = await ag(r, { ...t, parser: "__js_expression" });
  return n;
}
async function tk(e7, t) {
  t = await Co2(t);
  let { ast: r } = await La2(e7, t);
  return gl(r, t);
}
async function rk(e7, t) {
  return hl(e7, await Co2(t));
}
function lk(e7, t) {
  if (t === false) return false;
  if (e7.charAt(t) === "/" && e7.charAt(t + 1) === "*") {
    for (let r = t + 2; r < e7.length; ++r) if (e7.charAt(r) === "*" && e7.charAt(r + 1) === "/") return r + 2;
  }
  return t;
}
function sk(e7, t) {
  return t === false ? false : e7.charAt(t) === "/" && e7.charAt(t + 1) === "/" ? $m(e7, t) : t;
}
function uk(e7, t) {
  let r = null, n = t;
  for (; n !== r; ) r = n, n = ir2(e7, n), n = Yc(e7, n), n = Kc(e7, n), n = zr2(e7, n);
  return n;
}
function ck(e7, t) {
  let r = null, n = t;
  for (; n !== r; ) r = n, n = Hm(e7, n), n = Yc(e7, n), n = ir2(e7, n);
  return n = Kc(e7, n), n = zr2(e7, n), n !== false && ar(e7, n);
}
function pk(e7, t) {
  let r = e7.lastIndexOf(`
`);
  return r === -1 ? 0 : Wc(e7.slice(r + 1).match(/^[\t ]*/u)[0], t);
}
function fk(e7) {
  if (typeof e7 != "string") throw new TypeError("Expected a string");
  return e7.replace(/[|\\{}()[\]^$+*?.]/g, "\\$&").replace(/-/g, "\\x2d");
}
function hk(e7, t) {
  let r = e7.match(new RegExp(`(${fk(t)})+`, "gu"));
  return r === null ? 0 : r.reduce((n, o) => Math.max(n, o.length / t.length), 0);
}
function gk(e7, t) {
  let r = Zc(e7, t);
  return r === false ? "" : e7.charAt(r);
}
function wk(e7, t, r) {
  for (let n = t; n < r; ++n) if (e7.charAt(n) === `
`) return true;
  return false;
}
function yk(e7, t, r = {}) {
  return ir2(e7, r.backwards ? t - 1 : t, r) !== t;
}
function xk(e7, t, r) {
  let n = t === '"' ? "'" : '"', o = pl(false, e7, /\\(.)|(["'])/gsu, (i, l7, u6) => l7 === n ? l7 : u6 === t ? "\\" + u6 : u6 || (r && /^[^\n\r"'0-7\\bfnrt-vx\u2028\u2029]$/u.test(l7) ? l7 : "\\" + l7));
  return t + o + t;
}
function Ek(e7, t, r) {
  return Zc(e7, r(t));
}
function Sk(e7, t) {
  return arguments.length === 2 || typeof t == "number" ? Zc(e7, t) : Ek(...arguments);
}
function Rk(e7, t, r) {
  return Xc(e7, r(t));
}
function Ak(e7, t) {
  return arguments.length === 2 || typeof t == "number" ? Xc(e7, t) : Rk(...arguments);
}
function Fk(e7, t, r) {
  return Jc(e7, r(t));
}
function kk(e7, t) {
  return arguments.length === 2 || typeof t == "number" ? Jc(e7, t) : Fk(...arguments);
}
function Hr2(e7, t = 1) {
  return async (...r) => {
    let n = r[t] ?? {}, o = n.plugins ?? [];
    return r[t] = { ...n, plugins: Array.isArray(o) ? o : Object.values(o) }, e7(...r);
  };
}
async function ug(e7, t) {
  let { formatted: r } = await sg(e7, { ...t, cursorOffset: -1 });
  return r;
}
async function Tk(e7, t) {
  return await ug(e7, t) === e7;
}
var bR;
var sl;
var yR;
var DR;
var xR;
var CR;
var hm;
var ER;
var Hc;
var ul;
var mm;
var cl;
var SR;
var RR;
var AR;
var Ra2;
var $c;
var gm;
var vm;
var wm;
var FR;
var kR;
var TR;
var bm;
var LR;
var pl;
var Cj;
var N2;
var j22;
var ym;
var Dm;
var BR;
var MR;
var _R;
var ka2;
var il;
var Or2;
var Mt2;
var Nr2;
var Pt2;
var Ht2;
var $t2;
var He2;
var xt2;
var Ne2;
var zt2;
var Ot2;
var Nt2;
var De2;
var Ct2;
var Ke2;
var Cm;
var jr;
var OR;
var io2;
var jR;
var Do;
var V2;
var Oc;
var Em;
var Dt2;
var Nc;
var KR;
var dl;
var ZR;
var jc;
var Am;
var Fm;
var JR;
var $r2;
var km;
var Tc;
var tA;
var he2;
var rA;
var aA;
var iA;
var Vc;
var Pe;
var yt2;
var Fa2;
var Wc;
var _r2;
var Bc;
var ol;
var lo2;
var DA;
var xA;
var _m;
var Mc;
var EA;
var RA;
var ir2;
var Hm;
var $m;
var zr2;
var ar;
var TA;
var zm;
var LA;
var ml;
var xc;
var Cc;
var Nm;
var Xc;
var qA;
var so2;
var Vm;
var uo2;
var G2;
var WA;
var XA;
var ZA;
var oo2;
var Y22;
var JA;
var ao2;
var Wm;
var al;
var K2;
var QA;
var J22;
var Sc;
var Q22;
var Xm;
var tF;
var co2;
var lr2;
var po2;
var oF;
var fo2;
var aF;
var ho2;
var iF;
var mo2;
var lF;
var go2;
var gF;
var vo2;
var vF;
var wo2;
var wF;
var bo2;
var im;
var bF;
var yF;
var DF;
var xF;
var yo2;
var CF;
var Rc;
var AF;
var FF;
var Km;
var lm;
var Co2;
var IF;
var La2;
var $F;
var OF;
var jF;
var VF;
var qF;
var WF;
var tg;
var YF;
var rg;
var pm;
var ig;
var nk;
var ok;
var ak;
var ik;
var lg;
var Yc;
var Kc;
var Zc;
var Jc;
var dk;
var mk;
var vk;
var bk;
var Dk;
var Ck;
var sg;
var Lk;
var Ik;
var cg;
var pg = F3(() => {
  bR = Object.create, sl = Object.defineProperty, yR = Object.getOwnPropertyDescriptor, DR = Object.getOwnPropertyNames, xR = Object.getPrototypeOf, CR = Object.prototype.hasOwnProperty, hm = a2((e7) => {
    throw TypeError(e7);
  }, "sr"), ER = a2((e7, t) => () => (e7 && (t = e7(e7 = 0)), t), "_u"), Hc = a2((e7, t) => () => (t || e7((t = { exports: {} }).exports, t), t.exports), "At"), ul = a2((e7, t) => {
    for (var r in t) sl(e7, r, { get: t[r], enumerable: true });
  }, "We"), mm = a2((e7, t, r, n) => {
    if (t && typeof t == "object" || typeof t == "function") for (let o of DR(t)) !CR.call(e7, o) && o !== r && sl(e7, o, { get: a2(
      () => t[o],
      "get"
    ), enumerable: !(n = yR(t, o)) || n.enumerable });
    return e7;
  }, "ar"), cl = a2((e7, t, r) => (r = e7 != null ? bR(xR(e7)) : {}, mm(t || !e7 || !e7.__esModule ? sl(r, "default", { value: e7, enumerable: true }) : r, e7)), "Me"), SR = a2((e7) => mm(sl({}, "__esModule", { value: true }), e7), "vu"), RR = a2((e7, t, r) => t.has(
    e7
  ) || hm("Cannot " + r), "bu"), AR = a2((e7, t, r) => t.has(e7) ? hm("Cannot add the same private member more than once") : t instanceof WeakSet ? t.add(e7) : t.set(e7, r), "Dr"), Ra2 = a2((e7, t, r) => (RR(e7, t, "access private method"), r), "pe"), $c = Hc((e7, t) => {
    "use strict";
    var r = new Proxy(String, { get: a2(() => r, "get") });
    t.exports = r;
  }), gm = {};
  ul(gm, { default: a2(() => wm, "default"), shouldHighlight: a2(() => vm, "shouldHighlight") });
  FR = ER(() => {
    vm = a2(() => false, "xo"), wm = String;
  }), kR = Hc((e7, t) => {
    var r = String, n = a2(function() {
      return {
        isColorSupported: false,
        reset: r,
        bold: r,
        dim: r,
        italic: r,
        underline: r,
        inverse: r,
        hidden: r,
        strikethrough: r,
        black: r,
        red: r,
        green: r,
        yellow: r,
        blue: r,
        magenta: r,
        cyan: r,
        white: r,
        gray: r,
        bgBlack: r,
        bgRed: r,
        bgGreen: r,
        bgYellow: r,
        bgBlue: r,
        bgMagenta: r,
        bgCyan: r,
        bgWhite: r
      };
    }, "Ln");
    t.exports = n(), t.exports.createColors = n;
  }), TR = Hc((e7) => {
    "use strict";
    Object.defineProperty(e7, "__esModule", { value: true }), e7.codeFrameColumns = v7, e7.default = b;
    var t = (FR(), SR(gm)), r = o(kR(), true);
    function n(m) {
      if (typeof WeakMap != "function") return null;
      var g7 = /* @__PURE__ */ new WeakMap(), y = /* @__PURE__ */ new WeakMap();
      return (n = a2(function(w5) {
        return w5 ? y : g7;
      }, "Wn"))(m);
    }
    a2(n, "Wn");
    function o(m, g7) {
      if (!g7 && m && m.__esModule) return m;
      if (m === null || typeof m != "object" && typeof m != "function") return { default: m };
      var y = n(g7);
      if (y && y.has(m)) return y.get(m);
      var w5 = { __proto__: null }, D7 = Object.defineProperty && Object.getOwnPropertyDescriptor;
      for (var x7 in m) if (x7 !== "default" && {}.hasOwnProperty.call(m, x7)) {
        var C7 = D7 ? Object.getOwnPropertyDescriptor(m, x7) : null;
        C7 && (C7.get || C7.set) ? Object.defineProperty(w5, x7, C7) : w5[x7] = m[x7];
      }
      return w5.default = m, y && y.set(m, w5), w5;
    }
    a2(o, "vo");
    var i = r.default, l7 = a2((m, g7) => (y) => m(g7(y)), "Rn"), u6;
    function c(m) {
      if (m) {
        var g7;
        return (g7 = u6) != null || (u6 = (0, r.createColors)(true)), u6;
      }
      return i;
    }
    a2(c, "Oo");
    var p = false;
    function d(m) {
      return { gutter: m.gray, marker: l7(m.red, m.bold), message: l7(m.red, m.bold) };
    }
    a2(d, "So");
    var h7 = /\r\n|[\n\r\u2028\u2029]/;
    function f(m, g7, y) {
      let w5 = Object.assign({ column: 0, line: -1 }, m.start), D7 = Object.assign({}, w5, m.end), { linesAbove: x7 = 2, linesBelow: C7 = 3 } = y || {}, E7 = w5.line, S4 = w5.column, R = D7.line, A = D7.column, k4 = Math.max(E7 - (x7 + 1), 0), B6 = Math.min(g7.length, R + C7);
      E7 === -1 && (k4 = 0), R === -1 && (B6 = g7.length);
      let $6 = R - E7, M6 = {};
      if ($6) for (let W = 0; W <= $6; W++) {
        let T = W + E7;
        if (!S4) M6[T] = true;
        else if (W === 0) {
          let L6 = g7[T - 1].length;
          M6[T] = [S4, L6 - S4 + 1];
        } else if (W === $6) M6[T] = [0, A];
        else {
          let L6 = g7[T - W].length;
          M6[T] = [0, L6];
        }
      }
      else S4 === A ? S4 ? M6[E7] = [S4, 0] : M6[E7] = true : M6[E7] = [S4, A - S4];
      return { start: k4, end: B6, markerLines: M6 };
    }
    a2(f, "No");
    function v7(m, g7, y = {}) {
      let w5 = (y.highlightCode || y.forceColor) && (0, t.shouldHighlight)(y), D7 = c(y.forceColor), x7 = d(D7), C7 = a2((M6, W) => w5 ? M6(W) : W, "i"), E7 = m.split(h7), { start: S4, end: R, markerLines: A } = f(g7, E7, y), k4 = g7.start && typeof g7.start.column == "number", B6 = String(
        R
      ).length, $6 = (w5 ? (0, t.default)(m, y) : m).split(h7, R).slice(S4, R).map((M6, W) => {
        let T = S4 + 1 + W, L6 = ` ${` ${T}`.slice(-B6)} |`, P6 = A[T], U6 = !A[T + 1];
        if (P6) {
          let N = "";
          if (Array.isArray(P6)) {
            let G = M6.slice(0, Math.max(P6[0] - 1, 0)).replace(/[^\t]/g, " "), z6 = P6[1] || 1;
            N = [`
 `, C7(x7.gutter, L6.replace(/\d/g, " ")), " ", G, C7(x7.marker, "^").repeat(z6)].join(""), U6 && y.message && (N += " " + C7(x7.message, y.message));
          }
          return [C7(x7.marker, ">"), C7(x7.gutter, L6), M6.length > 0 ? ` ${M6}` : "", N].join("");
        } else return ` ${C7(x7.gutter, L6)}${M6.length > 0 ? ` ${M6}` : ""}`;
      }).join(`
`);
      return y.message && !k4 && ($6 = `${" ".repeat(B6 + 1)}${y.message}
${$6}`), w5 ? D7.reset($6) : $6;
    }
    a2(v7, "Mn");
    function b(m, g7, y, w5 = {}) {
      if (!p) {
        p = true;
        let D7 = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
        {
          let x7 = new Error(D7);
          x7.name = "DeprecationWarning", console.warn(new Error(D7));
        }
      }
      return y = Math.max(y, 0), v7(m, { start: { column: y, line: g7 } }, w5);
    }
    a2(b, "To");
  }), bm = {};
  ul(bm, { __debug: a2(() => Ik, "__debug"), check: a2(() => Tk, "check"), doc: a2(() => ig, "doc"), format: a2(() => ug, "format"), formatWithCursor: a2(() => sg, "formatWithCursor"), getSupportInfo: a2(
    () => Lk,
    "getSupportInfo"
  ), util: a2(() => lg, "util"), version: a2(() => ik, "version") });
  LR = a2((e7, t, r, n) => {
    if (!(e7 && t == null)) return t.replaceAll ? t.replaceAll(r, n) : r.global ? t.replace(r, n) : t.split(r).join(n);
  }, "Ou"), pl = LR;
  a2(_t2, "Z");
  _t2.prototype = { diff: a2(function(e7, t) {
    var r, n = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : {}, o = n.callback;
    typeof n == "function" && (o = n, n = {}), this.options = n;
    var i = this;
    function l7(D7) {
      return o ? (setTimeout(function() {
        o(void 0, D7);
      }, 0), true) : D7;
    }
    a2(l7, "s"), e7 = this.castInput(e7), t = this.castInput(t), e7 = this.removeEmpty(this.tokenize(e7)), t = this.removeEmpty(this.tokenize(t));
    var u6 = t.length, c = e7.length, p = 1, d = u6 + c;
    n.maxEditLength && (d = Math.min(d, n.maxEditLength));
    var h7 = (r = n.timeout) !== null && r !== void 0 ? r : 1 / 0, f = Date.now() + h7, v7 = [{ oldPos: -1, lastComponent: void 0 }], b = this.extractCommon(v7[0], t, e7, 0);
    if (v7[0].oldPos + 1 >= c && b + 1 >= u6) return l7([{ value: this.join(t), count: t.length }]);
    var m = -1 / 0, g7 = 1 / 0;
    function y() {
      for (var D7 = Math.max(m, -p); D7 <= Math.min(g7, p); D7 += 2) {
        var x7 = void 0, C7 = v7[D7 - 1], E7 = v7[D7 + 1];
        C7 && (v7[D7 - 1] = void 0);
        var S4 = false;
        if (E7) {
          var R = E7.oldPos - D7;
          S4 = E7 && 0 <= R && R < u6;
        }
        var A = C7 && C7.oldPos + 1 < c;
        if (!S4 && !A) {
          v7[D7] = void 0;
          continue;
        }
        if (!A || S4 && C7.oldPos + 1 < E7.oldPos ? x7 = i.addToPath(E7, true, void 0, 0) : x7 = i.addToPath(C7, void 0, true, 1), b = i.extractCommon(
          x7,
          t,
          e7,
          D7
        ), x7.oldPos + 1 >= c && b + 1 >= u6) return l7(IR(i, x7.lastComponent, t, e7, i.useLongestToken));
        v7[D7] = x7, x7.oldPos + 1 >= c && (g7 = Math.min(g7, D7 - 1)), b + 1 >= u6 && (m = Math.max(m, D7 + 1));
      }
      p++;
    }
    if (a2(y, "A"), o) a2(function D7() {
      setTimeout(function() {
        if (p > d || Date.now() > f) return o();
        y() || D7();
      }, 0);
    }, "h")();
    else for (; p <= d && Date.now() <= f; ) {
      var w5 = y();
      if (w5) return w5;
    }
  }, "diff"), addToPath: a2(function(e7, t, r, n) {
    var o = e7.lastComponent;
    return o && o.added === t && o.removed === r ? { oldPos: e7.oldPos + n, lastComponent: { count: o.count + 1, added: t, removed: r, previousComponent: o.previousComponent } } : { oldPos: e7.oldPos + n, lastComponent: { count: 1, added: t, removed: r, previousComponent: o } };
  }, "addToPath"), extractCommon: a2(function(e7, t, r, n) {
    for (var o = t.length, i = r.length, l7 = e7.oldPos, u6 = l7 - n, c = 0; u6 + 1 < o && l7 + 1 < i && this.equals(t[u6 + 1], r[l7 + 1]); ) u6++, l7++, c++;
    return c && (e7.lastComponent = { count: c, previousComponent: e7.lastComponent }), e7.oldPos = l7, u6;
  }, "extractCommon"), equals: a2(function(e7, t) {
    return this.options.comparator ? this.options.comparator(e7, t) : e7 === t || this.options.ignoreCase && e7.toLowerCase() === t.toLowerCase();
  }, "equals"), removeEmpty: a2(function(e7) {
    for (var t = [], r = 0; r < e7.length; r++) e7[r] && t.push(e7[r]);
    return t;
  }, "removeEmpty"), castInput: a2(function(e7) {
    return e7;
  }, "castInput"), tokenize: a2(function(e7) {
    return e7.split("");
  }, "tokenize"), join: a2(function(e7) {
    return e7.join("");
  }, "join") };
  a2(IR, "Su");
  Cj = new _t2(), N2 = /^[A-Za-z\xC0-\u02C6\u02C8-\u02D7\u02DE-\u02FF\u1E00-\u1EFF]+$/, j22 = /\S/, ym = new _t2();
  ym.equals = function(e7, t) {
    return this.options.ignoreCase && (e7 = e7.toLowerCase(), t = t.toLowerCase()), e7 === t || this.options.ignoreWhitespace && !j22.test(e7) && !j22.test(t);
  };
  ym.tokenize = function(e7) {
    for (var t = e7.split(/([^\S\r\n]+|[()[\]{}'"\r\n]|\b)/), r = 0; r < t.length - 1; r++) !t[r + 1] && t[r + 2] && N2.test(t[r]) && N2.test(
      t[r + 2]
    ) && (t[r] += t[r + 2], t.splice(r + 1, 2), r--);
    return t;
  };
  Dm = new _t2();
  Dm.tokenize = function(e7) {
    this.options.stripTrailingCr && (e7 = e7.replace(/\r\n/g, `
`));
    var t = [], r = e7.split(/(\n|\r\n)/);
    r[r.length - 1] || r.pop();
    for (var n = 0; n < r.length; n++) {
      var o = r[n];
      n % 2 && !this.options.newlineIsToken ? t[t.length - 1] += o : (this.options.ignoreWhitespace && (o = o.trim()), t.push(o));
    }
    return t;
  };
  BR = new _t2();
  BR.tokenize = function(e7) {
    return e7.split(/(\S.+?[.!?])(?=\s+|$)/);
  };
  MR = new _t2();
  MR.tokenize = function(e7) {
    return e7.split(/([{}:;,]|\s+)/);
  };
  a2(nl, "$e");
  _R = Object.prototype.toString, ka2 = new _t2();
  ka2.useLongestToken = true;
  ka2.tokenize = Dm.tokenize;
  ka2.castInput = function(e7) {
    var t = this.options, r = t.undefinedReplacement, n = t.stringifyReplacer, o = n === void 0 ? function(i, l7) {
      return typeof l7 > "u" ? r : l7;
    } : n;
    return typeof e7 == "string" ? e7 : JSON.stringify(Fc(e7, null, null, o), o, "  ");
  };
  ka2.equals = function(e7, t) {
    return _t2.prototype.equals.call(ka2, e7.replace(/,([\r\n])/g, "$1"), t.replace(/,([\r\n])/g, "$1"));
  };
  a2(Fc, "Bt");
  il = new _t2();
  il.tokenize = function(e7) {
    return e7.slice();
  };
  il.join = il.removeEmpty = function(e7) {
    return e7;
  };
  a2(PR, "dr");
  a2(HR, "Fr");
  a2(zc, "Be");
  a2(xm, "wt");
  a2($R, "mr");
  Or2 = "string", Mt2 = "array", Nr2 = "cursor", Pt2 = "indent", Ht2 = "align", $t2 = "trim", He2 = "group", xt2 = "fill", Ne2 = "if-break", zt2 = "indent-if-break", Ot2 = "line-suffix", Nt2 = "line-suffix-boundary", De2 = "line", Ct2 = "label", Ke2 = "break-parent", Cm = /* @__PURE__ */ new Set(
    [Nr2, Pt2, Ht2, $t2, He2, xt2, Ne2, zt2, Ot2, Nt2, De2, Ct2, Ke2]
  );
  a2(zR, "Lu");
  jr = zR, OR = a2((e7) => new Intl.ListFormat("en-US", { type: "disjunction" }).format(e7), "Pu");
  a2(NR, "Iu");
  jR = (io2 = class extends Error {
    constructor(t) {
      super(NR(t));
      __publicField(this, "name", "InvalidDocError");
      this.doc = t;
    }
  }, a2(io2, "xt"), io2), Do = jR, V2 = {};
  a2(VR, "Ru");
  Oc = VR, Em = a2(() => {
  }, "hr"), Dt2 = Em, Nc = Em;
  a2(ll, "De");
  a2(xo2, "ae");
  a2(Sm, "_t");
  a2(qR, "Cr");
  a2(WR, "gr");
  a2(UR, "yr");
  a2(GR, "Ar");
  a2(Rm, "Ge");
  a2(XR, "Br");
  a2(YR, "wr");
  a2(kc, "xe");
  KR = { type: Nt2 }, dl = { type: Ke2 }, ZR = { type: $t2 }, jc = { type: De2, hard: true }, Am = { type: De2, hard: true, literal: true }, Fm = { type: De2 }, JR = { type: De2, soft: true }, $r2 = [jc, dl], km = [Am, dl], Tc = { type: Nr2 };
  a2(Tm, "be");
  a2(Lm, "Je");
  a2(QR, "br");
  a2(Bt2, "ee");
  a2(eA, "Or");
  tA = a2((e7, t, r) => {
    if (!(e7 && t == null)) return Array.isArray(t) || typeof t == "string" ? t[r < 0 ? t.length + r : r] : t.at(r);
  }, "Yu"), he2 = tA, rA = a2(
    () => /[#*0-9]\uFE0F?\u20E3|[\xA9\xAE\u203C\u2049\u2122\u2139\u2194-\u2199\u21A9\u21AA\u231A\u231B\u2328\u23CF\u23ED-\u23EF\u23F1\u23F2\u23F8-\u23FA\u24C2\u25AA\u25AB\u25B6\u25C0\u25FB\u25FC\u25FE\u2600-\u2604\u260E\u2611\u2614\u2615\u2618\u2620\u2622\u2623\u2626\u262A\u262E\u262F\u2638-\u263A\u2640\u2642\u2648-\u2653\u265F\u2660\u2663\u2665\u2666\u2668\u267B\u267E\u267F\u2692\u2694-\u2697\u2699\u269B\u269C\u26A0\u26A7\u26AA\u26B0\u26B1\u26BD\u26BE\u26C4\u26C8\u26CF\u26D1\u26E9\u26F0-\u26F5\u26F7\u26F8\u26FA\u2702\u2708\u2709\u270F\u2712\u2714\u2716\u271D\u2721\u2733\u2734\u2744\u2747\u2757\u2763\u27A1\u2934\u2935\u2B05-\u2B07\u2B1B\u2B1C\u2B55\u3030\u303D\u3297\u3299]\uFE0F?|[\u261D\u270C\u270D](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\u270A\u270B](?:\uD83C[\uDFFB-\uDFFF])?|[\u23E9-\u23EC\u23F0\u23F3\u25FD\u2693\u26A1\u26AB\u26C5\u26CE\u26D4\u26EA\u26FD\u2705\u2728\u274C\u274E\u2753-\u2755\u2795-\u2797\u27B0\u27BF\u2B50]|\u26D3\uFE0F?(?:\u200D\uD83D\uDCA5)?|\u26F9(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\u2764\uFE0F?(?:\u200D(?:\uD83D\uDD25|\uD83E\uDE79))?|\uD83C(?:[\uDC04\uDD70\uDD71\uDD7E\uDD7F\uDE02\uDE37\uDF21\uDF24-\uDF2C\uDF36\uDF7D\uDF96\uDF97\uDF99-\uDF9B\uDF9E\uDF9F\uDFCD\uDFCE\uDFD4-\uDFDF\uDFF5\uDFF7]\uFE0F?|[\uDF85\uDFC2\uDFC7](?:\uD83C[\uDFFB-\uDFFF])?|[\uDFC4\uDFCA](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDFCB\uDFCC](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDCCF\uDD8E\uDD91-\uDD9A\uDE01\uDE1A\uDE2F\uDE32-\uDE36\uDE38-\uDE3A\uDE50\uDE51\uDF00-\uDF20\uDF2D-\uDF35\uDF37-\uDF43\uDF45-\uDF4A\uDF4C-\uDF7C\uDF7E-\uDF84\uDF86-\uDF93\uDFA0-\uDFC1\uDFC5\uDFC6\uDFC8\uDFC9\uDFCF-\uDFD3\uDFE0-\uDFF0\uDFF8-\uDFFF]|\uDDE6\uD83C[\uDDE8-\uDDEC\uDDEE\uDDF1\uDDF2\uDDF4\uDDF6-\uDDFA\uDDFC\uDDFD\uDDFF]|\uDDE7\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEF\uDDF1-\uDDF4\uDDF6-\uDDF9\uDDFB\uDDFC\uDDFE\uDDFF]|\uDDE8\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDEE\uDDF0-\uDDF5\uDDF7\uDDFA-\uDDFF]|\uDDE9\uD83C[\uDDEA\uDDEC\uDDEF\uDDF0\uDDF2\uDDF4\uDDFF]|\uDDEA\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDED\uDDF7-\uDDFA]|\uDDEB\uD83C[\uDDEE-\uDDF0\uDDF2\uDDF4\uDDF7]|\uDDEC\uD83C[\uDDE6\uDDE7\uDDE9-\uDDEE\uDDF1-\uDDF3\uDDF5-\uDDFA\uDDFC\uDDFE]|\uDDED\uD83C[\uDDF0\uDDF2\uDDF3\uDDF7\uDDF9\uDDFA]|\uDDEE\uD83C[\uDDE8-\uDDEA\uDDF1-\uDDF4\uDDF6-\uDDF9]|\uDDEF\uD83C[\uDDEA\uDDF2\uDDF4\uDDF5]|\uDDF0\uD83C[\uDDEA\uDDEC-\uDDEE\uDDF2\uDDF3\uDDF5\uDDF7\uDDFC\uDDFE\uDDFF]|\uDDF1\uD83C[\uDDE6-\uDDE8\uDDEE\uDDF0\uDDF7-\uDDFB\uDDFE]|\uDDF2\uD83C[\uDDE6\uDDE8-\uDDED\uDDF0-\uDDFF]|\uDDF3\uD83C[\uDDE6\uDDE8\uDDEA-\uDDEC\uDDEE\uDDF1\uDDF4\uDDF5\uDDF7\uDDFA\uDDFF]|\uDDF4\uD83C\uDDF2|\uDDF5\uD83C[\uDDE6\uDDEA-\uDDED\uDDF0-\uDDF3\uDDF7-\uDDF9\uDDFC\uDDFE]|\uDDF6\uD83C\uDDE6|\uDDF7\uD83C[\uDDEA\uDDF4\uDDF8\uDDFA\uDDFC]|\uDDF8\uD83C[\uDDE6-\uDDEA\uDDEC-\uDDF4\uDDF7-\uDDF9\uDDFB\uDDFD-\uDDFF]|\uDDF9\uD83C[\uDDE6\uDDE8\uDDE9\uDDEB-\uDDED\uDDEF-\uDDF4\uDDF7\uDDF9\uDDFB\uDDFC\uDDFF]|\uDDFA\uD83C[\uDDE6\uDDEC\uDDF2\uDDF3\uDDF8\uDDFE\uDDFF]|\uDDFB\uD83C[\uDDE6\uDDE8\uDDEA\uDDEC\uDDEE\uDDF3\uDDFA]|\uDDFC\uD83C[\uDDEB\uDDF8]|\uDDFD\uD83C\uDDF0|\uDDFE\uD83C[\uDDEA\uDDF9]|\uDDFF\uD83C[\uDDE6\uDDF2\uDDFC]|\uDF44(?:\u200D\uD83D\uDFEB)?|\uDF4B(?:\u200D\uD83D\uDFE9)?|\uDFC3(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDFF3\uFE0F?(?:\u200D(?:\u26A7\uFE0F?|\uD83C\uDF08))?|\uDFF4(?:\u200D\u2620\uFE0F?|\uDB40\uDC67\uDB40\uDC62\uDB40(?:\uDC65\uDB40\uDC6E\uDB40\uDC67|\uDC73\uDB40\uDC63\uDB40\uDC74|\uDC77\uDB40\uDC6C\uDB40\uDC73)\uDB40\uDC7F)?)|\uD83D(?:[\uDC3F\uDCFD\uDD49\uDD4A\uDD6F\uDD70\uDD73\uDD76-\uDD79\uDD87\uDD8A-\uDD8D\uDDA5\uDDA8\uDDB1\uDDB2\uDDBC\uDDC2-\uDDC4\uDDD1-\uDDD3\uDDDC-\uDDDE\uDDE1\uDDE3\uDDE8\uDDEF\uDDF3\uDDFA\uDECB\uDECD-\uDECF\uDEE0-\uDEE5\uDEE9\uDEF0\uDEF3]\uFE0F?|[\uDC42\uDC43\uDC46-\uDC50\uDC66\uDC67\uDC6B-\uDC6D\uDC72\uDC74-\uDC76\uDC78\uDC7C\uDC83\uDC85\uDC8F\uDC91\uDCAA\uDD7A\uDD95\uDD96\uDE4C\uDE4F\uDEC0\uDECC](?:\uD83C[\uDFFB-\uDFFF])?|[\uDC6E\uDC70\uDC71\uDC73\uDC77\uDC81\uDC82\uDC86\uDC87\uDE45-\uDE47\uDE4B\uDE4D\uDE4E\uDEA3\uDEB4\uDEB5](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD74\uDD90](?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?|[\uDC00-\uDC07\uDC09-\uDC14\uDC16-\uDC25\uDC27-\uDC3A\uDC3C-\uDC3E\uDC40\uDC44\uDC45\uDC51-\uDC65\uDC6A\uDC79-\uDC7B\uDC7D-\uDC80\uDC84\uDC88-\uDC8E\uDC90\uDC92-\uDCA9\uDCAB-\uDCFC\uDCFF-\uDD3D\uDD4B-\uDD4E\uDD50-\uDD67\uDDA4\uDDFB-\uDE2D\uDE2F-\uDE34\uDE37-\uDE41\uDE43\uDE44\uDE48-\uDE4A\uDE80-\uDEA2\uDEA4-\uDEB3\uDEB7-\uDEBF\uDEC1-\uDEC5\uDED0-\uDED2\uDED5-\uDED7\uDEDC-\uDEDF\uDEEB\uDEEC\uDEF4-\uDEFC\uDFE0-\uDFEB\uDFF0]|\uDC08(?:\u200D\u2B1B)?|\uDC15(?:\u200D\uD83E\uDDBA)?|\uDC26(?:\u200D(?:\u2B1B|\uD83D\uDD25))?|\uDC3B(?:\u200D\u2744\uFE0F?)?|\uDC41\uFE0F?(?:\u200D\uD83D\uDDE8\uFE0F?)?|\uDC68(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDC68\uDC69]\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?)|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?\uDC68\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D\uDC68\uD83C[\uDFFB-\uDFFE])))?))?|\uDC69(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:\uDC8B\u200D\uD83D)?[\uDC68\uDC69]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D(?:[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?|\uDC69\u200D\uD83D(?:\uDC66(?:\u200D\uD83D\uDC66)?|\uDC67(?:\u200D\uD83D[\uDC66\uDC67])?))|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFC-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFD-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFD\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D\uD83D(?:[\uDC68\uDC69]|\uDC8B\u200D\uD83D[\uDC68\uDC69])\uD83C[\uDFFB-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83D[\uDC68\uDC69]\uD83C[\uDFFB-\uDFFE])))?))?|\uDC6F(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDD75(?:\uFE0F|\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|\uDE2E(?:\u200D\uD83D\uDCA8)?|\uDE35(?:\u200D\uD83D\uDCAB)?|\uDE36(?:\u200D\uD83C\uDF2B\uFE0F?)?|\uDE42(?:\u200D[\u2194\u2195]\uFE0F?)?|\uDEB6(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?)|\uD83E(?:[\uDD0C\uDD0F\uDD18-\uDD1F\uDD30-\uDD34\uDD36\uDD77\uDDB5\uDDB6\uDDBB\uDDD2\uDDD3\uDDD5\uDEC3-\uDEC5\uDEF0\uDEF2-\uDEF8](?:\uD83C[\uDFFB-\uDFFF])?|[\uDD26\uDD35\uDD37-\uDD39\uDD3D\uDD3E\uDDB8\uDDB9\uDDCD\uDDCF\uDDD4\uDDD6-\uDDDD](?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDDDE\uDDDF](?:\u200D[\u2640\u2642]\uFE0F?)?|[\uDD0D\uDD0E\uDD10-\uDD17\uDD20-\uDD25\uDD27-\uDD2F\uDD3A\uDD3F-\uDD45\uDD47-\uDD76\uDD78-\uDDB4\uDDB7\uDDBA\uDDBC-\uDDCC\uDDD0\uDDE0-\uDDFF\uDE70-\uDE7C\uDE80-\uDE88\uDE90-\uDEBD\uDEBF-\uDEC2\uDECE-\uDEDB\uDEE0-\uDEE8]|\uDD3C(?:\u200D[\u2640\u2642]\uFE0F?|\uD83C[\uDFFB-\uDFFF])?|\uDDCE(?:\uD83C[\uDFFB-\uDFFF])?(?:\u200D(?:[\u2640\u2642]\uFE0F?(?:\u200D\u27A1\uFE0F?)?|\u27A1\uFE0F?))?|\uDDD1(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1|\uDDD1\u200D\uD83E\uDDD2(?:\u200D\uD83E\uDDD2)?|\uDDD2(?:\u200D\uD83E\uDDD2)?))|\uD83C(?:\uDFFB(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFC-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFC(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFD-\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFD(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFE(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFD\uDFFF]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?|\uDFFF(?:\u200D(?:[\u2695\u2696\u2708]\uFE0F?|\u2764\uFE0F?\u200D(?:\uD83D\uDC8B\u200D)?\uD83E\uDDD1\uD83C[\uDFFB-\uDFFE]|\uD83C[\uDF3E\uDF73\uDF7C\uDF84\uDF93\uDFA4\uDFA8\uDFEB\uDFED]|\uD83D[\uDCBB\uDCBC\uDD27\uDD2C\uDE80\uDE92]|\uD83E(?:[\uDDAF\uDDBC\uDDBD](?:\u200D\u27A1\uFE0F?)?|[\uDDB0-\uDDB3]|\uDD1D\u200D\uD83E\uDDD1\uD83C[\uDFFB-\uDFFF])))?))?|\uDEF1(?:\uD83C(?:\uDFFB(?:\u200D\uD83E\uDEF2\uD83C[\uDFFC-\uDFFF])?|\uDFFC(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFD-\uDFFF])?|\uDFFD(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB\uDFFC\uDFFE\uDFFF])?|\uDFFE(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFD\uDFFF])?|\uDFFF(?:\u200D\uD83E\uDEF2\uD83C[\uDFFB-\uDFFE])?))?)/g,
    "Sr"
  );
  a2(nA, "Nr");
  a2(oA, "Tr");
  aA = a2((e7) => !(nA(e7) || oA(e7)), "kr"), iA = /[^\x20-\x7F]/u;
  a2(lA, "Hu");
  Vc = lA;
  a2(fl, "Ne");
  a2(qc, "Xe");
  a2(sA, "Wu");
  a2(uA, "Ir");
  a2(q2, "Lr");
  a2(cA, "Rr");
  a2(pA, "Mu");
  a2(dA, "Yr");
  a2(W2, "Pr");
  a2(Aa2, "Se");
  a2(Im, "Ze");
  a2(fA, "$u");
  a2(hA, "Vu");
  a2(mA, "jr");
  a2(gA, "Uu");
  a2(vA, "Hr");
  a2(Bm, "Qe");
  Pe = Symbol("MODE_BREAK"), yt2 = Symbol("MODE_FLAT"), Fa2 = Symbol("cursor");
  a2(Mm, "Wr");
  a2(wA, "zu");
  a2(bA, "Gu");
  a2(Lc, "bt");
  a2(Ic, "Ot");
  a2(rl, "et");
  a2(hl, "Fe");
  a2(yA, "Ku");
  Wc = yA, DA = (lo2 = class {
    constructor(t) {
      AR(this, _r2), this.stack = [t];
    }
    get key() {
      let { stack: t, siblings: r } = this;
      return he2(false, t, r === null ? -2 : -4) ?? null;
    }
    get index() {
      return this.siblings === null ? null : he2(false, this.stack, -2);
    }
    get node() {
      return he2(false, this.stack, -1);
    }
    get parent() {
      return this.getNode(1);
    }
    get grandparent() {
      return this.getNode(2);
    }
    get isInArray() {
      return this.siblings !== null;
    }
    get siblings() {
      let { stack: t } = this, r = he2(false, t, -3);
      return Array.isArray(r) ? r : null;
    }
    get next() {
      let { siblings: t } = this;
      return t === null ? null : t[this.index + 1];
    }
    get previous() {
      let { siblings: t } = this;
      return t === null ? null : t[this.index - 1];
    }
    get isFirst() {
      return this.index === 0;
    }
    get isLast() {
      let { siblings: t, index: r } = this;
      return t !== null && r === t.length - 1;
    }
    get isRoot() {
      return this.stack.length === 1;
    }
    get root() {
      return this.stack[0];
    }
    get ancestors() {
      return [...Ra2(this, _r2, ol).call(this)];
    }
    getName() {
      let { stack: t } = this, { length: r } = t;
      return r > 1 ? he2(false, t, -2) : null;
    }
    getValue() {
      return he2(false, this.stack, -1);
    }
    getNode(t = 0) {
      let r = Ra2(this, _r2, Bc).call(this, t);
      return r === -1 ? null : this.stack[r];
    }
    getParentNode(t = 0) {
      return this.getNode(t + 1);
    }
    call(t, ...r) {
      let { stack: n } = this, { length: o } = n, i = he2(false, n, -1);
      for (let l7 of r) i = i[l7], n.push(l7, i);
      try {
        return t(this);
      } finally {
        n.length = o;
      }
    }
    callParent(t, r = 0) {
      let n = Ra2(this, _r2, Bc).call(this, r + 1), o = this.stack.splice(n + 1);
      try {
        return t(this);
      } finally {
        this.stack.push(...o);
      }
    }
    each(t, ...r) {
      let { stack: n } = this, { length: o } = n, i = he2(false, n, -1);
      for (let l7 of r) i = i[l7], n.push(l7, i);
      try {
        for (let l7 = 0; l7 < i.length; ++l7) n.push(l7, i[l7]), t(this, l7, i), n.length -= 2;
      } finally {
        n.length = o;
      }
    }
    map(t, ...r) {
      let n = [];
      return this.each((o, i, l7) => {
        n[i] = t(o, i, l7);
      }, ...r), n;
    }
    match(...t) {
      let r = this.stack.length - 1, n = null, o = this.stack[r--];
      for (let i of t) {
        if (o === void 0) return false;
        let l7 = null;
        if (typeof n == "number" && (l7 = n, n = this.stack[r--], o = this.stack[r--]), i && !i(o, n, l7)) return false;
        n = this.stack[r--], o = this.stack[r--];
      }
      return true;
    }
    findAncestor(t) {
      for (let r of Ra2(this, _r2, ol).call(this)) if (t(r)) return r;
    }
    hasAncestor(t) {
      for (let r of Ra2(this, _r2, ol).call(this)) if (t(r)) return true;
      return false;
    }
  }, a2(lo2, "St"), lo2);
  _r2 = /* @__PURE__ */ new WeakSet(), Bc = a2(function(e7) {
    let { stack: t } = this;
    for (let r = t.length - 1; r >= 0; r -= 2) if (!Array.isArray(t[r]) && --e7 < 0) return r;
    return -1;
  }, "Nt"), ol = a2(function* () {
    let { stack: e7 } = this;
    for (let t = e7.length - 3; t >= 0; t -= 2) {
      let r = e7[t];
      Array.isArray(r) || (yield r);
    }
  }, "tt");
  xA = DA, _m = new Proxy(() => {
  }, { get: a2(() => _m, "get") }), Mc = _m;
  a2(CA, "qu");
  EA = CA;
  a2(Pm, "Tt");
  a2(SA, "Ur");
  a2(Ta2, "Ee");
  RA = Ta2(/\s/u), ir2 = Ta2(" 	"), Hm = Ta2(",; 	"), $m = Ta2(/[^\n\r]/u);
  a2(AA, "Ju");
  zr2 = AA;
  a2(FA, "Xu");
  ar = FA;
  a2(kA, "Zu");
  TA = kA, zm = /* @__PURE__ */ new Set(["tokens", "comments", "parent", "enclosingNode", "precedingNode", "followingNode"]), LA = a2(
    (e7) => Object.keys(e7).filter((t) => !zm.has(t)),
    "Qu"
  );
  a2(IA, "eo");
  ml = IA;
  a2(BA, "to");
  a2(Uc, "Lt");
  a2(ro2, "ue");
  a2(Pr2, "re");
  a2(no2, "oe");
  xc = /* @__PURE__ */ new WeakMap();
  a2(Gc, "ut");
  a2(Om, "qr");
  Cc = a2(() => false, "It");
  a2(MA, "Jr");
  Nm = a2((e7) => !/[\S\n\u2028\u2029]/u.test(e7), "Xr");
  a2(_A, "ro");
  a2(PA, "no");
  a2(U2, "Kr");
  a2(Ec, "Rt");
  a2(HA, "uo");
  Xc = HA;
  a2(jm, "Zr");
  a2($A, "oo");
  a2(zA, "io");
  a2(OA, "so");
  a2(NA, "Qr");
  a2(jA, "en");
  a2(VA, "ao");
  qA = VA, Vm = (so2 = class extends Error {
    constructor() {
      super(...arguments);
      __publicField(this, "name", "ConfigError");
    }
  }, a2(so2, "Pe"), so2), G2 = (uo2 = class extends Error {
    constructor() {
      super(...arguments);
      __publicField(this, "name", "UndefinedParserError");
    }
  }, a2(uo2, "Ie"), uo2), WA = { cursorOffset: { category: "Special", type: "int", default: -1, range: { start: -1, end: 1 / 0, step: 1 }, description: "Print (to stderr) where a cursor at the given position would move to after formatting.", cliCategory: "Editor" }, endOfLine: { category: "Global", type: "choice", default: "lf", description: "Which end of line characters to apply.", choices: [{ value: "lf", description: "Line Feed only (\\n), common on Linux and macOS as well as inside git repos" }, { value: "crlf", description: "Carriage Return + Line Feed characters (\\r\\n), common on Windows" }, { value: "cr", description: "Carriage Return character only (\\r), used very rarely" }, { value: "auto", description: `Maintain existing
(mixed values within one file are normalised by looking at what's used after the first line)` }] }, filepath: {
    category: "Special",
    type: "path",
    description: "Specify the input filepath. This will be used to do parser inference.",
    cliName: "stdin-filepath",
    cliCategory: "Other",
    cliDescription: "Path to the file to pretend that stdin comes from."
  }, insertPragma: {
    category: "Special",
    type: "boolean",
    default: false,
    description: "Insert @format pragma into file's first docblock comment.",
    cliCategory: "Other"
  }, parser: { category: "Global", type: "choice", default: void 0, description: "Which parser to use.", exception: a2((e7) => typeof e7 == "string" || typeof e7 == "function", "exception"), choices: [
    { value: "flow", description: "Flow" },
    { value: "babel", description: "JavaScript" },
    { value: "babel-flow", description: "Flow" },
    { value: "babel-ts", description: "TypeScript" },
    { value: "typescript", description: "TypeScript" },
    { value: "acorn", description: "JavaScript" },
    { value: "espree", description: "JavaScript" },
    { value: "meriyah", description: "JavaScript" },
    { value: "css", description: "CSS" },
    { value: "less", description: "Less" },
    { value: "scss", description: "SCSS" },
    { value: "json", description: "JSON" },
    { value: "json5", description: "JSON5" },
    { value: "jsonc", description: "JSON with Comments" },
    { value: "json-stringify", description: "JSON.stringify" },
    { value: "graphql", description: "GraphQL" },
    { value: "markdown", description: "Markdown" },
    { value: "mdx", description: "MDX" },
    { value: "vue", description: "Vue" },
    { value: "yaml", description: "YAML" },
    { value: "glimmer", description: "Ember / Handlebars" },
    {
      value: "html",
      description: "HTML"
    },
    { value: "angular", description: "Angular" },
    { value: "lwc", description: "Lightning Web Components" }
  ] }, plugins: {
    type: "path",
    array: true,
    default: [{ value: [] }],
    category: "Global",
    description: "Add a plugin. Multiple plugins can be passed as separate `--plugin`s.",
    exception: a2((e7) => typeof e7 == "string" || typeof e7 == "object", "exception"),
    cliName: "plugin",
    cliCategory: "Config"
  }, printWidth: { category: "Global", type: "int", default: 80, description: "The line length where Prettier will try wrap.", range: {
    start: 0,
    end: 1 / 0,
    step: 1
  } }, rangeEnd: {
    category: "Special",
    type: "int",
    default: 1 / 0,
    range: { start: 0, end: 1 / 0, step: 1 },
    description: `Format code ending at a given character offset (exclusive).
The range will extend forwards to the end of the selected statement.`,
    cliCategory: "Editor"
  }, rangeStart: { category: "Special", type: "int", default: 0, range: { start: 0, end: 1 / 0, step: 1 }, description: `Format code starting at a given character offset.
The range will extend backwards to the start of the first line containing the selected statement.`, cliCategory: "Editor" }, requirePragma: {
    category: "Special",
    type: "boolean",
    default: false,
    description: `Require either '@prettier' or '@format' to be present in the file's first docblock comment
in order for it to be formatted.`,
    cliCategory: "Other"
  }, tabWidth: { type: "int", category: "Global", default: 2, description: "Number of spaces per indentation level.", range: { start: 0, end: 1 / 0, step: 1 } }, useTabs: { category: "Global", type: "boolean", default: false, description: "Indent with tabs instead of spaces." }, embeddedLanguageFormatting: { category: "Global", type: "choice", default: "auto", description: "Control how Prettier formats quoted code embedded in the file.", choices: [{ value: "auto", description: "Format embedded code if Prettier can automatically identify it." }, { value: "off", description: "Never automatically format embedded code." }] } };
  a2(qm, "ot");
  a2(UA, "Do");
  a2(GA, "lo");
  XA = a2((e7) => String(e7).split(/[/\\]/u).pop(), "co");
  a2(X22, "nn");
  a2(YA, "fo");
  a2(KA, "po");
  ZA = KA, oo2 = { key: a2((e7) => /^[$_a-zA-Z][$_a-zA-Z0-9]*$/.test(e7) ? e7 : JSON.stringify(e7), "key"), value(e7) {
    if (e7 === null || typeof e7 != "object") return JSON.stringify(e7);
    if (Array.isArray(e7)) return `[${e7.map((r) => oo2.value(r)).join(", ")}]`;
    let t = Object.keys(e7);
    return t.length === 0 ? "{}" : `{ ${t.map((r) => `${oo2.key(r)}: ${oo2.value(e7[r])}`).join(", ")} }`;
  }, pair: a2(({ key: e7, value: t }) => oo2.value({ [e7]: t }), "pair") }, Y22 = cl($c(), 1), JA = a2((e7, t, { descriptor: r }) => {
    let n = [`${Y22.default.yellow(typeof e7 == "string" ? r.key(e7) : r.pair(e7))} is deprecated`];
    return t && n.push(`we now treat it as ${Y22.default.blue(typeof t == "string" ? r.key(t) : r.pair(t))}`), n.join("; ") + ".";
  }, "an"), ao2 = cl($c(), 1), Wm = Symbol.for("vnopts.VALUE_NOT_EXIST"), al = Symbol.for("vnopts.VALUE_UNCHANGED"), K2 = " ".repeat(2), QA = a2((e7, t, r) => {
    let { text: n, list: o } = r.normalizeExpectedResult(r.schemas[e7].expected(r)), i = [];
    return n && i.push(Z2(e7, t, n, r.descriptor)), o && i.push([Z2(e7, t, o.title, r.descriptor)].concat(o.values.map((l7) => Um(l7, r.loggerPrintWidth))).join(`
`)), Gm(i, r.loggerPrintWidth);
  }, "cn");
  a2(Z2, "ln");
  a2(Um, "fn");
  a2(Gm, "pn");
  J22 = cl($c(), 1), Sc = [], Q22 = [];
  a2(eF, "Ht");
  Xm = a2((e7, t, { descriptor: r, logger: n, schemas: o }) => {
    let i = [`Ignored unknown option ${J22.default.yellow(r.pair({ key: e7, value: t }))}.`], l7 = Object.keys(o).sort().find((u6) => eF(e7, u6) < 3);
    l7 && i.push(`Did you mean ${J22.default.blue(r.key(l7))}?`), n.warn(i.join(" "));
  }, "at"), tF = ["default", "expected", "validate", "deprecated", "forward", "redirect", "overlap", "preprocess", "postprocess"];
  a2(rF, "mo");
  lr2 = (co2 = class {
    static create(t) {
      return rF(this, t);
    }
    constructor(t) {
      this.name = t.name;
    }
    default(t) {
    }
    expected(t) {
      return "nothing";
    }
    validate(t, r) {
      return false;
    }
    deprecated(t, r) {
      return false;
    }
    forward(t, r) {
    }
    redirect(t, r) {
    }
    overlap(t, r, n) {
      return t;
    }
    preprocess(t, r) {
      return t;
    }
    postprocess(t, r) {
      return al;
    }
  }, a2(co2, "O"), co2);
  a2(nF, "Eo");
  oF = (po2 = class extends lr2 {
    constructor(t) {
      super(t), this._sourceName = t.sourceName;
    }
    expected(t) {
      return t.schemas[this._sourceName].expected(t);
    }
    validate(t, r) {
      return r.schemas[this._sourceName].validate(t, r);
    }
    redirect(t, r) {
      return this._sourceName;
    }
  }, a2(po2, "Dt"), po2), aF = (fo2 = class extends lr2 {
    expected() {
      return "anything";
    }
    validate() {
      return true;
    }
  }, a2(fo2, "lt"), fo2), iF = (ho2 = class extends lr2 {
    constructor({ valueSchema: t, name: r = t.name, ...n }) {
      super({ ...n, name: r }), this._valueSchema = t;
    }
    expected(t) {
      let { text: r, list: n } = t.normalizeExpectedResult(this._valueSchema.expected(t));
      return { text: r && `an array of ${r}`, list: n && { title: "an array of the following values", values: [{ list: n }] } };
    }
    validate(t, r) {
      if (!Array.isArray(t)) return false;
      let n = [];
      for (let o of t) {
        let i = r.normalizeValidateResult(this._valueSchema.validate(o, r), o);
        i !== true && n.push(i.value);
      }
      return n.length === 0 ? true : { value: n };
    }
    deprecated(t, r) {
      let n = [];
      for (let o of t) {
        let i = r.normalizeDeprecatedResult(this._valueSchema.deprecated(o, r), o);
        i !== false && n.push(...i.map(({ value: l7 }) => ({ value: [l7] })));
      }
      return n;
    }
    forward(t, r) {
      let n = [];
      for (let o of t) {
        let i = r.normalizeForwardResult(this._valueSchema.forward(o, r), o);
        n.push(...i.map(em));
      }
      return n;
    }
    redirect(t, r) {
      let n = [], o = [];
      for (let i of t) {
        let l7 = r.normalizeRedirectResult(this._valueSchema.redirect(i, r), i);
        "remain" in l7 && n.push(l7.remain), o.push(...l7.redirect.map(em));
      }
      return n.length === 0 ? { redirect: o } : { redirect: o, remain: n };
    }
    overlap(t, r) {
      return t.concat(r);
    }
  }, a2(ho2, "ct"), ho2);
  a2(em, "Fn");
  lF = (mo2 = class extends lr2 {
    expected() {
      return "true or false";
    }
    validate(t) {
      return typeof t == "boolean";
    }
  }, a2(mo2, "ft"), mo2);
  a2(sF, "En");
  a2(uF, "hn");
  a2(cF, "Cn");
  a2(pF, "gn");
  a2(dF, "yn");
  a2(fF, "An");
  a2(hF, "Bn");
  a2(tm, "Mt");
  a2(Ym, "$t");
  a2(rm, "Vt");
  a2(nm, "Ut");
  a2(om, "mn");
  a2(_c, "pt");
  a2(am, "zt");
  a2(mF, "ho");
  gF = (go2 = class extends lr2 {
    constructor(t) {
      super(t), this._choices = uF(t.choices.map((r) => r && typeof r == "object" ? r : { value: r }), "value");
    }
    expected({ descriptor: t }) {
      let r = Array.from(this._choices.keys()).map((i) => this._choices.get(i)).filter(({ hidden: i }) => !i).map((i) => i.value).sort(fF).map(
        t.value
      ), n = r.slice(0, -2), o = r.slice(-2);
      return { text: n.concat(o.join(" or ")).join(", "), list: { title: "one of the following values", values: r } };
    }
    validate(t) {
      return this._choices.has(t);
    }
    deprecated(t) {
      let r = this._choices.get(t);
      return r && r.deprecated ? { value: t } : false;
    }
    forward(t) {
      let r = this._choices.get(t);
      return r ? r.forward : void 0;
    }
    redirect(t) {
      let r = this._choices.get(t);
      return r ? r.redirect : void 0;
    }
  }, a2(go2, "dt"), go2), vF = (vo2 = class extends lr2 {
    expected() {
      return "a number";
    }
    validate(t, r) {
      return typeof t == "number";
    }
  }, a2(vo2, "Ft"), vo2), wF = (wo2 = class extends vF {
    expected() {
      return "an integer";
    }
    validate(t, r) {
      return r.normalizeValidateResult(super.validate(t, r), t) === true && dF(t);
    }
  }, a2(wo2, "mt"), wo2), im = (bo2 = class extends lr2 {
    expected() {
      return "a string";
    }
    validate(t) {
      return typeof t == "string";
    }
  }, a2(bo2, "Re"), bo2), bF = oo2, yF = Xm, DF = QA, xF = JA, CF = (yo2 = class {
    constructor(t, r) {
      let { logger: n = console, loggerPrintWidth: o = 80, descriptor: i = bF, unknown: l7 = yF, invalid: u6 = DF, deprecated: c = xF, missing: p = a2(
        () => false,
        "D"
      ), required: d = a2(() => false, "l"), preprocess: h7 = a2((v7) => v7, "d"), postprocess: f = a2(
        () => al,
        "f"
      ) } = r || {};
      this._utils = {
        descriptor: i,
        logger: n || { warn: a2(() => {
        }, "warn") },
        loggerPrintWidth: o,
        schemas: sF(t, "name"),
        normalizeDefaultResult: tm,
        normalizeExpectedResult: Ym,
        normalizeDeprecatedResult: nm,
        normalizeForwardResult: _c,
        normalizeRedirectResult: am,
        normalizeValidateResult: rm
      }, this._unknownHandler = l7, this._invalidHandler = hF(u6), this._deprecatedHandler = c, this._identifyMissing = (v7, b) => !(v7 in b) || p(v7, b), this._identifyRequired = d, this._preprocess = h7, this._postprocess = f, this.cleanHistory();
    }
    cleanHistory() {
      this._hasDeprecationWarned = cF();
    }
    normalize(t) {
      let r = {}, n = [this._preprocess(t, this._utils)], o = a2(() => {
        for (; n.length !== 0; ) {
          let i = n.shift(), l7 = this._applyNormalization(i, r);
          n.push(...l7);
        }
      }, "u");
      o();
      for (let i of Object.keys(this._utils.schemas)) {
        let l7 = this._utils.schemas[i];
        if (!(i in r)) {
          let u6 = tm(l7.default(this._utils));
          "value" in u6 && n.push({ [i]: u6.value });
        }
      }
      o();
      for (let i of Object.keys(this._utils.schemas)) {
        if (!(i in r)) continue;
        let l7 = this._utils.schemas[i], u6 = r[i], c = l7.postprocess(u6, this._utils);
        c !== al && (this._applyValidation(c, i, l7), r[i] = c);
      }
      return this._applyPostprocess(r), this._applyRequiredCheck(r), r;
    }
    _applyNormalization(t, r) {
      let n = [], { knownKeys: o, unknownKeys: i } = this._partitionOptionKeys(t);
      for (let l7 of o) {
        let u6 = this._utils.schemas[l7], c = u6.preprocess(t[l7], this._utils);
        this._applyValidation(c, l7, u6);
        let p = a2(({ from: f, to: v7 }) => {
          n.push(typeof v7 == "string" ? { [v7]: f } : { [v7.key]: v7.value });
        }, "D"), d = a2(({ value: f, redirectTo: v7 }) => {
          let b = nm(u6.deprecated(f, this._utils), c, true);
          if (b !== false) if (b === true) this._hasDeprecationWarned(l7) || this._utils.logger.warn(this._deprecatedHandler(l7, v7, this._utils));
          else for (let { value: m } of b) {
            let g7 = { key: l7, value: m };
            if (!this._hasDeprecationWarned(g7)) {
              let y = typeof v7 == "string" ? { key: v7, value: m } : v7;
              this._utils.logger.warn(this._deprecatedHandler(g7, y, this._utils));
            }
          }
        }, "l");
        _c(u6.forward(c, this._utils), c).forEach(p);
        let h7 = am(u6.redirect(c, this._utils), c);
        if (h7.redirect.forEach(p), "remain" in h7) {
          let f = h7.remain;
          r[l7] = l7 in r ? u6.overlap(r[l7], f, this._utils) : f, d({ value: f });
        }
        for (let { from: f, to: v7 } of h7.redirect) d({ value: f, redirectTo: v7 });
      }
      for (let l7 of i) {
        let u6 = t[l7];
        this._applyUnknownHandler(l7, u6, r, (c, p) => {
          n.push({ [c]: p });
        });
      }
      return n;
    }
    _applyRequiredCheck(t) {
      for (let r of Object.keys(this._utils.schemas)) if (this._identifyMissing(r, t) && this._identifyRequired(r)) throw this._invalidHandler(
        r,
        Wm,
        this._utils
      );
    }
    _partitionOptionKeys(t) {
      let [r, n] = pF(Object.keys(t).filter((o) => !this._identifyMissing(o, t)), (o) => o in this._utils.schemas);
      return { knownKeys: r, unknownKeys: n };
    }
    _applyValidation(t, r, n) {
      let o = rm(n.validate(t, this._utils), t);
      if (o !== true) throw this._invalidHandler(r, o.value, this._utils);
    }
    _applyUnknownHandler(t, r, n, o) {
      let i = this._unknownHandler(t, r, this._utils);
      if (i) for (let l7 of Object.keys(i)) {
        if (this._identifyMissing(l7, i)) continue;
        let u6 = i[l7];
        l7 in this._utils.schemas ? o(l7, u6) : n[l7] = u6;
      }
    }
    _applyPostprocess(t) {
      let r = this._postprocess(t, this._utils);
      if (r !== al) {
        if (r.delete) for (let n of r.delete) delete t[n];
        if (r.override) {
          let { knownKeys: n, unknownKeys: o } = this._partitionOptionKeys(r.override);
          for (let i of n) {
            let l7 = r.override[i];
            this._applyValidation(l7, i, this._utils.schemas[i]), t[i] = l7;
          }
          for (let i of o) {
            let l7 = r.override[i];
            this._applyUnknownHandler(i, l7, t, (u6, c) => {
              let p = this._utils.schemas[u6];
              this._applyValidation(c, u6, p), t[u6] = c;
            });
          }
        }
      }
    }
  }, a2(yo2, "Et"), yo2);
  a2(EF, "go");
  a2(SF, "yo");
  a2(RF, "Ao");
  AF = EF, FF = a2((e7, t, r) => {
    if (!(e7 && t == null)) {
      if (t.findLast) return t.findLast(r);
      for (let n = t.length - 1; n >= 0; n--) {
        let o = t[n];
        if (r(o, n, t)) return o;
      }
    }
  }, "Bo"), Km = FF;
  a2(Zm, "qt");
  a2(kF, "On");
  a2(Jm, "ht");
  a2(Qm, "Jt");
  a2(TF, "Sn");
  lm = { astFormat: "estree", printer: {}, originalText: void 0, locStart: null, locEnd: null };
  a2(LF, "wo");
  Co2 = LF, IF = cl(TR(), 1);
  a2(BF, "ko");
  a2(MF, "Lo");
  La2 = BF;
  a2(_F, "Un");
  a2(PF, "Po");
  a2(HF, "Io");
  $F = HF;
  a2(gl, "Ye");
  a2(sm, "Gn");
  a2(eg, "Qt");
  a2(zF, "Ro");
  OF = zF;
  a2(NF, "Yo");
  jF = NF, VF = a2((e7, t, r) => {
    if (!(e7 && t == null)) {
      if (t.findLastIndex) return t.findLastIndex(r);
      for (let n = t.length - 1; n >= 0; n--) {
        let o = t[n];
        if (r(o, n, t)) return n;
      }
      return -1;
    }
  }, "jo"), qF = VF, WF = a2(({ parser: e7 }) => e7 === "json" || e7 === "json5" || e7 === "jsonc" || e7 === "json-stringify", "Ho");
  a2(UF, "Wo");
  a2(um, "Xn");
  a2(GF, "Mo");
  a2(Pc, "er");
  a2(XF, "$o");
  tg = /* @__PURE__ */ new Set(["JsonRoot", "ObjectExpression", "ArrayExpression", "StringLiteral", "NumericLiteral", "BooleanLiteral", "NullLiteral", "UnaryExpression", "TemplateLiteral"]), YF = /* @__PURE__ */ new Set(["OperationDefinition", "FragmentDefinition", "VariableDefinition", "TypeExtensionDefinition", "ObjectTypeDefinition", "FieldDefinition", "DirectiveDefinition", "EnumTypeDefinition", "EnumValueDefinition", "InputValueDefinition", "InputObjectTypeDefinition", "SchemaDefinition", "OperationTypeDefinition", "InterfaceTypeDefinition", "UnionTypeDefinition", "ScalarTypeDefinition"]);
  a2(cm, "Zn");
  a2(KF, "eu");
  rg = "\uFEFF", pm = Symbol("cursor");
  a2(ng, "ou");
  a2(ZF, "Uo");
  a2(Ac, "tr");
  a2(dm, "ru");
  a2(og, "iu");
  a2(fm, "nu");
  a2(ag, "rr");
  a2(JF, "su");
  a2(QF, "au");
  a2(ek, "Du");
  a2(tk, "lu");
  a2(rk, "cu");
  ig = {};
  ul(ig, { builders: a2(() => nk, "builders"), printer: a2(() => ok, "printer"), utils: a2(
    () => ak,
    "utils"
  ) });
  nk = {
    join: Tm,
    line: Fm,
    softline: JR,
    hardline: $r2,
    literalline: km,
    group: Sm,
    conditionalGroup: GR,
    fill: Rm,
    lineSuffix: kc,
    lineSuffixBoundary: KR,
    cursor: Tc,
    breakParent: dl,
    ifBreak: XR,
    trim: ZR,
    indent: ll,
    indentIfBreak: YR,
    align: xo2,
    addAlignmentToDoc: Lm,
    markAsRoot: WR,
    dedentToRoot: qR,
    dedent: UR,
    hardlineWithoutBreakParent: jc,
    literallineWithoutBreakParent: Am,
    label: QR,
    concat: a2((e7) => e7, "concat")
  }, ok = { printDocToString: hl }, ak = {
    willBreak: uA,
    traverseDoc: Oc,
    findInDoc: qc,
    mapDoc: fl,
    removeLines: dA,
    stripTrailingHardline: Im,
    replaceEndOfLine: mA,
    canBreak: vA
  }, ik = "3.3.3", lg = {};
  ul(lg, { addDanglingComment: a2(() => Pr2, "addDanglingComment"), addLeadingComment: a2(() => ro2, "addLeadingComment"), addTrailingComment: a2(() => no2, "addTrailingComment"), getAlignmentSize: a2(() => Wc, "getAlignmentSize"), getIndentSize: a2(() => dk, "getIndentSize"), getMaxContinuousCount: a2(() => mk, "getMaxContinuousCount"), getNextNonSpaceNonCommentCharacter: a2(() => vk, "getNextNonSpaceNonCommentCharacter"), getNextNonSpaceNonCommentCharacterIndex: a2(
    () => Sk,
    "getNextNonSpaceNonCommentCharacterIndex"
  ), getStringWidth: a2(() => Vc, "getStringWidth"), hasNewline: a2(
    () => ar,
    "hasNewline"
  ), hasNewlineInRange: a2(() => bk, "hasNewlineInRange"), hasSpaces: a2(() => Dk, "hasSpaces"), isNextLineEmpty: a2(() => kk, "isNextLineEmpty"), isNextLineEmptyAfterIndex: a2(() => Jc, "isNextLineEmptyAfterIndex"), isPreviousLineEmpty: a2(() => Ak, "isPreviousLineEmpty"), makeString: a2(() => Ck, "makeString"), skip: a2(() => Ta2, "skip"), skipEverythingButNewLine: a2(() => $m, "skipEverythingButNewLine"), skipInlineComment: a2(
    () => Yc,
    "skipInlineComment"
  ), skipNewline: a2(() => zr2, "skipNewline"), skipSpaces: a2(() => ir2, "skipSpaces"), skipToLineEnd: a2(() => Hm, "skipToLineEnd"), skipTrailingComment: a2(() => Kc, "skipTrailingComment"), skipWhitespace: a2(
    () => RA,
    "skipWhitespace"
  ) });
  a2(lk, "Jo");
  Yc = lk;
  a2(sk, "Xo");
  Kc = sk;
  a2(uk, "Zo");
  Zc = uk;
  a2(ck, "Qo");
  Jc = ck;
  a2(pk, "ei");
  dk = pk;
  a2(fk, "ur");
  a2(hk, "ti");
  mk = hk;
  a2(gk, "ri");
  vk = gk;
  a2(wk, "ni");
  bk = wk;
  a2(yk, "ui");
  Dk = yk;
  a2(xk, "oi");
  Ck = xk;
  a2(Ek, "ii");
  a2(Sk, "si");
  a2(Rk, "ai");
  a2(Ak, "Di");
  a2(Fk, "li");
  a2(kk, "ci");
  a2(Hr2, "fe");
  sg = Hr2(ag);
  a2(ug, "gu");
  a2(Tk, "fi");
  Lk = Hr2(qm, 0), Ik = { parse: Hr2(JF), formatAST: Hr2(QF), formatDoc: Hr2(ek), printToDoc: Hr2(tk), printDocToString: Hr2(rk) }, cg = bm;
});
function dg(e7) {
  for (var t = [], r = 1; r < arguments.length; r++)
    t[r - 1] = arguments[r];
  var n = Array.from(typeof e7 == "string" ? [e7] : e7);
  n[n.length - 1] = n[n.length - 1].replace(/\r?\n([\t ]*)$/, "");
  var o = n.reduce(function(u6, c) {
    var p = c.match(/\n([\t ]+|(?!\s).)/g);
    return p ? u6.concat(p.map(function(d) {
      var h7, f;
      return (f = (h7 = d.match(/[\t ]/g)) === null || h7 === void 0 ? void 0 : h7.length) !== null && f !== void 0 ? f : 0;
    })) : u6;
  }, []);
  if (o.length) {
    var i = new RegExp(`
[	 ]{` + Math.min.apply(Math, o) + "}", "g");
    n = n.map(function(u6) {
      return u6.replace(i, `
`);
    });
  }
  n[0] = n[0].replace(/^\r?\n/, "");
  var l7 = n[0];
  return t.forEach(function(u6, c) {
    var p = l7.match(/(?:^|\n)( *)$/), d = p ? p[1] : "", h7 = u6;
    typeof u6 == "string" && u6.includes(`
`) && (h7 = String(u6).split(`
`).map(function(f, v7) {
      return v7 === 0 ? f : "" + d + f;
    }).join(`
`)), l7 += h7 + n[c + 1];
  }), l7;
}
var fg = F3(() => {
  a2(dg, "dedent");
});
var mg = {};
an2(mg, {
  formatter: () => Bk
});
var hg;
var Bk;
var gg = F3(() => {
  "use strict";
  hg = we2(Qo(), 1);
  O22();
  pg();
  fg();
  Bk = (0, hg.default)(2)(async (e7, t) => e7 === false ? t : e7 === "dedent" || e7 === true ? dg(t) : (await cg.format(t, {
    parser: e7,
    plugins: [z2],
    htmlWhitespaceSensitivity: "ignore"
  })).trim());
});
var Q0;
var e1;
var t3 = F3(() => {
  Q0 = a2(function(t) {
    return t.reduce(function(r, n) {
      var o = n[0], i = n[1];
      return r[o] = i, r;
    }, {});
  }, "fromEntries"), e1 = typeof window < "u" && window.document && window.document.createElement ? _l.useLayoutEffect : _l.useEffect;
});
var ne2;
var ce2;
var se2;
var oe2;
var Pl;
var cr2;
var Vt2;
var Xr2;
var r3;
var Hl;
var Mo;
var n3;
var t1;
var $l;
var jI;
var VI;
var qI;
var WI;
var UI;
var GI;
var XI;
var YI;
var KI;
var o3;
var je2 = F3(() => {
  ne2 = "top", ce2 = "bottom", se2 = "right", oe2 = "left", Pl = "auto", cr2 = [ne2, ce2, se2, oe2], Vt2 = "start", Xr2 = "end", r3 = "clippingParents", Hl = "viewport", Mo = "popper", n3 = "reference", t1 = cr2.reduce(function(e7, t) {
    return e7.concat([t + "-" + Vt2, t + "-" + Xr2]);
  }, []), $l = [].concat(cr2, [Pl]).reduce(function(e7, t) {
    return e7.concat([t, t + "-" + Vt2, t + "-" + Xr2]);
  }, []), jI = "beforeRead", VI = "read", qI = "afterRead", WI = "beforeMain", UI = "main", GI = "afterMain", XI = "beforeWrite", YI = "write", KI = "afterWrite", o3 = [jI, VI, qI, WI, UI, GI, XI, YI, KI];
});
function me2(e7) {
  return e7 ? (e7.nodeName || "").toLowerCase() : null;
}
var pr = F3(() => {
  a2(me2, "getNodeName");
});
function ee2(e7) {
  if (e7 == null)
    return window;
  if (e7.toString() !== "[object Window]") {
    var t = e7.ownerDocument;
    return t && t.defaultView || window;
  }
  return e7;
}
var ut2 = F3(() => {
  a2(ee2, "getWindow");
});
function Je2(e7) {
  var t = ee2(e7).Element;
  return e7 instanceof t || e7 instanceof Element;
}
function pe2(e7) {
  var t = ee2(e7).HTMLElement;
  return e7 instanceof t || e7 instanceof HTMLElement;
}
function _o2(e7) {
  if (typeof ShadowRoot > "u")
    return false;
  var t = ee2(e7).ShadowRoot;
  return e7 instanceof t || e7 instanceof ShadowRoot;
}
var Ve2 = F3(() => {
  ut2();
  a2(Je2, "isElement");
  a2(pe2, "isHTMLElement");
  a2(_o2, "isShadowRoot");
});
function ZI(e7) {
  var t = e7.state;
  Object.keys(t.elements).forEach(function(r) {
    var n = t.styles[r] || {}, o = t.attributes[r] || {}, i = t.elements[r];
    !pe2(i) || !me2(i) || (Object.assign(i.style, n), Object.keys(o).forEach(function(l7) {
      var u6 = o[l7];
      u6 === false ? i.removeAttribute(l7) : i.setAttribute(l7, u6 === true ? "" : u6);
    }));
  });
}
function JI(e7) {
  var t = e7.state, r = {
    popper: {
      position: t.options.strategy,
      left: "0",
      top: "0",
      margin: "0"
    },
    arrow: {
      position: "absolute"
    },
    reference: {}
  };
  return Object.assign(t.elements.popper.style, r.popper), t.styles = r, t.elements.arrow && Object.assign(t.elements.arrow.style, r.arrow), function() {
    Object.keys(t.elements).forEach(function(n) {
      var o = t.elements[n], i = t.attributes[n] || {}, l7 = Object.keys(t.styles.hasOwnProperty(n) ? t.styles[n] : r[n]), u6 = l7.reduce(function(c, p) {
        return c[p] = "", c;
      }, {});
      !pe2(o) || !me2(o) || (Object.assign(o.style, u6), Object.keys(i).forEach(function(c) {
        o.removeAttribute(c);
      }));
    });
  };
}
var a3;
var i3 = F3(() => {
  pr();
  Ve2();
  a2(ZI, "applyStyles");
  a2(JI, "effect");
  a3 = {
    name: "applyStyles",
    enabled: true,
    phase: "write",
    fn: ZI,
    effect: JI,
    requires: ["computeStyles"]
  };
});
function ge2(e7) {
  return e7.split("-")[0];
}
var dr = F3(() => {
  a2(ge2, "getBasePlacement");
});
var ct2;
var Yr2;
var qt2;
var fr2 = F3(() => {
  ct2 = Math.max, Yr2 = Math.min, qt2 = Math.round;
});
function Po2() {
  var e7 = navigator.userAgentData;
  return e7 != null && e7.brands && Array.isArray(e7.brands) ? e7.brands.map(function(t) {
    return t.brand + "/" + t.version;
  }).join(" ") : navigator.userAgent;
}
var r1 = F3(() => {
  a2(Po2, "getUAString");
});
function Na2() {
  return !/^((?!chrome|android).)*safari/i.test(Po2());
}
var n1 = F3(() => {
  r1();
  a2(Na2, "isLayoutViewport");
});
function Qe2(e7, t, r) {
  t === void 0 && (t = false), r === void 0 && (r = false);
  var n = e7.getBoundingClientRect(), o = 1, i = 1;
  t && pe2(e7) && (o = e7.offsetWidth > 0 && qt2(n.width) / e7.offsetWidth || 1, i = e7.offsetHeight > 0 && qt2(n.height) / e7.offsetHeight || 1);
  var l7 = Je2(e7) ? ee2(e7) : window, u6 = l7.visualViewport, c = !Na2() && r, p = (n.left + (c && u6 ? u6.offsetLeft : 0)) / o, d = (n.top + (c && u6 ? u6.offsetTop : 0)) / i, h7 = n.width / o, f = n.height / i;
  return {
    width: h7,
    height: f,
    top: d,
    right: p + h7,
    bottom: d + f,
    left: p,
    x: p,
    y: d
  };
}
var Ho = F3(() => {
  Ve2();
  fr2();
  ut2();
  n1();
  a2(Qe2, "getBoundingClientRect");
});
function Kr2(e7) {
  var t = Qe2(e7), r = e7.offsetWidth, n = e7.offsetHeight;
  return Math.abs(t.width - r) <= 1 && (r = t.width), Math.abs(t.height - n) <= 1 && (n = t.height), {
    x: e7.offsetLeft,
    y: e7.offsetTop,
    width: r,
    height: n
  };
}
var zl = F3(() => {
  Ho();
  a2(Kr2, "getLayoutRect");
});
function ja2(e7, t) {
  var r = t.getRootNode && t.getRootNode();
  if (e7.contains(t))
    return true;
  if (r && _o2(r)) {
    var n = t;
    do {
      if (n && e7.isSameNode(n))
        return true;
      n = n.parentNode || n.host;
    } while (n);
  }
  return false;
}
var o1 = F3(() => {
  Ve2();
  a2(ja2, "contains");
});
function ke2(e7) {
  return ee2(e7).getComputedStyle(e7);
}
var $o = F3(() => {
  ut2();
  a2(ke2, "getComputedStyle");
});
function a1(e7) {
  return ["table", "td", "th"].indexOf(me2(e7)) >= 0;
}
var l3 = F3(() => {
  pr();
  a2(a1, "isTableElement");
});
function xe(e7) {
  return ((Je2(e7) ? e7.ownerDocument : (
    // $FlowFixMe[prop-missing]
    e7.document
  )) || window.document).documentElement;
}
var Wt2 = F3(() => {
  Ve2();
  a2(xe, "getDocumentElement");
});
function Ut2(e7) {
  return me2(e7) === "html" ? e7 : (
    // this is a quicker (but less type safe) way to save quite some bytes from the bundle
    // $FlowFixMe[incompatible-return]
    // $FlowFixMe[prop-missing]
    e7.assignedSlot || // step into the shadow DOM of the parent of a slotted node
    e7.parentNode || // DOM Element detected
    (_o2(e7) ? e7.host : null) || // ShadowRoot detected
    // $FlowFixMe[incompatible-call]: HTMLElement is a Node
    xe(e7)
  );
}
var Va2 = F3(() => {
  pr();
  Wt2();
  Ve2();
  a2(Ut2, "getParentNode");
});
function s3(e7) {
  return !pe2(e7) || // https://github.com/popperjs/popper-core/issues/837
  ke2(e7).position === "fixed" ? null : e7.offsetParent;
}
function QI(e7) {
  var t = /firefox/i.test(Po2()), r = /Trident/i.test(Po2());
  if (r && pe2(e7)) {
    var n = ke2(e7);
    if (n.position === "fixed")
      return null;
  }
  var o = Ut2(e7);
  for (_o2(o) && (o = o.host); pe2(o) && ["html", "body"].indexOf(me2(o)) < 0; ) {
    var i = ke2(o);
    if (i.transform !== "none" || i.perspective !== "none" || i.contain === "paint" || ["transform", "perspective"].indexOf(i.willChange) !== -1 || t && i.willChange === "filter" || t && i.filter && i.filter !== "none")
      return o;
    o = o.parentNode;
  }
  return null;
}
function pt(e7) {
  for (var t = ee2(e7), r = s3(e7); r && a1(r) && ke2(r).position === "static"; )
    r = s3(r);
  return r && (me2(r) === "html" || me2(r) === "body" && ke2(r).position === "static") ? t : r || QI(e7) || t;
}
var zo = F3(() => {
  ut2();
  pr();
  $o();
  Ve2();
  l3();
  Va2();
  r1();
  a2(s3, "getTrueOffsetParent");
  a2(QI, "getContainingBlock");
  a2(pt, "getOffsetParent");
});
function Zr2(e7) {
  return ["top", "bottom"].indexOf(e7) >= 0 ? "x" : "y";
}
var Ol = F3(() => {
  a2(Zr2, "getMainAxisFromPlacement");
});
function Jr2(e7, t, r) {
  return ct2(e7, Yr2(t, r));
}
function u3(e7, t, r) {
  var n = Jr2(e7, t, r);
  return n > r ? r : n;
}
var i1 = F3(() => {
  fr2();
  a2(Jr2, "within");
  a2(u3, "withinMaxClamp");
});
function qa2() {
  return {
    top: 0,
    right: 0,
    bottom: 0,
    left: 0
  };
}
var l1 = F3(() => {
  a2(qa2, "getFreshSideObject");
});
function Wa2(e7) {
  return Object.assign({}, qa2(), e7);
}
var s1 = F3(() => {
  l1();
  a2(Wa2, "mergePaddingObject");
});
function Ua2(e7, t) {
  return t.reduce(function(r, n) {
    return r[n] = e7, r;
  }, {});
}
var u1 = F3(() => {
  a2(Ua2, "expandToHashMap");
});
function tB(e7) {
  var t, r = e7.state, n = e7.name, o = e7.options, i = r.elements.arrow, l7 = r.modifiersData.popperOffsets, u6 = ge2(r.placement), c = Zr2(u6), p = [
    oe2,
    se2
  ].indexOf(u6) >= 0, d = p ? "height" : "width";
  if (!(!i || !l7)) {
    var h7 = eB(o.padding, r), f = Kr2(i), v7 = c === "y" ? ne2 : oe2, b = c === "y" ? ce2 : se2, m = r.rects.reference[d] + r.rects.reference[c] - l7[c] - r.rects.popper[d], g7 = l7[c] - r.rects.reference[c], y = pt(i), w5 = y ? c === "y" ? y.clientHeight || 0 : y.clientWidth || 0 : 0, D7 = m / 2 - g7 / 2, x7 = h7[v7], C7 = w5 - f[d] - h7[b], E7 = w5 / 2 - f[d] / 2 + D7, S4 = Jr2(x7, E7, C7), R = c;
    r.modifiersData[n] = (t = {}, t[R] = S4, t.centerOffset = S4 - E7, t);
  }
}
function rB(e7) {
  var t = e7.state, r = e7.options, n = r.element, o = n === void 0 ? "[data-popper-arrow]" : n;
  o != null && (typeof o == "string" && (o = t.elements.popper.querySelector(o), !o) || ja2(t.elements.popper, o) && (t.elements.arrow = o));
}
var eB;
var c3;
var p3 = F3(() => {
  dr();
  zl();
  o1();
  zo();
  Ol();
  i1();
  s1();
  u1();
  je2();
  eB = a2(function(t, r) {
    return t = typeof t == "function" ? t(Object.assign({}, r.rects, {
      placement: r.placement
    })) : t, Wa2(typeof t != "number" ? t : Ua2(t, cr2));
  }, "toPaddingObject");
  a2(tB, "arrow");
  a2(rB, "effect");
  c3 = {
    name: "arrow",
    enabled: true,
    phase: "main",
    fn: tB,
    effect: rB,
    requires: ["popperOffsets"],
    requiresIfExists: ["preventOverflow"]
  };
});
function et2(e7) {
  return e7.split("-")[1];
}
var Oo2 = F3(() => {
  a2(et2, "getVariation");
});
function oB(e7, t) {
  var r = e7.x, n = e7.y, o = t.devicePixelRatio || 1;
  return {
    x: qt2(r * o) / o || 0,
    y: qt2(n * o) / o || 0
  };
}
function d3(e7) {
  var t, r = e7.popper, n = e7.popperRect, o = e7.placement, i = e7.variation, l7 = e7.offsets, u6 = e7.position, c = e7.gpuAcceleration, p = e7.adaptive, d = e7.roundOffsets, h7 = e7.isFixed, f = l7.x, v7 = f === void 0 ? 0 : f, b = l7.y, m = b === void 0 ? 0 : b, g7 = typeof d == "function" ? d({
    x: v7,
    y: m
  }) : {
    x: v7,
    y: m
  };
  v7 = g7.x, m = g7.y;
  var y = l7.hasOwnProperty("x"), w5 = l7.hasOwnProperty("y"), D7 = oe2, x7 = ne2, C7 = window;
  if (p) {
    var E7 = pt(r), S4 = "clientHeight", R = "clientWidth";
    if (E7 === ee2(r) && (E7 = xe(r), ke2(E7).position !== "static" && u6 === "absolute" && (S4 = "scrollHeight", R = "scrollWidth")), E7 = E7, o === ne2 || (o === oe2 || o === se2) && i === Xr2) {
      x7 = ce2;
      var A = h7 && E7 === C7 && C7.visualViewport ? C7.visualViewport.height : (
        // $FlowFixMe[prop-missing]
        E7[S4]
      );
      m -= A - n.height, m *= c ? 1 : -1;
    }
    if (o === oe2 || (o === ne2 || o === ce2) && i === Xr2) {
      D7 = se2;
      var k4 = h7 && E7 === C7 && C7.visualViewport ? C7.visualViewport.width : (
        // $FlowFixMe[prop-missing]
        E7[R]
      );
      v7 -= k4 - n.width, v7 *= c ? 1 : -1;
    }
  }
  var B6 = Object.assign({
    position: u6
  }, p && nB), $6 = d === true ? oB({
    x: v7,
    y: m
  }, ee2(r)) : {
    x: v7,
    y: m
  };
  if (v7 = $6.x, m = $6.y, c) {
    var M6;
    return Object.assign({}, B6, (M6 = {}, M6[x7] = w5 ? "0" : "", M6[D7] = y ? "0" : "", M6.transform = (C7.devicePixelRatio || 1) <= 1 ? "translate(" + v7 + "px, " + m + "px)" : "translate3d(" + v7 + "px, " + m + "px, 0)", M6));
  }
  return Object.assign({}, B6, (t = {}, t[x7] = w5 ? m + "px" : "", t[D7] = y ? v7 + "px" : "", t.transform = "", t));
}
function aB(e7) {
  var t = e7.state, r = e7.options, n = r.gpuAcceleration, o = n === void 0 ? true : n, i = r.adaptive, l7 = i === void 0 ? true : i, u6 = r.roundOffsets, c = u6 === void 0 ? true : u6, p = {
    placement: ge2(t.placement),
    variation: et2(t.placement),
    popper: t.elements.popper,
    popperRect: t.rects.popper,
    gpuAcceleration: o,
    isFixed: t.options.strategy === "fixed"
  };
  t.modifiersData.popperOffsets != null && (t.styles.popper = Object.assign({}, t.styles.popper, d3(Object.assign({}, p, {
    offsets: t.modifiersData.popperOffsets,
    position: t.options.strategy,
    adaptive: l7,
    roundOffsets: c
  })))), t.modifiersData.arrow != null && (t.styles.arrow = Object.assign({}, t.styles.arrow, d3(Object.assign({}, p, {
    offsets: t.modifiersData.arrow,
    position: "absolute",
    adaptive: false,
    roundOffsets: c
  })))), t.attributes.popper = Object.assign({}, t.attributes.popper, {
    "data-popper-placement": t.placement
  });
}
var nB;
var f3;
var h3 = F3(() => {
  je2();
  zo();
  ut2();
  Wt2();
  $o();
  dr();
  Oo2();
  fr2();
  nB = {
    top: "auto",
    right: "auto",
    bottom: "auto",
    left: "auto"
  };
  a2(oB, "roundOffsetsByDPR");
  a2(d3, "mapToStyles");
  a2(aB, "computeStyles");
  f3 = {
    name: "computeStyles",
    enabled: true,
    phase: "beforeWrite",
    fn: aB,
    data: {}
  };
});
function iB(e7) {
  var t = e7.state, r = e7.instance, n = e7.options, o = n.scroll, i = o === void 0 ? true : o, l7 = n.resize, u6 = l7 === void 0 ? true : l7, c = ee2(t.elements.popper), p = [].concat(t.scrollParents.reference, t.scrollParents.popper);
  return i && p.forEach(function(d) {
    d.addEventListener("scroll", r.update, Nl);
  }), u6 && c.addEventListener("resize", r.update, Nl), function() {
    i && p.forEach(function(d) {
      d.removeEventListener("scroll", r.update, Nl);
    }), u6 && c.removeEventListener("resize", r.update, Nl);
  };
}
var Nl;
var m3;
var g3 = F3(() => {
  ut2();
  Nl = {
    passive: true
  };
  a2(iB, "effect");
  m3 = {
    name: "eventListeners",
    enabled: true,
    phase: "write",
    fn: a2(function() {
    }, "fn"),
    effect: iB,
    data: {}
  };
});
function No(e7) {
  return e7.replace(/left|right|bottom|top/g, function(t) {
    return lB[t];
  });
}
var lB;
var v3 = F3(() => {
  lB = {
    left: "right",
    right: "left",
    bottom: "top",
    top: "bottom"
  };
  a2(No, "getOppositePlacement");
});
function jl(e7) {
  return e7.replace(/start|end/g, function(t) {
    return sB[t];
  });
}
var sB;
var w3 = F3(() => {
  sB = {
    start: "end",
    end: "start"
  };
  a2(jl, "getOppositeVariationPlacement");
});
function Qr2(e7) {
  var t = ee2(e7), r = t.pageXOffset, n = t.pageYOffset;
  return {
    scrollLeft: r,
    scrollTop: n
  };
}
var Vl = F3(() => {
  ut2();
  a2(Qr2, "getWindowScroll");
});
function en2(e7) {
  return Qe2(xe(e7)).left + Qr2(e7).scrollLeft;
}
var ql = F3(() => {
  Ho();
  Wt2();
  Vl();
  a2(en2, "getWindowScrollBarX");
});
function c1(e7, t) {
  var r = ee2(e7), n = xe(e7), o = r.visualViewport, i = n.clientWidth, l7 = n.clientHeight, u6 = 0, c = 0;
  if (o) {
    i = o.width, l7 = o.height;
    var p = Na2();
    (p || !p && t === "fixed") && (u6 = o.offsetLeft, c = o.offsetTop);
  }
  return {
    width: i,
    height: l7,
    x: u6 + en2(e7),
    y: c
  };
}
var b3 = F3(() => {
  ut2();
  Wt2();
  ql();
  n1();
  a2(c1, "getViewportRect");
});
function p1(e7) {
  var t, r = xe(e7), n = Qr2(e7), o = (t = e7.ownerDocument) == null ? void 0 : t.body, i = ct2(r.scrollWidth, r.clientWidth, o ? o.scrollWidth : 0, o ? o.clientWidth : 0), l7 = ct2(r.scrollHeight, r.clientHeight, o ? o.scrollHeight : 0, o ? o.clientHeight : 0), u6 = -n.scrollLeft + en2(
    e7
  ), c = -n.scrollTop;
  return ke2(o || r).direction === "rtl" && (u6 += ct2(r.clientWidth, o ? o.clientWidth : 0) - i), {
    width: i,
    height: l7,
    x: u6,
    y: c
  };
}
var y3 = F3(() => {
  Wt2();
  $o();
  ql();
  Vl();
  fr2();
  a2(p1, "getDocumentRect");
});
function tn2(e7) {
  var t = ke2(e7), r = t.overflow, n = t.overflowX, o = t.overflowY;
  return /auto|scroll|overlay|hidden/.test(r + o + n);
}
var Wl = F3(() => {
  $o();
  a2(tn2, "isScrollParent");
});
function Ul(e7) {
  return ["html", "body", "#document"].indexOf(me2(e7)) >= 0 ? e7.ownerDocument.body : pe2(e7) && tn2(e7) ? e7 : Ul(Ut2(e7));
}
var D3 = F3(() => {
  Va2();
  Wl();
  pr();
  Ve2();
  a2(Ul, "getScrollParent");
});
function hr2(e7, t) {
  var r;
  t === void 0 && (t = []);
  var n = Ul(e7), o = n === ((r = e7.ownerDocument) == null ? void 0 : r.body), i = ee2(n), l7 = o ? [i].concat(i.visualViewport || [], tn2(n) ? n : []) : n, u6 = t.concat(l7);
  return o ? u6 : (
    // $FlowFixMe[incompatible-call]: isBody tells us target will be an HTMLElement here
    u6.concat(hr2(Ut2(l7)))
  );
}
var d1 = F3(() => {
  D3();
  Va2();
  ut2();
  Wl();
  a2(hr2, "listScrollParents");
});
function jo(e7) {
  return Object.assign({}, e7, {
    left: e7.x,
    top: e7.y,
    right: e7.x + e7.width,
    bottom: e7.y + e7.height
  });
}
var f1 = F3(() => {
  a2(jo, "rectToClientRect");
});
function uB(e7, t) {
  var r = Qe2(e7, false, t === "fixed");
  return r.top = r.top + e7.clientTop, r.left = r.left + e7.clientLeft, r.bottom = r.top + e7.clientHeight, r.right = r.left + e7.clientWidth, r.width = e7.clientWidth, r.height = e7.clientHeight, r.x = r.left, r.y = r.top, r;
}
function x3(e7, t, r) {
  return t === Hl ? jo(c1(e7, r)) : Je2(t) ? uB(t, r) : jo(p1(xe(e7)));
}
function cB(e7) {
  var t = hr2(Ut2(e7)), r = ["absolute", "fixed"].indexOf(ke2(e7).position) >= 0, n = r && pe2(e7) ? pt(e7) : e7;
  return Je2(n) ? t.filter(function(o) {
    return Je2(o) && ja2(o, n) && me2(o) !== "body";
  }) : [];
}
function h1(e7, t, r, n) {
  var o = t === "clippingParents" ? cB(e7) : [].concat(t), i = [].concat(o, [r]), l7 = i[0], u6 = i.reduce(function(c, p) {
    var d = x3(e7, p, n);
    return c.top = ct2(d.top, c.top), c.right = Yr2(d.right, c.right), c.bottom = Yr2(d.bottom, c.bottom), c.left = ct2(d.left, c.left), c;
  }, x3(e7, l7, n));
  return u6.width = u6.right - u6.left, u6.height = u6.bottom - u6.top, u6.x = u6.left, u6.y = u6.top, u6;
}
var C3 = F3(() => {
  je2();
  b3();
  y3();
  d1();
  zo();
  Wt2();
  $o();
  Ve2();
  Ho();
  Va2();
  o1();
  pr();
  f1();
  fr2();
  a2(uB, "getInnerBoundingClientRect");
  a2(x3, "getClientRectFromMixedType");
  a2(cB, "getClippingParents");
  a2(h1, "getClippingRect");
});
function Ga2(e7) {
  var t = e7.reference, r = e7.element, n = e7.placement, o = n ? ge2(n) : null, i = n ? et2(n) : null, l7 = t.x + t.width / 2 - r.width / 2, u6 = t.y + t.height / 2 - r.height / 2, c;
  switch (o) {
    case ne2:
      c = {
        x: l7,
        y: t.y - r.height
      };
      break;
    case ce2:
      c = {
        x: l7,
        y: t.y + t.height
      };
      break;
    case se2:
      c = {
        x: t.x + t.width,
        y: u6
      };
      break;
    case oe2:
      c = {
        x: t.x - r.width,
        y: u6
      };
      break;
    default:
      c = {
        x: t.x,
        y: t.y
      };
  }
  var p = o ? Zr2(o) : null;
  if (p != null) {
    var d = p === "y" ? "height" : "width";
    switch (i) {
      case Vt2:
        c[p] = c[p] - (t[d] / 2 - r[d] / 2);
        break;
      case Xr2:
        c[p] = c[p] + (t[d] / 2 - r[d] / 2);
        break;
      default:
    }
  }
  return c;
}
var m1 = F3(() => {
  dr();
  Oo2();
  Ol();
  je2();
  a2(Ga2, "computeOffsets");
});
function dt(e7, t) {
  t === void 0 && (t = {});
  var r = t, n = r.placement, o = n === void 0 ? e7.placement : n, i = r.strategy, l7 = i === void 0 ? e7.strategy : i, u6 = r.boundary, c = u6 === void 0 ? r3 : u6, p = r.rootBoundary, d = p === void 0 ? Hl : p, h7 = r.elementContext, f = h7 === void 0 ? Mo : h7, v7 = r.altBoundary, b = v7 === void 0 ? false : v7, m = r.padding, g7 = m === void 0 ? 0 : m, y = Wa2(typeof g7 != "number" ? g7 : Ua2(g7, cr2)), w5 = f === Mo ? n3 : Mo, D7 = e7.rects.popper, x7 = e7.elements[b ? w5 : f], C7 = h1(Je2(x7) ? x7 : x7.contextElement || xe(e7.elements.popper), c, d, l7), E7 = Qe2(e7.elements.reference), S4 = Ga2(
    {
      reference: E7,
      element: D7,
      strategy: "absolute",
      placement: o
    }
  ), R = jo(Object.assign({}, D7, S4)), A = f === Mo ? R : E7, k4 = {
    top: C7.top - A.top + y.top,
    bottom: A.bottom - C7.bottom + y.bottom,
    left: C7.left - A.left + y.left,
    right: A.right - C7.right + y.right
  }, B6 = e7.modifiersData.offset;
  if (f === Mo && B6) {
    var $6 = B6[o];
    Object.keys(k4).forEach(function(M6) {
      var W = [se2, ce2].indexOf(M6) >= 0 ? 1 : -1, T = [ne2, ce2].indexOf(M6) >= 0 ? "y" : "x";
      k4[M6] += $6[T] * W;
    });
  }
  return k4;
}
var Xa2 = F3(() => {
  C3();
  Wt2();
  Ho();
  m1();
  f1();
  je2();
  Ve2();
  s1();
  u1();
  a2(dt, "detectOverflow");
});
function g1(e7, t) {
  t === void 0 && (t = {});
  var r = t, n = r.placement, o = r.boundary, i = r.rootBoundary, l7 = r.padding, u6 = r.flipVariations, c = r.allowedAutoPlacements, p = c === void 0 ? $l : c, d = et2(n), h7 = d ? u6 ? t1 : t1.filter(function(b) {
    return et2(b) === d;
  }) : cr2, f = h7.filter(function(b) {
    return p.indexOf(b) >= 0;
  });
  f.length === 0 && (f = h7);
  var v7 = f.reduce(function(b, m) {
    return b[m] = dt(e7, {
      placement: m,
      boundary: o,
      rootBoundary: i,
      padding: l7
    })[ge2(m)], b;
  }, {});
  return Object.keys(v7).sort(function(b, m) {
    return v7[b] - v7[m];
  });
}
var E3 = F3(() => {
  Oo2();
  je2();
  Xa2();
  dr();
  a2(g1, "computeAutoPlacement");
});
function pB(e7) {
  if (ge2(e7) === Pl)
    return [];
  var t = No(e7);
  return [jl(e7), t, jl(t)];
}
function dB(e7) {
  var t = e7.state, r = e7.options, n = e7.name;
  if (!t.modifiersData[n]._skip) {
    for (var o = r.mainAxis, i = o === void 0 ? true : o, l7 = r.altAxis, u6 = l7 === void 0 ? true : l7, c = r.fallbackPlacements, p = r.padding, d = r.boundary, h7 = r.rootBoundary, f = r.altBoundary, v7 = r.flipVariations, b = v7 === void 0 ? true : v7, m = r.allowedAutoPlacements, g7 = t.options.placement, y = ge2(g7), w5 = y === g7, D7 = c || (w5 || !b ? [No(g7)] : pB(g7)), x7 = [g7].concat(D7).reduce(function(ve2, de2) {
      return ve2.concat(ge2(de2) === Pl ? g1(t, {
        placement: de2,
        boundary: d,
        rootBoundary: h7,
        padding: p,
        flipVariations: b,
        allowedAutoPlacements: m
      }) : de2);
    }, []), C7 = t.rects.reference, E7 = t.rects.popper, S4 = /* @__PURE__ */ new Map(), R = true, A = x7[0], k4 = 0; k4 < x7.length; k4++) {
      var B6 = x7[k4], $6 = ge2(B6), M6 = et2(B6) === Vt2, W = [ne2, ce2].indexOf($6) >= 0, T = W ? "width" : "height", L6 = dt(t, {
        placement: B6,
        boundary: d,
        rootBoundary: h7,
        altBoundary: f,
        padding: p
      }), P6 = W ? M6 ? se2 : oe2 : M6 ? ce2 : ne2;
      C7[T] > E7[T] && (P6 = No(P6));
      var U6 = No(P6), N = [];
      if (i && N.push(L6[$6] <= 0), u6 && N.push(L6[P6] <= 0, L6[U6] <= 0), N.every(function(ve2) {
        return ve2;
      })) {
        A = B6, R = false;
        break;
      }
      S4.set(B6, N);
    }
    if (R)
      for (var G = b ? 3 : 1, z6 = a2(function(de2) {
        var Ce2 = x7.find(function(Le2) {
          var Ie2 = S4.get(Le2);
          if (Ie2)
            return Ie2.slice(0, de2).every(function(Xo) {
              return Xo;
            });
        });
        if (Ce2)
          return A = Ce2, "break";
      }, "_loop"), K3 = G; K3 > 0; K3--) {
        var Te2 = z6(K3);
        if (Te2 === "break") break;
      }
    t.placement !== A && (t.modifiersData[n]._skip = true, t.placement = A, t.reset = true);
  }
}
var S3;
var R3 = F3(() => {
  v3();
  dr();
  w3();
  Xa2();
  E3();
  je2();
  Oo2();
  a2(pB, "getExpandedFallbackPlacements");
  a2(dB, "flip");
  S3 = {
    name: "flip",
    enabled: true,
    phase: "main",
    fn: dB,
    requiresIfExists: ["offset"],
    data: {
      _skip: false
    }
  };
});
function A3(e7, t, r) {
  return r === void 0 && (r = {
    x: 0,
    y: 0
  }), {
    top: e7.top - t.height - r.y,
    right: e7.right - t.width + r.x,
    bottom: e7.bottom - t.height + r.y,
    left: e7.left - t.width - r.x
  };
}
function F32(e7) {
  return [ne2, se2, ce2, oe2].some(function(t) {
    return e7[t] >= 0;
  });
}
function fB(e7) {
  var t = e7.state, r = e7.name, n = t.rects.reference, o = t.rects.popper, i = t.modifiersData.preventOverflow, l7 = dt(t, {
    elementContext: "reference"
  }), u6 = dt(t, {
    altBoundary: true
  }), c = A3(l7, n), p = A3(u6, o, i), d = F32(c), h7 = F32(p);
  t.modifiersData[r] = {
    referenceClippingOffsets: c,
    popperEscapeOffsets: p,
    isReferenceHidden: d,
    hasPopperEscaped: h7
  }, t.attributes.popper = Object.assign({}, t.attributes.popper, {
    "data-popper-reference-hidden": d,
    "data-popper-escaped": h7
  });
}
var k3;
var T3 = F3(() => {
  je2();
  Xa2();
  a2(A3, "getSideOffsets");
  a2(F32, "isAnySideFullyClipped");
  a2(fB, "hide");
  k3 = {
    name: "hide",
    enabled: true,
    phase: "main",
    requiresIfExists: ["preventOverflow"],
    fn: fB
  };
});
function hB(e7, t, r) {
  var n = ge2(e7), o = [oe2, ne2].indexOf(n) >= 0 ? -1 : 1, i = typeof r == "function" ? r(Object.assign({}, t, {
    placement: e7
  })) : r, l7 = i[0], u6 = i[1];
  return l7 = l7 || 0, u6 = (u6 || 0) * o, [oe2, se2].indexOf(n) >= 0 ? {
    x: u6,
    y: l7
  } : {
    x: l7,
    y: u6
  };
}
function mB(e7) {
  var t = e7.state, r = e7.options, n = e7.name, o = r.offset, i = o === void 0 ? [0, 0] : o, l7 = $l.reduce(function(d, h7) {
    return d[h7] = hB(h7, t.rects, i), d;
  }, {}), u6 = l7[t.placement], c = u6.x, p = u6.y;
  t.modifiersData.popperOffsets != null && (t.modifiersData.popperOffsets.x += c, t.modifiersData.popperOffsets.y += p), t.modifiersData[n] = l7;
}
var L3;
var I32 = F3(() => {
  dr();
  je2();
  a2(hB, "distanceAndSkiddingToXY");
  a2(mB, "offset");
  L3 = {
    name: "offset",
    enabled: true,
    phase: "main",
    requires: ["popperOffsets"],
    fn: mB
  };
});
function gB(e7) {
  var t = e7.state, r = e7.name;
  t.modifiersData[r] = Ga2({
    reference: t.rects.reference,
    element: t.rects.popper,
    strategy: "absolute",
    placement: t.placement
  });
}
var B3;
var M3 = F3(() => {
  m1();
  a2(gB, "popperOffsets");
  B3 = {
    name: "popperOffsets",
    enabled: true,
    phase: "read",
    fn: gB,
    data: {}
  };
});
function v1(e7) {
  return e7 === "x" ? "y" : "x";
}
var _3 = F3(() => {
  a2(v1, "getAltAxis");
});
function vB(e7) {
  var t = e7.state, r = e7.options, n = e7.name, o = r.mainAxis, i = o === void 0 ? true : o, l7 = r.altAxis, u6 = l7 === void 0 ? false : l7, c = r.boundary, p = r.rootBoundary, d = r.altBoundary, h7 = r.padding, f = r.tether, v7 = f === void 0 ? true : f, b = r.tetherOffset, m = b === void 0 ? 0 : b, g7 = dt(t, {
    boundary: c,
    rootBoundary: p,
    padding: h7,
    altBoundary: d
  }), y = ge2(t.placement), w5 = et2(t.placement), D7 = !w5, x7 = Zr2(y), C7 = v1(x7), E7 = t.modifiersData.popperOffsets, S4 = t.rects.reference, R = t.rects.popper, A = typeof m == "function" ? m(Object.assign({}, t.rects, {
    placement: t.placement
  })) : m, k4 = typeof A == "number" ? {
    mainAxis: A,
    altAxis: A
  } : Object.assign({
    mainAxis: 0,
    altAxis: 0
  }, A), B6 = t.modifiersData.offset ? t.modifiersData.offset[t.placement] : null, $6 = {
    x: 0,
    y: 0
  };
  if (E7) {
    if (i) {
      var M6, W = x7 === "y" ? ne2 : oe2, T = x7 === "y" ? ce2 : se2, L6 = x7 === "y" ? "height" : "width", P6 = E7[x7], U6 = P6 + g7[W], N = P6 - g7[T], G = v7 ? -R[L6] / 2 : 0, z6 = w5 === Vt2 ? S4[L6] : R[L6], K3 = w5 === Vt2 ? -R[L6] : -S4[L6], Te2 = t.elements.arrow, ve2 = v7 && Te2 ? Kr2(Te2) : {
        width: 0,
        height: 0
      }, de2 = t.modifiersData["arrow#persistent"] ? t.modifiersData["arrow#persistent"].padding : qa2(), Ce2 = de2[W], Le2 = de2[T], Ie2 = Jr2(
        0,
        S4[L6],
        ve2[L6]
      ), Xo = D7 ? S4[L6] / 2 - G - Ie2 - Ce2 - k4.mainAxis : z6 - Ie2 - Ce2 - k4.mainAxis, Yo = D7 ? -S4[L6] / 2 + G + Ie2 + Le2 + k4.mainAxis : K3 + Ie2 + Le2 + k4.mainAxis, ns = t.elements.arrow && pt(t.elements.arrow), R4 = ns ? x7 === "y" ? ns.clientTop || 0 : ns.clientLeft || 0 : 0, G1 = (M6 = B6 == null ? void 0 : B6[x7]) != null ? M6 : 0, A4 = P6 + Xo - G1 - R4, F4 = P6 + Yo - G1, X1 = Jr2(v7 ? Yr2(U6, A4) : U6, P6, v7 ? ct2(N, F4) : N);
      E7[x7] = X1, $6[x7] = X1 - P6;
    }
    if (u6) {
      var Y1, k42 = x7 === "x" ? ne2 : oe2, T4 = x7 === "x" ? ce2 : se2, vr2 = E7[C7], Ja2 = C7 === "y" ? "height" : "width", K1 = vr2 + g7[k42], Z1 = vr2 - g7[T4], os = [ne2, oe2].indexOf(y) !== -1, J1 = (Y1 = B6 == null ? void 0 : B6[C7]) != null ? Y1 : 0, Q1 = os ? K1 : vr2 - S4[Ja2] - R[Ja2] - J1 + k4.altAxis, ep = os ? vr2 + S4[Ja2] + R[Ja2] - J1 - k4.altAxis : Z1, tp = v7 && os ? u3(Q1, vr2, ep) : Jr2(v7 ? Q1 : K1, vr2, v7 ? ep : Z1);
      E7[C7] = tp, $6[C7] = tp - vr2;
    }
    t.modifiersData[n] = $6;
  }
}
var P3;
var H3 = F3(() => {
  je2();
  dr();
  Ol();
  _3();
  i1();
  zl();
  zo();
  Xa2();
  Oo2();
  l1();
  fr2();
  a2(vB, "preventOverflow");
  P3 = {
    name: "preventOverflow",
    enabled: true,
    phase: "main",
    fn: vB,
    requiresIfExists: ["offset"]
  };
});
var w1 = F3(() => {
});
function b1(e7) {
  return {
    scrollLeft: e7.scrollLeft,
    scrollTop: e7.scrollTop
  };
}
var $3 = F3(() => {
  a2(b1, "getHTMLElementScroll");
});
function y1(e7) {
  return e7 === ee2(e7) || !pe2(e7) ? Qr2(e7) : b1(e7);
}
var z3 = F3(() => {
  Vl();
  ut2();
  Ve2();
  $3();
  a2(y1, "getNodeScroll");
});
function wB(e7) {
  var t = e7.getBoundingClientRect(), r = qt2(t.width) / e7.offsetWidth || 1, n = qt2(t.height) / e7.offsetHeight || 1;
  return r !== 1 || n !== 1;
}
function D1(e7, t, r) {
  r === void 0 && (r = false);
  var n = pe2(t), o = pe2(t) && wB(t), i = xe(t), l7 = Qe2(e7, o, r), u6 = {
    scrollLeft: 0,
    scrollTop: 0
  }, c = {
    x: 0,
    y: 0
  };
  return (n || !n && !r) && ((me2(t) !== "body" || // https://github.com/popperjs/popper-core/issues/1078
  tn2(i)) && (u6 = y1(t)), pe2(t) ? (c = Qe2(t, true), c.x += t.clientLeft, c.y += t.clientTop) : i && (c.x = en2(i))), {
    x: l7.left + u6.scrollLeft - c.x,
    y: l7.top + u6.scrollTop - c.y,
    width: l7.width,
    height: l7.height
  };
}
var O32 = F3(() => {
  Ho();
  z3();
  pr();
  Ve2();
  ql();
  Wt2();
  Wl();
  fr2();
  a2(wB, "isElementScaled");
  a2(D1, "getCompositeRect");
});
function bB(e7) {
  var t = /* @__PURE__ */ new Map(), r = /* @__PURE__ */ new Set(), n = [];
  e7.forEach(function(i) {
    t.set(i.name, i);
  });
  function o(i) {
    r.add(i.name);
    var l7 = [].concat(i.requires || [], i.requiresIfExists || []);
    l7.forEach(function(u6) {
      if (!r.has(u6)) {
        var c = t.get(u6);
        c && o(c);
      }
    }), n.push(i);
  }
  return a2(o, "sort"), e7.forEach(function(i) {
    r.has(i.name) || o(i);
  }), n;
}
function x1(e7) {
  var t = bB(e7);
  return o3.reduce(function(r, n) {
    return r.concat(t.filter(function(o) {
      return o.phase === n;
    }));
  }, []);
}
var N3 = F3(() => {
  je2();
  a2(bB, "order");
  a2(x1, "orderModifiers");
});
function C1(e7) {
  var t;
  return function() {
    return t || (t = new Promise(function(r) {
      Promise.resolve().then(function() {
        t = void 0, r(e7());
      });
    })), t;
  };
}
var j3 = F3(() => {
  a2(C1, "debounce");
});
function E1(e7) {
  var t = e7.reduce(function(r, n) {
    var o = r[n.name];
    return r[n.name] = o ? Object.assign({}, o, n, {
      options: Object.assign({}, o.options, n.options),
      data: Object.assign({}, o.data, n.data)
    }) : n, r;
  }, {});
  return Object.keys(t).map(function(r) {
    return t[r];
  });
}
var V3 = F3(() => {
  a2(E1, "mergeByName");
});
function W3() {
  for (var e7 = arguments.length, t = new Array(e7), r = 0; r < e7; r++)
    t[r] = arguments[r];
  return !t.some(function(n) {
    return !(n && typeof n.getBoundingClientRect == "function");
  });
}
function U3(e7) {
  e7 === void 0 && (e7 = {});
  var t = e7, r = t.defaultModifiers, n = r === void 0 ? [] : r, o = t.defaultOptions, i = o === void 0 ? q3 : o;
  return a2(function(u6, c, p) {
    p === void 0 && (p = i);
    var d = {
      placement: "bottom",
      orderedModifiers: [],
      options: Object.assign({}, q3, i),
      modifiersData: {},
      elements: {
        reference: u6,
        popper: c
      },
      attributes: {},
      styles: {}
    }, h7 = [], f = false, v7 = {
      state: d,
      setOptions: a2(function(y) {
        var w5 = typeof y == "function" ? y(d.options) : y;
        m(), d.options = Object.assign({}, i, d.options, w5), d.scrollParents = {
          reference: Je2(u6) ? hr2(u6) : u6.contextElement ? hr2(u6.contextElement) : [],
          popper: hr2(c)
        };
        var D7 = x1(E1([].concat(n, d.options.modifiers)));
        return d.orderedModifiers = D7.filter(function(x7) {
          return x7.enabled;
        }), b(), v7.update();
      }, "setOptions"),
      // Sync update – it will always be executed, even if not necessary. This
      // is useful for low frequency updates where sync behavior simplifies the
      // logic.
      // For high frequency updates (e.g. `resize` and `scroll` events), always
      // prefer the async Popper#update method
      forceUpdate: a2(function() {
        if (!f) {
          var y = d.elements, w5 = y.reference, D7 = y.popper;
          if (W3(w5, D7)) {
            d.rects = {
              reference: D1(w5, pt(D7), d.options.strategy === "fixed"),
              popper: Kr2(D7)
            }, d.reset = false, d.placement = d.options.placement, d.orderedModifiers.forEach(function(k4) {
              return d.modifiersData[k4.name] = Object.assign({}, k4.data);
            });
            for (var x7 = 0; x7 < d.orderedModifiers.length; x7++) {
              if (d.reset === true) {
                d.reset = false, x7 = -1;
                continue;
              }
              var C7 = d.orderedModifiers[x7], E7 = C7.fn, S4 = C7.options, R = S4 === void 0 ? {} : S4, A = C7.name;
              typeof E7 == "function" && (d = E7({
                state: d,
                options: R,
                name: A,
                instance: v7
              }) || d);
            }
          }
        }
      }, "forceUpdate"),
      // Async and optimistically optimized update – it will not be executed if
      // not necessary (debounced to run at most once-per-tick)
      update: C1(function() {
        return new Promise(function(g7) {
          v7.forceUpdate(), g7(d);
        });
      }),
      destroy: a2(function() {
        m(), f = true;
      }, "destroy")
    };
    if (!W3(u6, c))
      return v7;
    v7.setOptions(p).then(function(g7) {
      !f && p.onFirstUpdate && p.onFirstUpdate(g7);
    });
    function b() {
      d.orderedModifiers.forEach(function(g7) {
        var y = g7.name, w5 = g7.options, D7 = w5 === void 0 ? {} : w5, x7 = g7.effect;
        if (typeof x7 == "function") {
          var C7 = x7({
            state: d,
            name: y,
            instance: v7,
            options: D7
          }), E7 = a2(function() {
          }, "noopFn");
          h7.push(C7 || E7);
        }
      });
    }
    a2(b, "runModifierEffects");
    function m() {
      h7.forEach(function(g7) {
        return g7();
      }), h7 = [];
    }
    return a2(m, "cleanupModifierEffects"), v7;
  }, "createPopper");
}
var q3;
var G3 = F3(() => {
  O32();
  zl();
  d1();
  zo();
  N3();
  j3();
  V3();
  Ve2();
  q3 = {
    placement: "bottom",
    modifiers: [],
    strategy: "absolute"
  };
  a2(W3, "areValidElements");
  a2(U3, "popperGenerator");
});
var yB;
var S1;
var X3 = F3(() => {
  G3();
  g3();
  M3();
  h3();
  i3();
  I32();
  R3();
  H3();
  p3();
  T3();
  w1();
  yB = [m3, B3, f3, a3, L3, S3, P3, c3, k3], S1 = U3({
    defaultModifiers: yB
  });
});
var Y3 = F3(() => {
  je2();
  w1();
  X3();
});
var Z3 = _2((QZ, K3) => {
  var DB = typeof Element < "u", xB = typeof Map == "function", CB = typeof Set == "function", EB = typeof ArrayBuffer == "function" && !!ArrayBuffer.isView;
  function Gl(e7, t) {
    if (e7 === t) return true;
    if (e7 && t && typeof e7 == "object" && typeof t == "object") {
      if (e7.constructor !== t.constructor) return false;
      var r, n, o;
      if (Array.isArray(e7)) {
        if (r = e7.length, r != t.length) return false;
        for (n = r; n-- !== 0; )
          if (!Gl(e7[n], t[n])) return false;
        return true;
      }
      var i;
      if (xB && e7 instanceof Map && t instanceof Map) {
        if (e7.size !== t.size) return false;
        for (i = e7.entries(); !(n = i.next()).done; )
          if (!t.has(n.value[0])) return false;
        for (i = e7.entries(); !(n = i.next()).done; )
          if (!Gl(n.value[1], t.get(n.value[0]))) return false;
        return true;
      }
      if (CB && e7 instanceof Set && t instanceof Set) {
        if (e7.size !== t.size) return false;
        for (i = e7.entries(); !(n = i.next()).done; )
          if (!t.has(n.value[0])) return false;
        return true;
      }
      if (EB && ArrayBuffer.isView(e7) && ArrayBuffer.isView(t)) {
        if (r = e7.length, r != t.length) return false;
        for (n = r; n-- !== 0; )
          if (e7[n] !== t[n]) return false;
        return true;
      }
      if (e7.constructor === RegExp) return e7.source === t.source && e7.flags === t.flags;
      if (e7.valueOf !== Object.prototype.valueOf && typeof e7.valueOf == "function" && typeof t.valueOf == "function") return e7.valueOf() === t.valueOf();
      if (e7.toString !== Object.prototype.toString && typeof e7.toString == "function" && typeof t.toString == "function") return e7.toString() === t.toString();
      if (o = Object.keys(e7), r = o.length, r !== Object.keys(t).length) return false;
      for (n = r; n-- !== 0; )
        if (!Object.prototype.hasOwnProperty.call(t, o[n])) return false;
      if (DB && e7 instanceof Element) return false;
      for (n = r; n-- !== 0; )
        if (!((o[n] === "_owner" || o[n] === "__v" || o[n] === "__o") && e7.$$typeof) && !Gl(e7[o[n]], t[o[n]]))
          return false;
      return true;
    }
    return e7 !== e7 && t !== t;
  }
  a2(Gl, "equal");
  K3.exports = a2(function(t, r) {
    try {
      return Gl(t, r);
    } catch (n) {
      if ((n.message || "").match(/stack|recursion/i))
        return console.warn("react-fast-compare cannot handle circular refs"), false;
      throw n;
    }
  }, "isEqual");
});
var Q3;
var SB;
var R1;
var e4 = F3(() => {
  Y3();
  Q3 = we2(Z3());
  t3();
  SB = [], R1 = a2(function(t, r, n) {
    n === void 0 && (n = {});
    var o = mr2.useRef(null), i = {
      onFirstUpdate: n.onFirstUpdate,
      placement: n.placement || "bottom",
      strategy: n.strategy || "absolute",
      modifiers: n.modifiers || SB
    }, l7 = mr2.useState({
      styles: {
        popper: {
          position: i.strategy,
          left: "0",
          top: "0"
        },
        arrow: {
          position: "absolute"
        }
      },
      attributes: {}
    }), u6 = l7[0], c = l7[1], p = mr2.useMemo(function() {
      return {
        name: "updateState",
        enabled: true,
        phase: "write",
        fn: a2(function(v7) {
          var b = v7.state, m = Object.keys(b.elements);
          J3.flushSync(function() {
            c({
              styles: Q0(m.map(function(g7) {
                return [g7, b.styles[g7] || {}];
              })),
              attributes: Q0(m.map(function(g7) {
                return [g7, b.attributes[g7]];
              }))
            });
          });
        }, "fn"),
        requires: ["computeStyles"]
      };
    }, []), d = mr2.useMemo(function() {
      var f = {
        onFirstUpdate: i.onFirstUpdate,
        placement: i.placement,
        strategy: i.strategy,
        modifiers: [].concat(i.modifiers, [p, {
          name: "applyStyles",
          enabled: false
        }])
      };
      return (0, Q3.default)(o.current, f) ? o.current || f : (o.current = f, f);
    }, [i.onFirstUpdate, i.placement, i.strategy, i.modifiers, p]), h7 = mr2.useRef();
    return e1(function() {
      h7.current && h7.current.setOptions(d);
    }, [d]), e1(function() {
      if (!(t == null || r == null)) {
        var f = n.createPopper || S1, v7 = f(t, r, d);
        return h7.current = v7, function() {
          v7.destroy(), h7.current = null;
        };
      }
    }, [t, r, n.createPopper]), {
      state: h7.current ? h7.current.state : null,
      styles: u6.styles,
      attributes: u6.attributes,
      update: h7.current ? h7.current.update : null,
      forceUpdate: h7.current ? h7.current.forceUpdate : null
    };
  }, "usePopper");
});
var t4 = F3(() => {
  e4();
});
function o4(e7) {
  var t = X2.useRef(e7);
  return t.current = e7, X2.useCallback(function() {
    return t.current;
  }, []);
}
function AB(e7) {
  var t = e7.initial, r = e7.value, n = e7.onChange, o = n === void 0 ? RB : n;
  if (t === void 0 && r === void 0)
    throw new TypeError('Either "value" or "initial" variable must be set. Now both are undefined');
  var i = X2.useState(t), l7 = i[0], u6 = i[1], c = o4(l7), p = X2.useCallback(function(h7) {
    var f = c(), v7 = typeof h7 == "function" ? h7(f) : h7;
    typeof v7.persist == "function" && v7.persist(), u6(v7), typeof o == "function" && o(v7);
  }, [c, o]), d = r !== void 0;
  return [d ? r : l7, d ? o : p];
}
function a4(e7, t) {
  return e7 === void 0 && (e7 = 0), t === void 0 && (t = 0), function() {
    return {
      width: 0,
      height: 0,
      top: t,
      right: e7,
      bottom: t,
      left: e7,
      x: 0,
      y: 0,
      toJSON: a2(function() {
        return null;
      }, "toJSON")
    };
  };
}
function i4(e7, t) {
  var r, n, o;
  e7 === void 0 && (e7 = {}), t === void 0 && (t = {});
  var i = Object.keys(n4).reduce(function(T, L6) {
    var P6;
    return H2({}, T, (P6 = {}, P6[L6] = T[L6] !== void 0 ? T[L6] : n4[L6], P6));
  }, e7), l7 = X2.useMemo(
    function() {
      return [{
        name: "offset",
        options: {
          offset: i.offset
        }
      }];
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    Array.isArray(i.offset) ? i.offset : []
  ), u6 = H2({}, t, {
    placement: t.placement || i.placement,
    modifiers: t.modifiers || l7
  }), c = X2.useState(null), p = c[0], d = c[1], h7 = X2.useState(null), f = h7[0], v7 = h7[1], b = AB({
    initial: i.defaultVisible,
    value: i.visible,
    onChange: i.onVisibleChange
  }), m = b[0], g7 = b[1], y = X2.useRef();
  X2.useEffect(function() {
    return function() {
      return clearTimeout(y.current);
    };
  }, []);
  var w5 = R1(i.followCursor ? r4 : p, f, u6), D7 = w5.styles, x7 = w5.attributes, C7 = sn2(w5, FB), E7 = C7.update, S4 = o4({
    visible: m,
    triggerRef: p,
    tooltipRef: f,
    finalConfig: i
  }), R = X2.useCallback(
    function(T) {
      return Array.isArray(i.trigger) ? i.trigger.includes(T) : i.trigger === T;
    },
    // eslint-disable-next-line react-hooks/exhaustive-deps
    Array.isArray(i.trigger) ? i.trigger : [i.trigger]
  ), A = X2.useCallback(function() {
    clearTimeout(y.current), y.current = window.setTimeout(function() {
      return g7(false);
    }, i.delayHide);
  }, [i.delayHide, g7]), k4 = X2.useCallback(function() {
    clearTimeout(y.current), y.current = window.setTimeout(function() {
      return g7(true);
    }, i.delayShow);
  }, [i.delayShow, g7]), B6 = X2.useCallback(function() {
    S4().visible ? A() : k4();
  }, [S4, A, k4]);
  X2.useEffect(function() {
    if (S4().finalConfig.closeOnOutsideClick) {
      var T = a2(function(P6) {
        var U6, N = S4(), G = N.tooltipRef, z6 = N.triggerRef, K3 = (P6.composedPath == null || (U6 = P6.composedPath()) == null ? void 0 : U6[0]) || P6.target;
        K3 instanceof Node && G != null && z6 != null && !G.contains(K3) && !z6.contains(K3) && A();
      }, "handleClickOutside");
      return document.addEventListener("mousedown", T), function() {
        return document.removeEventListener("mousedown", T);
      };
    }
  }, [S4, A]), X2.useEffect(function() {
    if (!(p == null || !R("click")))
      return p.addEventListener("click", B6), function() {
        return p.removeEventListener("click", B6);
      };
  }, [p, R, B6]), X2.useEffect(function() {
    if (!(p == null || !R("double-click")))
      return p.addEventListener("dblclick", B6), function() {
        return p.removeEventListener("dblclick", B6);
      };
  }, [p, R, B6]), X2.useEffect(function() {
    if (!(p == null || !R("right-click"))) {
      var T = a2(function(P6) {
        P6.preventDefault(), B6();
      }, "preventDefaultAndToggle");
      return p.addEventListener("contextmenu", T), function() {
        return p.removeEventListener("contextmenu", T);
      };
    }
  }, [p, R, B6]), X2.useEffect(function() {
    if (!(p == null || !R("focus")))
      return p.addEventListener("focus", k4), p.addEventListener("blur", A), function() {
        p.removeEventListener("focus", k4), p.removeEventListener("blur", A);
      };
  }, [p, R, k4, A]), X2.useEffect(function() {
    if (!(p == null || !R("hover")))
      return p.addEventListener("mouseenter", k4), p.addEventListener("mouseleave", A), function() {
        p.removeEventListener("mouseenter", k4), p.removeEventListener("mouseleave", A);
      };
  }, [p, R, k4, A]), X2.useEffect(function() {
    if (!(f == null || !R("hover") || !S4().finalConfig.interactive))
      return f.addEventListener("mouseenter", k4), f.addEventListener("mouseleave", A), function() {
        f.removeEventListener("mouseenter", k4), f.removeEventListener("mouseleave", A);
      };
  }, [f, R, k4, A, S4]);
  var $6 = C7 == null || (r = C7.state) == null || (n = r.modifiersData) == null || (o = n.hide) == null ? void 0 : o.isReferenceHidden;
  X2.useEffect(function() {
    i.closeOnTriggerHidden && $6 && A();
  }, [i.closeOnTriggerHidden, A, $6]), X2.useEffect(function() {
    if (!i.followCursor || p == null) return;
    function T(L6) {
      var P6 = L6.clientX, U6 = L6.clientY;
      r4.getBoundingClientRect = a4(P6, U6), E7 == null ? void 0 : E7();
    }
    return a2(T, "setMousePosition"), p.addEventListener("mousemove", T), function() {
      return p.removeEventListener("mousemove", T);
    };
  }, [i.followCursor, p, E7]), X2.useEffect(function() {
    if (!(f == null || E7 == null || i.mutationObserverOptions == null)) {
      var T = new MutationObserver(E7);
      return T.observe(f, i.mutationObserverOptions), function() {
        return T.disconnect();
      };
    }
  }, [i.mutationObserverOptions, f, E7]);
  var M6 = a2(function(L6) {
    return L6 === void 0 && (L6 = {}), H2({}, L6, {
      style: H2({}, L6.style, D7.popper)
    }, x7.popper, {
      "data-popper-interactive": i.interactive
    });
  }, "getTooltipProps"), W = a2(function(L6) {
    return L6 === void 0 && (L6 = {}), H2({}, L6, x7.arrow, {
      style: H2({}, L6.style, D7.arrow),
      "data-popper-arrow": true
    });
  }, "getArrowProps");
  return H2({
    getArrowProps: W,
    getTooltipProps: M6,
    setTooltipRef: v7,
    setTriggerRef: d,
    tooltipRef: f,
    triggerRef: p,
    visible: m
  }, C7);
}
var RB;
var FB;
var r4;
var n4;
var l4 = F3(() => {
  ai();
  qe2();
  t4();
  a2(o4, "useGetLatest");
  RB = a2(function() {
  }, "noop");
  a2(AB, "useControlledState");
  a2(a4, "generateBoundingClientRect");
  FB = ["styles", "attributes"], r4 = {
    getBoundingClientRect: a4()
  }, n4 = {
    closeOnOutsideClick: true,
    closeOnTriggerHidden: false,
    defaultVisible: false,
    delayHide: 0,
    delayShow: 0,
    followCursor: false,
    interactive: false,
    mutationObserverOptions: {
      attributes: true,
      childList: true,
      subtree: true
    },
    offset: [0, 6],
    trigger: "hover"
  };
  a2(i4, "usePopperTooltip");
});
var u4;
var tt2;
var gr2;
var kB;
var TB;
var F1;
var c4 = F3(() => {
  "use strict";
  u4 = we2(Qo(), 1), tt2 = (0, u4.default)(1e3)(
    (e7, t, r, n = 0) => t.split("-")[0] === e7 ? r : n
  ), gr2 = 8, kB = Tr.div(
    {
      position: "absolute",
      borderStyle: "solid"
    },
    ({ placement: e7 }) => {
      let t = 0, r = 0;
      switch (true) {
        case (e7.startsWith("left") || e7.startsWith("right")): {
          r = 8;
          break;
        }
        case (e7.startsWith("top") || e7.startsWith("bottom")): {
          t = 8;
          break;
        }
        default:
      }
      return { transform: `translate3d(${t}px, ${r}px, 0px)` };
    },
    ({ theme: e7, color: t, placement: r }) => ({
      bottom: `${tt2("top", r, `${gr2 * -1}px`, "auto")}`,
      top: `${tt2("bottom", r, `${gr2 * -1}px`, "auto")}`,
      right: `${tt2("left", r, `${gr2 * -1}px`, "auto")}`,
      left: `${tt2("right", r, `${gr2 * -1}px`, "auto")}`,
      borderBottomWidth: `${tt2("top", r, "0", gr2)}px`,
      borderTopWidth: `${tt2("bottom", r, "0", gr2)}px`,
      borderRightWidth: `${tt2("left", r, "0", gr2)}px`,
      borderLeftWidth: `${tt2("right", r, "0", gr2)}px`,
      borderTopColor: tt2(
        "top",
        r,
        e7.color[t] || t || e7.base === "light" ? yo(e7.background.app) : e7.background.app,
        "transparent"
      ),
      borderBottomColor: tt2(
        "bottom",
        r,
        e7.color[t] || t || e7.base === "light" ? yo(e7.background.app) : e7.background.app,
        "transparent"
      ),
      borderLeftColor: tt2(
        "left",
        r,
        e7.color[t] || t || e7.base === "light" ? yo(e7.background.app) : e7.background.app,
        "transparent"
      ),
      borderRightColor: tt2(
        "right",
        r,
        e7.color[t] || t || e7.base === "light" ? yo(e7.background.app) : e7.background.app,
        "transparent"
      )
    })
  ), TB = Tr.div(
    ({ hidden: e7 }) => ({
      display: e7 ? "none" : "inline-block",
      zIndex: 2147483647
    }),
    ({ theme: e7, color: t, hasChrome: r }) => r ? {
      background: t && e7.color[t] || t || e7.base === "light" ? yo(e7.background.app) : e7.background.app,
      filter: `
            drop-shadow(0px 5px 5px rgba(0,0,0,0.05))
            drop-shadow(0 1px 3px rgba(0,0,0,0.1))
          `,
      borderRadius: e7.appBorderRadius,
      fontSize: e7.typography.size.s1
    } : {}
  ), F1 = import_react8.default.forwardRef(
    ({
      placement: e7 = "top",
      hasChrome: t = true,
      children: r,
      arrowProps: n = {},
      tooltipRef: o,
      color: i,
      withArrows: l7,
      ...u6
    }, c) => import_react8.default.createElement(TB, { "data-testid": "tooltip", hasChrome: t, ref: c, ...u6, color: i }, t && l7 && import_react8.default.createElement(kB, { placement: e7, ...n, color: i }), r)
  );
  F1.displayName = "Tooltip";
});
var T1 = {};
an2(T1, {
  WithToolTipState: () => k1,
  WithTooltip: () => k1,
  WithTooltipPure: () => d4
});
var Xl;
var _B;
var PB;
var d4;
var k1;
var Yl = F3(() => {
  "use strict";
  oi();
  l4();
  c4();
  ({ document: Xl } = ln2), _B = Tr.div`
  display: inline-block;
  cursor: ${(e7) => (
    // @ts-expect-error (non strict)
    e7.trigger === "hover" || e7.trigger.includes("hover") ? "default" : "pointer"
  )};
`, PB = Tr.g`
  cursor: ${(e7) => (
    // @ts-expect-error (non strict)
    e7.trigger === "hover" || e7.trigger.includes("hover") ? "default" : "pointer"
  )};
`, d4 = a2(({
    svg: e7 = false,
    trigger: t = "click",
    closeOnOutsideClick: r = false,
    placement: n = "top",
    modifiers: o = [
      {
        name: "preventOverflow",
        options: {
          padding: 8
        }
      },
      {
        name: "offset",
        options: {
          offset: [8, 8]
        }
      },
      {
        name: "arrow",
        options: {
          padding: 8
        }
      }
    ],
    hasChrome: i = true,
    defaultVisible: l7 = false,
    withArrows: u6,
    offset: c,
    tooltip: p,
    children: d,
    closeOnTriggerHidden: h7,
    mutationObserverOptions: f,
    delayHide: v7,
    visible: b,
    interactive: m,
    delayShow: g7,
    strategy: y,
    followCursor: w5,
    onVisibleChange: D7,
    ...x7
  }) => {
    let C7 = e7 ? PB : _B, {
      getArrowProps: E7,
      getTooltipProps: S4,
      setTooltipRef: R,
      setTriggerRef: A,
      visible: k4,
      state: B6
    } = i4(
      {
        trigger: t,
        placement: n,
        defaultVisible: l7,
        delayHide: v7,
        interactive: m,
        closeOnOutsideClick: r,
        closeOnTriggerHidden: h7,
        onVisibleChange: D7,
        delayShow: g7,
        followCursor: w5,
        mutationObserverOptions: f,
        visible: b,
        offset: c
      },
      {
        modifiers: o,
        strategy: y
      }
    ), $6 = import_react9.default.createElement(
      F1,
      {
        placement: B6 == null ? void 0 : B6.placement,
        ref: R,
        hasChrome: i,
        arrowProps: E7(),
        withArrows: u6,
        ...S4()
      },
      typeof p == "function" ? p({ onHide: a2(() => D7(false), "onHide") }) : p
    );
    return import_react9.default.createElement(import_react9.default.Fragment, null, import_react9.default.createElement(C7, { trigger: t, ref: A, ...x7 }, d), k4 && import_react_dom.default.createPortal($6, Xl.body));
  }, "WithTooltipPure"), k1 = a2(({
    startOpen: e7 = false,
    onVisibleChange: t,
    ...r
  }) => {
    let [n, o] = (0, import_react9.useState)(e7), i = (0, import_react9.useCallback)(
      (l7) => {
        t && t(l7) === false || o(l7);
      },
      [t]
    );
    return (0, import_react9.useEffect)(() => {
      let l7 = a2(() => i(false), "hide");
      Xl.addEventListener("keydown", l7, false);
      let u6 = Array.from(Xl.getElementsByTagName("iframe")), c = [];
      return u6.forEach((p) => {
        let d = a2(() => {
          try {
            p.contentWindow.document && (p.contentWindow.document.addEventListener("click", l7), c.push(() => {
              try {
                p.contentWindow.document.removeEventListener("click", l7);
              } catch {
              }
            }));
          } catch {
          }
        }, "bind");
        d(), p.addEventListener("load", d), c.push(() => {
          p.removeEventListener("load", d);
        });
      }), () => {
        Xl.removeEventListener("keydown", l7), c.forEach((p) => {
          p();
        });
      };
    }), import_react9.default.createElement(d4, { ...r, visible: n, onVisibleChange: i });
  }, "WithToolTipState");
});
var te2 = a2(({ ...e7 }, t) => {
  let r = [e7.class, e7.className];
  return delete e7.class, e7.className = ["sbdocs", `sbdocs-${t}`, ...r].filter(Boolean).join(" "), e7;
}, "nameSpaceClassNames");
qe2();
np();
ei();
function op(e7, t) {
  e7.prototype = Object.create(t.prototype), e7.prototype.constructor = e7, Xt2(e7, t);
}
a2(op, "_inheritsLoose");
ap();
ei();
function ip(e7) {
  try {
    return Function.toString.call(e7).indexOf("[native code]") !== -1;
  } catch {
    return typeof e7 == "function";
  }
}
a2(ip, "_isNativeFunction");
function as() {
  try {
    var e7 = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function() {
    }));
  } catch {
  }
  return (as = a2(function() {
    return !!e7;
  }, "_isNativeReflectConstruct"))();
}
a2(as, "_isNativeReflectConstruct");
ei();
function lp(e7, t, r) {
  if (as()) return Reflect.construct.apply(null, arguments);
  var n = [null];
  n.push.apply(n, t);
  var o = new (e7.bind.apply(e7, n))();
  return r && Xt2(o, r.prototype), o;
}
a2(lp, "_construct");
function ri(e7) {
  var t = typeof Map == "function" ? /* @__PURE__ */ new Map() : void 0;
  return ri = a2(function(n) {
    if (n === null || !ip(n)) return n;
    if (typeof n != "function") throw new TypeError("Super expression must either be null or a function");
    if (t !== void 0) {
      if (t.has(n)) return t.get(n);
      t.set(n, o);
    }
    function o() {
      return lp(n, arguments, ti(this).constructor);
    }
    return a2(o, "Wrapper"), o.prototype = Object.create(n.prototype, {
      constructor: {
        value: o,
        enumerable: false,
        writable: true,
        configurable: true
      }
    }), Xt2(o, n);
  }, "_wrapNativeSuper"), ri(e7);
}
a2(ri, "_wrapNativeSuper");
var H4 = {
  1: `Passed invalid arguments to hsl, please pass multiple numbers e.g. hsl(360, 0.75, 0.4) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75 }).

`,
  2: `Passed invalid arguments to hsla, please pass multiple numbers e.g. hsla(360, 0.75, 0.4, 0.7) or an object e.g. rgb({ hue: 255, saturation: 0.4, lightness: 0.75, alpha: 0.7 }).

`,
  3: `Passed an incorrect argument to a color function, please pass a string representation of a color.

`,
  4: `Couldn't generate valid rgb string from %s, it returned %s.

`,
  5: `Couldn't parse the color string. Please provide the color as a string in hex, rgb, rgba, hsl or hsla notation.

`,
  6: `Passed invalid arguments to rgb, please pass multiple numbers e.g. rgb(255, 205, 100) or an object e.g. rgb({ red: 255, green: 205, blue: 100 }).

`,
  7: `Passed invalid arguments to rgba, please pass multiple numbers e.g. rgb(255, 205, 100, 0.75) or an object e.g. rgb({ red: 255, green: 205, blue: 100, alpha: 0.75 }).

`,
  8: `Passed invalid argument to toColorString, please pass a RgbColor, RgbaColor, HslColor or HslaColor object.

`,
  9: `Please provide a number of steps to the modularScale helper.

`,
  10: `Please pass a number or one of the predefined scales to the modularScale helper as the ratio.

`,
  11: `Invalid value passed as base to modularScale, expected number or em string but got "%s"

`,
  12: `Expected a string ending in "px" or a number passed as the first argument to %s(), got "%s" instead.

`,
  13: `Expected a string ending in "px" or a number passed as the second argument to %s(), got "%s" instead.

`,
  14: `Passed invalid pixel value ("%s") to %s(), please pass a value like "12px" or 12.

`,
  15: `Passed invalid base value ("%s") to %s(), please pass a value like "12px" or 12.

`,
  16: `You must provide a template to this method.

`,
  17: `You passed an unsupported selector state to this method.

`,
  18: `minScreen and maxScreen must be provided as stringified numbers with the same units.

`,
  19: `fromSize and toSize must be provided as stringified numbers with the same units.

`,
  20: `expects either an array of objects or a single object with the properties prop, fromSize, and toSize.

`,
  21: "expects the objects in the first argument array to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
  22: "expects the first argument object to have the properties `prop`, `fromSize`, and `toSize`.\n\n",
  23: `fontFace expects a name of a font-family.

`,
  24: `fontFace expects either the path to the font file(s) or a name of a local copy.

`,
  25: `fontFace expects localFonts to be an array.

`,
  26: `fontFace expects fileFormats to be an array.

`,
  27: `radialGradient requries at least 2 color-stops to properly render.

`,
  28: `Please supply a filename to retinaImage() as the first argument.

`,
  29: `Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.

`,
  30: "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
  31: `The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation

`,
  32: `To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])
To pass a single animation please supply them in simple values, e.g. animation('rotate', '2s')

`,
  33: `The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation

`,
  34: `borderRadius expects a radius value as a string or number as the second argument.

`,
  35: `borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.

`,
  36: `Property must be a string value.

`,
  37: `Syntax Error at %s.

`,
  38: `Formula contains a function that needs parentheses at %s.

`,
  39: `Formula is missing closing parenthesis at %s.

`,
  40: `Formula has too many closing parentheses at %s.

`,
  41: `All values in a formula must have the same unit or be unitless.

`,
  42: `Please provide a number of steps to the modularScale helper.

`,
  43: `Please pass a number or one of the predefined scales to the modularScale helper as the ratio.

`,
  44: `Invalid value passed as base to modularScale, expected number or em/rem string but got %s.

`,
  45: `Passed invalid argument to hslToColorString, please pass a HslColor or HslaColor object.

`,
  46: `Passed invalid argument to rgbToColorString, please pass a RgbColor or RgbaColor object.

`,
  47: `minScreen and maxScreen must be provided as stringified numbers with the same units.

`,
  48: `fromSize and toSize must be provided as stringified numbers with the same units.

`,
  49: `Expects either an array of objects or a single object with the properties prop, fromSize, and toSize.

`,
  50: `Expects the objects in the first argument array to have the properties prop, fromSize, and toSize.

`,
  51: `Expects the first argument object to have the properties prop, fromSize, and toSize.

`,
  52: `fontFace expects either the path to the font file(s) or a name of a local copy.

`,
  53: `fontFace expects localFonts to be an array.

`,
  54: `fontFace expects fileFormats to be an array.

`,
  55: `fontFace expects a name of a font-family.

`,
  56: `linearGradient requries at least 2 color-stops to properly render.

`,
  57: `radialGradient requries at least 2 color-stops to properly render.

`,
  58: `Please supply a filename to retinaImage() as the first argument.

`,
  59: `Passed invalid argument to triangle, please pass correct pointingDirection e.g. 'right'.

`,
  60: "Passed an invalid value to `height` or `width`. Please provide a pixel based unit.\n\n",
  61: `Property must be a string value.

`,
  62: `borderRadius expects a radius value as a string or number as the second argument.

`,
  63: `borderRadius expects one of "top", "bottom", "left" or "right" as the first argument.

`,
  64: `The animation shorthand only takes 8 arguments. See the specification for more information: http://mdn.io/animation.

`,
  65: `To pass multiple animations please supply them in arrays, e.g. animation(['rotate', '2s'], ['move', '1s'])\\nTo pass a single animation please supply them in simple values, e.g. animation('rotate', '2s').

`,
  66: `The animation shorthand arrays can only have 8 elements. See the specification for more information: http://mdn.io/animation.

`,
  67: `You must provide a template to this method.

`,
  68: `You passed an unsupported selector state to this method.

`,
  69: `Expected a string ending in "px" or a number passed as the first argument to %s(), got %s instead.

`,
  70: `Expected a string ending in "px" or a number passed as the second argument to %s(), got %s instead.

`,
  71: `Passed invalid pixel value %s to %s(), please pass a value like "12px" or 12.

`,
  72: `Passed invalid base value %s to %s(), please pass a value like "12px" or 12.

`,
  73: `Please provide a valid CSS variable.

`,
  74: `CSS variable not found and no default was provided.

`,
  75: `important requires a valid style object, got a %s instead.

`,
  76: `fromSize and toSize must be provided as stringified numbers with the same units as minScreen and maxScreen.

`,
  77: `remToPx expects a value in "rem" but you provided it in "%s".

`,
  78: `base must be set in "px" or "%" but you set it in "%s".
`
};
function $4() {
  for (var e7 = arguments.length, t = new Array(e7), r = 0; r < e7; r++)
    t[r] = arguments[r];
  var n = t[0], o = [], i;
  for (i = 1; i < t.length; i += 1)
    o.push(t[i]);
  return o.forEach(function(l7) {
    n = n.replace(/%[a-z]/, l7);
  }), n;
}
a2($4, "format");
var ht = function(e7) {
  op(t, e7);
  function t(r) {
    for (var n, o = arguments.length, i = new Array(o > 1 ? o - 1 : 0), l7 = 1; l7 < o; l7++)
      i[l7 - 1] = arguments[l7];
    return n = e7.call(this, $4.apply(void 0, [H4[r]].concat(i))) || this, rp(n);
  }
  return a2(t, "PolishedError"), t;
}(ri(Error));
function is(e7) {
  return Math.round(e7 * 255);
}
a2(is, "colorToInt");
function z4(e7, t, r) {
  return is(e7) + "," + is(t) + "," + is(r);
}
a2(z4, "convertToInt");
function Zo(e7, t, r, n) {
  if (n === void 0 && (n = z4), t === 0)
    return n(r, r, r);
  var o = (e7 % 360 + 360) % 360 / 60, i = (1 - Math.abs(2 * r - 1)) * t, l7 = i * (1 - Math.abs(o % 2 - 1)), u6 = 0, c = 0, p = 0;
  o >= 0 && o < 1 ? (u6 = i, c = l7) : o >= 1 && o < 2 ? (u6 = l7, c = i) : o >= 2 && o < 3 ? (c = i, p = l7) : o >= 3 && o < 4 ? (c = l7, p = i) : o >= 4 && o < 5 ? (u6 = l7, p = i) : o >= 5 && o < 6 && (u6 = i, p = l7);
  var d = r - i / 2, h7 = u6 + d, f = c + d, v7 = p + d;
  return n(h7, f, v7);
}
a2(Zo, "hslToRgb");
var sp = {
  aliceblue: "f0f8ff",
  antiquewhite: "faebd7",
  aqua: "00ffff",
  aquamarine: "7fffd4",
  azure: "f0ffff",
  beige: "f5f5dc",
  bisque: "ffe4c4",
  black: "000",
  blanchedalmond: "ffebcd",
  blue: "0000ff",
  blueviolet: "8a2be2",
  brown: "a52a2a",
  burlywood: "deb887",
  cadetblue: "5f9ea0",
  chartreuse: "7fff00",
  chocolate: "d2691e",
  coral: "ff7f50",
  cornflowerblue: "6495ed",
  cornsilk: "fff8dc",
  crimson: "dc143c",
  cyan: "00ffff",
  darkblue: "00008b",
  darkcyan: "008b8b",
  darkgoldenrod: "b8860b",
  darkgray: "a9a9a9",
  darkgreen: "006400",
  darkgrey: "a9a9a9",
  darkkhaki: "bdb76b",
  darkmagenta: "8b008b",
  darkolivegreen: "556b2f",
  darkorange: "ff8c00",
  darkorchid: "9932cc",
  darkred: "8b0000",
  darksalmon: "e9967a",
  darkseagreen: "8fbc8f",
  darkslateblue: "483d8b",
  darkslategray: "2f4f4f",
  darkslategrey: "2f4f4f",
  darkturquoise: "00ced1",
  darkviolet: "9400d3",
  deeppink: "ff1493",
  deepskyblue: "00bfff",
  dimgray: "696969",
  dimgrey: "696969",
  dodgerblue: "1e90ff",
  firebrick: "b22222",
  floralwhite: "fffaf0",
  forestgreen: "228b22",
  fuchsia: "ff00ff",
  gainsboro: "dcdcdc",
  ghostwhite: "f8f8ff",
  gold: "ffd700",
  goldenrod: "daa520",
  gray: "808080",
  green: "008000",
  greenyellow: "adff2f",
  grey: "808080",
  honeydew: "f0fff0",
  hotpink: "ff69b4",
  indianred: "cd5c5c",
  indigo: "4b0082",
  ivory: "fffff0",
  khaki: "f0e68c",
  lavender: "e6e6fa",
  lavenderblush: "fff0f5",
  lawngreen: "7cfc00",
  lemonchiffon: "fffacd",
  lightblue: "add8e6",
  lightcoral: "f08080",
  lightcyan: "e0ffff",
  lightgoldenrodyellow: "fafad2",
  lightgray: "d3d3d3",
  lightgreen: "90ee90",
  lightgrey: "d3d3d3",
  lightpink: "ffb6c1",
  lightsalmon: "ffa07a",
  lightseagreen: "20b2aa",
  lightskyblue: "87cefa",
  lightslategray: "789",
  lightslategrey: "789",
  lightsteelblue: "b0c4de",
  lightyellow: "ffffe0",
  lime: "0f0",
  limegreen: "32cd32",
  linen: "faf0e6",
  magenta: "f0f",
  maroon: "800000",
  mediumaquamarine: "66cdaa",
  mediumblue: "0000cd",
  mediumorchid: "ba55d3",
  mediumpurple: "9370db",
  mediumseagreen: "3cb371",
  mediumslateblue: "7b68ee",
  mediumspringgreen: "00fa9a",
  mediumturquoise: "48d1cc",
  mediumvioletred: "c71585",
  midnightblue: "191970",
  mintcream: "f5fffa",
  mistyrose: "ffe4e1",
  moccasin: "ffe4b5",
  navajowhite: "ffdead",
  navy: "000080",
  oldlace: "fdf5e6",
  olive: "808000",
  olivedrab: "6b8e23",
  orange: "ffa500",
  orangered: "ff4500",
  orchid: "da70d6",
  palegoldenrod: "eee8aa",
  palegreen: "98fb98",
  paleturquoise: "afeeee",
  palevioletred: "db7093",
  papayawhip: "ffefd5",
  peachpuff: "ffdab9",
  peru: "cd853f",
  pink: "ffc0cb",
  plum: "dda0dd",
  powderblue: "b0e0e6",
  purple: "800080",
  rebeccapurple: "639",
  red: "f00",
  rosybrown: "bc8f8f",
  royalblue: "4169e1",
  saddlebrown: "8b4513",
  salmon: "fa8072",
  sandybrown: "f4a460",
  seagreen: "2e8b57",
  seashell: "fff5ee",
  sienna: "a0522d",
  silver: "c0c0c0",
  skyblue: "87ceeb",
  slateblue: "6a5acd",
  slategray: "708090",
  slategrey: "708090",
  snow: "fffafa",
  springgreen: "00ff7f",
  steelblue: "4682b4",
  tan: "d2b48c",
  teal: "008080",
  thistle: "d8bfd8",
  tomato: "ff6347",
  turquoise: "40e0d0",
  violet: "ee82ee",
  wheat: "f5deb3",
  white: "fff",
  whitesmoke: "f5f5f5",
  yellow: "ff0",
  yellowgreen: "9acd32"
};
function O4(e7) {
  if (typeof e7 != "string") return e7;
  var t = e7.toLowerCase();
  return sp[t] ? "#" + sp[t] : e7;
}
a2(O4, "nameToHex");
var N4 = /^#[a-fA-F0-9]{6}$/;
var j4 = /^#[a-fA-F0-9]{8}$/;
var V4 = /^#[a-fA-F0-9]{3}$/;
var q4 = /^#[a-fA-F0-9]{4}$/;
var ls = /^rgb\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*\)$/i;
var W4 = /^rgb(?:a)?\(\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,)?\s*(\d{1,3})\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;
var U4 = /^hsl\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*\)$/i;
var G4 = /^hsl(?:a)?\(\s*(\d{0,3}[.]?[0-9]+(?:deg)?)\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,)?\s*(\d{1,3}[.]?[0-9]?)%\s*(?:,|\/)\s*([-+]?\d*[.]?\d+[%]?)\s*\)$/i;
function ps(e7) {
  if (typeof e7 != "string")
    throw new ht(3);
  var t = O4(e7);
  if (t.match(N4))
    return {
      red: parseInt("" + t[1] + t[2], 16),
      green: parseInt("" + t[3] + t[4], 16),
      blue: parseInt("" + t[5] + t[6], 16)
    };
  if (t.match(j4)) {
    var r = parseFloat((parseInt("" + t[7] + t[8], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + t[1] + t[2], 16),
      green: parseInt("" + t[3] + t[4], 16),
      blue: parseInt("" + t[5] + t[6], 16),
      alpha: r
    };
  }
  if (t.match(V4))
    return {
      red: parseInt("" + t[1] + t[1], 16),
      green: parseInt("" + t[2] + t[2], 16),
      blue: parseInt("" + t[3] + t[3], 16)
    };
  if (t.match(q4)) {
    var n = parseFloat((parseInt("" + t[4] + t[4], 16) / 255).toFixed(2));
    return {
      red: parseInt("" + t[1] + t[1], 16),
      green: parseInt("" + t[2] + t[2], 16),
      blue: parseInt("" + t[3] + t[3], 16),
      alpha: n
    };
  }
  var o = ls.exec(t);
  if (o)
    return {
      red: parseInt("" + o[1], 10),
      green: parseInt("" + o[2], 10),
      blue: parseInt("" + o[3], 10)
    };
  var i = W4.exec(t.substring(0, 50));
  if (i)
    return {
      red: parseInt("" + i[1], 10),
      green: parseInt("" + i[2], 10),
      blue: parseInt("" + i[3], 10),
      alpha: parseFloat("" + i[4]) > 1 ? parseFloat("" + i[4]) / 100 : parseFloat("" + i[4])
    };
  var l7 = U4.exec(t);
  if (l7) {
    var u6 = parseInt("" + l7[1], 10), c = parseInt("" + l7[2], 10) / 100, p = parseInt("" + l7[3], 10) / 100, d = "rgb(" + Zo(u6, c, p) + ")", h7 = ls.exec(d);
    if (!h7)
      throw new ht(4, t, d);
    return {
      red: parseInt("" + h7[1], 10),
      green: parseInt("" + h7[2], 10),
      blue: parseInt("" + h7[3], 10)
    };
  }
  var f = G4.exec(t.substring(0, 50));
  if (f) {
    var v7 = parseInt("" + f[1], 10), b = parseInt("" + f[2], 10) / 100, m = parseInt("" + f[3], 10) / 100, g7 = "rgb(" + Zo(v7, b, m) + ")", y = ls.exec(g7);
    if (!y)
      throw new ht(4, t, g7);
    return {
      red: parseInt("" + y[1], 10),
      green: parseInt("" + y[2], 10),
      blue: parseInt("" + y[3], 10),
      alpha: parseFloat("" + f[4]) > 1 ? parseFloat("" + f[4]) / 100 : parseFloat("" + f[4])
    };
  }
  throw new ht(5);
}
a2(ps, "parseToRgb");
function X4(e7) {
  var t = e7.red / 255, r = e7.green / 255, n = e7.blue / 255, o = Math.max(t, r, n), i = Math.min(t, r, n), l7 = (o + i) / 2;
  if (o === i)
    return e7.alpha !== void 0 ? {
      hue: 0,
      saturation: 0,
      lightness: l7,
      alpha: e7.alpha
    } : {
      hue: 0,
      saturation: 0,
      lightness: l7
    };
  var u6, c = o - i, p = l7 > 0.5 ? c / (2 - o - i) : c / (o + i);
  switch (o) {
    case t:
      u6 = (r - n) / c + (r < n ? 6 : 0);
      break;
    case r:
      u6 = (n - t) / c + 2;
      break;
    default:
      u6 = (t - r) / c + 4;
      break;
  }
  return u6 *= 60, e7.alpha !== void 0 ? {
    hue: u6,
    saturation: p,
    lightness: l7,
    alpha: e7.alpha
  } : {
    hue: u6,
    saturation: p,
    lightness: l7
  };
}
a2(X4, "rgbToHsl");
function up(e7) {
  return X4(ps(e7));
}
a2(up, "parseToHsl");
var Y4 = a2(function(t) {
  return t.length === 7 && t[1] === t[2] && t[3] === t[4] && t[5] === t[6] ? "#" + t[1] + t[3] + t[5] : t;
}, "reduceHexValue");
var us = Y4;
function wr2(e7) {
  var t = e7.toString(16);
  return t.length === 1 ? "0" + t : t;
}
a2(wr2, "numberToHex");
function ss(e7) {
  return wr2(Math.round(e7 * 255));
}
a2(ss, "colorToHex");
function K4(e7, t, r) {
  return us("#" + ss(e7) + ss(t) + ss(r));
}
a2(K4, "convertToHex");
function ni(e7, t, r) {
  return Zo(e7, t, r, K4);
}
a2(ni, "hslToHex");
function Z4(e7, t, r) {
  if (typeof e7 == "number" && typeof t == "number" && typeof r == "number")
    return ni(e7, t, r);
  if (typeof e7 == "object" && t === void 0 && r === void 0)
    return ni(e7.hue, e7.saturation, e7.lightness);
  throw new ht(1);
}
a2(Z4, "hsl");
function J4(e7, t, r, n) {
  if (typeof e7 == "number" && typeof t == "number" && typeof r == "number" && typeof n == "number")
    return n >= 1 ? ni(e7, t, r) : "rgba(" + Zo(e7, t, r) + "," + n + ")";
  if (typeof e7 == "object" && t === void 0 && r === void 0 && n === void 0)
    return e7.alpha >= 1 ? ni(e7.hue, e7.saturation, e7.lightness) : "rgba(" + Zo(e7.hue, e7.saturation, e7.lightness) + "," + e7.alpha + ")";
  throw new ht(2);
}
a2(J4, "hsla");
function cs(e7, t, r) {
  if (typeof e7 == "number" && typeof t == "number" && typeof r == "number")
    return us("#" + wr2(e7) + wr2(t) + wr2(r));
  if (typeof e7 == "object" && t === void 0 && r === void 0)
    return us("#" + wr2(e7.red) + wr2(e7.green) + wr2(e7.blue));
  throw new ht(6);
}
a2(cs, "rgb");
function Jo(e7, t, r, n) {
  if (typeof e7 == "string" && typeof t == "number") {
    var o = ps(e7);
    return "rgba(" + o.red + "," + o.green + "," + o.blue + "," + t + ")";
  } else {
    if (typeof e7 == "number" && typeof t == "number" && typeof r == "number" && typeof n == "number")
      return n >= 1 ? cs(e7, t, r) : "rgba(" + e7 + "," + t + "," + r + "," + n + ")";
    if (typeof e7 == "object" && t === void 0 && r === void 0 && n === void 0)
      return e7.alpha >= 1 ? cs(e7.red, e7.green, e7.blue) : "rgba(" + e7.red + "," + e7.green + "," + e7.blue + "," + e7.alpha + ")";
  }
  throw new ht(7);
}
a2(Jo, "rgba");
var Q4 = a2(function(t) {
  return typeof t.red == "number" && typeof t.green == "number" && typeof t.blue == "number" && (typeof t.alpha != "number" || typeof t.alpha > "u");
}, "isRgb");
var e6 = a2(function(t) {
  return typeof t.red == "number" && typeof t.green == "number" && typeof t.blue == "number" && typeof t.alpha == "number";
}, "isRgba");
var t6 = a2(function(t) {
  return typeof t.hue == "number" && typeof t.saturation == "number" && typeof t.lightness == "number" && (typeof t.alpha != "number" || typeof t.alpha > "u");
}, "isHsl");
var r6 = a2(function(t) {
  return typeof t.hue == "number" && typeof t.saturation == "number" && typeof t.lightness == "number" && typeof t.alpha == "number";
}, "isHsla");
function cp(e7) {
  if (typeof e7 != "object") throw new ht(8);
  if (e6(e7)) return Jo(e7);
  if (Q4(e7)) return cs(e7);
  if (r6(e7)) return J4(e7);
  if (t6(e7)) return Z4(e7);
  throw new ht(8);
}
a2(cp, "toColorString");
function pp(e7, t, r) {
  return a2(function() {
    var o = r.concat(Array.prototype.slice.call(arguments));
    return o.length >= t ? e7.apply(this, o) : pp(e7, t, o);
  }, "fn");
}
a2(pp, "curried");
function ds(e7) {
  return pp(e7, e7.length, []);
}
a2(ds, "curry");
function fs(e7, t, r) {
  return Math.max(e7, Math.min(t, r));
}
a2(fs, "guard");
function n6(e7, t) {
  if (t === "transparent") return t;
  var r = up(t);
  return cp(H2({}, r, {
    lightness: fs(0, 1, r.lightness - parseFloat(e7))
  }));
}
a2(n6, "darken");
var o6 = ds(n6);
var Yt2 = o6;
function a6(e7, t) {
  if (t === "transparent") return t;
  var r = up(t);
  return cp(H2({}, r, {
    lightness: fs(0, 1, r.lightness + parseFloat(e7))
  }));
}
a2(a6, "lighten");
var i6 = ds(a6);
var hs = i6;
function l6(e7, t) {
  if (t === "transparent") return t;
  var r = ps(t), n = typeof r.alpha == "number" ? r.alpha : 1, o = H2({}, r, {
    alpha: fs(0, 1, +(n * 100 - parseFloat(e7) * 100).toFixed(2) / 100)
  });
  return Jo(o);
}
a2(l6, "transparentize");
var s6 = ds(l6);
var be2 = s6;
var We2 = a2(({ theme: e7 }) => ({
  margin: "20px 0 8px",
  padding: 0,
  cursor: "text",
  position: "relative",
  color: e7.color.defaultText,
  "&:first-of-type": {
    marginTop: 0,
    paddingTop: 0
  },
  "&:hover a.anchor": {
    textDecoration: "none"
  },
  "& tt, & code": {
    fontSize: "inherit"
  }
}), "headerCommon");
var kt2 = a2(({ theme: e7 }) => ({
  lineHeight: 1,
  margin: "0 2px",
  padding: "3px 5px",
  whiteSpace: "nowrap",
  borderRadius: 3,
  fontSize: e7.typography.size.s2 - 1,
  border: e7.base === "light" ? `1px solid ${e7.color.mediumlight}` : `1px solid ${e7.color.darker}`,
  color: e7.base === "light" ? be2(0.1, e7.color.defaultText) : be2(0.3, e7.color.defaultText),
  backgroundColor: e7.base === "light" ? e7.color.lighter : e7.color.border
}), "codeCommon");
var q6 = a2(({ theme: e7 }) => ({
  fontFamily: e7.typography.fonts.base,
  fontSize: e7.typography.size.s3,
  margin: 0,
  WebkitFontSmoothing: "antialiased",
  MozOsxFontSmoothing: "grayscale",
  WebkitTapHighlightColor: "rgba(0, 0, 0, 0)",
  WebkitOverflowScrolling: "touch"
}), "withReset");
var Be2 = {
  margin: "16px 0"
};
var dp = Tr.div(q6);
var fp = a2(({
  href: e7 = "",
  ...t
}) => {
  let n = /^\//.test(e7) ? `./?path=${e7}` : e7, i = /^#.*/.test(e7) ? "_self" : "_top";
  return import_react12.default.createElement("a", { href: n, target: i, ...t });
}, "Link");
var ms = Tr(fp)(q6, ({ theme: e7 }) => ({
  fontSize: "inherit",
  lineHeight: "24px",
  color: e7.color.secondary,
  textDecoration: "none",
  "&.absent": {
    color: "#cc0000"
  },
  "&.anchor": {
    display: "block",
    paddingLeft: 30,
    marginLeft: -30,
    cursor: "pointer",
    position: "absolute",
    top: 0,
    left: 0,
    bottom: 0
  }
}));
var gs = Tr.blockquote(q6, Be2, ({ theme: e7 }) => ({
  borderLeft: `4px solid ${e7.color.medium}`,
  padding: "0 15px",
  color: e7.color.dark,
  "& > :first-of-type": {
    marginTop: 0
  },
  "& > :last-child": {
    marginBottom: 0
  }
}));
ca();
var g5 = a2((e7) => typeof e7 == "string", "isReactChildString");
var Cb = /[\n\r]/g;
var Eb = Tr.code(
  ({ theme: e7 }) => ({
    // from reset
    fontFamily: e7.typography.fonts.mono,
    WebkitFontSmoothing: "antialiased",
    MozOsxFontSmoothing: "grayscale",
    display: "inline-block",
    paddingLeft: 2,
    paddingRight: 2,
    verticalAlign: "baseline",
    color: "inherit"
  }),
  kt2
);
var Sb = Tr(ua)(({ theme: e7 }) => ({
  // DocBlocks-specific styling and overrides
  fontFamily: e7.typography.fonts.mono,
  fontSize: `${e7.typography.size.s2 - 1}px`,
  lineHeight: "19px",
  margin: "25px 0 40px",
  borderRadius: e7.appBorderRadius,
  boxShadow: e7.base === "light" ? "rgba(0, 0, 0, 0.10) 0 1px 3px 0" : "rgba(0, 0, 0, 0.20) 0 2px 5px 0",
  "pre.prismjs": {
    padding: 20,
    background: "inherit"
  }
}));
var vu = a2(({
  className: e7,
  children: t,
  ...r
}) => {
  let n = (e7 || "").match(/lang-(\S+)/), o = import_react13.Children.toArray(t);
  return o.filter(g5).some((l7) => l7.match(Cb)) ? import_react13.default.createElement(
    Sb,
    {
      bordered: true,
      copyable: true,
      language: (n == null ? void 0 : n[1]) ?? "text",
      format: false,
      ...r
    },
    t
  ) : import_react13.default.createElement(Eb, { ...r, className: e7 }, o);
}, "Code");
var wu = Tr.dl(q6, Be2, {
  padding: 0,
  "& dt": {
    fontSize: "14px",
    fontWeight: "bold",
    fontStyle: "italic",
    padding: 0,
    margin: "16px 0 4px"
  },
  "& dt:first-of-type": {
    padding: 0
  },
  "& dt > :first-of-type": {
    marginTop: 0
  },
  "& dt > :last-child": {
    marginBottom: 0
  },
  "& dd": {
    margin: "0 0 16px",
    padding: "0 15px"
  },
  "& dd > :first-of-type": {
    marginTop: 0
  },
  "& dd > :last-child": {
    marginBottom: 0
  }
});
var bu2 = Tr.div(q6);
var yu = Tr.h1(q6, We2, ({ theme: e7 }) => ({
  fontSize: `${e7.typography.size.l1}px`,
  fontWeight: e7.typography.weight.bold
}));
var Du = Tr.h2(q6, We2, ({ theme: e7 }) => ({
  fontSize: `${e7.typography.size.m2}px`,
  paddingBottom: 4,
  borderBottom: `1px solid ${e7.appBorderColor}`
}));
var xu = Tr.h3(q6, We2, ({ theme: e7 }) => ({
  fontSize: `${e7.typography.size.m1}px`
}));
var Cu = Tr.h4(q6, We2, ({ theme: e7 }) => ({
  fontSize: `${e7.typography.size.s3}px`
}));
var Eu = Tr.h5(q6, We2, ({ theme: e7 }) => ({
  fontSize: `${e7.typography.size.s2}px`
}));
var Su = Tr.h6(q6, We2, ({ theme: e7 }) => ({
  fontSize: `${e7.typography.size.s2}px`,
  color: e7.color.dark
}));
var Ru = Tr.hr(({ theme: e7 }) => ({
  border: "0 none",
  borderTop: `1px solid ${e7.appBorderColor}`,
  height: 4,
  padding: 0
}));
var Au = Tr.img({
  maxWidth: "100%"
});
var Fu = Tr.li(q6, ({ theme: e7 }) => ({
  fontSize: e7.typography.size.s2,
  color: e7.color.defaultText,
  lineHeight: "24px",
  "& + li": {
    marginTop: ".25em"
  },
  "& ul, & ol": {
    marginTop: ".25em",
    marginBottom: 0
  },
  "& code": kt2({ theme: e7 })
}));
var $b = {
  paddingLeft: 30,
  "& :first-of-type": {
    marginTop: 0
  },
  "& :last-child": {
    marginBottom: 0
  }
};
var ku = Tr.ol(q6, Be2, $b, {
  listStyle: "decimal"
});
var Tu = Tr.p(q6, Be2, ({ theme: e7 }) => ({
  fontSize: e7.typography.size.s2,
  lineHeight: "24px",
  color: e7.color.defaultText,
  "& code": kt2({ theme: e7 })
}));
var Lu = Tr.pre(q6, Be2, ({ theme: e7 }) => ({
  // reset
  fontFamily: e7.typography.fonts.mono,
  WebkitFontSmoothing: "antialiased",
  MozOsxFontSmoothing: "grayscale",
  lineHeight: "18px",
  padding: "11px 1rem",
  whiteSpace: "pre-wrap",
  color: "inherit",
  borderRadius: 3,
  margin: "1rem 0",
  "&:not(.prismjs)": {
    background: "transparent",
    border: "none",
    borderRadius: 0,
    padding: 0,
    margin: 0
  },
  "& pre, &.prismjs": {
    padding: 15,
    margin: 0,
    whiteSpace: "pre-wrap",
    color: "inherit",
    fontSize: "13px",
    lineHeight: "19px",
    code: {
      color: "inherit",
      fontSize: "inherit"
    }
  },
  "& code": {
    whiteSpace: "pre"
  },
  "& code, & tt": {
    border: "none"
  }
}));
var Iu = Tr.span(q6, ({ theme: e7 }) => ({
  "&.frame": {
    display: "block",
    overflow: "hidden",
    "& > span": {
      border: `1px solid ${e7.color.medium}`,
      display: "block",
      float: "left",
      overflow: "hidden",
      margin: "13px 0 0",
      padding: 7,
      width: "auto"
    },
    "& span img": {
      display: "block",
      float: "left"
    },
    "& span span": {
      clear: "both",
      color: e7.color.darkest,
      display: "block",
      padding: "5px 0 0"
    }
  },
  "&.align-center": {
    display: "block",
    overflow: "hidden",
    clear: "both",
    "& > span": {
      display: "block",
      overflow: "hidden",
      margin: "13px auto 0",
      textAlign: "center"
    },
    "& span img": {
      margin: "0 auto",
      textAlign: "center"
    }
  },
  "&.align-right": {
    display: "block",
    overflow: "hidden",
    clear: "both",
    "& > span": {
      display: "block",
      overflow: "hidden",
      margin: "13px 0 0",
      textAlign: "right"
    },
    "& span img": {
      margin: 0,
      textAlign: "right"
    }
  },
  "&.float-left": {
    display: "block",
    marginRight: 13,
    overflow: "hidden",
    float: "left",
    "& span": {
      margin: "13px 0 0"
    }
  },
  "&.float-right": {
    display: "block",
    marginLeft: 13,
    overflow: "hidden",
    float: "right",
    "& > span": {
      display: "block",
      overflow: "hidden",
      margin: "13px auto 0",
      textAlign: "right"
    }
  }
}));
var Bu = Tr.title(kt2);
var Mu = Tr.table(q6, Be2, ({ theme: e7 }) => ({
  fontSize: e7.typography.size.s2,
  lineHeight: "24px",
  padding: 0,
  borderCollapse: "collapse",
  "& tr": {
    borderTop: `1px solid ${e7.appBorderColor}`,
    backgroundColor: e7.appContentBg,
    margin: 0,
    padding: 0
  },
  "& tr:nth-of-type(2n)": {
    backgroundColor: e7.base === "dark" ? e7.color.darker : e7.color.lighter
  },
  "& tr th": {
    fontWeight: "bold",
    color: e7.color.defaultText,
    border: `1px solid ${e7.appBorderColor}`,
    margin: 0,
    padding: "6px 13px"
  },
  "& tr td": {
    border: `1px solid ${e7.appBorderColor}`,
    color: e7.color.defaultText,
    margin: 0,
    padding: "6px 13px"
  },
  "& tr th :first-of-type, & tr td :first-of-type": {
    marginTop: 0
  },
  "& tr th :last-child, & tr td :last-child": {
    marginBottom: 0
  }
}));
var Wb = {
  paddingLeft: 30,
  "& :first-of-type": {
    marginTop: 0
  },
  "& :last-child": {
    marginBottom: 0
  }
};
var _u = Tr.ul(q6, Be2, Wb, { listStyle: "disc" });
var Pu = {
  h1: a2((e7) => import_react11.default.createElement(yu, { ...te2(e7, "h1") }), "h1"),
  h2: a2((e7) => import_react11.default.createElement(Du, { ...te2(e7, "h2") }), "h2"),
  h3: a2((e7) => import_react11.default.createElement(xu, { ...te2(e7, "h3") }), "h3"),
  h4: a2((e7) => import_react11.default.createElement(Cu, { ...te2(e7, "h4") }), "h4"),
  h5: a2((e7) => import_react11.default.createElement(Eu, { ...te2(e7, "h5") }), "h5"),
  h6: a2((e7) => import_react11.default.createElement(Su, { ...te2(e7, "h6") }), "h6"),
  pre: a2((e7) => import_react11.default.createElement(Lu, { ...te2(e7, "pre") }), "pre"),
  a: a2((e7) => import_react11.default.createElement(ms, { ...te2(e7, "a") }), "a"),
  hr: a2((e7) => import_react11.default.createElement(Ru, { ...te2(e7, "hr") }), "hr"),
  dl: a2((e7) => import_react11.default.createElement(wu, { ...te2(e7, "dl") }), "dl"),
  blockquote: a2((e7) => import_react11.default.createElement(gs, { ...te2(e7, "blockquote") }), "blockquote"),
  table: a2((e7) => import_react11.default.createElement(Mu, { ...te2(e7, "table") }), "table"),
  img: a2((e7) => import_react11.default.createElement(Au, { ...te2(e7, "img") }), "img"),
  div: a2((e7) => import_react11.default.createElement(bu2, { ...te2(e7, "div") }), "div"),
  span: a2((e7) => import_react11.default.createElement(Iu, { ...te2(e7, "span") }), "span"),
  li: a2((e7) => import_react11.default.createElement(Fu, { ...te2(e7, "li") }), "li"),
  ul: a2((e7) => import_react11.default.createElement(_u, { ...te2(e7, "ul") }), "ul"),
  ol: a2((e7) => import_react11.default.createElement(ku, { ...te2(e7, "ol") }), "ol"),
  p: a2((e7) => import_react11.default.createElement(Tu, { ...te2(e7, "p") }), "p"),
  code: a2((e7) => import_react11.default.createElement(vu, { ...te2(e7, "code") }), "code"),
  tt: a2((e7) => import_react11.default.createElement(Bu, { ...te2(e7, "tt") }), "tt"),
  resetwrapper: a2((e7) => import_react11.default.createElement(dp, { ...te2(e7, "resetwrapper") }), "resetwrapper")
};
var Yb = Tr.div(
  ({ theme: e7 }) => ({
    display: "inline-block",
    fontSize: 11,
    lineHeight: "12px",
    alignSelf: "center",
    padding: "4px 12px",
    borderRadius: "3em",
    fontWeight: e7.typography.weight.bold
  }),
  {
    svg: {
      height: 12,
      width: 12,
      marginRight: 4,
      marginTop: -2,
      path: {
        fill: "currentColor"
      }
    }
  },
  ({ theme: e7, status: t }) => {
    switch (t) {
      case "critical":
        return {
          color: e7.color.critical,
          background: e7.background.critical
        };
      case "negative":
        return {
          color: e7.color.negativeText,
          background: e7.background.negative,
          boxShadow: e7.base === "light" ? `inset 0 0 0 1px ${be2(0.9, e7.color.negativeText)}` : "none"
        };
      case "warning":
        return {
          color: e7.color.warningText,
          background: e7.background.warning,
          boxShadow: e7.base === "light" ? `inset 0 0 0 1px ${be2(0.9, e7.color.warningText)}` : "none"
        };
      case "neutral":
        return {
          color: e7.color.dark,
          background: e7.color.mediumlight,
          boxShadow: e7.base === "light" ? `inset 0 0 0 1px ${be2(0.9, e7.color.dark)}` : "none"
        };
      case "positive":
        return {
          color: e7.color.positiveText,
          background: e7.background.positive,
          boxShadow: e7.base === "light" ? `inset 0 0 0 1px ${be2(0.9, e7.color.positiveText)}` : "none"
        };
      default:
        return {};
    }
  }
);
var Kb = a2(({ ...e7 }) => import_react14.default.createElement(Yb, { ...e7 }), "Badge");
var Ou = {};
an2(Ou, {
  AccessibilityAltIcon: () => vx,
  AccessibilityIcon: () => gx,
  AddIcon: () => d9,
  AdminIcon: () => ix,
  AlertAltIcon: () => O9,
  AlertIcon: () => z9,
  AlignLeftIcon: () => V8,
  AlignRightIcon: () => q8,
  AppleIcon: () => uy,
  ArrowBottomLeftIcon: () => ID,
  ArrowBottomRightIcon: () => BD,
  ArrowDownIcon: () => AD,
  ArrowLeftIcon: () => FD,
  ArrowRightIcon: () => kD,
  ArrowSolidDownIcon: () => _D,
  ArrowSolidLeftIcon: () => PD,
  ArrowSolidRightIcon: () => HD,
  ArrowSolidUpIcon: () => MD,
  ArrowTopLeftIcon: () => TD,
  ArrowTopRightIcon: () => LD,
  ArrowUpIcon: () => RD,
  AzureDevOpsIcon: () => my,
  BackIcon: () => YD,
  BasketIcon: () => uD,
  BatchAcceptIcon: () => a9,
  BatchDenyIcon: () => o9,
  BeakerIcon: () => cD,
  BellIcon: () => W9,
  BitbucketIcon: () => gy,
  BoldIcon: () => Z8,
  BookIcon: () => M8,
  BookmarkHollowIcon: () => J9,
  BookmarkIcon: () => Q9,
  BottomBarIcon: () => jy,
  BottomBarToggleIcon: () => Vy,
  BoxIcon: () => Xy,
  BranchIcon: () => iy,
  BrowserIcon: () => My,
  ButtonIcon: () => T9,
  CPUIcon: () => qy,
  CalendarIcon: () => N8,
  CameraIcon: () => w8,
  CategoryIcon: () => H8,
  CertificateIcon: () => aD,
  ChangedIcon: () => v9,
  ChatIcon: () => E9,
  CheckIcon: () => r9,
  ChevronDownIcon: () => yD,
  ChevronLeftIcon: () => DD,
  ChevronRightIcon: () => zu,
  ChevronSmallDownIcon: () => CD,
  ChevronSmallLeftIcon: () => ED,
  ChevronSmallRightIcon: () => SD,
  ChevronSmallUpIcon: () => xD,
  ChevronUpIcon: () => bD,
  ChromaticIcon: () => vy,
  ChromeIcon: () => fy,
  CircleHollowIcon: () => K9,
  CircleIcon: () => Z9,
  ClearIcon: () => b9,
  CloseAltIcon: () => s9,
  CloseIcon: () => h9,
  CloudHollowIcon: () => fD,
  CloudIcon: () => hD,
  CogIcon: () => Zy,
  CollapseIcon: () => zD,
  CommandIcon: () => M9,
  CommentAddIcon: () => D9,
  CommentIcon: () => y9,
  CommentsIcon: () => C9,
  CommitIcon: () => ay,
  CompassIcon: () => QD,
  ComponentDrivenIcon: () => wy,
  ComponentIcon: () => Qb,
  ContrastIcon: () => p8,
  ControlsIcon: () => i9,
  CopyIcon: () => P8,
  CreditIcon: () => k9,
  CrossIcon: () => $u,
  DashboardIcon: () => nx,
  DatabaseIcon: () => Wy,
  DeleteIcon: () => m9,
  DiamondIcon: () => eD,
  DirectionIcon: () => lx,
  DiscordIcon: () => by,
  DocChartIcon: () => U8,
  DocListIcon: () => G8,
  DocumentIcon: () => _8,
  DownloadIcon: () => XD,
  DragIcon: () => X8,
  EditIcon: () => Ky,
  EllipsisIcon: () => e9,
  EmailIcon: () => N9,
  ExpandAltIcon: () => $D,
  ExpandIcon: () => OD,
  EyeCloseIcon: () => u8,
  EyeIcon: () => s8,
  FaceHappyIcon: () => fx,
  FaceNeutralIcon: () => hx,
  FaceSadIcon: () => mx,
  FacebookIcon: () => yy,
  FailedIcon: () => w9,
  FastForwardIcon: () => S8,
  FigmaIcon: () => Dy,
  FilterIcon: () => W8,
  FlagIcon: () => dD,
  FolderIcon: () => $8,
  FormIcon: () => n9,
  GDriveIcon: () => xy,
  GithubIcon: () => Cy,
  GitlabIcon: () => Ey,
  GlobeIcon: () => JD,
  GoogleIcon: () => Sy,
  GraphBarIcon: () => j8,
  GraphLineIcon: () => O8,
  GraphqlIcon: () => Ry,
  GridAltIcon: () => n8,
  GridIcon: () => e8,
  GrowIcon: () => h8,
  HeartHollowIcon: () => tD,
  HeartIcon: () => rD,
  HomeIcon: () => ax,
  HourglassIcon: () => pD,
  InfoIcon: () => P9,
  ItalicIcon: () => J8,
  JumpToIcon: () => Y9,
  KeyIcon: () => A9,
  LightningIcon: () => c8,
  LightningOffIcon: () => Hu,
  LinkBrokenIcon: () => q9,
  LinkIcon: () => V9,
  LinkedinIcon: () => Iy,
  LinuxIcon: () => cy,
  ListOrderedIcon: () => ey,
  ListUnorderedIcon: () => ty,
  LocationIcon: () => ex,
  LockIcon: () => S9,
  MarkdownIcon: () => ny,
  MarkupIcon: () => K8,
  MediumIcon: () => Ay,
  MemoryIcon: () => Uy,
  MenuIcon: () => Y8,
  MergeIcon: () => sy,
  MirrorIcon: () => f8,
  MobileIcon: () => Py,
  MoonIcon: () => B8,
  NutIcon: () => Jy,
  OutboxIcon: () => F9,
  OutlineIcon: () => t8,
  PaintBrushIcon: () => m8,
  PaperClipIcon: () => Q8,
  ParagraphIcon: () => ry,
  PassedIcon: () => g9,
  PhoneIcon: () => j9,
  PhotoDragIcon: () => r8,
  PhotoIcon: () => Jb,
  PinAltIcon: () => c9,
  PinIcon: () => tx,
  PlayAllHollowIcon: () => k8,
  PlayBackIcon: () => x8,
  PlayHollowIcon: () => F8,
  PlayIcon: () => D8,
  PlayNextIcon: () => C8,
  PlusIcon: () => l9,
  PointerDefaultIcon: () => I9,
  PointerHandIcon: () => B9,
  PowerIcon: () => Yy,
  PrintIcon: () => z8,
  ProceedIcon: () => KD,
  ProfileIcon: () => dx,
  PullRequestIcon: () => ly,
  QuestionIcon: () => H9,
  RSSIcon: () => U9,
  RedirectIcon: () => VD,
  ReduxIcon: () => Fy,
  RefreshIcon: () => ZD,
  ReplyIcon: () => WD,
  RepoIcon: () => oy,
  RequestChangeIcon: () => x9,
  RewindIcon: () => E8,
  RulerIcon: () => g8,
  SaveIcon: () => _9,
  SearchIcon: () => o8,
  ShareAltIcon: () => G9,
  ShareIcon: () => X9,
  ShieldIcon: () => sD,
  SideBySideIcon: () => T8,
  SidebarAltIcon: () => zy,
  SidebarAltToggleIcon: () => Oy,
  SidebarIcon: () => $y,
  SidebarToggleIcon: () => Ny,
  SpeakerIcon: () => y8,
  StackedIcon: () => L8,
  StarHollowIcon: () => nD,
  StarIcon: () => oD,
  StatusFailIcon: () => gD,
  StatusPassIcon: () => wD,
  StatusWarnIcon: () => vD,
  StickerIcon: () => mD,
  StopAltHollowIcon: () => A8,
  StopAltIcon: () => R8,
  StopIcon: () => v8,
  StorybookIcon: () => hy,
  StructureIcon: () => Gy,
  SubtractIcon: () => f9,
  SunIcon: () => I8,
  SupportIcon: () => $9,
  SwitchAltIcon: () => d8,
  SyncIcon: () => UD,
  TabletIcon: () => _y,
  ThumbsUpIcon: () => lD,
  TimeIcon: () => rx,
  TimerIcon: () => ox,
  TransferIcon: () => jD,
  TrashIcon: () => u9,
  TwitterIcon: () => ky,
  TypeIcon: () => L9,
  UbuntuIcon: () => py,
  UndoIcon: () => qD,
  UnfoldIcon: () => ND,
  UnlockIcon: () => R9,
  UnpinIcon: () => p9,
  UploadIcon: () => GD,
  UserAddIcon: () => cx,
  UserAltIcon: () => ux,
  UserIcon: () => sx,
  UsersIcon: () => px,
  VSCodeIcon: () => Ly,
  VerifiedIcon: () => iD,
  VideoIcon: () => b8,
  WandIcon: () => t9,
  WatchIcon: () => Hy,
  WindowsIcon: () => dy,
  WrenchIcon: () => Qy,
  XIcon: () => By,
  YoutubeIcon: () => Ty,
  ZoomIcon: () => a8,
  ZoomOutIcon: () => i8,
  ZoomResetIcon: () => l8,
  iconList: () => Zb
});
var Zb = [
  {
    name: "Images",
    icons: [
      "PhotoIcon",
      "ComponentIcon",
      "GridIcon",
      "OutlineIcon",
      "PhotoDragIcon",
      "GridAltIcon",
      "SearchIcon",
      "ZoomIcon",
      "ZoomOutIcon",
      "ZoomResetIcon",
      "EyeIcon",
      "EyeCloseIcon",
      "LightningIcon",
      "LightningOffIcon",
      "ContrastIcon",
      "SwitchAltIcon",
      "MirrorIcon",
      "GrowIcon",
      "PaintBrushIcon",
      "RulerIcon",
      "StopIcon",
      "CameraIcon",
      "VideoIcon",
      "SpeakerIcon",
      "PlayIcon",
      "PlayBackIcon",
      "PlayNextIcon",
      "RewindIcon",
      "FastForwardIcon",
      "StopAltIcon",
      "StopAltHollowIcon",
      "PlayHollowIcon",
      "PlayAllHollowIcon",
      "SideBySideIcon",
      "StackedIcon",
      "SunIcon",
      "MoonIcon"
    ]
  },
  {
    name: "Documents",
    icons: [
      "BookIcon",
      "DocumentIcon",
      "CopyIcon",
      "CategoryIcon",
      "FolderIcon",
      "PrintIcon",
      "GraphLineIcon",
      "CalendarIcon",
      "GraphBarIcon",
      "AlignLeftIcon",
      "AlignRightIcon",
      "FilterIcon",
      "DocChartIcon",
      "DocListIcon",
      "DragIcon",
      "MenuIcon"
    ]
  },
  {
    name: "Editing",
    icons: [
      "MarkupIcon",
      "BoldIcon",
      "ItalicIcon",
      "PaperClipIcon",
      "ListOrderedIcon",
      "ListUnorderedIcon",
      "ParagraphIcon",
      "MarkdownIcon"
    ]
  },
  {
    name: "Git",
    icons: [
      "RepoIcon",
      "CommitIcon",
      "BranchIcon",
      "PullRequestIcon",
      "MergeIcon"
    ]
  },
  {
    name: "OS",
    icons: [
      "AppleIcon",
      "LinuxIcon",
      "UbuntuIcon",
      "WindowsIcon",
      "ChromeIcon"
    ]
  },
  {
    name: "Logos",
    icons: [
      "StorybookIcon",
      "AzureDevOpsIcon",
      "BitbucketIcon",
      "ChromaticIcon",
      "ComponentDrivenIcon",
      "DiscordIcon",
      "FacebookIcon",
      "FigmaIcon",
      "GDriveIcon",
      "GithubIcon",
      "GitlabIcon",
      "GoogleIcon",
      "GraphqlIcon",
      "MediumIcon",
      "ReduxIcon",
      "TwitterIcon",
      "YoutubeIcon",
      "VSCodeIcon",
      "LinkedinIcon",
      "XIcon"
    ]
  },
  {
    name: "Devices",
    icons: [
      "BrowserIcon",
      "TabletIcon",
      "MobileIcon",
      "WatchIcon",
      "SidebarIcon",
      "SidebarAltIcon",
      "SidebarAltToggleIcon",
      "SidebarToggleIcon",
      "BottomBarIcon",
      "BottomBarToggleIcon",
      "CPUIcon",
      "DatabaseIcon",
      "MemoryIcon",
      "StructureIcon",
      "BoxIcon",
      "PowerIcon"
    ]
  },
  {
    name: "CRUD",
    icons: [
      "EditIcon",
      "CogIcon",
      "NutIcon",
      "WrenchIcon",
      "EllipsisIcon",
      "WandIcon",
      "CheckIcon",
      "FormIcon",
      "BatchDenyIcon",
      "BatchAcceptIcon",
      "ControlsIcon",
      "PlusIcon",
      "CloseAltIcon",
      "CrossIcon",
      "TrashIcon",
      "PinAltIcon",
      "UnpinIcon",
      "AddIcon",
      "SubtractIcon",
      "CloseIcon",
      "DeleteIcon",
      "PassedIcon",
      "ChangedIcon",
      "FailedIcon",
      "ClearIcon",
      "CommentIcon",
      "CommentAddIcon",
      "RequestChangeIcon",
      "CommentsIcon",
      "ChatIcon",
      "LockIcon",
      "UnlockIcon",
      "KeyIcon",
      "OutboxIcon",
      "CreditIcon",
      "ButtonIcon",
      "TypeIcon",
      "PointerDefaultIcon",
      "PointerHandIcon",
      "CommandIcon",
      "SaveIcon"
    ]
  },
  {
    name: "Communicate",
    icons: [
      "InfoIcon",
      "QuestionIcon",
      "SupportIcon",
      "AlertIcon",
      "AlertAltIcon",
      "EmailIcon",
      "PhoneIcon",
      "LinkIcon",
      "LinkBrokenIcon",
      "BellIcon",
      "RSSIcon",
      "ShareAltIcon",
      "ShareIcon",
      "JumpToIcon",
      "CircleHollowIcon",
      "CircleIcon",
      "BookmarkHollowIcon",
      "BookmarkIcon",
      "DiamondIcon",
      "HeartHollowIcon",
      "HeartIcon",
      "StarHollowIcon",
      "StarIcon",
      "CertificateIcon",
      "VerifiedIcon",
      "ThumbsUpIcon",
      "ShieldIcon",
      "BasketIcon",
      "BeakerIcon",
      "HourglassIcon",
      "FlagIcon",
      "CloudHollowIcon",
      "CloudIcon",
      "StickerIcon",
      "StatusFailIcon",
      "StatusWarnIcon",
      "StatusPassIcon"
    ]
  },
  {
    name: "Wayfinding",
    icons: [
      "ChevronUpIcon",
      "ChevronDownIcon",
      "ChevronLeftIcon",
      "ChevronRightIcon",
      "ChevronSmallUpIcon",
      "ChevronSmallDownIcon",
      "ChevronSmallLeftIcon",
      "ChevronSmallRightIcon",
      "ArrowUpIcon",
      "ArrowDownIcon",
      "ArrowLeftIcon",
      "ArrowRightIcon",
      "ArrowTopLeftIcon",
      "ArrowTopRightIcon",
      "ArrowBottomLeftIcon",
      "ArrowBottomRightIcon",
      "ArrowSolidUpIcon",
      "ArrowSolidDownIcon",
      "ArrowSolidLeftIcon",
      "ArrowSolidRightIcon",
      "ExpandAltIcon",
      "CollapseIcon",
      "ExpandIcon",
      "UnfoldIcon",
      "TransferIcon",
      "RedirectIcon",
      "UndoIcon",
      "ReplyIcon",
      "SyncIcon",
      "UploadIcon",
      "DownloadIcon",
      "BackIcon",
      "ProceedIcon",
      "RefreshIcon",
      "GlobeIcon",
      "CompassIcon",
      "LocationIcon",
      "PinIcon",
      "TimeIcon",
      "DashboardIcon",
      "TimerIcon",
      "HomeIcon",
      "AdminIcon",
      "DirectionIcon"
    ]
  },
  {
    name: "People",
    icons: [
      "UserIcon",
      "UserAltIcon",
      "UserAddIcon",
      "UsersIcon",
      "ProfileIcon",
      "FaceHappyIcon",
      "FaceNeutralIcon",
      "FaceSadIcon",
      "AccessibilityIcon",
      "AccessibilityAltIcon"
    ]
  }
];
var Jb = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M6.25 4.254a1.25 1.25 0 11-2.5 0 1.25 1.25 0 012.5 0zm-.5 0a.75.75 0 11-1.5 0 .75.75 0 011.5 0z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M13 1.504v11a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-11a.5.5 0 01.5-.5h11a.5.5 0 01.5.5zM2 9.297V2.004h10v5.293L9.854 5.15a.5.5 0 00-.708 0L6.5 7.797 5.354 6.65a.5.5 0 00-.708 0L2 9.297zM9.5 6.21l2.5 2.5v3.293H2V10.71l3-3 3.146 3.146a.5.5 0 00.708-.707L7.207 8.504 9.5 6.21z",
      fill: e7
    }
  )
));
var Qb = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3.5 1.004a2.5 2.5 0 00-2.5 2.5v7a2.5 2.5 0 002.5 2.5h7a2.5 2.5 0 002.5-2.5v-7a2.5 2.5 0 00-2.5-2.5h-7zm8.5 5.5H7.5v-4.5h3a1.5 1.5 0 011.5 1.5v3zm0 1v3a1.5 1.5 0 01-1.5 1.5h-3v-4.5H12zm-5.5 4.5v-4.5H2v3a1.5 1.5 0 001.5 1.5h3zM2 6.504h4.5v-4.5h-3a1.5 1.5 0 00-1.5 1.5v3z",
      fill: e7
    }
  )
));
var e8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 1.504a.5.5 0 01.5-.5H6a.5.5 0 01.5.5v4.5a.5.5 0 01-.5.5H1.5a.5.5 0 01-.5-.5v-4.5zm1 4v-3.5h3.5v3.5H2zM7.5 1.504a.5.5 0 01.5-.5h4.5a.5.5 0 01.5.5v4.5a.5.5 0 01-.5.5H8a.5.5 0 01-.5-.5v-4.5zm1 4v-3.5H12v3.5H8.5zM1.5 7.504a.5.5 0 00-.5.5v4.5a.5.5 0 00.5.5H6a.5.5 0 00.5-.5v-4.5a.5.5 0 00-.5-.5H1.5zm.5 1v3.5h3.5v-3.5H2zM7.5 8.004a.5.5 0 01.5-.5h4.5a.5.5 0 01.5.5v4.5a.5.5 0 01-.5.5H8a.5.5 0 01-.5-.5v-4.5zm1 4v-3.5H12v3.5H8.5z",
      fill: e7
    }
  )
));
var t8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M2 2.004v2H1v-2.5a.5.5 0 01.5-.5H4v1H2zM1 9.004v-4h1v4H1zM1 10.004v2.5a.5.5 0 00.5.5H4v-1H2v-2H1zM10 13.004h2.5a.5.5 0 00.5-.5v-2.5h-1v2h-2v1zM12 4.004h1v-2.5a.5.5 0 00-.5-.5H10v1h2v2zM9 12.004v1H5v-1h4zM9 1.004v1H5v-1h4zM13 9.004h-1v-4h1v4zM7 8.004a1 1 0 100-2 1 1 0 000 2z",
      fill: e7
    }
  )
));
var r8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M8.25 3.254a1.25 1.25 0 11-2.5 0 1.25 1.25 0 012.5 0zm-.5 0a.75.75 0 11-1.5 0 .75.75 0 011.5 0z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7.003v-6.5a.5.5 0 00-.5-.5h-10a.5.5 0 00-.5.5v2.5H.5a.5.5 0 00-.5.5v2.5h1v-2h2v6.5a.5.5 0 00.5.5H10v2H8v1h2.5a.5.5 0 00.5-.5v-2.5h2.5a.5.5 0 00.5-.5v-3.5zm-10-6v5.794L5.646 5.15a.5.5 0 01.708 0L7.5 6.297l2.646-2.647a.5.5 0 01.708 0L13 5.797V1.004H4zm9 6.208l-2.5-2.5-2.293 2.293L9.354 8.15a.5.5 0 11-.708.707L6 6.211l-2 2v1.793h9V7.21z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M0 10.004v-3h1v3H0zM0 13.504v-2.5h1v2h2v1H.5a.5.5 0 01-.5-.5zM7 14.004H4v-1h3v1z",
      fill: e7
    }
  )
));
var n8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M4 3V1h1v2H4zM4 6v2h1V6H4zM4 11v2h1v-2H4zM9 11v2h1v-2H9zM9 8V6h1v2H9zM9 1v2h1V1H9zM13 5h-2V4h2v1zM11 10h2V9h-2v1zM3 10H1V9h2v1zM1 5h2V4H1v1zM8 5H6V4h2v1zM6 10h2V9H6v1zM4 4h1v1H4V4zM10 4H9v1h1V4zM9 9h1v1H9V9zM5 9H4v1h1V9z",
      fill: e7
    }
  )
));
var o8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M9.544 10.206a5.5 5.5 0 11.662-.662.5.5 0 01.148.102l3 3a.5.5 0 01-.708.708l-3-3a.5.5 0 01-.102-.148zM10.5 6a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0z",
      fill: e7
    }
  )
));
var a8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M6 3.5a.5.5 0 01.5.5v1.5H8a.5.5 0 010 1H6.5V8a.5.5 0 01-1 0V6.5H4a.5.5 0 010-1h1.5V4a.5.5 0 01.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M9.544 10.206a5.5 5.5 0 11.662-.662.5.5 0 01.148.102l3 3a.5.5 0 01-.708.708l-3-3a.5.5 0 01-.102-.148zM10.5 6a4.5 4.5 0 11-9 0 4.5 4.5 0 019 0z",
      fill: e7
    }
  )
));
var i8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("path", { d: "M4 5.5a.5.5 0 000 1h4a.5.5 0 000-1H4z", fill: e7 }),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M6 11.5c1.35 0 2.587-.487 3.544-1.294a.5.5 0 00.102.148l3 3a.5.5 0 00.708-.708l-3-3a.5.5 0 00-.148-.102A5.5 5.5 0 106 11.5zm0-1a4.5 4.5 0 100-9 4.5 4.5 0 000 9z",
      fill: e7
    }
  )
));
var l8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.5 2.837V1.5a.5.5 0 00-1 0V4a.5.5 0 00.5.5h2.5a.5.5 0 000-1H2.258a4.5 4.5 0 11-.496 4.016.5.5 0 10-.942.337 5.502 5.502 0 008.724 2.353.5.5 0 00.102.148l3 3a.5.5 0 00.708-.708l-3-3a.5.5 0 00-.148-.102A5.5 5.5 0 101.5 2.837z",
      fill: e7
    }
  )
));
var s8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("path", { d: "M7 9.5a2.5 2.5 0 100-5 2.5 2.5 0 000 5z", fill: e7 }),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7l-.21.293C13.669 7.465 10.739 11.5 7 11.5S.332 7.465.21 7.293L0 7l.21-.293C.331 6.536 3.261 2.5 7 2.5s6.668 4.036 6.79 4.207L14 7zM2.896 5.302A12.725 12.725 0 001.245 7c.296.37.874 1.04 1.65 1.698C4.043 9.67 5.482 10.5 7 10.5c1.518 0 2.958-.83 4.104-1.802A12.72 12.72 0 0012.755 7c-.297-.37-.875-1.04-1.65-1.698C9.957 4.33 8.517 3.5 7 3.5c-1.519 0-2.958.83-4.104 1.802z",
      fill: e7
    }
  )
));
var u8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.854 1.146a.5.5 0 10-.708.708l11 11a.5.5 0 00.708-.708l-11-11zM11.104 8.698c-.177.15-.362.298-.553.439l.714.714a13.25 13.25 0 002.526-2.558L14 7l-.21-.293C13.669 6.536 10.739 2.5 7 2.5c-.89 0-1.735.229-2.506.58l.764.763A4.859 4.859 0 017 3.5c1.518 0 2.958.83 4.104 1.802A12.724 12.724 0 0112.755 7a12.72 12.72 0 01-1.65 1.698zM.21 6.707c.069-.096 1.03-1.42 2.525-2.558l.714.714c-.191.141-.376.288-.553.439A12.725 12.725 0 001.245 7c.296.37.874 1.04 1.65 1.698C4.043 9.67 5.482 10.5 7 10.5a4.86 4.86 0 001.742-.344l.764.764c-.772.351-1.616.58-2.506.58C3.262 11.5.332 7.465.21 7.293L0 7l.21-.293z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M4.5 7c0-.322.061-.63.172-.914l3.242 3.242A2.5 2.5 0 014.5 7zM9.328 7.914L6.086 4.672a2.5 2.5 0 013.241 3.241z",
      fill: e7
    }
  )
));
var c8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M2.522 6.6a.566.566 0 00-.176.544.534.534 0 00.382.41l2.781.721-1.493 5.013a.563.563 0 00.216.627.496.496 0 00.63-.06l6.637-6.453a.568.568 0 00.151-.54.534.534 0 00-.377-.396l-2.705-.708 2.22-4.976a.568.568 0 00-.15-.666.497.497 0 00-.648.008L2.522 6.6zm7.72.63l-3.067-.804L9.02 2.29 3.814 6.803l2.95.764-1.277 4.285 4.754-4.622zM4.51 13.435l.037.011-.037-.011z",
      fill: e7
    }
  )
));
var Hu = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M10.139 8.725l1.36-1.323a.568.568 0 00.151-.54.534.534 0 00-.377-.396l-2.705-.708 2.22-4.976a.568.568 0 00-.15-.666.497.497 0 00-.648.008L5.464 4.05l.708.71 2.848-2.47-1.64 3.677.697.697 2.164.567-.81.787.708.708zM2.523 6.6a.566.566 0 00-.177.544.534.534 0 00.382.41l2.782.721-1.494 5.013a.563.563 0 00.217.627.496.496 0 00.629-.06l3.843-3.736-.708-.707-2.51 2.44 1.137-3.814-.685-.685-2.125-.55.844-.731-.71-.71L2.524 6.6zM1.854 1.146a.5.5 0 10-.708.708l11 11a.5.5 0 00.708-.708l-11-11z",
      fill: e7
    }
  )
));
var p8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3 3.004H.5a.5.5 0 00-.5.5v10a.5.5 0 00.5.5h10a.5.5 0 00.5-.5v-2.5h2.5a.5.5 0 00.5-.5v-10a.5.5 0 00-.5-.5h-10a.5.5 0 00-.5.5v2.5zm1 1v2.293l2.293-2.293H4zm-1 0v6.5a.499.499 0 00.497.5H10v2H1v-9h2zm1-1h6.5a.499.499 0 01.5.5v6.5h2v-9H4v2zm6 7V7.71l-2.293 2.293H10zm0-3.707V4.71l-5.293 5.293h1.586L10 6.297zm-.707-2.293H7.707L4 7.71v1.586l5.293-5.293z",
      fill: e7
    }
  )
));
var d8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3 3.004v-2.5a.5.5 0 01.5-.5h10a.5.5 0 01.5.5v10a.5.5 0 01-.5.5H11v2.5a.5.5 0 01-.5.5H.5a.5.5 0 01-.5-.5v-10a.5.5 0 01.5-.5H3zm1 0v-2h9v9h-2v-6.5a.5.5 0 00-.5-.5H4zm6 8v2H1v-9h2v6.5a.5.5 0 00.5.5H10zm0-1H4v-6h6v6z",
      fill: e7
    }
  )
));
var f8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 1.504a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-11zm1 10.5h10v-10l-10 10z",
      fill: e7
    }
  )
));
var h8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.5 1.004a.5.5 0 100 1H12v10.5a.5.5 0 001 0v-10.5a1 1 0 00-1-1H1.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M1 3.504a.5.5 0 01.5-.5H10a1 1 0 011 1v8.5a.5.5 0 01-1 0v-8.5H1.5a.5.5 0 01-.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1.5 5.004a.5.5 0 00-.5.5v7a.5.5 0 00.5.5h7a.5.5 0 00.5-.5v-7a.5.5 0 00-.5-.5h-7zm.5 1v6h6v-6H2z",
      fill: e7
    }
  )
));
var m8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M11.854.146a.5.5 0 00-.708 0L2.983 8.31a2.24 2.24 0 00-1.074.6C.677 10.14.24 11.902.085 12.997 0 13.6 0 14 0 14s.4 0 1.002-.085c1.095-.155 2.857-.592 4.089-1.824a2.24 2.24 0 00.6-1.074l8.163-8.163a.5.5 0 000-.708l-2-2zM5.6 9.692l.942-.942L5.25 7.457l-.942.943A2.242 2.242 0 015.6 9.692zm1.649-1.65L12.793 2.5 11.5 1.207 5.957 6.75 7.25 8.043zM4.384 9.617a1.25 1.25 0 010 1.768c-.767.766-1.832 1.185-2.78 1.403-.17.04-.335.072-.49.098.027-.154.06-.318.099-.49.219-.947.637-2.012 1.403-2.779a1.25 1.25 0 011.768 0z",
      fill: e7
    }
  )
));
var g8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.5 1.004a.5.5 0 01.5.5v.5h10v-.5a.5.5 0 011 0v2a.5.5 0 01-1 0v-.5H2v.5a.5.5 0 01-1 0v-2a.5.5 0 01.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1.5 6a.5.5 0 00-.5.5v6a.5.5 0 00.5.5h11a.5.5 0 00.5-.5v-6a.5.5 0 00-.5-.5h-11zM2 7v5h10V7h-1v2.5a.5.5 0 01-1 0V7h-.75v1a.5.5 0 01-1 0V7H7.5v2.5a.5.5 0 01-1 0V7h-.75v1a.5.5 0 01-1 0V7H4v2.5a.5.5 0 01-1 0V7H2z",
      fill: e7
    }
  )
));
var v8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M4.5 4a.5.5 0 00-.5.5v5a.5.5 0 00.5.5h5a.5.5 0 00.5-.5v-5a.5.5 0 00-.5-.5h-5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7A7 7 0 110 7a7 7 0 0114 0zm-1 0A6 6 0 111 7a6 6 0 0112 0z",
      fill: e7
    }
  )
));
var w8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M10 7a3 3 0 11-6 0 3 3 0 016 0zM9 7a2 2 0 11-4 0 2 2 0 014 0z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M2.5 1a.5.5 0 00-.5.5v.504H.5a.5.5 0 00-.5.5v9a.5.5 0 00.5.5h13a.5.5 0 00.5-.5v-9a.5.5 0 00-.5-.5H6V1.5a.5.5 0 00-.5-.5h-3zM1 3.004v8h12v-8H1z",
      fill: e7
    }
  )
));
var b8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("path", { d: "M2.5 10a.5.5 0 100-1 .5.5 0 000 1z", fill: e7 }),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M0 4a2 2 0 012-2h6a2 2 0 012 2v.5l3.189-2.391A.5.5 0 0114 2.5v9a.5.5 0 01-.804.397L10 9.5v.5a2 2 0 01-2 2H2a2 2 0 01-2-2V4zm9 0v1.5a.5.5 0 00.8.4L13 3.5v7L9.8 8.1a.5.5 0 00-.8.4V10a1 1 0 01-1 1H2a1 1 0 01-1-1V4a1 1 0 011-1h6a1 1 0 011 1z",
      fill: e7
    }
  )
));
var y8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 4.5v5a.5.5 0 00.5.5H4l3.17 2.775a.5.5 0 00.83-.377V1.602a.5.5 0 00-.83-.376L4 4H1.5a.5.5 0 00-.5.5zM4 9V5H2v4h2zm.998.545A.504.504 0 005 9.5v-5c0-.015 0-.03-.002-.044L7 2.704v8.592L4.998 9.545z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M10.15 1.752a.5.5 0 00-.3.954 4.502 4.502 0 010 8.588.5.5 0 00.3.954 5.502 5.502 0 000-10.496z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M10.25 3.969a.5.5 0 00-.5.865 2.499 2.499 0 010 4.332.5.5 0 10.5.866 3.499 3.499 0 000-6.063z",
      fill: e7
    }
  )
));
var D8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M12.813 7.425l-9.05 5.603A.5.5 0 013 12.603V1.398a.5.5 0 01.763-.425l9.05 5.602a.5.5 0 010 .85z",
      fill: e7
    }
  )
));
var x8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M11.24 12.035L3.697 7.427A.494.494 0 013.5 7.2v4.05a.75.75 0 01-1.5 0v-8.5a.75.75 0 011.5 0V6.8a.494.494 0 01.198-.227l7.541-4.608A.5.5 0 0112 2.39v9.217a.5.5 0 01-.76.427z",
      fill: e7
    }
  )
));
var C8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M2.76 12.035l7.542-4.608A.495.495 0 0010.5 7.2v4.05a.75.75 0 001.5 0v-8.5a.75.75 0 00-1.5 0V6.8a.495.495 0 00-.198-.227L2.76 1.965A.5.5 0 002 2.39v9.217a.5.5 0 00.76.427z",
      fill: e7
    }
  )
));
var E8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M9 2.42v2.315l4.228-2.736a.5.5 0 01.772.42v9.162a.5.5 0 01-.772.42L9 9.263v2.317a.5.5 0 01-.772.42L1.5 7.647v3.603a.75.75 0 01-1.5 0v-8.5a.75.75 0 011.5 0v3.603L8.228 2A.5.5 0 019 2.42z",
      fill: e7
    }
  )
));
var S8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5 2.42v2.315L.772 1.999a.5.5 0 00-.772.42v9.162a.5.5 0 00.772.42L5 9.263v2.317a.5.5 0 00.772.42L12.5 7.647v3.603a.75.75 0 001.5 0v-8.5a.75.75 0 00-1.5 0v3.603L5.772 2A.5.5 0 005 2.42z",
      fill: e7
    }
  )
));
var R8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1 1.504a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-11z",
      fill: e7
    }
  )
));
var A8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M2.2 2.204v9.6h9.6v-9.6H2.2zm-.7-1.2a.5.5 0 00-.5.5v11a.5.5 0 00.5.5h11a.5.5 0 00.5-.5v-11a.5.5 0 00-.5-.5h-11z",
      fill: e7
    }
  )
));
var F8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M4.2 10.88L10.668 7 4.2 3.12v7.76zM3 2.414v9.174a.8.8 0 001.212.686l7.645-4.587a.8.8 0 000-1.372L4.212 1.727A.8.8 0 003 2.413z",
      fill: e7
    }
  )
));
var k8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M5.2 10.88L11.668 7 5.2 3.12v7.76zM4 2.414v9.174a.8.8 0 001.212.686l7.645-4.587a.8.8 0 000-1.372L5.212 1.727A.8.8 0 004 2.413zM1.5 1.6a.6.6 0 01.6.6v9.6a.6.6 0 11-1.2 0V2.2a.6.6 0 01.6-.6z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M.963 1.932a.6.6 0 01.805-.268l1 .5a.6.6 0 01-.536 1.073l-1-.5a.6.6 0 01-.269-.805zM3.037 11.132a.6.6 0 01-.269.805l-1 .5a.6.6 0 01-.536-1.073l1-.5a.6.6 0 01.805.268z",
      fill: e7
    }
  )
));
var T8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 1.504a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-11zm1 10.5v-10h5v10H2z",
      fill: e7
    }
  )
));
var L8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12.5 1.004a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-11a.5.5 0 01.5-.5h11zm-10.5 1h10v5H2v-5z",
      fill: e7
    }
  )
));
var I8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("g", { clipPath: "url(#prefix__clip0_1107_3492)", fill: e7 }, s.createElement("path", { d: "M7.5.5a.5.5 0 00-1 0V2a.5.5 0 001 0V.5z" }), s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 10a3 3 0 100-6 3 3 0 000 6zm0-1a2 2 0 100-4 2 2 0 000 4z"
    }
  ), s.createElement("path", { d: "M7 11.5a.5.5 0 01.5.5v1.5a.5.5 0 01-1 0V12a.5.5 0 01.5-.5zM11.5 7a.5.5 0 01.5-.5h1.5a.5.5 0 010 1H12a.5.5 0 01-.5-.5zM.5 6.5a.5.5 0 000 1H2a.5.5 0 000-1H.5zM3.818 10.182a.5.5 0 010 .707l-1.06 1.06a.5.5 0 11-.708-.706l1.06-1.06a.5.5 0 01.708 0zM11.95 2.757a.5.5 0 10-.707-.707l-1.061 1.061a.5.5 0 10.707.707l1.06-1.06zM10.182 10.182a.5.5 0 01.707 0l1.06 1.06a.5.5 0 11-.706.708l-1.061-1.06a.5.5 0 010-.708zM2.757 2.05a.5.5 0 10-.707.707l1.06 1.061a.5.5 0 00.708-.707l-1.06-1.06z" })),
  s.createElement("defs", null, s.createElement("clipPath", { id: "prefix__clip0_1107_3492" }, s.createElement(
    "path",
    { fill: "#fff", d: "M0 0h14v14H0z" }
  )))
));
var B8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 15 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("g", { clipPath: "url(#prefix__clip0_1107_3493)" }, s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M8.335.047l-.15-.015a7.499 7.499 0 106.14 10.577c.103-.229-.156-.447-.386-.346a5.393 5.393 0 01-.771.27A5.356 5.356 0 019.153.691C9.37.568 9.352.23 9.106.175a7.545 7.545 0 00-.77-.128zM6.977 1.092a6.427 6.427 0 005.336 10.671A6.427 6.427 0 116.977 1.092z",
      fill: e7
    }
  )),
  s.createElement("defs", null, s.createElement("clipPath", { id: "prefix__clip0_1107_3493" }, s.createElement(
    "path",
    {
      fill: "#fff",
      transform: "scale(1.07124)",
      d: "M0 0h14.001v14.002H0z"
    }
  )))
));
var M8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M13 2a2 2 0 00-2-2H1.5a.5.5 0 00-.5.5v13a.5.5 0 00.5.5H11a2 2 0 002-2V2zM3 13h8a1 1 0 001-1V2a1 1 0 00-1-1H7v6.004a.5.5 0 01-.856.352l-.002-.002L5.5 6.71l-.645.647A.5.5 0 014 7.009V1H3v12zM5 1v4.793l.146-.146a.5.5 0 01.743.039l.111.11V1H5z",
      fill: e7
    }
  )
));
var _8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M4 5.5a.5.5 0 01.5-.5h5a.5.5 0 010 1h-5a.5.5 0 01-.5-.5zM4.5 7.5a.5.5 0 000 1h5a.5.5 0 000-1h-5zM4 10.5a.5.5 0 01.5-.5h5a.5.5 0 010 1h-5a.5.5 0 01-.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1.5 0a.5.5 0 00-.5.5v13a.5.5 0 00.5.5h11a.5.5 0 00.5-.5V3.207a.5.5 0 00-.146-.353L10.146.146A.5.5 0 009.793 0H1.5zM2 1h7.5v2a.5.5 0 00.5.5h2V13H2V1z",
      fill: e7
    }
  )
));
var P8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M11.746.07A.5.5 0 0011.5.003h-6a.5.5 0 00-.5.5v2.5H.5a.5.5 0 00-.5.5v10a.5.5 0 00.5.5h8a.5.5 0 00.5-.5v-2.5h4.5a.5.5 0 00.5-.5v-8a.498.498 0 00-.15-.357L11.857.154a.506.506 0 00-.11-.085zM9 10.003h4v-7h-1.5a.5.5 0 01-.5-.5v-1.5H6v2h.5a.5.5 0 01.357.15L8.85 5.147c.093.09.15.217.15.357v4.5zm-8-6v9h7v-7H6.5a.5.5 0 01-.5-.5v-1.5H1z",
      fill: e7
    }
  )
));
var H8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M3 1.5a.5.5 0 01.5-.5h7a.5.5 0 010 1h-7a.5.5 0 01-.5-.5zM2 3.504a.5.5 0 01.5-.5h9a.5.5 0 010 1h-9a.5.5 0 01-.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 5.5a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v7a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-7zM2 12V6h10v6H2z",
      fill: e7
    }
  )
));
var $8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M6.586 3.504l-1.5-1.5H1v9h12v-7.5H6.586zm.414-1L5.793 1.297a1 1 0 00-.707-.293H.5a.5.5 0 00-.5.5v10a.5.5 0 00.5.5h13a.5.5 0 00.5-.5v-8.5a.5.5 0 00-.5-.5H7z",
      fill: e7
    }
  )
));
var z8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M4.5 8.004a.5.5 0 100 1h5a.5.5 0 000-1h-5zM4.5 10.004a.5.5 0 000 1h5a.5.5 0 000-1h-5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M2 1.504a.5.5 0 01.5-.5h8a.498.498 0 01.357.15l.993.993c.093.09.15.217.15.357v1.5h1.5a.5.5 0 01.5.5v5a.5.5 0 01-.5.5H12v2.5a.5.5 0 01-.5.5h-9a.5.5 0 01-.5-.5v-2.5H.5a.5.5 0 01-.5-.5v-5a.5.5 0 01.5-.5H2v-2.5zm11 7.5h-1v-2.5a.5.5 0 00-.5-.5h-9a.5.5 0 00-.5.5v2.5H1v-4h12v4zm-2-6v1H3v-2h7v.5a.5.5 0 00.5.5h.5zm-8 9h8v-5H3v5z",
      fill: e7
    }
  )
));
var O8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5.146 6.15a.5.5 0 01.708 0L7 7.297 9.146 5.15a.5.5 0 01.708 0l1 1a.5.5 0 01-.708.707L9.5 6.211 7.354 8.357a.5.5 0 01-.708 0L5.5 7.211 3.854 8.857a.5.5 0 11-.708-.707l2-2z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1.5 1.004a.5.5 0 00-.5.5v11a.5.5 0 00.5.5h11a.5.5 0 00.5-.5v-11a.5.5 0 00-.5-.5h-11zm.5 1v10h10v-10H2z",
      fill: e7
    }
  )
));
var N8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3.5 0a.5.5 0 01.5.5V1h6V.5a.5.5 0 011 0V1h1.5a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-11a.5.5 0 01.5-.5H3V.5a.5.5 0 01.5-.5zM2 4v2.3h3V4H2zm0 5.2V6.8h3v2.4H2zm0 .5V12h3V9.7H2zm3.5 0V12h3V9.7h-3zm3.5 0V12h3V9.7H9zm3-.5H9V6.8h3v2.4zm-3.5 0h-3V6.8h3v2.4zM9 4v2.3h3V4H9zM5.5 6.3h3V4h-3v2.3z",
      fill: e7
    }
  )
));
var j8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M12 2.5a.5.5 0 00-1 0v10a.5.5 0 001 0v-10zM9 4.5a.5.5 0 00-1 0v8a.5.5 0 001 0v-8zM5.5 7a.5.5 0 01.5.5v5a.5.5 0 01-1 0v-5a.5.5 0 01.5-.5zM3 10.5a.5.5 0 00-1 0v2a.5.5 0 001 0v-2z",
      fill: e7
    }
  )
));
var V8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M13 2a.5.5 0 010 1H1a.5.5 0 010-1h12zM10 5a.5.5 0 010 1H1a.5.5 0 010-1h9zM11.5 8.5A.5.5 0 0011 8H1a.5.5 0 000 1h10a.5.5 0 00.5-.5zM7.5 11a.5.5 0 010 1H1a.5.5 0 010-1h6.5z",
      fill: e7
    }
  )
));
var q8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1 2a.5.5 0 000 1h12a.5.5 0 000-1H1zM4 5a.5.5 0 000 1h9a.5.5 0 000-1H4zM2.5 8.5A.5.5 0 013 8h10a.5.5 0 010 1H3a.5.5 0 01-.5-.5zM6.5 11a.5.5 0 000 1H13a.5.5 0 000-1H6.5z",
      fill: e7
    }
  )
));
var W8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1 2a.5.5 0 000 1h12a.5.5 0 000-1H1zM3 5a.5.5 0 000 1h8a.5.5 0 000-1H3zM4.5 8.5A.5.5 0 015 8h4a.5.5 0 010 1H5a.5.5 0 01-.5-.5zM6.5 11a.5.5 0 000 1h1a.5.5 0 000-1h-1z",
      fill: e7
    }
  )
));
var U8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 1.5a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-11zM2 4v2.3h3V4H2zm0 5.2V6.8h3v2.4H2zm0 .5V12h3V9.7H2zm3.5 0V12h3V9.7h-3zm3.5 0V12h3V9.7H9zm3-.5H9V6.8h3v2.4zm-3.5 0h-3V6.8h3v2.4zM9 6.3h3V4H9v2.3zm-3.5 0h3V4h-3v2.3z",
      fill: e7
    }
  )
));
var G8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M3.5 6.5A.5.5 0 014 6h6a.5.5 0 010 1H4a.5.5 0 01-.5-.5zM4 9a.5.5 0 000 1h6a.5.5 0 000-1H4z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 1.5a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-11zM2 4v8h10V4H2z",
      fill: e7
    }
  )
));
var X8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M13 4a.5.5 0 010 1H1a.5.5 0 010-1h12zM13.5 9.5A.5.5 0 0013 9H1a.5.5 0 000 1h12a.5.5 0 00.5-.5z",
      fill: e7
    }
  )
));
var Y8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M13 3.5a.5.5 0 010 1H1a.5.5 0 010-1h12zM13.5 10a.5.5 0 00-.5-.5H1a.5.5 0 000 1h12a.5.5 0 00.5-.5zM13 6.5a.5.5 0 010 1H1a.5.5 0 010-1h12z",
      fill: e7
    }
  )
));
var K8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M8.982 1.632a.5.5 0 00-.964-.263l-3 11a.5.5 0 10.964.263l3-11zM3.32 3.616a.5.5 0 01.064.704L1.151 7l2.233 2.68a.5.5 0 11-.768.64l-2.5-3a.5.5 0 010-.64l2.5-3a.5.5 0 01.704-.064zM10.68 3.616a.5.5 0 00-.064.704L12.849 7l-2.233 2.68a.5.5 0 00.768.64l2.5-3a.5.5 0 000-.64l-2.5-3a.5.5 0 00-.704-.064z",
      fill: e7
    }
  )
));
var Z8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3 2v1.5h1v7H3V12h5a3 3 0 001.791-5.407A2.75 2.75 0 008 2.011V2H3zm5 5.5H5.5v3H8a1.5 1.5 0 100-3zm-.25-4H5.5V6h2.25a1.25 1.25 0 100-2.5z",
      fill: e7
    }
  )
));
var J8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("path", { d: "M5 2h6v1H8.5l-2 8H9v1H3v-1h2.5l2-8H5V2z", fill: e7 })
));
var Q8 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M10.553 2.268a1.5 1.5 0 00-2.12 0L2.774 7.925a2.5 2.5 0 003.536 3.535l3.535-3.535a.5.5 0 11.707.707l-3.535 3.536-.002.002a3.5 3.5 0 01-4.959-4.941l.011-.011L7.725 1.56l.007-.008a2.5 2.5 0 013.53 3.541l-.002.002-5.656 5.657-.003.003a1.5 1.5 0 01-2.119-2.124l3.536-3.536a.5.5 0 11.707.707L4.189 9.34a.5.5 0 00.707.707l5.657-5.657a1.5 1.5 0 000-2.121z",
      fill: e7
    }
  )
));
var ey = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5 2.5a.5.5 0 01.5-.5h7a.5.5 0 010 1h-7a.5.5 0 01-.5-.5zM5 7a.5.5 0 01.5-.5h7a.5.5 0 010 1h-7A.5.5 0 015 7zM5.5 11a.5.5 0 000 1h7a.5.5 0 000-1h-7zM2.5 2H1v1h1v3h1V2.5a.5.5 0 00-.5-.5zM3 8.5v1a.5.5 0 01-1 0V9h-.5a.5.5 0 010-1h1a.5.5 0 01.5.5zM2 10.5a.5.5 0 00-1 0V12h2v-1H2v-.5z",
      fill: e7
    }
  )
));
var ty = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M2.75 2.5a.75.75 0 11-1.5 0 .75.75 0 011.5 0zM5.5 2a.5.5 0 000 1h7a.5.5 0 000-1h-7zM5.5 11a.5.5 0 000 1h7a.5.5 0 000-1h-7zM2 12.25a.75.75 0 100-1.5.75.75 0 000 1.5zM5 7a.5.5 0 01.5-.5h7a.5.5 0 010 1h-7A.5.5 0 015 7zM2 7.75a.75.75 0 100-1.5.75.75 0 000 1.5z",
      fill: e7
    }
  )
));
var ry = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M6 7a3 3 0 110-6h5.5a.5.5 0 010 1H10v10.5a.5.5 0 01-1 0V2H7v10.5a.5.5 0 01-1 0V7z",
      fill: e7
    }
  )
));
var ny = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M2 4.5h1.5L5 6.375 6.5 4.5H8v5H6.5V7L5 8.875 3.5 7v2.5H2v-5zM9.75 4.5h1.5V7h1.25l-2 2.5-2-2.5h1.25V4.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M.5 2a.5.5 0 00-.5.5v9a.5.5 0 00.5.5h13a.5.5 0 00.5-.5v-9a.5.5 0 00-.5-.5H.5zM1 3v8h12V3H1z",
      fill: e7
    }
  )
));
var oy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5 2.5a.5.5 0 11-1 0 .5.5 0 011 0zM4.5 5a.5.5 0 100-1 .5.5 0 000 1zM5 6.5a.5.5 0 11-1 0 .5.5 0 011 0z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M11 0a2 2 0 012 2v10a2 2 0 01-2 2H1.5a.5.5 0 01-.5-.5V.5a.5.5 0 01.5-.5H11zm0 1H3v12h8a1 1 0 001-1V2a1 1 0 00-1-1z",
      fill: e7
    }
  )
));
var ay = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3.031 7.5a4 4 0 007.938 0H13.5a.5.5 0 000-1h-2.53a4 4 0 00-7.94 0H.501a.5.5 0 000 1h2.531zM7 10a3 3 0 100-6 3 3 0 000 6z",
      fill: e7
    }
  )
));
var iy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M6 2.5a1.5 1.5 0 01-1 1.415v4.053C5.554 7.4 6.367 7 7.5 7c.89 0 1.453-.252 1.812-.557.218-.184.374-.4.482-.62a1.5 1.5 0 111.026.143c-.155.423-.425.87-.86 1.24C9.394 7.685 8.59 8 7.5 8c-1.037 0-1.637.42-1.994.917a2.81 2.81 0 00-.472 1.18A1.5 1.5 0 114 10.086v-6.17A1.5 1.5 0 116 2.5zm-2 9a.5.5 0 111 0 .5.5 0 01-1 0zm1-9a.5.5 0 11-1 0 .5.5 0 011 0zm6 2a.5.5 0 11-1 0 .5.5 0 011 0z",
      fill: e7
    }
  )
));
var ly = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M8.354 1.354L7.707 2H8.5A2.5 2.5 0 0111 4.5v5.585a1.5 1.5 0 11-1 0V4.5A1.5 1.5 0 008.5 3h-.793l.647.646a.5.5 0 11-.708.708l-1.5-1.5a.5.5 0 010-.708l1.5-1.5a.5.5 0 11.708.708zM11 11.5a.5.5 0 11-1 0 .5.5 0 011 0zM4 3.915a1.5 1.5 0 10-1 0v6.17a1.5 1.5 0 101 0v-6.17zM3.5 11a.5.5 0 100 1 .5.5 0 000-1zm0-8a.5.5 0 100-1 .5.5 0 000 1z",
      fill: e7
    }
  )
));
var sy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M4.108 3.872A1.5 1.5 0 103 3.915v6.17a1.5 1.5 0 101 0V6.41c.263.41.573.77.926 1.083 1.108.98 2.579 1.433 4.156 1.5A1.5 1.5 0 109.09 7.99c-1.405-.065-2.62-.468-3.5-1.248-.723-.64-1.262-1.569-1.481-2.871zM3.5 11a.5.5 0 100 1 .5.5 0 000-1zM4 2.5a.5.5 0 11-1 0 .5.5 0 011 0zm7 6a.5.5 0 11-1 0 .5.5 0 011 0z",
      fill: e7
    }
  )
));
var uy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M11.03 8.103a3.044 3.044 0 01-.202-1.744 2.697 2.697 0 011.4-1.935c-.749-1.18-1.967-1.363-2.35-1.403-.835-.086-2.01.56-2.648.57h-.016c-.639-.01-1.814-.656-2.649-.57-.415.044-1.741.319-2.541 1.593-.281.447-.498 1.018-.586 1.744a6.361 6.361 0 00-.044.85c.005.305.028.604.07.895.09.62.259 1.207.477 1.744.242.595.543 1.13.865 1.585.712 1.008 1.517 1.59 1.971 1.6.934.021 1.746-.61 2.416-.594.006.002.014.003.02.002h.017c.007 0 .014 0 .021-.002.67-.017 1.481.615 2.416.595.453-.011 1.26-.593 1.971-1.6a7.95 7.95 0 00.97-1.856c-.697-.217-1.27-.762-1.578-1.474zm-2.168-5.97c.717-.848.69-2.07.624-2.125-.065-.055-1.25.163-1.985.984-.735.82-.69 2.071-.624 2.125.064.055 1.268-.135 1.985-.984z",
      fill: e7
    }
  )
));
var cy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 0a3 3 0 013 3v1.24c.129.132.25.27.362.415.113.111.283.247.515.433l.194.155c.325.261.711.582 1.095.966.765.765 1.545 1.806 1.823 3.186a.501.501 0 01-.338.581 3.395 3.395 0 01-1.338.134 2.886 2.886 0 01-1.049-.304 5.535 5.535 0 01-.17.519 2 2 0 11-2.892 2.55A5.507 5.507 0 017 13c-.439 0-.838-.044-1.201-.125a2 2 0 11-2.892-2.55 5.553 5.553 0 01-.171-.519c-.349.182-.714.27-1.05.304A3.395 3.395 0 01.35 9.977a.497.497 0 01-.338-.582c.278-1.38 1.058-2.42 1.823-3.186.384-.384.77-.705 1.095-.966l.194-.155c.232-.186.402-.322.515-.433.112-.145.233-.283.362-.414V3a3 3 0 013-3zm1.003 11.895a2 2 0 012.141-1.89c.246-.618.356-1.322.356-2.005 0-.514-.101-1.07-.301-1.599l-.027-.017a6.387 6.387 0 00-.857-.42 6.715 6.715 0 00-1.013-.315l-.852.638a.75.75 0 01-.9 0l-.852-.638a6.716 6.716 0 00-1.693.634 4.342 4.342 0 00-.177.101l-.027.017A4.6 4.6 0 003.501 8c0 .683.109 1.387.355 2.005a2 2 0 012.142 1.89c.295.067.627.105 1.002.105s.707-.038 1.003-.105zM5 12a1 1 0 11-2 0 1 1 0 012 0zm6 0a1 1 0 11-2 0 1 1 0 012 0zM6.1 4.3a1.5 1.5 0 011.8 0l.267.2L7 5.375 5.833 4.5l.267-.2zM8.5 2a.5.5 0 01.5.5V3a.5.5 0 01-1 0v-.5a.5.5 0 01.5-.5zM6 2.5a.5.5 0 00-1 0V3a.5.5 0 001 0v-.5z",
      fill: e7
    }
  )
));
var py = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("g", { clipPath: "url(#prefix__clip0_1107_3497)", fill: e7 }, s.createElement("path", { d: "M12.261 2.067c0 1.142-.89 2.068-1.988 2.068-1.099 0-1.99-.926-1.99-2.068C8.283.926 9.174 0 10.273 0c1.098 0 1.989.926 1.989 2.067zM3.978 6.6c0 1.142-.89 2.068-1.989 2.068C.891 8.668 0 7.742 0 6.601c0-1.142.89-2.068 1.989-2.068 1.099 0 1.989.926 1.989 2.068zM6.475 11.921A4.761 4.761 0 014.539 11a4.993 4.993 0 01-1.367-1.696 2.765 2.765 0 01-1.701.217 6.725 6.725 0 001.844 2.635 6.379 6.379 0 004.23 1.577 3.033 3.033 0 01-.582-1.728 4.767 4.767 0 01-.488-.083zM11.813 11.933c0 1.141-.89 2.067-1.989 2.067-1.098 0-1.989-.926-1.989-2.067 0-1.142.891-2.068 1.99-2.068 1.098 0 1.989.926 1.989 2.068zM12.592 11.173a6.926 6.926 0 001.402-3.913 6.964 6.964 0 00-1.076-4.023A2.952 2.952 0 0111.8 4.6c.398.78.592 1.656.564 2.539a5.213 5.213 0 01-.724 2.495c.466.396.8.935.952 1.54zM1.987 3.631c-.05 0-.101.002-.151.004C3.073 1.365 5.504.024 8.005.23a3.07 3.07 0 00-.603 1.676 4.707 4.707 0 00-2.206.596 4.919 4.919 0 00-1.7 1.576 2.79 2.79 0 00-1.509-.447z" })),
  s.createElement("defs", null, s.createElement("clipPath", { id: "prefix__clip0_1107_3497" }, s.createElement(
    "path",
    { fill: "#fff", d: "M0 0h14v14H0z" }
  )))
));
var dy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M6.5 1H1v5.5h5.5V1zM13 1H7.5v5.5H13V1zM7.5 7.5H13V13H7.5V7.5zM6.5 7.5H1V13h5.5V7.5z",
      fill: e7
    }
  )
));
var fy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("g", { clipPath: "url(#prefix__clip0_1107_3496)" }, s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M13.023 3.431a.115.115 0 01-.099.174H7.296A3.408 3.408 0 003.7 6.148a.115.115 0 01-.21.028l-1.97-3.413a.115.115 0 01.01-.129A6.97 6.97 0 017 0a6.995 6.995 0 016.023 3.431zM7 9.615A2.619 2.619 0 014.384 7 2.62 2.62 0 017 4.383 2.619 2.619 0 019.616 7 2.619 2.619 0 017 9.615zm1.034.71a.115.115 0 00-.121-.041 3.4 3.4 0 01-.913.124 3.426 3.426 0 01-3.091-1.973L1.098 3.567a.115.115 0 00-.2.001 7.004 7.004 0 005.058 10.354l.017.001c.04 0 .078-.021.099-.057l1.971-3.414a.115.115 0 00-.009-.128zm1.43-5.954h3.947c.047 0 .09.028.107.072.32.815.481 1.675.481 2.557a6.957 6.957 0 01-2.024 4.923A6.957 6.957 0 017.08 14h-.001a.115.115 0 01-.1-.172L9.794 8.95A3.384 3.384 0 0010.408 7c0-.921-.364-1.785-1.024-2.433a.115.115 0 01.08-.196z",
      fill: e7
    }
  )),
  s.createElement("defs", null, s.createElement("clipPath", { id: "prefix__clip0_1107_3496" }, s.createElement(
    "path",
    { fill: "#fff", d: "M0 0h14v14H0z" }
  )))
));
var hy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M2.042.616a.704.704 0 00-.66.729L1.816 12.9c.014.367.306.66.672.677l9.395.422h.032a.704.704 0 00.704-.703V.704c0-.015 0-.03-.002-.044a.704.704 0 00-.746-.659l-.773.049.057 1.615a.105.105 0 01-.17.086l-.52-.41-.617.468a.105.105 0 01-.168-.088L9.746.134 2.042.616zm8.003 4.747c-.247.192-2.092.324-2.092.05.04-1.045-.429-1.091-.689-1.091-.247 0-.662.075-.662.634 0 .57.607.893 1.32 1.27 1.014.538 2.24 1.188 2.24 2.823 0 1.568-1.273 2.433-2.898 2.433-1.676 0-3.141-.678-2.976-3.03.065-.275 2.197-.21 2.197 0-.026.971.195 1.256.753 1.256.43 0 .624-.236.624-.634 0-.602-.633-.958-1.361-1.367-.987-.554-2.148-1.205-2.148-2.7 0-1.494 1.027-2.489 2.86-2.489 1.832 0 2.832.98 2.832 2.845z",
      fill: e7
    }
  )
));
var my = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("g", { clipPath: "url(#prefix__clip0_1107_3503)" }, s.createElement(
    "path",
    {
      d: "M0 5.176l1.31-1.73 4.902-1.994V.014l4.299 3.144-8.78 1.706v4.8L0 9.162V5.176zm14-2.595v8.548l-3.355 2.857-5.425-1.783v1.783L1.73 9.661l8.784 1.047v-7.55L14 2.581z",
      fill: e7
    }
  )),
  s.createElement("defs", null, s.createElement("clipPath", { id: "prefix__clip0_1107_3503" }, s.createElement(
    "path",
    { fill: "#fff", d: "M0 0h14v14H0z" }
  )))
));
var gy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 1.522a.411.411 0 00-.412.476l1.746 10.597a.56.56 0 00.547.466h8.373a.411.411 0 00.412-.345l1.017-6.248h-3.87L8.35 9.18H5.677l-.724-3.781h7.904L13.412 2A.411.411 0 0013 1.524L1 1.522z",
      fill: e7
    }
  )
));
var vy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M0 7a7 7 0 1014 0A7 7 0 000 7zm5.215-3.869a1.967 1.967 0 013.747.834v1.283l-3.346-1.93a2.486 2.486 0 00-.401-.187zm3.484 2.58l-3.346-1.93a1.968 1.968 0 00-2.685.72 1.954 1.954 0 00.09 2.106 2.45 2.45 0 01.362-.254l1.514-.873a.27.27 0 01.268 0l2.1 1.21 1.697-.978zm-.323 4.972L6.86 9.81a.268.268 0 01-.134-.231V7.155l-1.698-.98v3.86a1.968 1.968 0 003.747.835 2.488 2.488 0 01-.4-.187zm.268-.464a1.967 1.967 0 002.685-.719 1.952 1.952 0 00-.09-2.106c-.112.094-.233.18-.361.253L7.53 9.577l1.113.642zm-4.106.257a1.974 1.974 0 01-1.87-.975A1.95 1.95 0 012.47 8.01c.136-.507.461-.93.916-1.193L4.5 6.175v3.86c0 .148.013.295.039.44zM11.329 4.5a1.973 1.973 0 00-1.87-.976c.025.145.039.292.039.44v1.747a.268.268 0 01-.135.232l-2.1 1.211v1.96l3.346-1.931a1.966 1.966 0 00.72-2.683z",
      fill: e7
    }
  )
));
var wy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M10.847 2.181L8.867.201a.685.685 0 00-.97 0l-4.81 4.81a.685.685 0 000 .969l2.466 2.465-2.405 2.404a.685.685 0 000 .97l1.98 1.98a.685.685 0 00.97 0l4.81-4.81a.685.685 0 000-.969L8.441 5.555l2.405-2.404a.685.685 0 000-.97z",
      fill: e7
    }
  )
));
var by = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M11.852 2.885c-.893-.41-1.85-.712-2.85-.884a.043.043 0 00-.046.021c-.123.22-.26.505-.355.73a10.658 10.658 0 00-3.2 0 7.377 7.377 0 00-.36-.73.045.045 0 00-.046-.021c-1 .172-1.957.474-2.85.884a.04.04 0 00-.019.016C.311 5.612-.186 8.257.058 10.869a.048.048 0 00.018.033 11.608 11.608 0 003.496 1.767.045.045 0 00.049-.016c.27-.368.51-.755.715-1.163a.044.044 0 00-.024-.062 7.661 7.661 0 01-1.092-.52.045.045 0 01-.005-.075c.074-.055.147-.112.217-.17a.043.043 0 01.046-.006c2.29 1.046 4.771 1.046 7.035 0a.043.043 0 01.046.006c.07.057.144.115.218.17a.045.045 0 01-.004.075 7.186 7.186 0 01-1.093.52.045.045 0 00-.024.062c.21.407.45.795.715 1.162.011.016.03.023.05.017a11.57 11.57 0 003.5-1.767.045.045 0 00.019-.032c.292-3.02-.49-5.643-2.07-7.969a.036.036 0 00-.018-.016zM4.678 9.279c-.69 0-1.258-.634-1.258-1.411 0-.778.558-1.411 1.258-1.411.707 0 1.27.639 1.259 1.41 0 .778-.558 1.412-1.259 1.412zm4.652 0c-.69 0-1.258-.634-1.258-1.411 0-.778.557-1.411 1.258-1.411.707 0 1.27.639 1.258 1.41 0 .778-.551 1.412-1.258 1.412z",
      fill: e7
    }
  )
));
var yy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7.399 14H5.06V7H3.5V4.588l1.56-.001-.002-1.421C5.058 1.197 5.533 0 7.6 0h1.721v2.413H8.246c-.805 0-.844.337-.844.966l-.003 1.208h1.934l-.228 2.412L7.401 7l-.002 7z",
      fill: e7
    }
  )
));
var Dy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M9.2 0H4.803A2.603 2.603 0 003.41 4.802a2.603 2.603 0 000 4.396 2.602 2.602 0 103.998 2.199v-2.51a2.603 2.603 0 103.187-4.085A2.604 2.604 0 009.2 0zM7.407 7a1.793 1.793 0 103.586 0 1.793 1.793 0 00-3.586 0zm-.81 2.603H4.803a1.793 1.793 0 101.794 1.794V9.603zM4.803 4.397h1.794V.81H4.803a1.793 1.793 0 000 3.587zm0 .81a1.793 1.793 0 000 3.586h1.794V5.207H4.803zm4.397-.81H7.407V.81H9.2a1.794 1.794 0 010 3.587z",
      fill: e7
    }
  )
));
var xy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M6.37 8.768l-2.042 3.537h6.755l2.042-3.537H6.37zm6.177-1.003l-3.505-6.07H4.96l3.504 6.07h4.084zM4.378 2.7L.875 8.77l2.042 3.536L6.42 6.236 4.378 2.7z",
      fill: e7
    }
  )
));
var Cy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 0C3.132 0 0 3.132 0 7a6.996 6.996 0 004.786 6.641c.35.062.482-.149.482-.332 0-.166-.01-.718-.01-1.304-1.758.324-2.213-.429-2.353-.823-.079-.2-.42-.822-.717-.988-.246-.132-.596-.455-.01-.464.552-.009.946.508 1.077.717.63 1.06 1.636.762 2.039.578.061-.455.245-.761.446-.936-1.558-.175-3.185-.779-3.185-3.457 0-.76.271-1.39.717-1.88-.07-.176-.314-.893.07-1.856 0 0 .587-.183 1.925.718a6.495 6.495 0 011.75-.236c.595 0 1.19.078 1.75.236 1.34-.91 1.926-.718 1.926-.718.385.963.14 1.68.07 1.855.446.49.717 1.111.717 1.881 0 2.687-1.636 3.282-3.194 3.457.254.218.473.638.473 1.295 0 .936-.009 1.688-.009 1.925 0 .184.131.402.481.332A7.012 7.012 0 0014 7c0-3.868-3.133-7-7-7z",
      fill: e7
    }
  )
));
var Ey = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1.068 5.583l1.487-4.557a.256.256 0 01.487 0L4.53 5.583H1.068L7 13.15 4.53 5.583h4.941l-2.47 7.565 5.931-7.565H9.471l1.488-4.557a.256.256 0 01.486 0l1.488 4.557.75 2.3a.508.508 0 01-.185.568L7 13.148v.001H7L.503 8.452a.508.508 0 01-.186-.57l.75-2.299z",
      fill: e7
    }
  )
));
var Sy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M10.925 1.094H7.262c-1.643 0-3.189 1.244-3.189 2.685 0 1.473 1.12 2.661 2.791 2.661.116 0 .23-.002.34-.01a1.49 1.49 0 00-.186.684c0 .41.22.741.498 1.012-.21 0-.413.006-.635.006-2.034 0-3.6 1.296-3.6 2.64 0 1.323 1.717 2.15 3.75 2.15 2.32 0 3.6-1.315 3.6-2.639 0-1.06-.313-1.696-1.28-2.38-.331-.235-.965-.805-.965-1.14 0-.392.112-.586.703-1.047.606-.474 1.035-1.14 1.035-1.914 0-.92-.41-1.819-1.18-2.115h1.161l.82-.593zm-1.335 8.96c.03.124.045.25.045.378 0 1.07-.688 1.905-2.665 1.905-1.406 0-2.421-.89-2.421-1.96 0-1.047 1.259-1.92 2.665-1.904.328.004.634.057.911.146.764.531 1.311.832 1.465 1.436zM7.34 6.068c-.944-.028-1.841-1.055-2.005-2.295-.162-1.24.47-2.188 1.415-2.16.943.029 1.84 1.023 2.003 2.262.163 1.24-.47 2.222-1.414 2.193z",
      fill: e7
    }
  )
));
var Ry = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7.873 11.608a1.167 1.167 0 00-1.707-.027L3.46 10.018l.01-.04h7.072l.022.076-2.69 1.554zM6.166 2.42l.031.03-3.535 6.124a1.265 1.265 0 00-.043-.012V5.438a1.166 1.166 0 00.84-1.456L6.167 2.42zm4.387 1.562a1.165 1.165 0 00.84 1.456v3.124l-.043.012-3.536-6.123a1.2 1.2 0 00.033-.032l2.706 1.563zM3.473 9.42a1.168 1.168 0 00-.327-.568L6.68 2.73a1.17 1.17 0 00.652 0l3.536 6.123a1.169 1.169 0 00-.327.567H3.473zm8.79-.736a1.169 1.169 0 00-.311-.124V5.44a1.17 1.17 0 10-1.122-1.942L8.13 1.938a1.168 1.168 0 00-1.122-1.5 1.17 1.17 0 00-1.121 1.5l-2.702 1.56a1.168 1.168 0 00-1.86.22 1.17 1.17 0 00.739 1.722v3.12a1.168 1.168 0 00-.74 1.721 1.17 1.17 0 001.861.221l2.701 1.56a1.169 1.169 0 102.233-.035l2.687-1.552a1.168 1.168 0 101.457-1.791z",
      fill: e7
    }
  )
));
var Ay = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M0 0v14h14V0H0zm11.63 3.317l-.75.72a.22.22 0 00-.083.212v-.001 5.289a.22.22 0 00.083.21l.733.72v.159H7.925v-.158l.76-.738c.074-.074.074-.096.074-.21V5.244l-2.112 5.364h-.285l-2.46-5.364V8.84a.494.494 0 00.136.413h.001l.988 1.198v.158H2.226v-.158l.988-1.198a.477.477 0 00.126-.416v.003-4.157a.363.363 0 00-.118-.307l-.878-1.058v-.158h2.727l2.107 4.622L9.031 3.16h2.6v.158z",
      fill: e7
    }
  )
));
var Fy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M4.06 9.689c.016.49.423.88.912.88h.032a.911.911 0 00.88-.945.916.916 0 00-.912-.88h-.033c-.033 0-.08 0-.113.016-.669-1.108-.946-2.314-.848-3.618.065-.978.391-1.825.961-2.526.473-.603 1.386-.896 2.005-.913 1.728-.032 2.461 2.119 2.51 2.983.212.049.57.163.815.244C10.073 2.29 8.444.92 6.88.92c-1.467 0-2.82 1.06-3.357 2.625-.75 2.086-.261 4.09.651 5.671a.74.74 0 00-.114.473zm8.279-2.298c-1.239-1.45-3.064-2.249-5.15-2.249h-.261a.896.896 0 00-.798-.489h-.033A.912.912 0 006.13 6.48h.031a.919.919 0 00.8-.554h.293c1.239 0 2.412.358 3.472 1.059.814.538 1.401 1.238 1.727 2.086.277.684.261 1.353-.033 1.923-.456.864-1.222 1.337-2.232 1.337a4.16 4.16 0 01-1.597-.343 9.58 9.58 0 01-.734.587c.7.326 1.418.505 2.102.505 1.565 0 2.722-.863 3.162-1.727.473-.946.44-2.575-.782-3.961zm-7.433 5.51a4.005 4.005 0 01-.977.113c-1.206 0-2.298-.505-2.836-1.32C.376 10.603.13 8.289 2.494 6.577c.05.261.147.62.212.832-.31.228-.798.685-1.108 1.303-.44.864-.391 1.729.13 2.527.359.537.93.864 1.663.962.896.114 1.793-.05 2.657-.505 1.271-.669 2.119-1.467 2.672-2.56a.944.944 0 01-.26-.603.913.913 0 01.88-.945h.033a.915.915 0 01.098 1.825c-.897 1.842-2.478 3.08-4.565 3.488z",
      fill: e7
    }
  )
));
var ky = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 2.547a5.632 5.632 0 01-1.65.464 2.946 2.946 0 001.263-1.63 5.67 5.67 0 01-1.823.715 2.837 2.837 0 00-2.097-.93c-1.586 0-2.872 1.319-2.872 2.946 0 .23.025.456.074.67C4.508 4.66 2.392 3.488.975 1.706c-.247.435-.389.941-.389 1.481 0 1.022.507 1.923 1.278 2.452a2.806 2.806 0 01-1.3-.368l-.001.037c0 1.427.99 2.617 2.303 2.888a2.82 2.82 0 01-1.297.05c.366 1.17 1.427 2.022 2.683 2.045A5.671 5.671 0 010 11.51a7.985 7.985 0 004.403 1.323c5.283 0 8.172-4.488 8.172-8.38 0-.128-.003-.255-.009-.38A5.926 5.926 0 0014 2.546z",
      fill: e7
    }
  )
));
var Ty = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M13.99 8.172c.005-.281.007-.672.007-1.172 0-.5-.002-.89-.007-1.172a14.952 14.952 0 00-.066-1.066 9.638 9.638 0 00-.169-1.153c-.083-.38-.264-.7-.542-.96a1.667 1.667 0 00-.972-.454C11.084 2.065 9.337 2 6.999 2s-4.085.065-5.241.195a1.65 1.65 0 00-.969.453c-.276.26-.455.58-.539.961a8.648 8.648 0 00-.176 1.153c-.039.43-.061.785-.066 1.066C.002 6.11 0 6.5 0 7c0 .5.002.89.008 1.172.005.281.027.637.066 1.067.04.43.095.813.168 1.152.084.38.265.7.543.96.279.261.603.412.973.453 1.156.13 2.902.196 5.24.196 2.34 0 4.087-.065 5.243-.196a1.65 1.65 0 00.967-.453c.276-.26.456-.58.54-.96.077-.339.136-.722.175-1.152.04-.43.062-.786.067-1.067zM9.762 6.578A.45.45 0 019.997 7a.45.45 0 01-.235.422l-3.998 2.5a.442.442 0 01-.266.078.538.538 0 01-.242-.063.465.465 0 01-.258-.437v-5c0-.197.086-.343.258-.437a.471.471 0 01.508.016l3.998 2.5z",
      fill: e7
    }
  )
));
var Ly = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M10.243.04a.87.87 0 01.38.087l2.881 1.386a.874.874 0 01.496.79V11.713a.875.875 0 01-.496.775l-2.882 1.386a.872.872 0 01-.994-.17L4.11 8.674l-2.404 1.823a.583.583 0 01-.744-.034l-.771-.7a.583.583 0 010-.862L2.274 7 .19 5.1a.583.583 0 010-.862l.772-.701a.583.583 0 01.744-.033L4.11 5.327 9.628.296a.871.871 0 01.615-.255zm.259 3.784L6.315 7l4.187 3.176V3.824z",
      fill: e7
    }
  )
));
var Iy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M11.667 13H2.333A1.333 1.333 0 011 11.667V2.333C1 1.597 1.597 1 2.333 1h9.334C12.403 1 13 1.597 13 2.333v9.334c0 .736-.597 1.333-1.333 1.333zm-2.114-1.667h1.78V7.675c0-1.548-.877-2.296-2.102-2.296-1.226 0-1.742.955-1.742.955v-.778H5.773v5.777h1.716V8.3c0-.812.374-1.296 1.09-1.296.658 0 .974.465.974 1.296v3.033zm-6.886-7.6c0 .589.474 1.066 1.058 1.066.585 0 1.058-.477 1.058-1.066 0-.589-.473-1.066-1.058-1.066-.584 0-1.058.477-1.058 1.066zm1.962 7.6h-1.79V5.556h1.79v5.777z",
      fill: e7
    }
  )
));
var By = s.forwardRef(
  ({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
    "svg",
    {
      width: t,
      height: t,
      viewBox: "0 0 14 14",
      fill: "none",
      xmlns: "http://www.w3.org/2000/svg",
      ref: n,
      ...r
    },
    s.createElement(
      "path",
      {
        d: "M11.02.446h2.137L8.49 5.816l5.51 7.28H9.67L6.298 8.683l-3.88 4.413H.282l5.004-5.735L0 .446h4.442l3.064 4.048L11.02.446zm-.759 11.357h1.18L3.796 1.655H2.502l7.759 10.148z",
        fill: e7
      }
    )
  )
);
var My = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M.5 13.004a.5.5 0 01-.5-.5v-11a.5.5 0 01.5-.5h13a.5.5 0 01.5.5v11a.5.5 0 01-.5.5H.5zm.5-1v-8h12v8H1zm1-9.5a.5.5 0 11-1 0 .5.5 0 011 0zm2 0a.5.5 0 11-1 0 .5.5 0 011 0zm2 0a.5.5 0 11-1 0 .5.5 0 011 0z",
      fill: e7
    }
  )
));
var _y = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3.5.004a1.5 1.5 0 00-1.5 1.5v11a1.5 1.5 0 001.5 1.5h7a1.5 1.5 0 001.5-1.5v-11a1.5 1.5 0 00-1.5-1.5h-7zm0 1h7a.5.5 0 01.5.5v9.5H3v-9.5a.5.5 0 01.5-.5zm2.5 11a.5.5 0 000 1h2a.5.5 0 000-1H6z",
      fill: e7
    }
  )
));
var Py = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3 1.504a1.5 1.5 0 011.5-1.5h5a1.5 1.5 0 011.5 1.5v11a1.5 1.5 0 01-1.5 1.5h-5a1.5 1.5 0 01-1.5-1.5v-11zm1 10.5v-10h6v10H4z",
      fill: e7
    }
  )
));
var Hy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M4 .504a.5.5 0 01.5-.5h5a.5.5 0 010 1h-5a.5.5 0 01-.5-.5zm5.5 2.5h-5a.5.5 0 00-.5.5v7a.5.5 0 00.5.5h5a.5.5 0 00.5-.5v-7a.5.5 0 00-.5-.5zm-5-1a1.5 1.5 0 00-1.5 1.5v7a1.5 1.5 0 001.5 1.5h5a1.5 1.5 0 001.5-1.5v-7a1.5 1.5 0 00-1.5-1.5h-5zm2.5 2a.5.5 0 01.5.5v2h1a.5.5 0 110 1H7a.5.5 0 01-.5-.5v-2.5a.5.5 0 01.5-.5zm-2.5 9a.5.5 0 000 1h5a.5.5 0 000-1h-5z",
      fill: e7
    }
  )
));
var $y = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M2.5 4.504a.5.5 0 01.5-.5h1a.5.5 0 110 1H3a.5.5 0 01-.5-.5zM3 6.004a.5.5 0 100 1h1a.5.5 0 000-1H3zM2.5 8.504a.5.5 0 01.5-.5h1a.5.5 0 110 1H3a.5.5 0 01-.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1.5 13.004a.5.5 0 01-.5-.5v-11a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11zm.5-1v-10h3v10H2zm4-10h6v10H6v-10z",
      fill: e7
    }
  )
));
var zy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M9.5 4.504a.5.5 0 01.5-.5h1a.5.5 0 010 1h-1a.5.5 0 01-.5-.5zM10 6.004a.5.5 0 100 1h1a.5.5 0 000-1h-1zM9.5 8.504a.5.5 0 01.5-.5h1a.5.5 0 010 1h-1a.5.5 0 01-.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1.5 13.004a.5.5 0 01-.5-.5v-11a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11zm.5-1v-10h6v10H2zm7-10h3v10H9v-10z",
      fill: e7
    }
  )
));
var Oy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M11.5 4.504a.5.5 0 00-.5-.5h-1a.5.5 0 100 1h1a.5.5 0 00.5-.5zM11 6.004a.5.5 0 010 1h-1a.5.5 0 010-1h1zM11.5 8.504a.5.5 0 00-.5-.5h-1a.5.5 0 100 1h1a.5.5 0 00.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1.5 13.004a.5.5 0 01-.5-.5v-11a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11zm7.5-1h3v-10H9v10zm-1 0H2v-10h6v4.5H5.207l.65-.65a.5.5 0 10-.707-.708L3.646 6.65a.5.5 0 000 .707l1.497 1.497a.5.5 0 10.707-.708l-.643-.642H8v4.5z",
      fill: e7
    }
  )
));
var Ny = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.5 4.504a.5.5 0 01.5-.5h1a.5.5 0 110 1H2a.5.5 0 01-.5-.5zM2 6.004a.5.5 0 100 1h1a.5.5 0 000-1H2zM1.5 8.504a.5.5 0 01.5-.5h1a.5.5 0 110 1H2a.5.5 0 01-.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M.5 13.004a.5.5 0 01-.5-.5v-11a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v11a.5.5 0 01-.5.5H.5zm.5-1v-10h3v10H1zm4 0v-4.5h2.793l-.643.642a.5.5 0 10.707.708l1.497-1.497a.5.5 0 000-.707L7.85 5.146a.5.5 0 10-.707.708l.65.65H5v-4.5h6v10H5z",
      fill: e7
    }
  )
));
var jy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M3 10.504a.5.5 0 01.5-.5h1a.5.5 0 010 1h-1a.5.5 0 01-.5-.5zM6.5 10.004a.5.5 0 000 1h1a.5.5 0 000-1h-1zM9 10.504a.5.5 0 01.5-.5h1a.5.5 0 010 1h-1a.5.5 0 01-.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 1.504a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-11zm1 6.5v-6h10v6H2zm10 1v3H2v-3h10z",
      fill: e7
    }
  )
));
var Vy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M3.5 10.004a.5.5 0 000 1h1a.5.5 0 000-1h-1zM6 10.504a.5.5 0 01.5-.5h1a.5.5 0 010 1h-1a.5.5 0 01-.5-.5zM9.5 10.004a.5.5 0 000 1h1a.5.5 0 000-1h-1z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 12.504v-11a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v11a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5zm1-.5v-3h10v3H2zm4.5-4H2v-6h10v6H7.5V5.21l.646.646a.5.5 0 10.708-.707l-1.5-1.5a.5.5 0 00-.708 0l-1.5 1.5a.5.5 0 10.708.707l.646-.646v2.793z",
      fill: e7
    }
  )
));
var qy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M5 5.504a.5.5 0 01.5-.5h3a.5.5 0 01.5.5v3a.5.5 0 01-.5.5h-3a.5.5 0 01-.5-.5v-3zm1 2.5v-2h2v2H6z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M5.5.004a.5.5 0 01.5.5v1.5h2v-1.5a.5.5 0 011 0v1.5h2.5a.5.5 0 01.5.5v2.5h1.5a.5.5 0 010 1H12v2h1.5a.5.5 0 010 1H12v2.5a.5.5 0 01-.5.5H9v1.5a.5.5 0 01-1 0v-1.5H6v1.5a.5.5 0 01-1 0v-1.5H2.5a.5.5 0 01-.5-.5v-2.5H.5a.5.5 0 010-1H2v-2H.5a.5.5 0 010-1H2v-2.5a.5.5 0 01.5-.5H5v-1.5a.5.5 0 01.5-.5zm5.5 3H3v8h8v-8z",
      fill: e7
    }
  )
));
var Wy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12 3c0-1.105-2.239-2-5-2s-5 .895-5 2v8c0 .426.26.752.544.977.29.228.68.413 1.116.558.878.293 2.059.465 3.34.465 1.281 0 2.462-.172 3.34-.465.436-.145.825-.33 1.116-.558.285-.225.544-.551.544-.977V3zm-1.03 0a.787.787 0 00-.05-.052c-.13-.123-.373-.28-.756-.434C9.404 2.21 8.286 2 7 2c-1.286 0-2.404.21-3.164.514-.383.153-.625.31-.756.434A.756.756 0 003.03 3a.756.756 0 00.05.052c.13.123.373.28.756.434C4.596 3.79 5.714 4 7 4c1.286 0 2.404-.21 3.164-.514.383-.153.625-.31.756-.434A.787.787 0 0010.97 3zM11 5.75V4.2c-.912.486-2.364.8-4 .8-1.636 0-3.088-.314-4-.8v1.55l.002.008a.147.147 0 00.016.033.618.618 0 00.145.15c.165.13.435.27.813.395.751.25 1.82.414 3.024.414s2.273-.163 3.024-.414c.378-.126.648-.265.813-.395a.62.62 0 00.146-.15.149.149 0 00.015-.033A.03.03 0 0011 5.75zM3 7.013c.2.103.423.193.66.272.878.293 2.059.465 3.34.465 1.281 0 2.462-.172 3.34-.465.237-.079.46-.17.66-.272V8.5l-.002.008a.149.149 0 01-.015.033.62.62 0 01-.146.15c-.165.13-.435.27-.813.395-.751.25-1.82.414-3.024.414s-2.273-.163-3.024-.414c-.378-.126-.648-.265-.813-.395a.618.618 0 01-.145-.15.147.147 0 01-.016-.033A.027.027 0 013 8.5V7.013zm0 2.75V11l.002.008a.147.147 0 00.016.033.617.617 0 00.145.15c.165.13.435.27.813.395.751.25 1.82.414 3.024.414s2.273-.163 3.024-.414c.378-.126.648-.265.813-.395a.619.619 0 00.146-.15.148.148 0 00.015-.033L11 11V9.763c-.2.103-.423.193-.66.272-.878.293-2.059.465-3.34.465-1.281 0-2.462-.172-3.34-.465A4.767 4.767 0 013 9.763z",
      fill: e7
    }
  )
));
var Uy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5 3a.5.5 0 00-1 0v3a.5.5 0 001 0V3zM7 2.5a.5.5 0 01.5.5v3a.5.5 0 01-1 0V3a.5.5 0 01.5-.5zM10 4.504a.5.5 0 10-1 0V6a.5.5 0 001 0V4.504z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12 3.54l-.001-.002a.499.499 0 00-.145-.388l-3-3a.499.499 0 00-.388-.145L8.464.004H2.5a.5.5 0 00-.5.5v13a.5.5 0 00.5.5h9a.5.5 0 00.5-.5V3.54zM3 1.004h5.293L11 3.71v5.293H3v-8zm0 9v3h8v-3H3z",
      fill: e7
    }
  )
));
var Gy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M8.164 3.446a1.5 1.5 0 10-2.328 0L1.81 10.032A1.503 1.503 0 000 11.5a1.5 1.5 0 002.915.5h8.17a1.5 1.5 0 101.104-1.968L8.164 3.446zm-1.475.522a1.506 1.506 0 00.622 0l4.025 6.586a1.495 1.495 0 00-.25.446H2.914a1.497 1.497 0 00-.25-.446l4.024-6.586z",
      fill: e7
    }
  )
));
var Xy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7.21.046l6.485 2.994A.5.5 0 0114 3.51v6.977a.495.495 0 01-.23.432.481.481 0 01-.071.038L7.23 13.944a.499.499 0 01-.46 0L.3 10.958a.498.498 0 01-.3-.47V3.511a.497.497 0 01.308-.473L6.78.051a.499.499 0 01.43-.005zM1 4.282v5.898l5.5 2.538V6.82L1 4.282zm6.5 8.436L13 10.18V4.282L7.5 6.82v5.898zM12.307 3.5L7 5.95 1.693 3.5 7 1.05l5.307 2.45z",
      fill: e7
    }
  )
));
var Yy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("path", { d: "M7.5.5a.5.5 0 00-1 0v6a.5.5 0 001 0v-6z", fill: e7 }),
  s.createElement(
    "path",
    {
      d: "M4.273 2.808a.5.5 0 00-.546-.837 6 6 0 106.546 0 .5.5 0 00-.546.837 5 5 0 11-5.454 0z",
      fill: e7
    }
  )
));
var Ky = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M13.854 2.146l-2-2a.5.5 0 00-.708 0l-1.5 1.5-8.995 8.995a.499.499 0 00-.143.268L.012 13.39a.495.495 0 00.135.463.5.5 0 00.462.134l2.482-.496a.495.495 0 00.267-.143l8.995-8.995 1.5-1.5a.5.5 0 000-.708zM12 3.293l.793-.793L11.5 1.207 10.707 2 12 3.293zm-2-.586L1.707 11 3 12.293 11.293 4 10 2.707zM1.137 12.863l.17-.849.679.679-.849.17z",
      fill: e7
    }
  )
));
var Zy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5.586 5.586A2 2 0 018.862 7.73a.5.5 0 10.931.365 3 3 0 10-1.697 1.697.5.5 0 10-.365-.93 2 2 0 01-2.145-3.277z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M.939 6.527c.127.128.19.297.185.464a.635.635 0 01-.185.465L0 8.395a7.099 7.099 0 001.067 2.572h1.32c.182 0 .345.076.46.197a.635.635 0 01.198.46v1.317A7.097 7.097 0 005.602 14l.94-.94a.634.634 0 01.45-.186H7.021c.163 0 .326.061.45.186l.939.938a7.098 7.098 0 002.547-1.057V11.61c0-.181.075-.344.197-.46a.634.634 0 01.46-.197h1.33c.507-.76.871-1.622 1.056-2.55l-.946-.946a.635.635 0 01-.186-.465.635.635 0 01.186-.464l.943-.944a7.099 7.099 0 00-1.044-2.522h-1.34a.635.635 0 01-.46-.197.635.635 0 01-.196-.46V1.057A7.096 7.096 0 008.413.002l-.942.942a.634.634 0 01-.45.186H6.992a.634.634 0 01-.45-.186L5.598 0a7.097 7.097 0 00-2.553 1.058v1.33c0 .182-.076.345-.197.46a.635.635 0 01-.46.198h-1.33A7.098 7.098 0 00.003 5.591l.936.936zm.707 1.636c.324-.324.482-.752.479-1.172a1.634 1.634 0 00-.48-1.171l-.538-.539c.126-.433.299-.847.513-1.235h.768c.459 0 .873-.19 1.167-.49.3-.295.49-.708.49-1.167v-.77c.39-.215.807-.388 1.243-.515l.547.547c.32.32.742.48 1.157.48l.015-.001h.014c.415 0 .836-.158 1.157-.479l.545-.544c.433.126.846.299 1.234.512v.784c0 .46.19.874.49 1.168.294.3.708.49 1.167.49h.776c.209.382.378.788.502 1.213l-.545.546a1.635 1.635 0 00-.48 1.17c-.003.421.155.849.48 1.173l.549.55c-.126.434-.3.85-.513 1.239h-.77c-.458 0-.872.19-1.166.49-.3.294-.49.708-.49 1.167v.77a6.09 6.09 0 01-1.238.514l-.54-.54a1.636 1.636 0 00-1.158-.48H6.992c-.415 0-.837.159-1.157.48l-.543.543a6.091 6.091 0 01-1.247-.516v-.756c0-.459-.19-.873-.49-1.167-.294-.3-.708-.49-1.167-.49h-.761a6.094 6.094 0 01-.523-1.262l.542-.542z",
      fill: e7
    }
  )
));
var Jy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5.585 8.414a2 2 0 113.277-.683.5.5 0 10.931.365 3 3 0 10-1.697 1.697.5.5 0 00-.365-.93 2 2 0 01-2.146-.449z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M6.5.289a1 1 0 011 0l5.062 2.922a1 1 0 01.5.866v5.846a1 1 0 01-.5.866L7.5 13.71a1 1 0 01-1 0L1.437 10.79a1 1 0 01-.5-.866V4.077a1 1 0 01.5-.866L6.5.29zm.5.866l5.062 2.922v5.846L7 12.845 1.937 9.923V4.077L7 1.155z",
      fill: e7
    }
  )
));
var Qy = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M10.5 1c.441 0 .564.521.252.833l-.806.807a.51.51 0 000 .72l.694.694a.51.51 0 00.72 0l.807-.806c.312-.312.833-.19.833.252a2.5 2.5 0 01-3.414 2.328l-6.879 6.88a1 1 0 01-1.414-1.415l6.88-6.88A2.5 2.5 0 0110.5 1zM2 12.5a.5.5 0 100-1 .5.5 0 000 1z",
      fill: e7
    }
  )
));
var e9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M4 7a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM13 7a1.5 1.5 0 11-3 0 1.5 1.5 0 013 0zM7 8.5a1.5 1.5 0 100-3 1.5 1.5 0 000 3z",
      fill: e7
    }
  )
));
var t9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5.903.112a.107.107 0 01.194 0l.233.505.552.066c.091.01.128.123.06.185l-.408.377.109.546a.107.107 0 01-.158.114L6 1.634l-.485.271a.107.107 0 01-.158-.114l.108-.546-.408-.377a.107.107 0 01.06-.185L5.67.617l.233-.505zM2.194.224a.214.214 0 00-.389 0l-.466 1.01-1.104.131a.214.214 0 00-.12.37l.816.755-.217 1.091a.214.214 0 00.315.23L2 3.266l.971.543c.16.09.35-.05.315-.229l-.216-1.09.816-.756a.214.214 0 00-.12-.37L2.66 1.234 2.194.224zM12.194 8.224a.214.214 0 00-.389 0l-.466 1.01-1.104.13a.214.214 0 00-.12.371l.816.755-.217 1.091a.214.214 0 00.315.23l.97-.544.971.543c.16.09.35-.05.315-.229l-.216-1.09.816-.756a.214.214 0 00-.12-.37l-1.105-.131-.466-1.01z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M2.5 12.797l-1.293-1.293 6.758-6.758L9.258 6.04 2.5 12.797zm7.465-7.465l2.828-2.828L11.5 1.211 8.672 4.04l1.293 1.293zM.147 11.857a.5.5 0 010-.707l11-11a.5.5 0 01.706 0l2 2a.5.5 0 010 .708l-11 11a.5.5 0 01-.706 0l-2-2z",
      fill: e7
    }
  )
));
var r9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M13.854 3.354a.5.5 0 00-.708-.708L5 10.793.854 6.646a.5.5 0 10-.708.708l4.5 4.5a.5.5 0 00.708 0l8.5-8.5z",
      fill: e7
    }
  )
));
var n9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M2 1.004a1 1 0 00-1 1v10a1 1 0 001 1h10a1 1 0 001-1V6.393a.5.5 0 00-1 0v5.61H2v-10h7.5a.5.5 0 000-1H2z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M6.354 9.857l7.5-7.5a.5.5 0 00-.708-.707L6 8.797 3.854 6.65a.5.5 0 10-.708.707l2.5 2.5a.5.5 0 00.708 0z",
      fill: e7
    }
  )
));
var o9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M11.5 2a.5.5 0 000 1h2a.5.5 0 000-1h-2zM8.854 2.646a.5.5 0 010 .708L5.207 7l3.647 3.646a.5.5 0 01-.708.708L4.5 7.707.854 11.354a.5.5 0 01-.708-.708L3.793 7 .146 3.354a.5.5 0 11.708-.708L4.5 6.293l3.646-3.647a.5.5 0 01.708 0zM11 7a.5.5 0 01.5-.5h2a.5.5 0 010 1h-2A.5.5 0 0111 7zM11.5 11a.5.5 0 000 1h2a.5.5 0 000-1h-2z",
      fill: e7
    }
  )
));
var a9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M11.5 2a.5.5 0 000 1h2a.5.5 0 000-1h-2zM9.3 2.6a.5.5 0 01.1.7l-5.995 7.993a.505.505 0 01-.37.206.5.5 0 01-.395-.152L.146 8.854a.5.5 0 11.708-.708l2.092 2.093L8.6 2.7a.5.5 0 01.7-.1zM11 7a.5.5 0 01.5-.5h2a.5.5 0 010 1h-2A.5.5 0 0111 7zM11.5 11a.5.5 0 000 1h2a.5.5 0 000-1h-2z",
      fill: e7
    }
  )
));
var i9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M10.5 1a.5.5 0 01.5.5V2h1.5a.5.5 0 010 1H11v.5a.5.5 0 01-1 0V3H1.5a.5.5 0 010-1H10v-.5a.5.5 0 01.5-.5zM1.5 11a.5.5 0 000 1H10v.5a.5.5 0 001 0V12h1.5a.5.5 0 000-1H11v-.5a.5.5 0 00-1 0v.5H1.5zM1 7a.5.5 0 01.5-.5H3V6a.5.5 0 011 0v.5h8.5a.5.5 0 010 1H4V8a.5.5 0 01-1 0v-.5H1.5A.5.5 0 011 7z",
      fill: e7
    }
  )
));
var l9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7.5.5a.5.5 0 00-1 0v6h-6a.5.5 0 000 1h6v6a.5.5 0 001 0v-6h6a.5.5 0 000-1h-6v-6z",
      fill: e7
    }
  )
));
var s9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M2.03.97A.75.75 0 00.97 2.03L5.94 7 .97 11.97a.75.75 0 101.06 1.06L7 8.06l4.97 4.97a.75.75 0 101.06-1.06L8.06 7l4.97-4.97A.75.75 0 0011.97.97L7 5.94 2.03.97z",
      fill: e7
    }
  )
));
var $u = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.854 1.146a.5.5 0 10-.708.708L6.293 7l-5.147 5.146a.5.5 0 00.708.708L7 7.707l5.146 5.147a.5.5 0 00.708-.708L7.707 7l5.147-5.146a.5.5 0 00-.708-.708L7 6.293 1.854 1.146z",
      fill: e7
    }
  )
));
var u9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5.5 4.5A.5.5 0 016 5v5a.5.5 0 01-1 0V5a.5.5 0 01.5-.5zM9 5a.5.5 0 00-1 0v5a.5.5 0 001 0V5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M4.5.5A.5.5 0 015 0h4a.5.5 0 01.5.5V2h3a.5.5 0 010 1H12v8a2 2 0 01-2 2H4a2 2 0 01-2-2V3h-.5a.5.5 0 010-1h3V.5zM3 3v8a1 1 0 001 1h6a1 1 0 001-1V3H3zm2.5-2h3v1h-3V1z",
      fill: e7
    }
  )
));
var c9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("g", { clipPath: "url(#prefix__clip0_1107_3502)" }, s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M13.44 4.44L9.56.56a1.5 1.5 0 00-2.12 0L7 1a1.415 1.415 0 000 2L5 5H3.657A4 4 0 00.828 6.17l-.474.475a.5.5 0 000 .707l2.793 2.793-3 3a.5.5 0 00.707.708l3-3 2.792 2.792a.5.5 0 00.708 0l.474-.475A4 4 0 009 10.343V9l2-2a1.414 1.414 0 002 0l.44-.44a1.5 1.5 0 000-2.12zM11 5.585l-3 3v1.757a3 3 0 01-.879 2.121L7 12.586 1.414 7l.122-.122A3 3 0 013.656 6h1.758l3-3-.707-.707a.414.414 0 010-.586l.44-.44a.5.5 0 01.707 0l3.878 3.88a.5.5 0 010 .706l-.44.44a.414.414 0 01-.585 0L11 5.586z",
      fill: e7
    }
  )),
  s.createElement("defs", null, s.createElement("clipPath", { id: "prefix__clip0_1107_3502" }, s.createElement(
    "path",
    { fill: "#fff", d: "M0 0h14v14H0z" }
  )))
));
var p9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("g", { clipPath: "url(#prefix__clip0_1107_3501)", fill: e7 }, s.createElement("path", { d: "M13.44 4.44L9.56.56a1.5 1.5 0 00-2.12 0L7 1a1.415 1.415 0 000 2L5.707 4.293 6.414 5l2-2-.707-.707a.414.414 0 010-.586l.44-.44a.5.5 0 01.707 0l3.878 3.88a.5.5 0 010 .706l-.44.44a.414.414 0 01-.585 0L11 5.586l-2 2 .707.707L11 7a1.414 1.414 0 002 0l.44-.44a1.5 1.5 0 000-2.12zM.828 6.171a4 4 0 012.758-1.17l1 .999h-.93a3 3 0 00-2.12.878L1.414 7 7 12.586l.121-.122A3 3 0 008 10.343v-.929l1 1a4 4 0 01-1.172 2.757l-.474.475a.5.5 0 01-.708 0l-2.792-2.792-3 3a.5.5 0 01-.708-.708l3-3L.355 7.353a.5.5 0 010-.707l.474-.475zM1.854 1.146a.5.5 0 10-.708.708l11 11a.5.5 0 00.708-.708l-11-11z" })),
  s.createElement("defs", null, s.createElement("clipPath", { id: "prefix__clip0_1107_3501" }, s.createElement(
    "path",
    { fill: "#fff", d: "M0 0h14v14H0z" }
  )))
));
var d9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7 3a.5.5 0 01.5.5v3h3a.5.5 0 010 1h-3v3a.5.5 0 01-1 0v-3h-3a.5.5 0 010-1h3v-3A.5.5 0 017 3z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 14A7 7 0 107 0a7 7 0 000 14zm0-1A6 6 0 107 1a6 6 0 000 12z",
      fill: e7
    }
  )
));
var f9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("path", { d: "M3.5 6.5a.5.5 0 000 1h7a.5.5 0 000-1h-7z", fill: e7 }),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7A7 7 0 110 7a7 7 0 0114 0zm-1 0A6 6 0 111 7a6 6 0 0112 0z",
      fill: e7
    }
  )
));
var h9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M9.854 4.146a.5.5 0 010 .708L7.707 7l2.147 2.146a.5.5 0 01-.708.708L7 7.707 4.854 9.854a.5.5 0 01-.708-.708L6.293 7 4.146 4.854a.5.5 0 11.708-.708L7 6.293l2.146-2.147a.5.5 0 01.708 0z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 14A7 7 0 107 0a7 7 0 000 14zm0-1A6 6 0 107 1a6 6 0 000 12z",
      fill: e7
    }
  )
));
var m9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7A7 7 0 110 7a7 7 0 0114 0zm-1 0a6 6 0 01-9.874 4.582l8.456-8.456A5.976 5.976 0 0113 7zM2.418 10.874l8.456-8.456a6 6 0 00-8.456 8.456z",
      fill: e7
    }
  )
));
var g9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 14A7 7 0 107 0a7 7 0 000 14zm3.854-9.354a.5.5 0 010 .708l-4.5 4.5a.5.5 0 01-.708 0l-2.5-2.5a.5.5 0 11.708-.708L6 8.793l4.146-4.147a.5.5 0 01.708 0z",
      fill: e7
    }
  )
));
var v9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 14A7 7 0 107 0a7 7 0 000 14zM3.5 6.5a.5.5 0 000 1h7a.5.5 0 000-1h-7z",
      fill: e7
    }
  )
));
var w9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 14A7 7 0 107 0a7 7 0 000 14zm2.854-9.854a.5.5 0 010 .708L7.707 7l2.147 2.146a.5.5 0 01-.708.708L7 7.707 4.854 9.854a.5.5 0 01-.708-.708L6.293 7 4.146 4.854a.5.5 0 11.708-.708L7 6.293l2.146-2.147a.5.5 0 01.708 0z",
      fill: e7
    }
  )
));
var b9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M5 2h7a2 2 0 012 2v6a2 2 0 01-2 2H5a1.994 1.994 0 01-1.414-.586l-3-3a2 2 0 010-2.828l3-3A1.994 1.994 0 015 2zm1.146 3.146a.5.5 0 01.708 0L8 6.293l1.146-1.147a.5.5 0 11.708.708L8.707 7l1.147 1.146a.5.5 0 01-.708.708L8 7.707 6.854 8.854a.5.5 0 11-.708-.708L7.293 7 6.146 5.854a.5.5 0 010-.708z",
      fill: e7
    }
  )
));
var y9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M3.5 5.004a.5.5 0 100 1h7a.5.5 0 000-1h-7zM3 8.504a.5.5 0 01.5-.5h7a.5.5 0 010 1h-7a.5.5 0 01-.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12.5 12.004H5.707l-1.853 1.854a.5.5 0 01-.351.146h-.006a.499.499 0 01-.497-.5v-1.5H1.5a.5.5 0 01-.5-.5v-9a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v9a.5.5 0 01-.5.5zm-10.5-1v-8h10v8H2z",
      fill: e7
    }
  )
));
var D9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7.5 5.004a.5.5 0 10-1 0v1.5H5a.5.5 0 100 1h1.5v1.5a.5.5 0 001 0v-1.5H9a.5.5 0 000-1H7.5v-1.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3.691 13.966a.498.498 0 01-.188.038h-.006a.499.499 0 01-.497-.5v-1.5H1.5a.5.5 0 01-.5-.5v-9a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v9a.5.5 0 01-.5.5H5.707l-1.853 1.854a.5.5 0 01-.163.108zM2 3.004v8h10v-8H2z",
      fill: e7
    }
  )
));
var x9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M9.854 6.65a.5.5 0 010 .707l-2 2a.5.5 0 11-.708-.707l1.15-1.15-3.796.004a.5.5 0 010-1L8.29 6.5 7.145 5.357a.5.5 0 11.708-.707l2 2z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3.691 13.966a.498.498 0 01-.188.038h-.006a.499.499 0 01-.497-.5v-1.5H1.5a.5.5 0 01-.5-.5v-9a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v9a.5.5 0 01-.5.5H5.707l-1.853 1.854a.5.5 0 01-.163.108zM2 3.004v8h10v-8H2z",
      fill: e7
    }
  )
));
var C9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M8.5 7.004a.5.5 0 000-1h-5a.5.5 0 100 1h5zM9 8.504a.5.5 0 01-.5.5h-5a.5.5 0 010-1h5a.5.5 0 01.5.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12 11.504v-1.5h1.5a.5.5 0 00.5-.5v-8a.5.5 0 00-.5-.5h-11a.5.5 0 00-.5.5v1.5H.5a.5.5 0 00-.5.5v8a.5.5 0 00.5.5H2v1.5a.499.499 0 00.497.5h.006a.498.498 0 00.35-.146l1.854-1.854H11.5a.5.5 0 00.5-.5zm-9-8.5v-1h10v7h-1v-5.5a.5.5 0 00-.5-.5H3zm-2 8v-7h10v7H1z",
      fill: e7
    }
  )
));
var E9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 2a2 2 0 012-2h8a2 2 0 012 2v8a2 2 0 01-2 2H6.986a.444.444 0 01-.124.103l-3.219 1.84A.43.43 0 013 13.569V12a2 2 0 01-2-2V2zm3.42 4.78a.921.921 0 110-1.843.921.921 0 010 1.842zm1.658-.922a.921.921 0 101.843 0 .921.921 0 00-1.843 0zm2.58 0a.921.921 0 101.842 0 .921.921 0 00-1.843 0z",
      fill: e7
    }
  )
));
var S9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M8 8.004a1 1 0 01-.5.866v1.634a.5.5 0 01-1 0V8.87A1 1 0 118 8.004z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3 4.004a4 4 0 118 0v1h1.5a.5.5 0 01.5.5v8a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-8a.5.5 0 01.5-.5H3v-1zm7 1v-1a3 3 0 10-6 0v1h6zm2 1H2v7h10v-7z",
      fill: e7
    }
  )
));
var R9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("g", { clipPath: "url(#prefix__clip0_1107_3614)", fill: e7 }, s.createElement("path", { d: "M6.5 8.87a1 1 0 111 0v1.634a.5.5 0 01-1 0V8.87z" }), s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 1a3 3 0 00-3 3v1.004h8.5a.5.5 0 01.5.5v8a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5v-8a.5.5 0 01.5-.5H3V4a4 4 0 017.755-1.381.5.5 0 01-.939.345A3.001 3.001 0 007 1zM2 6.004h10v7H2v-7z"
    }
  )),
  s.createElement("defs", null, s.createElement("clipPath", { id: "prefix__clip0_1107_3614" }, s.createElement(
    "path",
    { fill: "#fff", d: "M0 0h14v14H0z" }
  )))
));
var A9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("path", { d: "M11 4a1 1 0 11-2 0 1 1 0 012 0z", fill: e7 }),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7.5 8.532V9.5a.5.5 0 01-.5.5H5.5v1.5a.5.5 0 01-.5.5H3.5v1.5a.5.5 0 01-.5.5H.5a.5.5 0 01-.5-.5v-2a.5.5 0 01.155-.362l5.11-5.11A4.5 4.5 0 117.5 8.532zM6 4.5a3.5 3.5 0 111.5 2.873c-.29-.203-1-.373-1 .481V9H5a.5.5 0 00-.5.5V11H3a.5.5 0 00-.5.5V13H1v-1.293l5.193-5.193a.552.552 0 00.099-.613A3.473 3.473 0 016 4.5z",
      fill: e7
    }
  )
));
var F9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7.354.15a.5.5 0 00-.708 0l-2 2a.5.5 0 10.708.707L6.5 1.711v6.793a.5.5 0 001 0V1.71l1.146 1.146a.5.5 0 10.708-.707l-2-2z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M2 7.504a.5.5 0 10-1 0v5a.5.5 0 00.5.5h11a.5.5 0 00.5-.5v-5a.5.5 0 00-1 0v4.5H2v-4.5z",
      fill: e7
    }
  )
));
var k9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("path", { d: "M2.5 8.004a.5.5 0 100 1h3a.5.5 0 000-1h-3z", fill: e7 }),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M0 11.504a.5.5 0 00.5.5h13a.5.5 0 00.5-.5v-9a.5.5 0 00-.5-.5H.5a.5.5 0 00-.5.5v9zm1-8.5v1h12v-1H1zm0 8h12v-5H1v5z",
      fill: e7
    }
  )
));
var T9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1 3.004a1 1 0 00-1 1v5a1 1 0 001 1h3.5a.5.5 0 100-1H1v-5h12v5h-1a.5.5 0 000 1h1a1 1 0 001-1v-5a1 1 0 00-1-1H1z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M6.45 7.006a.498.498 0 01.31.07L10.225 9.1a.5.5 0 01-.002.873l-1.074.621.75 1.3a.75.75 0 01-1.3.75l-.75-1.3-1.074.62a.497.497 0 01-.663-.135.498.498 0 01-.095-.3L6 7.515a.497.497 0 01.45-.509z",
      fill: e7
    }
  )
));
var L9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M4 1.504a.5.5 0 01.5-.5h5a.5.5 0 110 1h-2v10h2a.5.5 0 010 1h-5a.5.5 0 010-1h2v-10h-2a.5.5 0 01-.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M0 4.504a.5.5 0 01.5-.5h4a.5.5 0 110 1H1v4h3.5a.5.5 0 110 1h-4a.5.5 0 01-.5-.5v-5zM9.5 4.004a.5.5 0 100 1H13v4H9.5a.5.5 0 100 1h4a.5.5 0 00.5-.5v-5a.5.5 0 00-.5-.5h-4z",
      fill: e7
    }
  )
));
var I9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M5.943 12.457a.27.27 0 00.248-.149L7.77 9.151l2.54 2.54a.257.257 0 00.188.073c.082 0 .158-.03.21-.077l.788-.79a.27.27 0 000-.392L8.891 7.9l3.416-1.708a.29.29 0 00.117-.106.222.222 0 00.033-.134.332.332 0 00-.053-.161.174.174 0 00-.092-.072l-.02-.007-10.377-4.15a.274.274 0 00-.355.354l4.15 10.372a.275.275 0 00.233.169zm-.036 1l-.02-.002c-.462-.03-.912-.31-1.106-.796L.632 2.287A1.274 1.274 0 012.286.633l10.358 4.143c.516.182.782.657.81 1.114a1.25 1.25 0 01-.7 1.197L10.58 8.174l1.624 1.624a1.27 1.27 0 010 1.807l-.8.801-.008.007c-.491.46-1.298.48-1.792-.014l-1.56-1.56-.957 1.916a1.27 1.27 0 01-1.142.702h-.037z",
      fill: e7
    }
  )
));
var B9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M11.87 6.008a.505.505 0 00-.003-.028v-.002c-.026-.27-.225-.48-.467-.498a.5.5 0 00-.53.5v1.41c0 .25-.22.47-.47.47a.48.48 0 01-.47-.47V5.17a.6.6 0 00-.002-.05c-.023-.268-.223-.49-.468-.5a.5.5 0 00-.52.5v1.65a.486.486 0 01-.47.47.48.48 0 01-.47-.47V4.62a.602.602 0 00-.002-.05v-.002c-.023-.266-.224-.48-.468-.498a.5.5 0 00-.53.5v2.2c0 .25-.22.47-.47.47a.49.49 0 01-.47-.47V1.8c0-.017 0-.034-.002-.05-.022-.268-.214-.49-.468-.5a.5.5 0 00-.52.5v6.78c0 .25-.22.47-.47.47a.48.48 0 01-.47-.47l.001-.1c.001-.053.002-.104 0-.155a.775.775 0 00-.06-.315.65.65 0 00-.16-.22 29.67 29.67 0 01-.21-.189c-.2-.182-.4-.365-.617-.532l-.003-.003A6.366 6.366 0 003.06 7l-.01-.007c-.433-.331-.621-.243-.69-.193-.26.14-.29.5-.13.74l1.73 2.6v.01h-.016l-.035.023.05-.023s1.21 2.6 3.57 2.6c3.54 0 4.2-1.9 4.31-4.42.039-.591.036-1.189.032-1.783l-.002-.507v-.032zm.969 2.376c-.057 1.285-.254 2.667-1.082 3.72-.88 1.118-2.283 1.646-4.227 1.646-1.574 0-2.714-.87-3.406-1.623a6.958 6.958 0 01-1.046-1.504l-.006-.012-1.674-2.516a1.593 1.593 0 01-.25-1.107 1.44 1.44 0 01.69-1.041c.195-.124.485-.232.856-.186.357.044.681.219.976.446.137.106.272.22.4.331V1.75A1.5 1.5 0 015.63.25c.93.036 1.431.856 1.431 1.55v1.335a1.5 1.5 0 01.53-.063h.017c.512.04.915.326 1.153.71a1.5 1.5 0 01.74-.161c.659.025 1.115.458 1.316.964a1.493 1.493 0 01.644-.103h.017c.856.067 1.393.814 1.393 1.558l.002.48c.004.596.007 1.237-.033 1.864z",
      fill: e7
    }
  )
));
var M9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3.5 6A2.5 2.5 0 116 3.5V5h2V3.5A2.5 2.5 0 1110.5 6H9v2h1.5A2.5 2.5 0 118 10.5V9H6v1.5A2.5 2.5 0 113.5 8H5V6H3.5zM2 3.5a1.5 1.5 0 113 0V5H3.5A1.5 1.5 0 012 3.5zM6 6v2h2V6H6zm3-1h1.5A1.5 1.5 0 109 3.5V5zM3.5 9H5v1.5A1.5 1.5 0 113.5 9zM9 9v1.5A1.5 1.5 0 1010.5 9H9z",
      fill: e7
    }
  )
));
var _9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M11.083 12.25H2.917a1.167 1.167 0 01-1.167-1.167V2.917A1.167 1.167 0 012.917 1.75h6.416l2.917 2.917v6.416a1.167 1.167 0 01-1.167 1.167z",
      stroke: e7,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }
  ),
  s.createElement(
    "path",
    {
      d: "M9.917 12.25V7.583H4.083v4.667M4.083 1.75v2.917H8.75",
      stroke: e7,
      strokeLinecap: "round",
      strokeLinejoin: "round"
    }
  )
));
var P9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7 5.5a.5.5 0 01.5.5v4a.5.5 0 01-1 0V6a.5.5 0 01.5-.5zM7 4.5A.75.75 0 107 3a.75.75 0 000 1.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 14A7 7 0 107 0a7 7 0 000 14zm0-1A6 6 0 107 1a6 6 0 000 12z",
      fill: e7
    }
  )
));
var H9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5.25 5.25A1.75 1.75 0 117 7a.5.5 0 00-.5.5V9a.5.5 0 001 0V7.955A2.75 2.75 0 104.25 5.25a.5.5 0 001 0zM7 11.5A.75.75 0 107 10a.75.75 0 000 1.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7A7 7 0 110 7a7 7 0 0114 0zm-1 0A6 6 0 111 7a6 6 0 0112 0z",
      fill: e7
    }
  )
));
var $9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7A7 7 0 110 7a7 7 0 0114 0zm-3.524 4.89A5.972 5.972 0 017 13a5.972 5.972 0 01-3.477-1.11l1.445-1.444C5.564 10.798 6.258 11 7 11s1.436-.202 2.032-.554l1.444 1.445zm-.03-2.858l1.445 1.444A5.972 5.972 0 0013 7c0-1.296-.41-2.496-1.11-3.477l-1.444 1.445C10.798 5.564 11 6.258 11 7s-.202 1.436-.554 2.032zM9.032 3.554l1.444-1.445A5.972 5.972 0 007 1c-1.296 0-2.496.41-3.477 1.11l1.445 1.444A3.981 3.981 0 017 3c.742 0 1.436.202 2.032.554zM3.554 4.968L2.109 3.523A5.973 5.973 0 001 7c0 1.296.41 2.496 1.11 3.476l1.444-1.444A3.981 3.981 0 013 7c0-.742.202-1.436.554-2.032zM10 7a3 3 0 11-6 0 3 3 0 016 0z",
      fill: e7
    }
  )
));
var z9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7 4.5a.5.5 0 01.5.5v3.5a.5.5 0 11-1 0V5a.5.5 0 01.5-.5zM7.75 10.5a.75.75 0 11-1.5 0 .75.75 0 011.5 0z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7.206 1.045a.498.498 0 01.23.209l6.494 10.992a.5.5 0 01-.438.754H.508a.497.497 0 01-.506-.452.498.498 0 01.072-.31l6.49-10.984a.497.497 0 01.642-.21zM7 2.483L1.376 12h11.248L7 2.483z",
      fill: e7
    }
  )
));
var O9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7A7 7 0 110 7a7 7 0 0114 0zM6.5 8a.5.5 0 001 0V4a.5.5 0 00-1 0v4zm-.25 2.25a.75.75 0 111.5 0 .75.75 0 01-1.5 0z",
      fill: e7
    }
  )
));
var N9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M0 2.504a.5.5 0 01.5-.5h13a.5.5 0 01.5.5v9a.5.5 0 01-.5.5H.5a.5.5 0 01-.5-.5v-9zm1 1.012v7.488h12V3.519L7.313 7.894a.496.496 0 01-.526.062.497.497 0 01-.1-.062L1 3.516zm11.03-.512H1.974L7 6.874l5.03-3.87z",
      fill: e7
    }
  )
));
var j9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7.76 8.134l-.05.05a.2.2 0 01-.28.03 6.76 6.76 0 01-1.63-1.65.21.21 0 01.04-.27l.05-.05c.23-.2.54-.47.71-.96.17-.47-.02-1.04-.66-1.94-.26-.38-.72-.96-1.22-1.46-.68-.69-1.2-1-1.65-1a.98.98 0 00-.51.13A3.23 3.23 0 00.9 3.424c-.13 1.1.26 2.37 1.17 3.78a16.679 16.679 0 004.55 4.6 6.57 6.57 0 003.53 1.32 3.2 3.2 0 002.85-1.66c.14-.24.24-.64-.07-1.18a7.803 7.803 0 00-1.73-1.81c-.64-.5-1.52-1.11-2.13-1.11a.97.97 0 00-.34.06c-.472.164-.74.458-.947.685l-.023.025zm4.32 2.678a6.801 6.801 0 00-1.482-1.54l-.007-.005-.006-.005a8.418 8.418 0 00-.957-.662 2.7 2.7 0 00-.4-.193.683.683 0 00-.157-.043l-.004.002-.009.003c-.224.078-.343.202-.56.44l-.014.016-.046.045a1.2 1.2 0 01-1.602.149A7.76 7.76 0 014.98 7.134l-.013-.019-.013-.02a1.21 1.21 0 01.195-1.522l.06-.06.026-.024c.219-.19.345-.312.422-.533l.003-.01v-.008a.518.518 0 00-.032-.142c-.06-.178-.203-.453-.502-.872l-.005-.008-.005-.007A10.18 10.18 0 004.013 2.59l-.005-.005c-.31-.314-.543-.5-.716-.605-.147-.088-.214-.096-.222-.097h-.016l-.006.003-.01.006a2.23 2.23 0 00-1.145 1.656c-.09.776.175 1.806 1.014 3.108a15.68 15.68 0 004.274 4.32l.022.014.022.016a5.57 5.57 0 002.964 1.117 2.2 2.2 0 001.935-1.141l.006-.012.004-.007a.182.182 0 00-.007-.038.574.574 0 00-.047-.114z",
      fill: e7
    }
  )
));
var V9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M11.841 2.159a2.25 2.25 0 00-3.182 0l-2.5 2.5a2.25 2.25 0 000 3.182.5.5 0 01-.707.707 3.25 3.25 0 010-4.596l2.5-2.5a3.25 3.25 0 014.596 4.596l-2.063 2.063a4.27 4.27 0 00-.094-1.32l1.45-1.45a2.25 2.25 0 000-3.182z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M3.61 7.21c-.1-.434-.132-.88-.095-1.321L1.452 7.952a3.25 3.25 0 104.596 4.596l2.5-2.5a3.25 3.25 0 000-4.596.5.5 0 00-.707.707 2.25 2.25 0 010 3.182l-2.5 2.5A2.25 2.25 0 112.159 8.66l1.45-1.45z",
      fill: e7
    }
  )
));
var q9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.452 7.952l1.305-1.305.708.707-1.306 1.305a2.25 2.25 0 103.182 3.182l1.306-1.305.707.707-1.306 1.305a3.25 3.25 0 01-4.596-4.596zM12.548 6.048l-1.305 1.306-.707-.708 1.305-1.305a2.25 2.25 0 10-3.182-3.182L7.354 3.464l-.708-.707 1.306-1.305a3.25 3.25 0 014.596 4.596zM1.854 1.146a.5.5 0 10-.708.708l11 11a.5.5 0 00.707-.707l-11-11z",
      fill: e7
    }
  )
));
var W9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7.994 1.11a1 1 0 10-1.988 0A4.502 4.502 0 002.5 5.5v3.882l-.943 1.885a.497.497 0 00-.053.295.5.5 0 00.506.438h3.575a1.5 1.5 0 102.83 0h3.575a.5.5 0 00.453-.733L11.5 9.382V5.5a4.502 4.502 0 00-3.506-4.39zM2.81 11h8.382l-.5-1H3.31l-.5 1zM10.5 9V5.5a3.5 3.5 0 10-7 0V9h7zm-4 3.5a.5.5 0 111 0 .5.5 0 01-1 0z",
      fill: e7
    }
  )
));
var U9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.5.5A.5.5 0 012 0c6.627 0 12 5.373 12 12a.5.5 0 01-1 0C13 5.925 8.075 1 2 1a.5.5 0 01-.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M1.5 4.5A.5.5 0 012 4a8 8 0 018 8 .5.5 0 01-1 0 7 7 0 00-7-7 .5.5 0 01-.5-.5z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M5 11a2 2 0 11-4 0 2 2 0 014 0zm-1 0a1 1 0 11-2 0 1 1 0 012 0z",
      fill: e7
    }
  )
));
var G9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M2 1.004a1 1 0 00-1 1v10a1 1 0 001 1h10a1 1 0 001-1v-4.5a.5.5 0 00-1 0v4.5H2v-10h4.5a.5.5 0 000-1H2z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M7.354 7.357L12 2.711v1.793a.5.5 0 001 0v-3a.5.5 0 00-.5-.5h-3a.5.5 0 100 1h1.793L6.646 6.65a.5.5 0 10.708.707z",
      fill: e7
    }
  )
));
var X9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M6.646.15a.5.5 0 01.708 0l2 2a.5.5 0 11-.708.707L7.5 1.711v6.793a.5.5 0 01-1 0V1.71L5.354 2.857a.5.5 0 11-.708-.707l2-2z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M2 4.004a1 1 0 00-1 1v7a1 1 0 001 1h10a1 1 0 001-1v-7a1 1 0 00-1-1H9.5a.5.5 0 100 1H12v7H2v-7h2.5a.5.5 0 000-1H2z",
      fill: e7
    }
  )
));
var Y9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M13.854 6.646a.5.5 0 010 .708l-2 2a.5.5 0 01-.708-.708L12.293 7.5H5.5a.5.5 0 010-1h6.793l-1.147-1.146a.5.5 0 01.708-.708l2 2z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M10 2a1 1 0 00-1-1H2a1 1 0 00-1 1v10a1 1 0 001 1h7a1 1 0 001-1V9.5a.5.5 0 00-1 0V12H2V2h7v2.5a.5.5 0 001 0V2z",
      fill: e7
    }
  )
));
var K9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 13A6 6 0 107 1a6 6 0 000 12zm0 1A7 7 0 107 0a7 7 0 000 14z",
      fill: e7
    }
  )
));
var Z9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("path", { d: "M14 7A7 7 0 110 7a7 7 0 0114 0z", fill: e7 })
));
var J9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3.5 0h7a.5.5 0 01.5.5v13a.5.5 0 01-.454.498.462.462 0 01-.371-.118L7 11.159l-3.175 2.72a.46.46 0 01-.379.118A.5.5 0 013 13.5V.5a.5.5 0 01.5-.5zM4 12.413l2.664-2.284a.454.454 0 01.377-.128.498.498 0 01.284.12L10 12.412V1H4v11.413z",
      fill: e7
    }
  )
));
var Q9 = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 15",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3.5 0h7a.5.5 0 01.5.5v13a.5.5 0 01-.454.498.462.462 0 01-.371-.118L7 11.159l-3.175 2.72a.46.46 0 01-.379.118A.5.5 0 013 13.5V.5a.5.5 0 01.5-.5z",
      fill: e7
    }
  )
));
var eD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("g", { clipPath: "url(#prefix__clip0_1449_588)" }, s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M8.414 1.586a2 2 0 00-2.828 0l-4 4a2 2 0 000 2.828l4 4a2 2 0 002.828 0l4-4a2 2 0 000-2.828l-4-4zm.707-.707a3 3 0 00-4.242 0l-4 4a3 3 0 000 4.242l4 4a3 3 0 004.242 0l4-4a3 3 0 000-4.242l-4-4z",
      fill: e7
    }
  )),
  s.createElement("defs", null, s.createElement("clipPath", { id: "prefix__clip0_1449_588" }, s.createElement(
    "path",
    { fill: "#fff", d: "M0 0h14v14H0z" }
  )))
));
var tD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12.814 1.846c.06.05.116.101.171.154l.001.002a3.254 3.254 0 01.755 1.168c.171.461.259.974.259 1.538 0 .332-.046.656-.143.976a4.546 4.546 0 01-.397.937c-.169.302-.36.589-.58.864a7.627 7.627 0 01-.674.746l-4.78 4.596a.585.585 0 01-.427.173.669.669 0 01-.44-.173L1.78 8.217a7.838 7.838 0 01-.677-.748 6.124 6.124 0 01-.572-.855 4.975 4.975 0 01-.388-.931A3.432 3.432 0 010 4.708C0 4.144.09 3.63.265 3.17c.176-.459.429-.85.757-1.168a3.432 3.432 0 011.193-.74c.467-.176.99-.262 1.57-.262.304 0 .608.044.907.137.301.092.586.215.855.367.27.148.526.321.771.512.244.193.471.386.682.584.202-.198.427-.391.678-.584.248-.19.507-.364.78-.512a4.65 4.65 0 01.845-.367c.294-.093.594-.137.9-.137.585 0 1.115.086 1.585.262.392.146.734.34 1.026.584zM1.2 3.526c.128-.333.304-.598.52-.806.218-.212.497-.389.849-.522m-1.37 1.328A3.324 3.324 0 001 4.708c0 .225.032.452.101.686.082.265.183.513.307.737.135.246.294.484.479.716.188.237.386.454.59.652l.001.002 4.514 4.355 4.519-4.344c.2-.193.398-.41.585-.648l.003-.003c.184-.23.345-.472.486-.726l.004-.007c.131-.23.232-.474.31-.732v-.002c.068-.224.101-.45.101-.686 0-.457-.07-.849-.195-1.185a2.177 2.177 0 00-.515-.802l.007-.012-.008.009a2.383 2.383 0 00-.85-.518l-.003-.001C11.1 2.072 10.692 2 10.203 2c-.21 0-.406.03-.597.09h-.001c-.22.07-.443.167-.663.289l-.007.003c-.22.12-.434.262-.647.426-.226.174-.42.341-.588.505l-.684.672-.7-.656a9.967 9.967 0 00-.615-.527 4.82 4.82 0 00-.635-.422l-.01-.005a3.289 3.289 0 00-.656-.281l-.008-.003A2.014 2.014 0 003.785 2c-.481 0-.881.071-1.217.198",
      fill: e7
    }
  )
));
var rD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M12.814 1.846c.06.05.116.101.171.154l.001.002a3.254 3.254 0 01.755 1.168c.171.461.259.974.259 1.538 0 .332-.046.656-.143.976a4.546 4.546 0 01-.397.937c-.169.302-.36.589-.58.864a7.627 7.627 0 01-.674.746l-4.78 4.596a.585.585 0 01-.427.173.669.669 0 01-.44-.173L1.78 8.217a7.838 7.838 0 01-.677-.748 6.124 6.124 0 01-.572-.855 4.975 4.975 0 01-.388-.931A3.432 3.432 0 010 4.708C0 4.144.09 3.63.265 3.17c.176-.459.429-.85.757-1.168a3.432 3.432 0 011.193-.74c.467-.176.99-.262 1.57-.262.304 0 .608.044.907.137.301.092.586.215.855.367.27.148.526.321.771.512.244.193.471.386.682.584.202-.198.427-.391.678-.584.248-.19.507-.364.78-.512a4.65 4.65 0 01.845-.367c.294-.093.594-.137.9-.137.585 0 1.115.086 1.585.262.392.146.734.34 1.026.584z",
      fill: e7
    }
  )
));
var nD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M6.319.783a.75.75 0 011.362 0l1.63 3.535 3.867.458a.75.75 0 01.42 1.296L10.74 8.715l.76 3.819a.75.75 0 01-1.103.8L7 11.434l-3.398 1.902a.75.75 0 01-1.101-.801l.758-3.819L.401 6.072a.75.75 0 01.42-1.296l3.867-.458L6.318.783zm.68.91l-1.461 3.17a.75.75 0 01-.593.431l-3.467.412 2.563 2.37a.75.75 0 01.226.697l-.68 3.424 3.046-1.705a.75.75 0 01.733 0l3.047 1.705-.68-3.424a.75.75 0 01.226-.697l2.563-2.37-3.467-.412a.75.75 0 01-.593-.43L7 1.694z",
      fill: e7
    }
  )
));
var oD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7.68.783a.75.75 0 00-1.361 0l-1.63 3.535-3.867.458A.75.75 0 00.4 6.072l2.858 2.643-.758 3.819a.75.75 0 001.101.8L7 11.434l3.397 1.902a.75.75 0 001.102-.801l-.759-3.819L13.6 6.072a.75.75 0 00-.421-1.296l-3.866-.458L7.68.783z",
      fill: e7
    }
  )
));
var aD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M10 7.854a4.5 4.5 0 10-6 0V13a.5.5 0 00.497.5h.006c.127 0 .254-.05.35-.146L7 11.207l2.146 2.147A.5.5 0 0010 13V7.854zM7 8a3.5 3.5 0 100-7 3.5 3.5 0 000 7zm-.354 2.146a.5.5 0 01.708 0L9 11.793v-3.26C8.398 8.831 7.718 9 7 9a4.481 4.481 0 01-2-.468v3.26l1.646-1.646z",
      fill: e7
    }
  )
));
var iD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M6.565 13.123a.991.991 0 01.87 0l.987.482a.991.991 0 001.31-.426l.515-.97a.991.991 0 01.704-.511l1.082-.19a.99.99 0 00.81-1.115l-.154-1.087a.991.991 0 01.269-.828l.763-.789a.991.991 0 000-1.378l-.763-.79a.991.991 0 01-.27-.827l.155-1.087a.99.99 0 00-.81-1.115l-1.082-.19a.991.991 0 01-.704-.511L9.732.82a.99.99 0 00-1.31-.426l-.987.482a.991.991 0 01-.87 0L5.578.395a.99.99 0 00-1.31.426l-.515.97a.99.99 0 01-.704.511l-1.082.19a.99.99 0 00-.81 1.115l.154 1.087a.99.99 0 01-.269.828L.28 6.31a.99.99 0 000 1.378l.763.79a.99.99 0 01.27.827l-.155 1.087a.99.99 0 00.81 1.115l1.082.19a.99.99 0 01.704.511l.515.97c.25.473.83.661 1.31.426l.987-.482zm4.289-8.477a.5.5 0 010 .708l-4.5 4.5a.5.5 0 01-.708 0l-2.5-2.5a.5.5 0 11.708-.708L6 8.793l4.146-4.147a.5.5 0 01.708 0z",
      fill: e7
    }
  )
));
var lD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M11 12.02c-.4.37-.91.56-1.56.56h-.88a5.493 5.493 0 01-1.3-.16c-.42-.1-.91-.25-1.47-.45a5.056 5.056 0 00-.95-.27H2.88a.84.84 0 01-.62-.26.84.84 0 01-.26-.61V6.45c0-.24.09-.45.26-.62a.84.84 0 01.62-.25h1.87c.16-.11.47-.47.93-1.06.27-.35.51-.64.74-.88.1-.11.19-.3.24-.58.05-.28.12-.57.2-.87.1-.3.24-.55.43-.74a.87.87 0 01.62-.25c.38 0 .72.07 1.03.22.3.15.54.38.7.7.15.31.23.73.23 1.27a3 3 0 01-.32 1.31h1.2c.47 0 .88.17 1.23.52s.52.8.52 1.22c0 .29-.04.66-.34 1.12.05.15.07.3.07.47 0 .35-.09.68-.26.98a2.05 2.05 0 01-.4 1.51 1.9 1.9 0 01-.57 1.5zm.473-5.33a.965.965 0 00.027-.25.742.742 0 00-.227-.513.683.683 0 00-.523-.227H7.927l.73-1.45a2 2 0 00.213-.867c0-.444-.068-.695-.127-.822a.53.53 0 00-.245-.244 1.296 1.296 0 00-.539-.116.989.989 0 00-.141.28 9.544 9.544 0 00-.174.755c-.069.387-.213.779-.484 1.077l-.009.01-.009.01c-.195.202-.41.46-.67.798l-.003.004c-.235.3-.44.555-.613.753-.151.173-.343.381-.54.516l-.255.176H5v4.133l.018.003c.384.07.76.176 1.122.318.532.189.98.325 1.352.413l.007.002a4.5 4.5 0 001.063.131h.878c.429 0 .683-.115.871-.285a.9.9 0 00.262-.702l-.028-.377.229-.3a1.05 1.05 0 00.205-.774l-.044-.333.165-.292a.969.969 0 00.13-.487.457.457 0 00-.019-.154l-.152-.458.263-.404a1.08 1.08 0 00.152-.325zM3.5 10.8a.5.5 0 100-1 .5.5 0 000 1z",
      fill: e7
    }
  )
));
var sD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M11.765 2.076A.5.5 0 0112 2.5v6.009a.497.497 0 01-.17.366L7.337 12.87a.497.497 0 01-.674 0L2.17 8.875l-.009-.007a.498.498 0 01-.16-.358L2 8.5v-6a.5.5 0 01.235-.424l.018-.011c.016-.01.037-.024.065-.04.056-.032.136-.077.24-.128a6.97 6.97 0 01.909-.371C4.265 1.26 5.443 1 7 1s2.735.26 3.533.526c.399.133.702.267.91.37a4.263 4.263 0 01.304.169l.018.01zM3 2.793v5.482l1.068.95 6.588-6.588a6.752 6.752 0 00-.44-.163C9.517 2.24 8.444 2 7 2c-1.443 0-2.515.24-3.217.474-.351.117-.61.233-.778.317L3 2.793zm4 9.038l-2.183-1.94L11 3.706v4.568l-4 3.556z",
      fill: e7
    }
  )
));
var uD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M10.354 2.854a.5.5 0 10-.708-.708l-3 3a.5.5 0 10.708.708l3-3z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M2.09 6H4.5a.5.5 0 000-1H1.795a.75.75 0 00-.74.873l.813 4.874A1.5 1.5 0 003.348 12h7.305a1.5 1.5 0 001.48-1.253l.812-4.874a.75.75 0 00-.74-.873H10a.5.5 0 000 1h1.91l-.764 4.582a.5.5 0 01-.493.418H3.347a.5.5 0 01-.493-.418L2.09 6z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M4.5 7a.5.5 0 01.5.5v2a.5.5 0 01-1 0v-2a.5.5 0 01.5-.5zM10 7.5a.5.5 0 00-1 0v2a.5.5 0 001 0v-2zM6.5 9.5v-2a.5.5 0 011 0v2a.5.5 0 01-1 0z",
      fill: e7
    }
  )
));
var cD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M4.5 2h.75v3.866l-3.034 5.26A1.25 1.25 0 003.299 13H10.7a1.25 1.25 0 001.083-1.875L8.75 5.866V2h.75a.5.5 0 100-1h-5a.5.5 0 000 1zm1.75 4V2h1.5v4.134l.067.116L8.827 8H5.173l1.01-1.75.067-.116V6zM4.597 9l-1.515 2.625A.25.25 0 003.3 12H10.7a.25.25 0 00.217-.375L9.404 9H4.597z",
      fill: e7
    }
  )
));
var pD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("path", { d: "M7.5 10.5a.5.5 0 11-1 0 .5.5 0 011 0z", fill: e7 }),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3.5 1a.5.5 0 00-.5.5c0 1.063.137 1.892.678 2.974.346.692.858 1.489 1.598 2.526-.89 1.247-1.455 2.152-1.798 2.956-.377.886-.477 1.631-.478 2.537v.007a.5.5 0 00.5.5h7c.017 0 .034 0 .051-.003A.5.5 0 0011 12.5v-.007c0-.906-.1-1.65-.478-2.537-.343-.804-.909-1.709-1.798-2.956.74-1.037 1.252-1.834 1.598-2.526C10.863 3.392 11 2.563 11 1.5a.5.5 0 00-.5-.5h-7zm6.487 11a4.675 4.675 0 00-.385-1.652c-.277-.648-.735-1.407-1.499-2.494-.216.294-.448.606-.696.937a.497.497 0 01-.195.162.5.5 0 01-.619-.162c-.248-.331-.48-.643-.696-.937-.764 1.087-1.222 1.846-1.499 2.494A4.675 4.675 0 004.013 12h5.974zM6.304 6.716c.212.293.443.609.696.948a90.058 90.058 0 00.709-.965c.48-.664.86-1.218 1.163-1.699H5.128a32.672 32.672 0 001.176 1.716zM4.559 4h4.882c.364-.735.505-1.312.546-2H4.013c.04.688.182 1.265.546 2z",
      fill: e7
    }
  )
));
var dD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M11.5 1h-9a.5.5 0 00-.5.5v11a.5.5 0 001 0V8h8.5a.5.5 0 00.354-.854L9.207 4.5l2.647-2.646A.499.499 0 0011.5 1zM8.146 4.146L10.293 2H3v5h7.293L8.146 4.854a.5.5 0 010-.708z",
      fill: e7
    }
  )
));
var fD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M10 7V6a3 3 0 00-5.91-.736l-.17.676-.692.075A2.5 2.5 0 003.5 11h3c.063 0 .125-.002.187-.007l.076-.005.076.006c.053.004.106.006.161.006h4a2 2 0 100-4h-1zM3.12 5.02A3.5 3.5 0 003.5 12h3c.087 0 .174-.003.26-.01.079.007.16.01.24.01h4a3 3 0 100-6 4 4 0 00-7.88-.98z",
      fill: e7
    }
  )
));
var hD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7 2a4 4 0 014 4 3 3 0 110 6H7c-.08 0-.161-.003-.24-.01-.086.007-.173.01-.26.01h-3a3.5 3.5 0 01-.38-6.98A4.002 4.002 0 017 2z",
      fill: e7
    }
  )
));
var mD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M11 7a4 4 0 11-8 0 4 4 0 018 0zm-1 0a3 3 0 11-6 0 3 3 0 016 0z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M4.268 13.18c.25.472.83.66 1.31.425l.987-.482a.991.991 0 01.87 0l.987.482a.991.991 0 001.31-.426l.515-.97a.991.991 0 01.704-.511l1.082-.19a.99.99 0 00.81-1.115l-.154-1.087a.991.991 0 01.269-.828l.763-.789a.991.991 0 000-1.378l-.763-.79a.991.991 0 01-.27-.827l.155-1.087a.99.99 0 00-.81-1.115l-1.082-.19a.991.991 0 01-.704-.511L9.732.82a.99.99 0 00-1.31-.426l-.987.482a.991.991 0 01-.87 0L5.578.395a.99.99 0 00-1.31.426l-.515.97a.99.99 0 01-.704.511l-1.082.19a.99.99 0 00-.81 1.115l.154 1.087a.99.99 0 01-.269.828L.28 6.31a.99.99 0 000 1.378l.763.79a.99.99 0 01.27.827l-.155 1.087a.99.99 0 00.81 1.115l1.082.19a.99.99 0 01.704.511l.515.97zm5.096-1.44l-.511.963-.979-.478a1.99 1.99 0 00-1.748 0l-.979.478-.51-.962a1.991 1.991 0 00-1.415-1.028l-1.073-.188.152-1.079a1.991 1.991 0 00-.54-1.663L1.004 7l.757-.783a1.991 1.991 0 00.54-1.663L2.15 3.475l1.073-.188A1.991 1.991 0 004.636 2.26l.511-.962.979.478a1.99 1.99 0 001.748 0l.979-.478.51.962c.288.543.81.922 1.415 1.028l1.073.188-.152 1.079a1.99 1.99 0 00.54 1.663l.757.783-.757.783a1.99 1.99 0 00-.54 1.663l.152 1.079-1.073.188a1.991 1.991 0 00-1.414 1.028z",
      fill: e7
    }
  )
));
var gD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 4a3 3 0 100 6 3 3 0 000-6zM3 7a4 4 0 118 0 4 4 0 01-8 0z",
      fill: e7
    }
  )
));
var vD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7.206 3.044a.498.498 0 01.23.212l3.492 5.985a.494.494 0 01.006.507.497.497 0 01-.443.252H3.51a.499.499 0 01-.437-.76l3.492-5.984a.497.497 0 01.642-.212zM7 4.492L4.37 9h5.26L7 4.492z",
      fill: e7
    }
  )
));
var wD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M10.854 4.146a.5.5 0 010 .708l-5 5a.5.5 0 01-.708 0l-2-2a.5.5 0 11.708-.708L5.5 8.793l4.646-4.647a.5.5 0 01.708 0z",
      fill: e7
    }
  )
));
var bD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7.354 3.896l5.5 5.5a.5.5 0 01-.708.708L7 4.957l-5.146 5.147a.5.5 0 01-.708-.708l5.5-5.5a.5.5 0 01.708 0z",
      fill: e7
    }
  )
));
var yD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.146 4.604l5.5 5.5a.5.5 0 00.708 0l5.5-5.5a.5.5 0 00-.708-.708L7 9.043 1.854 3.896a.5.5 0 10-.708.708z",
      fill: e7
    }
  )
));
var DD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M2.76 7.096a.498.498 0 00.136.258l5.5 5.5a.5.5 0 00.707-.708L3.958 7l5.147-5.146a.5.5 0 10-.708-.708l-5.5 5.5a.5.5 0 00-.137.45z",
      fill: e7
    }
  )
));
var zu = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M11.104 7.354l-5.5 5.5a.5.5 0 01-.708-.708L10.043 7 4.896 1.854a.5.5 0 11.708-.708l5.5 5.5a.5.5 0 010 .708z",
      fill: e7
    }
  )
));
var xD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M3.854 9.104a.5.5 0 11-.708-.708l3.5-3.5a.5.5 0 01.708 0l3.5 3.5a.5.5 0 01-.708.708L7 5.957 3.854 9.104z",
      fill: e7
    }
  )
));
var CD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M3.854 4.896a.5.5 0 10-.708.708l3.5 3.5a.5.5 0 00.708 0l3.5-3.5a.5.5 0 00-.708-.708L7 8.043 3.854 4.896z",
      fill: e7
    }
  )
));
var ED = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M9.104 10.146a.5.5 0 01-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 11.708.708L5.957 7l3.147 3.146z",
      fill: e7
    }
  )
));
var SD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M4.896 10.146a.5.5 0 00.708.708l3.5-3.5a.5.5 0 000-.708l-3.5-3.5a.5.5 0 10-.708.708L8.043 7l-3.147 3.146z",
      fill: e7
    }
  )
));
var RD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M11.854 4.646l-4.5-4.5a.5.5 0 00-.708 0l-4.5 4.5a.5.5 0 10.708.708L6.5 1.707V13.5a.5.5 0 001 0V1.707l3.646 3.647a.5.5 0 00.708-.708z",
      fill: e7
    }
  )
));
var AD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7.5.5a.5.5 0 00-1 0v11.793L2.854 8.646a.5.5 0 10-.708.708l4.5 4.5a.5.5 0 00.351.146h.006c.127 0 .254-.05.35-.146l4.5-4.5a.5.5 0 00-.707-.708L7.5 12.293V.5z",
      fill: e7
    }
  )
));
var FD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5.354 2.146a.5.5 0 010 .708L1.707 6.5H13.5a.5.5 0 010 1H1.707l3.647 3.646a.5.5 0 01-.708.708l-4.5-4.5a.5.5 0 010-.708l4.5-4.5a.5.5 0 01.708 0z",
      fill: e7
    }
  )
));
var kD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M8.646 2.146a.5.5 0 01.708 0l4.5 4.5a.5.5 0 010 .708l-4.5 4.5a.5.5 0 01-.708-.708L12.293 7.5H.5a.5.5 0 010-1h11.793L8.646 2.854a.5.5 0 010-.708z",
      fill: e7
    }
  )
));
var TD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.904 8.768V2.404a.5.5 0 01.5-.5h6.364a.5.5 0 110 1H3.61l8.339 8.339a.5.5 0 01-.707.707l-8.34-8.34v5.158a.5.5 0 01-1 0z",
      fill: e7
    }
  )
));
var LD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M12.096 8.768V2.404a.5.5 0 00-.5-.5H5.232a.5.5 0 100 1h5.157L2.05 11.243a.5.5 0 10.707.707l8.34-8.34v5.158a.5.5 0 101 0z",
      fill: e7
    }
  )
));
var ID = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.904 5.232v6.364a.5.5 0 00.5.5h6.364a.5.5 0 000-1H3.61l8.339-8.339a.5.5 0 00-.707-.707l-8.34 8.34V5.231a.5.5 0 00-1 0z",
      fill: e7
    }
  )
));
var BD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M12.096 5.232v6.364a.5.5 0 01-.5.5H5.232a.5.5 0 010-1h5.157L2.05 2.757a.5.5 0 01.707-.707l8.34 8.34V5.231a.5.5 0 111 0z",
      fill: e7
    }
  )
));
var MD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M6.772 3.59c.126-.12.33-.12.456 0l5.677 5.387c.203.193.06.523-.228.523H1.323c-.287 0-.431-.33-.228-.523L6.772 3.59z",
      fill: e7
    }
  )
));
var _D = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7.228 10.41a.335.335 0 01-.456 0L1.095 5.023c-.203-.193-.06-.523.228-.523h11.354c.287 0 .431.33.228.523L7.228 10.41z",
      fill: e7
    }
  )
));
var PD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M3.712 7.212a.3.3 0 010-.424l5.276-5.276a.3.3 0 01.512.212v10.552a.3.3 0 01-.512.212L3.712 7.212z",
      fill: e7
    }
  )
));
var HD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M10.288 7.212a.3.3 0 000-.424L5.012 1.512a.3.3 0 00-.512.212v10.552a.3.3 0 00.512.212l5.276-5.276z",
      fill: e7
    }
  )
));
var $D = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7.354.146l4 4a.5.5 0 01-.708.708L7 1.207 3.354 4.854a.5.5 0 11-.708-.708l4-4a.5.5 0 01.708 0zM11.354 9.146a.5.5 0 010 .708l-4 4a.5.5 0 01-.708 0l-4-4a.5.5 0 11.708-.708L7 12.793l3.646-3.647a.5.5 0 01.708 0z",
      fill: e7
    }
  )
));
var zD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M3.354.146a.5.5 0 10-.708.708l4 4a.5.5 0 00.708 0l4-4a.5.5 0 00-.708-.708L7 3.793 3.354.146zM6.646 9.146a.5.5 0 01.708 0l4 4a.5.5 0 01-.708.708L7 10.207l-3.646 3.647a.5.5 0 01-.708-.708l4-4z",
      fill: e7
    }
  )
));
var OD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.5 1h2a.5.5 0 010 1h-.793l3.147 3.146a.5.5 0 11-.708.708L2 2.707V3.5a.5.5 0 01-1 0v-2a.5.5 0 01.5-.5zM10 1.5a.5.5 0 01.5-.5h2a.5.5 0 01.5.5v2a.5.5 0 01-1 0v-.793L8.854 5.854a.5.5 0 11-.708-.708L11.293 2H10.5a.5.5 0 01-.5-.5zM12.5 10a.5.5 0 01.5.5v2a.5.5 0 01-.5.5h-2a.5.5 0 010-1h.793L8.146 8.854a.5.5 0 11.708-.708L12 11.293V10.5a.5.5 0 01.5-.5zM2 11.293V10.5a.5.5 0 00-1 0v2a.5.5 0 00.5.5h2a.5.5 0 000-1h-.793l3.147-3.146a.5.5 0 10-.708-.708L2 11.293z",
      fill: e7
    }
  )
));
var ND = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M6.646.147l-1.5 1.5a.5.5 0 10.708.707l.646-.647V5a.5.5 0 001 0V1.707l.646.647a.5.5 0 10.708-.707l-1.5-1.5a.5.5 0 00-.708 0z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M1.309 4.038a.498.498 0 00-.16.106l-.005.005a.498.498 0 00.002.705L3.293 7 1.146 9.146A.498.498 0 001.5 10h3a.5.5 0 000-1H2.707l1.5-1.5h5.586l2.353 2.354a.5.5 0 00.708-.708L10.707 7l2.146-2.146.11-.545-.107.542A.499.499 0 0013 4.503v-.006a.5.5 0 00-.144-.348l-.005-.005A.498.498 0 0012.5 4h-3a.5.5 0 000 1h1.793l-1.5 1.5H4.207L2.707 5H4.5a.5.5 0 000-1h-3a.498.498 0 00-.191.038z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M7 8.5a.5.5 0 01.5.5v3.293l.646-.647a.5.5 0 01.708.708l-1.5 1.5a.5.5 0 01-.708 0l-1.5-1.5a.5.5 0 01.708-.708l.646.647V9a.5.5 0 01.5-.5zM9 9.5a.5.5 0 01.5-.5h3a.5.5 0 010 1h-3a.5.5 0 01-.5-.5z",
      fill: e7
    }
  )
));
var jD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M10.646 2.646a.5.5 0 01.708 0l1.5 1.5a.5.5 0 010 .708l-1.5 1.5a.5.5 0 01-.708-.708L11.293 5H1.5a.5.5 0 010-1h9.793l-.647-.646a.5.5 0 010-.708zM3.354 8.354L2.707 9H12.5a.5.5 0 010 1H2.707l.647.646a.5.5 0 01-.708.708l-1.5-1.5a.5.5 0 010-.708l1.5-1.5a.5.5 0 11.708.708z",
      fill: e7
    }
  )
));
var VD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.5 1a.5.5 0 01.5.5V10a2 2 0 004 0V4a3 3 0 016 0v7.793l1.146-1.147a.5.5 0 01.708.708l-2 2a.5.5 0 01-.708 0l-2-2a.5.5 0 01.708-.708L11 11.793V4a2 2 0 10-4 0v6.002a3 3 0 01-6 0V1.5a.5.5 0 01.5-.5z",
      fill: e7
    }
  )
));
var qD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.146 3.854a.5.5 0 010-.708l2-2a.5.5 0 11.708.708L2.707 3h6.295A4 4 0 019 11H3a.5.5 0 010-1h6a3 3 0 100-6H2.707l1.147 1.146a.5.5 0 11-.708.708l-2-2z",
      fill: e7
    }
  )
));
var WD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M4.354 2.146a.5.5 0 010 .708L1.707 5.5H9.5A4.5 4.5 0 0114 10v1.5a.5.5 0 01-1 0V10a3.5 3.5 0 00-3.5-3.5H1.707l2.647 2.646a.5.5 0 11-.708.708l-3.5-3.5a.5.5 0 010-.708l3.5-3.5a.5.5 0 01.708 0z",
      fill: e7
    }
  )
));
var UD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5.5 1A.5.5 0 005 .5H2a.5.5 0 000 1h1.535a6.502 6.502 0 002.383 11.91.5.5 0 10.165-.986A5.502 5.502 0 014.5 2.1V4a.5.5 0 001 0V1.353a.5.5 0 000-.023V1zM7.507 1a.5.5 0 01.576-.41 6.502 6.502 0 012.383 11.91H12a.5.5 0 010 1H9a.5.5 0 01-.5-.5v-3a.5.5 0 011 0v1.9A5.5 5.5 0 007.917 1.576.5.5 0 017.507 1z",
      fill: e7
    }
  )
));
var GD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M8.646 5.854L7.5 4.707V10.5a.5.5 0 01-1 0V4.707L5.354 5.854a.5.5 0 11-.708-.708l2-2a.5.5 0 01.708 0l2 2a.5.5 0 11-.708.708z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7A7 7 0 110 7a7 7 0 0114 0zm-1 0A6 6 0 111 7a6 6 0 0112 0z",
      fill: e7
    }
  )
));
var XD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5.354 8.146L6.5 9.293V3.5a.5.5 0 011 0v5.793l1.146-1.147a.5.5 0 11.708.708l-2 2a.5.5 0 01-.708 0l-2-2a.5.5 0 11.708-.708z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M0 7a7 7 0 1114 0A7 7 0 010 7zm1 0a6 6 0 1112 0A6 6 0 011 7z",
      fill: e7
    }
  )
));
var YD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M5.854 5.354L4.707 6.5H10.5a.5.5 0 010 1H4.707l1.147 1.146a.5.5 0 11-.708.708l-2-2a.5.5 0 010-.708l2-2a.5.5 0 11.708.708z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 0a7 7 0 110 14A7 7 0 017 0zm0 1a6 6 0 110 12A6 6 0 017 1z",
      fill: e7
    }
  )
));
var KD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M3.5 6.5h5.793L8.146 5.354a.5.5 0 11.708-.708l2 2a.5.5 0 010 .708l-2 2a.5.5 0 11-.708-.708L9.293 7.5H3.5a.5.5 0 010-1z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 14A7 7 0 117 0a7 7 0 010 14zm0-1A6 6 0 117 1a6 6 0 010 12z",
      fill: e7
    }
  )
));
var ZD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7.092.5H7a6.5 6.5 0 106.41 7.583.5.5 0 10-.986-.166A5.495 5.495 0 017 12.5a5.5 5.5 0 010-11h.006a5.5 5.5 0 014.894 3H10a.5.5 0 000 1h3a.5.5 0 00.5-.5V2a.5.5 0 00-1 0v1.535A6.495 6.495 0 007.092.5z",
      fill: e7
    }
  )
));
var JD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7A7 7 0 100 7a7 7 0 0014 0zm-6.535 5.738c-.233.23-.389.262-.465.262-.076 0-.232-.032-.465-.262-.238-.234-.497-.623-.737-1.182-.434-1.012-.738-2.433-.79-4.056h3.984c-.052 1.623-.356 3.043-.79 4.056-.24.56-.5.948-.737 1.182zM8.992 6.5H5.008c.052-1.623.356-3.044.79-4.056.24-.56.5-.948.737-1.182C6.768 1.032 6.924 1 7 1c.076 0 .232.032.465.262.238.234.497.623.737 1.182.434 1.012.738 2.433.79 4.056zm1 1c-.065 2.176-.558 4.078-1.282 5.253A6.005 6.005 0 0012.98 7.5H9.992zm2.987-1H9.992c-.065-2.176-.558-4.078-1.282-5.253A6.005 6.005 0 0112.98 6.5zm-8.971 0c.065-2.176.558-4.078 1.282-5.253A6.005 6.005 0 001.02 6.5h2.988zm-2.987 1a6.005 6.005 0 004.27 5.253C4.565 11.578 4.072 9.676 4.007 7.5H1.02z",
      fill: e7
    }
  )
));
var QD = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M10.087 3.397L5.95 5.793a.374.374 0 00-.109.095.377.377 0 00-.036.052l-2.407 4.147a.374.374 0 00-.004.384c.104.179.334.24.513.136l4.142-2.404a.373.373 0 00.148-.143l2.406-4.146a.373.373 0 00-.037-.443.373.373 0 00-.478-.074zM4.75 9.25l2.847-1.652-1.195-1.195L4.75 9.25z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7A7 7 0 110 7a7 7 0 0114 0zm-1 0A6 6 0 111 7a6 6 0 0112 0z",
      fill: e7
    }
  )
));
var ex = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M0 7a7 7 0 1114 0A7 7 0 010 7zm6.5 3.5v2.48A6.001 6.001 0 011.02 7.5H3.5a.5.5 0 000-1H1.02A6.001 6.001 0 016.5 1.02V3.5a.5.5 0 001 0V1.02a6.001 6.001 0 015.48 5.48H10.5a.5.5 0 000 1h2.48a6.002 6.002 0 01-5.48 5.48V10.5a.5.5 0 00-1 0z",
      fill: e7
    }
  )
));
var tx = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M9 5a2 2 0 11-4 0 2 2 0 014 0zM8 5a1 1 0 11-2 0 1 1 0 012 0z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M12 5A5 5 0 002 5c0 2.633 2.273 6.154 4.65 8.643.192.2.508.2.7 0C9.726 11.153 12 7.633 12 5zM7 1a4 4 0 014 4c0 1.062-.471 2.42-1.303 3.88-.729 1.282-1.69 2.562-2.697 3.67-1.008-1.108-1.968-2.388-2.697-3.67C3.47 7.42 3 6.063 3 5a4 4 0 014-4z",
      fill: e7
    }
  )
));
var rx = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7 2a.5.5 0 01.5.5v4H10a.5.5 0 010 1H7a.5.5 0 01-.5-.5V2.5A.5.5 0 017 2z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 14A7 7 0 107 0a7 7 0 000 14zm0-1A6 6 0 107 1a6 6 0 000 12z",
      fill: e7
    }
  )
));
var nx = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M9.79 4.093a.5.5 0 01.117.698L7.91 7.586a1 1 0 11-.814-.581l1.997-2.796a.5.5 0 01.698-.116z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M2.069 12.968a7 7 0 119.863 0A12.962 12.962 0 007 12c-1.746 0-3.41.344-4.931.968zm9.582-1.177a6 6 0 10-9.301 0A13.98 13.98 0 017 11c1.629 0 3.194.279 4.65.791z",
      fill: e7
    }
  )
));
var ox = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("path", { d: "M7.5 4.5a.5.5 0 00-1 0v2.634a1 1 0 101 0V4.5z", fill: e7 }),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M5.5.5A.5.5 0 016 0h2a.5.5 0 010 1h-.5v1.02a5.973 5.973 0 013.374 1.398l.772-.772a.5.5 0 01.708.708l-.772.772A6 6 0 116.5 2.02V1H6a.5.5 0 01-.5-.5zM7 3a5 5 0 100 10A5 5 0 007 3z",
      fill: e7
    }
  )
));
var ax = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7.354 1.146l5.5 5.5a.5.5 0 01-.708.708L12 7.207V12.5a.5.5 0 01-.5.5h-3a.5.5 0 01-.5-.5V9H6v3.5a.5.5 0 01-.5.5h-3a.5.5 0 01-.5-.5V7.207l-.146.147a.5.5 0 11-.708-.708l1-1 4.5-4.5a.5.5 0 01.708 0zM3 6.207V12h2V8.5a.5.5 0 01.5-.5h3a.5.5 0 01.5.5V12h2V6.207l-4-4-4 4z",
      fill: e7
    }
  )
));
var ix = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1.213 4.094a.5.5 0 01.056-.034l5.484-2.995a.498.498 0 01.494 0L12.73 4.06a.507.507 0 01.266.389.498.498 0 01-.507.555H1.51a.5.5 0 01-.297-.91zm2.246-.09h7.082L7 2.07 3.459 4.004z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M4 6a.5.5 0 00-1 0v5a.5.5 0 001 0V6zM11 6a.5.5 0 00-1 0v5a.5.5 0 001 0V6zM5.75 5.5a.5.5 0 01.5.5v5a.5.5 0 01-1 0V6a.5.5 0 01.5-.5zM8.75 6a.5.5 0 00-1 0v5a.5.5 0 001 0V6zM1.5 12.504a.5.5 0 01.5-.5h10a.5.5 0 010 1H2a.5.5 0 01-.5-.5z",
      fill: e7
    }
  )
));
var lx = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement("g", { clipPath: "url(#prefix__clip0_1107_3594)" }, s.createElement(
    "path",
    {
      d: "M11.451.537l.01 12.922h0L7.61 8.946a1.077 1.077 0 00-.73-.374L.964 8.087 11.45.537h0z",
      stroke: e7,
      strokeWidth: 1.077
    }
  )),
  s.createElement("defs", null, s.createElement("clipPath", { id: "prefix__clip0_1107_3594" }, s.createElement(
    "path",
    { fill: "#fff", d: "M0 0h14v14H0z" }
  )))
));
var sx = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7A7 7 0 110 7a7 7 0 0114 0zM2.671 11.155c.696-1.006 2.602-1.816 3.194-1.91.226-.036.232-.658.232-.658s-.665-.658-.81-1.544c-.39 0-.63-.94-.241-1.272a2.578 2.578 0 00-.012-.13c-.066-.607-.28-2.606 1.965-2.606 2.246 0 2.031 2 1.966 2.606l-.012.13c.39.331.149 1.272-.24 1.272-.146.886-.81 1.544-.81 1.544s.004.622.23.658c.593.094 2.5.904 3.195 1.91a6 6 0 10-8.657 0z",
      fill: e7
    }
  )
));
var ux = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M7.275 13.16a11.388 11.388 0 005.175-1.232v-.25c0-1.566-3.237-2.994-4.104-3.132-.27-.043-.276-.783-.276-.783s.791-.783.964-1.836c.463 0 .75-1.119.286-1.513C9.34 4 9.916 1.16 6.997 1.16c-2.92 0-2.343 2.84-2.324 3.254-.463.394-.177 1.513.287 1.513.172 1.053.963 1.836.963 1.836s-.006.74-.275.783c-.858.136-4.036 1.536-4.103 3.082a11.388 11.388 0 005.73 1.532z",
      fill: e7
    }
  )
));
var cx = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M1.183 11.906a10.645 10.645 0 01-1.181-.589c.062-1.439 3.02-2.74 3.818-2.868.25-.04.256-.728.256-.728s-.736-.729-.896-1.709c-.432 0-.698-1.041-.267-1.408A2.853 2.853 0 002.9 4.46c-.072-.672-.31-2.884 2.175-2.884 2.486 0 2.248 2.212 2.176 2.884-.007.062-.012.112-.014.144.432.367.165 1.408-.266 1.408-.16.98-.896 1.709-.896 1.709s.005.688.256.728c.807.129 3.82 1.457 3.82 2.915v.233a10.598 10.598 0 01-4.816 1.146c-1.441 0-2.838-.282-4.152-.837zM11.5 2.16a.5.5 0 01.5.5v1.5h1.5a.5.5 0 010 1H12v1.5a.5.5 0 01-1 0v-1.5H9.5a.5.5 0 110-1H11v-1.5a.5.5 0 01.5-.5z",
      fill: e7
    }
  )
));
var px = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M9.21 11.623a10.586 10.586 0 01-4.031.787A10.585 10.585 0 010 11.07c.06-1.354 2.933-2.578 3.708-2.697.243-.038.249-.685.249-.685s-.715-.685-.87-1.607c-.42 0-.679-.979-.26-1.323a2.589 2.589 0 00-.013-.136c-.07-.632-.3-2.712 2.113-2.712 2.414 0 2.183 2.08 2.113 2.712-.007.059-.012.105-.013.136.419.344.16 1.323-.259 1.323-.156.922-.87 1.607-.87 1.607s.005.647.248.685c.784.12 3.71 1.37 3.71 2.74v.22c-.212.103-.427.2-.646.29z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      d: "M8.81 8.417a9.643 9.643 0 00-.736-.398c.61-.42 1.396-.71 1.7-.757.167-.026.171-.471.171-.471s-.491-.471-.598-1.104c-.288 0-.466-.674-.178-.91-.001-.022-.005-.053-.01-.094-.048-.434-.206-1.864 1.453-1.864 1.66 0 1.5 1.43 1.453 1.864l-.01.094c.289.236.11.91-.178.91-.107.633-.598 1.104-.598 1.104s.004.445.171.47c.539.084 2.55.942 2.55 1.884v.628a10.604 10.604 0 01-3.302.553 2.974 2.974 0 00-.576-.879c-.375-.408-.853-.754-1.312-1.03z",
      fill: e7
    }
  )
));
var dx = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M9.106 7.354c-.627.265-1.295.4-1.983.4a5.062 5.062 0 01-2.547-.681c.03-.688 1.443-1.31 1.824-1.37.12-.02.122-.348.122-.348s-.351-.348-.428-.816c-.206 0-.333-.498-.127-.673 0-.016-.003-.04-.007-.07C5.926 3.477 5.812 2.42 7 2.42c1.187 0 1.073 1.057 1.039 1.378l-.007.069c.207.175.08.673-.127.673-.076.468-.428.816-.428.816s.003.329.122.348c.386.06 1.825.696 1.825 1.392v.111c-.104.053-.21.102-.318.148zM3.75 11.25A.25.25 0 014 11h6a.25.25 0 110 .5H4a.25.25 0 01-.25-.25zM4 9a.25.25 0 000 .5h6a.25.25 0 100-.5H4z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M1 .5a.5.5 0 01.5-.5h11a.5.5 0 01.5.5v13a.5.5 0 01-.5.5h-11a.5.5 0 01-.5-.5V.5zM2 13V1h10v12H2z",
      fill: e7
    }
  )
));
var fx = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M3.968 8.75a.5.5 0 00-.866.5A4.498 4.498 0 007 11.5c1.666 0 3.12-.906 3.898-2.25a.5.5 0 10-.866-.5A3.498 3.498 0 017 10.5a3.498 3.498 0 01-3.032-1.75zM5.5 5a1 1 0 11-2 0 1 1 0 012 0zM9.5 6a1 1 0 100-2 1 1 0 000 2z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7A7 7 0 110 7a7 7 0 0114 0zm-1 0A6 6 0 111 7a6 6 0 0112 0z",
      fill: e7
    }
  )
));
var hx = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M4.5 9a.5.5 0 000 1h5a.5.5 0 000-1h-5zM5.5 5a1 1 0 11-2 0 1 1 0 012 0zM9.5 6a1 1 0 100-2 1 1 0 000 2z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7A7 7 0 110 7a7 7 0 0114 0zm-1 0A6 6 0 111 7a6 6 0 0112 0z",
      fill: e7
    }
  )
));
var mx = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M3.968 10.25a.5.5 0 01-.866-.5A4.498 4.498 0 017 7.5c1.666 0 3.12.906 3.898 2.25a.5.5 0 11-.866.5A3.498 3.498 0 007 8.5a3.498 3.498 0 00-3.032 1.75zM5.5 5a1 1 0 11-2 0 1 1 0 012 0zM9.5 6a1 1 0 100-2 1 1 0 000 2z",
      fill: e7
    }
  ),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M14 7A7 7 0 110 7a7 7 0 0114 0zm-1 0A6 6 0 111 7a6 6 0 0112 0z",
      fill: e7
    }
  )
));
var gx = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 14 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      d: "M3.526 4.842a.5.5 0 01.632-.316l2.051.684a2.5 2.5 0 001.582 0l2.05-.684a.5.5 0 01.317.948l-2.453.818a.3.3 0 00-.205.285v.243a4.5 4.5 0 00.475 2.012l.972 1.944a.5.5 0 11-.894.448L7 9.118l-1.053 2.106a.5.5 0 11-.894-.447l.972-1.945A4.5 4.5 0 006.5 6.82v-.243a.3.3 0 00-.205-.285l-2.453-.818a.5.5 0 01-.316-.632z",
      fill: e7
    }
  ),
  s.createElement("path", { d: "M7 4.5a1 1 0 100-2 1 1 0 000 2z", fill: e7 }),
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 14A7 7 0 107 0a7 7 0 000 14zm0-1A6 6 0 107 1a6 6 0 000 12z",
      fill: e7
    }
  )
));
var vx = s.forwardRef(({ color: e7 = "currentColor", size: t = 14, ...r }, n) => s.createElement(
  "svg",
  {
    width: t,
    height: t,
    viewBox: "0 0 15 14",
    fill: "none",
    xmlns: "http://www.w3.org/2000/svg",
    ref: n,
    ...r
  },
  s.createElement(
    "path",
    {
      fillRule: "evenodd",
      clipRule: "evenodd",
      d: "M7 14A7 7 0 107 0a7 7 0 000 14zM8 3.5a1 1 0 11-2 0 1 1 0 012 0zM3.526 4.842a.5.5 0 01.632-.316l2.051.684a2.5 2.5 0 001.582 0l2.05-.684a.5.5 0 01.317.948l-2.453.818a.3.3 0 00-.205.285v.243a4.5 4.5 0 00.475 2.012l.972 1.944a.5.5 0 11-.894.448L7 9.118l-1.053 2.106a.5.5 0 11-.894-.447l.972-1.945A4.5 4.5 0 006.5 6.82v-.243a.3.3 0 00-.205-.285l-2.453-.818a.5.5 0 01-.316-.632z",
      fill: e7
    }
  )
));
var wx = 0;
var bx = a2((e7) => e7.button === wx && !e7.altKey && !e7.ctrlKey && !e7.metaKey && !e7.shiftKey, "isPlainLeftClick");
var yx = a2(
  (e7, t) => {
    bx(e7) && (e7.preventDefault(), t(e7));
  },
  "cancelled"
);
var Dx = Tr.span(
  ({ withArrow: e7 }) => e7 ? {
    "> svg:last-of-type": {
      height: "0.7em",
      width: "0.7em",
      marginRight: 0,
      marginLeft: "0.25em",
      bottom: "auto",
      verticalAlign: "inherit"
    }
  } : {},
  ({ containsIcon: e7 }) => e7 ? {
    svg: {
      height: "1em",
      width: "1em",
      verticalAlign: "middle",
      position: "relative",
      bottom: 0,
      marginRight: 0
    }
  } : {}
);
var xx = Tr.a(
  ({ theme: e7 }) => ({
    display: "inline-block",
    transition: "all 150ms ease-out",
    textDecoration: "none",
    color: e7.color.secondary,
    "&:hover, &:focus": {
      cursor: "pointer",
      color: Yt2(0.07, e7.color.secondary),
      "svg path:not([fill])": {
        fill: Yt2(0.07, e7.color.secondary)
      }
    },
    "&:active": {
      color: Yt2(0.1, e7.color.secondary),
      "svg path:not([fill])": {
        fill: Yt2(0.1, e7.color.secondary)
      }
    },
    svg: {
      display: "inline-block",
      height: "1em",
      width: "1em",
      verticalAlign: "text-top",
      position: "relative",
      bottom: "-0.125em",
      marginRight: "0.4em",
      "& path": {
        fill: e7.color.secondary
      }
    }
  }),
  ({ theme: e7, secondary: t, tertiary: r }) => {
    let n;
    return t && (n = [e7.textMutedColor, e7.color.dark, e7.color.darker]), r && (n = [e7.color.dark, e7.color.darkest, e7.textMutedColor]), n ? {
      color: n[0],
      "svg path:not([fill])": {
        fill: n[0]
      },
      "&:hover": {
        color: n[1],
        "svg path:not([fill])": {
          fill: n[1]
        }
      },
      "&:active": {
        color: n[2],
        "svg path:not([fill])": {
          fill: n[2]
        }
      }
    } : {};
  },
  ({ nochrome: e7 }) => e7 ? {
    color: "inherit",
    "&:hover, &:active": {
      color: "inherit",
      textDecoration: "underline"
    }
  } : {},
  ({ theme: e7, inverse: t }) => t ? {
    color: e7.color.lightest,
    ":not([fill])": {
      fill: e7.color.lightest
    },
    "&:hover": {
      color: e7.color.lighter,
      "svg path:not([fill])": {
        fill: e7.color.lighter
      }
    },
    "&:active": {
      color: e7.color.light,
      "svg path:not([fill])": {
        fill: e7.color.light
      }
    }
  } : {},
  ({ isButton: e7 }) => e7 ? {
    border: 0,
    borderRadius: 0,
    background: "none",
    padding: 0,
    fontSize: "inherit"
  } : {}
);
var ju = a2(({
  cancel: e7 = true,
  children: t,
  onClick: r = void 0,
  withArrow: n = false,
  containsIcon: o = false,
  className: i = void 0,
  style: l7 = void 0,
  ...u6
}) => import_react15.default.createElement(
  xx,
  {
    ...u6,
    onClick: r && e7 ? (c) => yx(c, r) : r,
    className: i
  },
  import_react15.default.createElement(Dx, { withArrow: n, containsIcon: o }, t, n && import_react15.default.createElement(zu, null))
), "Link");
var Ex = Tr.div(({ theme: e7 }) => ({
  fontSize: `${e7.typography.size.s2}px`,
  lineHeight: "1.6",
  h1: {
    fontSize: `${e7.typography.size.l1}px`,
    fontWeight: e7.typography.weight.bold
  },
  h2: {
    fontSize: `${e7.typography.size.m2}px`,
    borderBottom: `1px solid ${e7.appBorderColor}`
  },
  h3: {
    fontSize: `${e7.typography.size.m1}px`
  },
  h4: {
    fontSize: `${e7.typography.size.s3}px`
  },
  h5: {
    fontSize: `${e7.typography.size.s2}px`
  },
  h6: {
    fontSize: `${e7.typography.size.s2}px`,
    color: e7.color.dark
  },
  "pre:not(.prismjs)": {
    background: "transparent",
    border: "none",
    borderRadius: 0,
    padding: 0,
    margin: 0
  },
  "pre pre, pre.prismjs": {
    padding: 15,
    margin: 0,
    whiteSpace: "pre-wrap",
    color: "inherit",
    fontSize: "13px",
    lineHeight: "19px"
  },
  "pre pre code, pre.prismjs code": {
    color: "inherit",
    fontSize: "inherit"
  },
  "pre code": {
    margin: 0,
    padding: 0,
    whiteSpace: "pre",
    border: "none",
    background: "transparent"
  },
  "pre code, pre tt": {
    backgroundColor: "transparent",
    border: "none"
  },
  /* GitHub inspired Markdown styles loosely from https://gist.github.com/tuzz/3331384 */
  "body > *:first-of-type": {
    marginTop: "0 !important"
  },
  "body > *:last-child": {
    marginBottom: "0 !important"
  },
  a: {
    color: e7.color.secondary,
    textDecoration: "none"
  },
  "a.absent": {
    color: "#cc0000"
  },
  "a.anchor": {
    display: "block",
    paddingLeft: 30,
    marginLeft: -30,
    cursor: "pointer",
    position: "absolute",
    top: 0,
    left: 0,
    bottom: 0
  },
  "h1, h2, h3, h4, h5, h6": {
    margin: "20px 0 10px",
    padding: 0,
    cursor: "text",
    position: "relative",
    "&:first-of-type": {
      marginTop: 0,
      paddingTop: 0
    },
    "&:hover a.anchor": {
      textDecoration: "none"
    },
    "& tt, & code": {
      fontSize: "inherit"
    }
  },
  "h1:first-of-type + h2": {
    marginTop: 0,
    paddingTop: 0
  },
  "p, blockquote, ul, ol, dl, li, table, pre": {
    margin: "15px 0"
  },
  hr: {
    border: "0 none",
    borderTop: `1px solid ${e7.appBorderColor}`,
    height: 4,
    padding: 0
  },
  "body > h1:first-of-type, body > h2:first-of-type, body > h3:first-of-type, body > h4:first-of-type, body > h5:first-of-type, body > h6:first-of-type": {
    marginTop: 0,
    paddingTop: 0
  },
  "body > h1:first-of-type + h2": {
    marginTop: 0,
    paddingTop: 0
  },
  "a:first-of-type h1, a:first-of-type h2, a:first-of-type h3, a:first-of-type h4, a:first-of-type h5, a:first-of-type h6": {
    marginTop: 0,
    paddingTop: 0
  },
  "h1 p, h2 p, h3 p, h4 p, h5 p, h6 p": {
    marginTop: 0
  },
  "li p.first": {
    display: "inline-block"
  },
  "ul, ol": {
    paddingLeft: 30,
    "& :first-of-type": {
      marginTop: 0
    },
    "& :last-child": {
      marginBottom: 0
    }
  },
  dl: {
    padding: 0
  },
  "dl dt": {
    fontSize: "14px",
    fontWeight: "bold",
    fontStyle: "italic",
    margin: "0 0 15px",
    padding: "0 15px",
    "&:first-of-type": {
      padding: 0
    },
    "& > :first-of-type": {
      marginTop: 0
    },
    "& > :last-child": {
      marginBottom: 0
    }
  },
  blockquote: {
    borderLeft: `4px solid ${e7.color.medium}`,
    padding: "0 15px",
    color: e7.color.dark,
    "& > :first-of-type": {
      marginTop: 0
    },
    "& > :last-child": {
      marginBottom: 0
    }
  },
  table: {
    padding: 0,
    borderCollapse: "collapse",
    "& tr": {
      borderTop: `1px solid ${e7.appBorderColor}`,
      backgroundColor: "white",
      margin: 0,
      padding: 0,
      "& th": {
        fontWeight: "bold",
        border: `1px solid ${e7.appBorderColor}`,
        textAlign: "left",
        margin: 0,
        padding: "6px 13px"
      },
      "& td": {
        border: `1px solid ${e7.appBorderColor}`,
        textAlign: "left",
        margin: 0,
        padding: "6px 13px"
      },
      "&:nth-of-type(2n)": {
        backgroundColor: e7.color.lighter
      },
      "& th :first-of-type, & td :first-of-type": {
        marginTop: 0
      },
      "& th :last-child, & td :last-child": {
        marginBottom: 0
      }
    }
  },
  img: {
    maxWidth: "100%"
  },
  "span.frame": {
    display: "block",
    overflow: "hidden",
    "& > span": {
      border: `1px solid ${e7.color.medium}`,
      display: "block",
      float: "left",
      overflow: "hidden",
      margin: "13px 0 0",
      padding: 7,
      width: "auto"
    },
    "& span img": {
      display: "block",
      float: "left"
    },
    "& span span": {
      clear: "both",
      color: e7.color.darkest,
      display: "block",
      padding: "5px 0 0"
    }
  },
  "span.align-center": {
    display: "block",
    overflow: "hidden",
    clear: "both",
    "& > span": {
      display: "block",
      overflow: "hidden",
      margin: "13px auto 0",
      textAlign: "center"
    },
    "& span img": {
      margin: "0 auto",
      textAlign: "center"
    }
  },
  "span.align-right": {
    display: "block",
    overflow: "hidden",
    clear: "both",
    "& > span": {
      display: "block",
      overflow: "hidden",
      margin: "13px 0 0",
      textAlign: "right"
    },
    "& span img": {
      margin: 0,
      textAlign: "right"
    }
  },
  "span.float-left": {
    display: "block",
    marginRight: 13,
    overflow: "hidden",
    float: "left",
    "& span": {
      margin: "13px 0 0"
    }
  },
  "span.float-right": {
    display: "block",
    marginLeft: 13,
    overflow: "hidden",
    float: "right",
    "& > span": {
      display: "block",
      overflow: "hidden",
      margin: "13px auto 0",
      textAlign: "right"
    }
  },
  "code, tt": {
    margin: "0 2px",
    padding: "0 5px",
    whiteSpace: "nowrap",
    border: `1px solid ${e7.color.mediumlight}`,
    backgroundColor: e7.color.lighter,
    borderRadius: 3,
    color: e7.base === "dark" ? e7.color.darkest : e7.color.dark
  }
}));
var Vr2 = [];
var So2 = null;
var _k = (0, import_react16.lazy)(async () => {
  let { SyntaxHighlighter: e7 } = await Promise.resolve().then(() => (ca(), gu));
  return Vr2.length > 0 && (Vr2.forEach((t) => {
    e7.registerLanguage(...t);
  }), Vr2 = []), So2 === null && (So2 = e7), {
    default: a2((t) => import_react16.default.createElement(e7, { ...t }), "default")
  };
});
var Pk = (0, import_react16.lazy)(async () => {
  let [{ SyntaxHighlighter: e7 }, { formatter: t }] = await Promise.all([
    Promise.resolve().then(() => (ca(), gu)),
    Promise.resolve().then(() => (gg(), mg))
  ]);
  return Vr2.length > 0 && (Vr2.forEach((r) => {
    e7.registerLanguage(...r);
  }), Vr2 = []), So2 === null && (So2 = e7), {
    default: a2((r) => import_react16.default.createElement(e7, { ...r, formatter: t }), "default")
  };
});
var wg = a2((e7) => import_react16.default.createElement(import_react16.Suspense, { fallback: import_react16.default.createElement("div", null) }, e7.format !== false ? import_react16.default.createElement(Pk, { ...e7 }) : import_react16.default.createElement(_k, { ...e7 })), "SyntaxHighlighter");
wg.registerLanguage = (...e7) => {
  if (So2 !== null) {
    So2.registerLanguage(...e7);
    return;
  }
  Vr2.push(e7);
};
ca();
iu();
var Ll = {};
an2(Ll, {
  Close: () => _0,
  Content: () => I0,
  Description: () => M0,
  Dialog: () => hv,
  DialogClose: () => Sv,
  DialogContent: () => yv,
  DialogDescription: () => Ev,
  DialogOverlay: () => bv,
  DialogPortal: () => wv,
  DialogTitle: () => Cv,
  DialogTrigger: () => mv,
  Overlay: () => L0,
  Portal: () => T0,
  Root: () => k0,
  Title: () => B0,
  Trigger: () => RL,
  WarningProvider: () => SL,
  createDialogScope: () => mL
});
qe2();
function Et2(e7, t, { checkForDefaultPrevented: r = true } = {}) {
  return a2(function(o) {
    if (e7 == null ? void 0 : e7(o), r === false || !o.defaultPrevented) return t == null ? void 0 : t(o);
  }, "handleEvent");
}
a2(Et2, "$e42e1063c40fb3ef$export$b9ecd428b558ff10");
function $k(e7, t) {
  typeof e7 == "function" ? e7(t) : e7 != null && (e7.current = t);
}
a2($k, "$6ed0406888f73fc4$var$setRef");
function Ia2(...e7) {
  return (t) => e7.forEach(
    (r) => $k(r, t)
  );
}
a2(Ia2, "$6ed0406888f73fc4$export$43e446d32b3d21af");
function St2(...e7) {
  return (0, import_react19.useCallback)(Ia2(...e7), e7);
}
a2(St2, "$6ed0406888f73fc4$export$c7b2cbe3552a0d05");
function Dg(e7, t) {
  let r = (0, import_react20.createContext)(t);
  function n(i) {
    let { children: l7, ...u6 } = i, c = (0, import_react20.useMemo)(
      () => u6,
      Object.values(u6)
    );
    return (0, import_react20.createElement)(r.Provider, {
      value: c
    }, l7);
  }
  a2(n, "Provider");
  function o(i) {
    let l7 = (0, import_react20.useContext)(r);
    if (l7) return l7;
    if (t !== void 0) return t;
    throw new Error(`\`${i}\` must be used within \`${e7}\``);
  }
  return a2(o, "useContext"), n.displayName = e7 + "Provider", [
    n,
    o
  ];
}
a2(Dg, "$c512c27ab02ef895$export$fd42f52fd3ae1109");
function xg(e7, t = []) {
  let r = [];
  function n(i, l7) {
    let u6 = (0, import_react20.createContext)(l7), c = r.length;
    r = [
      ...r,
      l7
    ];
    function p(h7) {
      let { scope: f, children: v7, ...b } = h7, m = (f == null ? void 0 : f[e7][c]) || u6, g7 = (0, import_react20.useMemo)(
        () => b,
        Object.values(b)
      );
      return (0, import_react20.createElement)(m.Provider, {
        value: g7
      }, v7);
    }
    a2(p, "Provider");
    function d(h7, f) {
      let v7 = (f == null ? void 0 : f[e7][c]) || u6, b = (0, import_react20.useContext)(v7);
      if (b) return b;
      if (l7 !== void 0) return l7;
      throw new Error(`\`${h7}\` must be used within \`${i}\``);
    }
    return a2(d, "useContext"), p.displayName = i + "Provider", [
      p,
      d
    ];
  }
  a2(n, "$c512c27ab02ef895$export$fd42f52fd3ae1109");
  let o = a2(() => {
    let i = r.map((l7) => (0, import_react20.createContext)(l7));
    return a2(function(u6) {
      let c = (u6 == null ? void 0 : u6[e7]) || i;
      return (0, import_react20.useMemo)(
        () => ({
          [`__scope${e7}`]: {
            ...u6,
            [e7]: c
          }
        }),
        [
          u6,
          c
        ]
      );
    }, "useScope");
  }, "createScope");
  return o.scopeName = e7, [
    n,
    zk(o, ...t)
  ];
}
a2(xg, "$c512c27ab02ef895$export$50c7b4e9d9f19c1");
function zk(...e7) {
  let t = e7[0];
  if (e7.length === 1) return t;
  let r = a2(() => {
    let n = e7.map(
      (o) => ({
        useScope: o(),
        scopeName: o.scopeName
      })
    );
    return a2(function(i) {
      let l7 = n.reduce((u6, { useScope: c, scopeName: p }) => {
        let h7 = c(i)[`__scope${p}`];
        return {
          ...u6,
          ...h7
        };
      }, {});
      return (0, import_react20.useMemo)(
        () => ({
          [`__scope${t.scopeName}`]: l7
        }),
        [
          l7
        ]
      );
    }, "useComposedScopes");
  }, "createScope1");
  return r.scopeName = t.scopeName, r;
}
a2(zk, "$c512c27ab02ef895$var$composeContextScopes");
var Ba2 = (globalThis == null ? void 0 : globalThis.document) ? import_react21.useLayoutEffect : () => {
};
var Nk = wl.useId || (() => {
});
var jk = 0;
function bl(e7) {
  let [t, r] = wl.useState(Nk());
  return Ba2(() => {
    e7 || r(
      (n) => n ?? String(jk++)
    );
  }, [
    e7
  ]), e7 || (t ? `radix-${t}` : "");
}
a2(bl, "$1746a345f3d73bb7$export$f680877a34711e37");
function it2(e7) {
  let t = (0, import_react23.useRef)(e7);
  return (0, import_react23.useEffect)(() => {
    t.current = e7;
  }), (0, import_react23.useMemo)(
    () => (...r) => {
      var n;
      return (n = t.current) === null || n === void 0 ? void 0 : n.call(t, ...r);
    },
    []
  );
}
a2(it2, "$b1b2314f5f9a1d84$export$25bec8c6f54ee79a");
function Cg({ prop: e7, defaultProp: t, onChange: r = a2(() => {
}, "onChange") }) {
  let [n, o] = Kk({
    defaultProp: t,
    onChange: r
  }), i = e7 !== void 0, l7 = i ? e7 : n, u6 = it2(r), c = (0, import_react22.useCallback)((p) => {
    if (i) {
      let h7 = typeof p == "function" ? p(e7) : p;
      h7 !== e7 && u6(h7);
    } else o(p);
  }, [
    i,
    e7,
    o,
    u6
  ]);
  return [
    l7,
    c
  ];
}
a2(Cg, "$71cd76cc60e0454e$export$6f32135080cb4c3");
function Kk({ defaultProp: e7, onChange: t }) {
  let r = (0, import_react22.useState)(e7), [n] = r, o = (0, import_react22.useRef)(n), i = it2(t);
  return (0, import_react22.useEffect)(() => {
    o.current !== n && (i(n), o.current = n);
  }, [
    n,
    o,
    i
  ]), r;
}
a2(Kk, "$71cd76cc60e0454e$var$useUncontrolledState");
qe2();
qe2();
qe2();
var r0 = (0, import_react26.forwardRef)((e7, t) => {
  let { children: r, ...n } = e7, o = import_react26.Children.toArray(r), i = o.find(Qk);
  if (i) {
    let l7 = i.props.children, u6 = o.map((c) => c === i ? import_react26.Children.count(l7) > 1 ? import_react26.Children.only(null) : (0, import_react26.isValidElement)(l7) ? l7.props.children : null : c);
    return (0, import_react26.createElement)(t0, H2({}, n, {
      ref: t
    }), (0, import_react26.isValidElement)(l7) ? (0, import_react26.cloneElement)(l7, void 0, u6) : null);
  }
  return (0, import_react26.createElement)(t0, H2({}, n, {
    ref: t
  }), r);
});
r0.displayName = "Slot";
var t0 = (0, import_react26.forwardRef)((e7, t) => {
  let { children: r, ...n } = e7;
  return (0, import_react26.isValidElement)(r) ? (0, import_react26.cloneElement)(r, {
    ...eT(n, r.props),
    ref: t ? Ia2(t, r.ref) : r.ref
  }) : import_react26.Children.count(r) > 1 ? import_react26.Children.only(null) : null;
});
t0.displayName = "SlotClone";
var Jk = a2(({ children: e7 }) => (0, import_react26.createElement)(import_react26.Fragment, null, e7), "$5e63c961fc1ce211$export$d9f1ccf0bdb05d45");
function Qk(e7) {
  return (0, import_react26.isValidElement)(e7) && e7.type === Jk;
}
a2(Qk, "$5e63c961fc1ce211$var$isSlottable");
function eT(e7, t) {
  let r = {
    ...t
  };
  for (let n in t) {
    let o = e7[n], i = t[n];
    /^on[A-Z]/.test(n) ? o && i ? r[n] = (...u6) => {
      i(...u6), o(...u6);
    } : o && (r[n] = o) : n === "style" ? r[n] = {
      ...o,
      ...i
    } : n === "className" && (r[n] = [
      o,
      i
    ].filter(Boolean).join(" "));
  }
  return {
    ...e7,
    ...r
  };
}
a2(eT, "$5e63c961fc1ce211$var$mergeProps");
var aT = [
  "a",
  "button",
  "div",
  "form",
  "h2",
  "h3",
  "img",
  "input",
  "label",
  "li",
  "nav",
  "ol",
  "p",
  "span",
  "svg",
  "ul"
];
var Ze2 = aT.reduce((e7, t) => {
  let r = (0, import_react25.forwardRef)((n, o) => {
    let { asChild: i, ...l7 } = n, u6 = i ? r0 : t;
    return (0, import_react25.useEffect)(() => {
      window[Symbol.for("radix-ui")] = true;
    }, []), (0, import_react25.createElement)(u6, H2({}, l7, {
      ref: o
    }));
  });
  return r.displayName = `Primitive.${t}`, {
    ...e7,
    [t]: r
  };
}, {});
function Rg(e7, t) {
  e7 && (0, import_react_dom2.flushSync)(
    () => e7.dispatchEvent(t)
  );
}
a2(Rg, "$8927f6f2acc4f386$export$6d1a0317bde7de7f");
function Ag(e7, t = globalThis == null ? void 0 : globalThis.document) {
  let r = it2(e7);
  (0, import_react27.useEffect)(() => {
    let n = a2((o) => {
      o.key === "Escape" && r(o);
    }, "handleKeyDown");
    return t.addEventListener("keydown", n), () => t.removeEventListener("keydown", n);
  }, [
    r,
    t
  ]);
}
a2(Ag, "$addc16e1bbe58fd0$export$3a72a57244d6e765");
var o0 = "dismissableLayer.update";
var pT = "dismissableLayer.pointerDownOutside";
var dT = "dismissableLayer.focusOutside";
var kg;
var fT = (0, import_react24.createContext)(
  {
    layers: /* @__PURE__ */ new Set(),
    layersWithOutsidePointerEventsDisabled: /* @__PURE__ */ new Set(),
    branches: /* @__PURE__ */ new Set()
  }
);
var Lg = (0, import_react24.forwardRef)((e7, t) => {
  var r;
  let {
    disableOutsidePointerEvents: n = false,
    onEscapeKeyDown: o,
    onPointerDownOutside: i,
    onFocusOutside: l7,
    onInteractOutside: u6,
    onDismiss: c,
    ...p
  } = e7, d = (0, import_react24.useContext)(fT), [h7, f] = (0, import_react24.useState)(null), v7 = (r = h7 == null ? void 0 : h7.ownerDocument) !== null && r !== void 0 ? r : globalThis == null ? void 0 : globalThis.document, [, b] = (0, import_react24.useState)({}), m = St2(
    t,
    (R) => f(R)
  ), g7 = Array.from(d.layers), [y] = [
    ...d.layersWithOutsidePointerEventsDisabled
  ].slice(-1), w5 = g7.indexOf(y), D7 = h7 ? g7.indexOf(h7) : -1, x7 = d.layersWithOutsidePointerEventsDisabled.size > 0, C7 = D7 >= w5, E7 = hT((R) => {
    let A = R.target, k4 = [
      ...d.branches
    ].some(
      (B6) => B6.contains(A)
    );
    !C7 || k4 || (i == null ? void 0 : i(R), u6 == null ? void 0 : u6(R), R.defaultPrevented || (c == null ? void 0 : c()));
  }, v7), S4 = mT((R) => {
    let A = R.target;
    [
      ...d.branches
    ].some(
      (B6) => B6.contains(A)
    ) || (l7 == null ? void 0 : l7(R), u6 == null ? void 0 : u6(R), R.defaultPrevented || (c == null ? void 0 : c()));
  }, v7);
  return Ag((R) => {
    D7 === d.layers.size - 1 && (o == null ? void 0 : o(R), !R.defaultPrevented && c && (R.preventDefault(), c()));
  }, v7), (0, import_react24.useEffect)(() => {
    if (h7)
      return n && (d.layersWithOutsidePointerEventsDisabled.size === 0 && (kg = v7.body.style.pointerEvents, v7.body.style.pointerEvents = "none"), d.layersWithOutsidePointerEventsDisabled.add(h7)), d.layers.add(h7), Tg(), () => {
        n && d.layersWithOutsidePointerEventsDisabled.size === 1 && (v7.body.style.pointerEvents = kg);
      };
  }, [
    h7,
    v7,
    n,
    d
  ]), (0, import_react24.useEffect)(() => () => {
    h7 && (d.layers.delete(h7), d.layersWithOutsidePointerEventsDisabled.delete(h7), Tg());
  }, [
    h7,
    d
  ]), (0, import_react24.useEffect)(() => {
    let R = a2(() => b({}), "handleUpdate");
    return document.addEventListener(o0, R), () => document.removeEventListener(o0, R);
  }, []), (0, import_react24.createElement)(Ze2.div, H2({}, p, {
    ref: m,
    style: {
      pointerEvents: x7 ? C7 ? "auto" : "none" : void 0,
      ...e7.style
    },
    onFocusCapture: Et2(e7.onFocusCapture, S4.onFocusCapture),
    onBlurCapture: Et2(e7.onBlurCapture, S4.onBlurCapture),
    onPointerDownCapture: Et2(e7.onPointerDownCapture, E7.onPointerDownCapture)
  }));
});
function hT(e7, t = globalThis == null ? void 0 : globalThis.document) {
  let r = it2(e7), n = (0, import_react24.useRef)(false), o = (0, import_react24.useRef)(() => {
  });
  return (0, import_react24.useEffect)(() => {
    let i = a2((u6) => {
      if (u6.target && !n.current) {
        let p = function() {
          Ig(pT, r, c, {
            discrete: true
          });
        };
        a2(p, "handleAndDispatchPointerDownOutsideEvent");
        let c = {
          originalEvent: u6
        };
        u6.pointerType === "touch" ? (t.removeEventListener("click", o.current), o.current = p, t.addEventListener("click", o.current, {
          once: true
        })) : p();
      } else
        t.removeEventListener("click", o.current);
      n.current = false;
    }, "handlePointerDown"), l7 = window.setTimeout(() => {
      t.addEventListener("pointerdown", i);
    }, 0);
    return () => {
      window.clearTimeout(l7), t.removeEventListener("pointerdown", i), t.removeEventListener("click", o.current);
    };
  }, [
    t,
    r
  ]), {
    // ensures we check React component tree (not just DOM tree)
    onPointerDownCapture: a2(() => n.current = true, "onPointerDownCapture")
  };
}
a2(hT, "$5cb92bef7577960e$var$usePointerDownOutside");
function mT(e7, t = globalThis == null ? void 0 : globalThis.document) {
  let r = it2(e7), n = (0, import_react24.useRef)(false);
  return (0, import_react24.useEffect)(() => {
    let o = a2((i) => {
      i.target && !n.current && Ig(dT, r, {
        originalEvent: i
      }, {
        discrete: false
      });
    }, "handleFocus");
    return t.addEventListener("focusin", o), () => t.removeEventListener("focusin", o);
  }, [
    t,
    r
  ]), {
    onFocusCapture: a2(() => n.current = true, "onFocusCapture"),
    onBlurCapture: a2(() => n.current = false, "onBlurCapture")
  };
}
a2(mT, "$5cb92bef7577960e$var$useFocusOutside");
function Tg() {
  let e7 = new CustomEvent(o0);
  document.dispatchEvent(e7);
}
a2(Tg, "$5cb92bef7577960e$var$dispatchUpdate");
function Ig(e7, t, r, { discrete: n }) {
  let o = r.originalEvent.target, i = new CustomEvent(e7, {
    bubbles: false,
    cancelable: true,
    detail: r
  });
  t && o.addEventListener(e7, t, {
    once: true
  }), n ? Rg(o, i) : o.dispatchEvent(i);
}
a2(Ig, "$5cb92bef7577960e$var$handleAndDispatchCustomEvent");
qe2();
var a0 = "focusScope.autoFocusOnMount";
var i0 = "focusScope.autoFocusOnUnmount";
var _g = {
  bubbles: false,
  cancelable: true
};
var zg = (0, import_react28.forwardRef)((e7, t) => {
  let { loop: r = false, trapped: n = false, onMountAutoFocus: o, onUnmountAutoFocus: i, ...l7 } = e7, [u6, c] = (0, import_react28.useState)(null), p = it2(o), d = it2(i), h7 = (0, import_react28.useRef)(
    null
  ), f = St2(
    t,
    (m) => c(m)
  ), v7 = (0, import_react28.useRef)({
    paused: false,
    pause() {
      this.paused = true;
    },
    resume() {
      this.paused = false;
    }
  }).current;
  (0, import_react28.useEffect)(() => {
    if (n) {
      let m = function(D7) {
        if (v7.paused || !u6) return;
        let x7 = D7.target;
        u6.contains(x7) ? h7.current = x7 : sr2(h7.current, {
          select: true
        });
      }, g7 = function(D7) {
        if (v7.paused || !u6) return;
        let x7 = D7.relatedTarget;
        x7 !== null && (u6.contains(x7) || sr2(h7.current, {
          select: true
        }));
      }, y = function(D7) {
        if (document.activeElement === document.body)
          for (let C7 of D7) C7.removedNodes.length > 0 && sr2(u6);
      };
      a2(m, "handleFocusIn"), a2(g7, "handleFocusOut"), a2(y, "handleMutations"), document.addEventListener("focusin", m), document.addEventListener(
        "focusout",
        g7
      );
      let w5 = new MutationObserver(y);
      return u6 && w5.observe(u6, {
        childList: true,
        subtree: true
      }), () => {
        document.removeEventListener("focusin", m), document.removeEventListener("focusout", g7), w5.disconnect();
      };
    }
  }, [
    n,
    u6,
    v7.paused
  ]), (0, import_react28.useEffect)(() => {
    if (u6) {
      Hg.add(v7);
      let m = document.activeElement;
      if (!u6.contains(m)) {
        let y = new CustomEvent(a0, _g);
        u6.addEventListener(a0, p), u6.dispatchEvent(y), y.defaultPrevented || (yT(ST(Og(u6)), {
          select: true
        }), document.activeElement === m && sr2(u6));
      }
      return () => {
        u6.removeEventListener(a0, p), setTimeout(() => {
          let y = new CustomEvent(i0, _g);
          u6.addEventListener(i0, d), u6.dispatchEvent(y), y.defaultPrevented || sr2(m ?? document.body, {
            select: true
          }), u6.removeEventListener(i0, d), Hg.remove(v7);
        }, 0);
      };
    }
  }, [
    u6,
    p,
    d,
    v7
  ]);
  let b = (0, import_react28.useCallback)((m) => {
    if (!r && !n || v7.paused) return;
    let g7 = m.key === "Tab" && !m.altKey && !m.ctrlKey && !m.metaKey, y = document.activeElement;
    if (g7 && y) {
      let w5 = m.currentTarget, [D7, x7] = DT(w5);
      D7 && x7 ? !m.shiftKey && y === x7 ? (m.preventDefault(), r && sr2(D7, {
        select: true
      })) : m.shiftKey && y === D7 && (m.preventDefault(), r && sr2(x7, {
        select: true
      })) : y === w5 && m.preventDefault();
    }
  }, [
    r,
    n,
    v7.paused
  ]);
  return (0, import_react28.createElement)(Ze2.div, H2({
    tabIndex: -1
  }, l7, {
    ref: f,
    onKeyDown: b
  }));
});
function yT(e7, { select: t = false } = {}) {
  let r = document.activeElement;
  for (let n of e7)
    if (sr2(n, {
      select: t
    }), document.activeElement !== r) return;
}
a2(yT, "$d3863c46a17e8a28$var$focusFirst");
function DT(e7) {
  let t = Og(e7), r = Pg(t, e7), n = Pg(t.reverse(), e7);
  return [
    r,
    n
  ];
}
a2(DT, "$d3863c46a17e8a28$var$getTabbableEdges");
function Og(e7) {
  let t = [], r = document.createTreeWalker(e7, NodeFilter.SHOW_ELEMENT, {
    acceptNode: a2((n) => {
      let o = n.tagName === "INPUT" && n.type === "hidden";
      return n.disabled || n.hidden || o ? NodeFilter.FILTER_SKIP : n.tabIndex >= 0 ? NodeFilter.FILTER_ACCEPT : NodeFilter.FILTER_SKIP;
    }, "acceptNode")
  });
  for (; r.nextNode(); ) t.push(r.currentNode);
  return t;
}
a2(Og, "$d3863c46a17e8a28$var$getTabbableCandidates");
function Pg(e7, t) {
  for (let r of e7)
    if (!xT(r, {
      upTo: t
    })) return r;
}
a2(Pg, "$d3863c46a17e8a28$var$findVisible");
function xT(e7, { upTo: t }) {
  if (getComputedStyle(e7).visibility === "hidden") return true;
  for (; e7; ) {
    if (t !== void 0 && e7 === t) return false;
    if (getComputedStyle(e7).display === "none") return true;
    e7 = e7.parentElement;
  }
  return false;
}
a2(xT, "$d3863c46a17e8a28$var$isHidden");
function CT(e7) {
  return e7 instanceof HTMLInputElement && "select" in e7;
}
a2(CT, "$d3863c46a17e8a28$var$isSelectableInput");
function sr2(e7, { select: t = false } = {}) {
  if (e7 && e7.focus) {
    let r = document.activeElement;
    e7.focus({
      preventScroll: true
    }), e7 !== r && CT(e7) && t && e7.select();
  }
}
a2(sr2, "$d3863c46a17e8a28$var$focus");
var Hg = ET();
function ET() {
  let e7 = [];
  return {
    add(t) {
      let r = e7[0];
      t !== r && (r == null ? void 0 : r.pause()), e7 = $g(e7, t), e7.unshift(t);
    },
    remove(t) {
      var r;
      e7 = $g(e7, t), (r = e7[0]) === null || r === void 0 || r.resume();
    }
  };
}
a2(ET, "$d3863c46a17e8a28$var$createFocusScopesStack");
function $g(e7, t) {
  let r = [
    ...e7
  ], n = r.indexOf(t);
  return n !== -1 && r.splice(n, 1), r;
}
a2($g, "$d3863c46a17e8a28$var$arrayRemove");
function ST(e7) {
  return e7.filter(
    (t) => t.tagName !== "A"
  );
}
a2(ST, "$d3863c46a17e8a28$var$removeLinks");
qe2();
var Ng = (0, import_react29.forwardRef)((e7, t) => {
  var r;
  let { container: n = globalThis == null || (r = globalThis.document) === null || r === void 0 ? void 0 : r.body, ...o } = e7;
  return n ? import_react_dom3.default.createPortal((0, import_react29.createElement)(Ze2.div, H2({}, o, {
    ref: t
  })), n) : null;
});
function PT(e7, t) {
  return (0, import_react30.useReducer)((r, n) => {
    let o = t[r][n];
    return o ?? r;
  }, e7);
}
a2(PT, "$fe963b355347cc68$export$3e6543de14f8614f");
var Pa2 = a2((e7) => {
  let { present: t, children: r } = e7, n = HT(t), o = typeof r == "function" ? r({
    present: n.isPresent
  }) : import_react30.Children.only(r), i = St2(n.ref, o.ref);
  return typeof r == "function" || n.isPresent ? (0, import_react30.cloneElement)(o, {
    ref: i
  }) : null;
}, "$921a889cee6df7e8$export$99c2b779aa4e8b8b");
Pa2.displayName = "Presence";
function HT(e7) {
  let [t, r] = (0, import_react30.useState)(), n = (0, import_react30.useRef)({}), o = (0, import_react30.useRef)(e7), i = (0, import_react30.useRef)("none"), l7 = e7 ? "mounted" : "unmounted", [u6, c] = PT(l7, {
    mounted: {
      UNMOUNT: "unmounted",
      ANIMATION_OUT: "unmountSuspended"
    },
    unmountSuspended: {
      MOUNT: "mounted",
      ANIMATION_END: "unmounted"
    },
    unmounted: {
      MOUNT: "mounted"
    }
  });
  return (0, import_react30.useEffect)(() => {
    let p = Dl(n.current);
    i.current = u6 === "mounted" ? p : "none";
  }, [
    u6
  ]), Ba2(() => {
    let p = n.current, d = o.current;
    if (d !== e7) {
      let f = i.current, v7 = Dl(p);
      e7 ? c("MOUNT") : v7 === "none" || (p == null ? void 0 : p.display) === "none" ? c("UNMOUNT") : c(d && f !== v7 ? "ANIMATION_OUT" : "UNMOUNT"), o.current = e7;
    }
  }, [
    e7,
    c
  ]), Ba2(() => {
    if (t) {
      let p = a2((h7) => {
        let v7 = Dl(n.current).includes(h7.animationName);
        h7.target === t && v7 && (0, import_react_dom4.flushSync)(
          () => c("ANIMATION_END")
        );
      }, "handleAnimationEnd"), d = a2((h7) => {
        h7.target === t && (i.current = Dl(n.current));
      }, "handleAnimationStart");
      return t.addEventListener("animationstart", d), t.addEventListener("animationcancel", p), t.addEventListener("animationend", p), () => {
        t.removeEventListener("animationstart", d), t.removeEventListener("animationcancel", p), t.removeEventListener("animationend", p);
      };
    } else
      c("ANIMATION_END");
  }, [
    t,
    c
  ]), {
    isPresent: [
      "mounted",
      "unmountSuspended"
    ].includes(u6),
    ref: (0, import_react30.useCallback)((p) => {
      p && (n.current = getComputedStyle(p)), r(p);
    }, [])
  };
}
a2(HT, "$921a889cee6df7e8$var$usePresence");
function Dl(e7) {
  return (e7 == null ? void 0 : e7.animationName) || "none";
}
a2(Dl, "$921a889cee6df7e8$var$getAnimationName");
var s0 = 0;
function Vg() {
  (0, import_react31.useEffect)(() => {
    var e7, t;
    let r = document.querySelectorAll("[data-radix-focus-guard]");
    return document.body.insertAdjacentElement("afterbegin", (e7 = r[0]) !== null && e7 !== void 0 ? e7 : jg()), document.body.insertAdjacentElement(
      "beforeend",
      (t = r[1]) !== null && t !== void 0 ? t : jg()
    ), s0++, () => {
      s0 === 1 && document.querySelectorAll("[data-radix-focus-guard]").forEach(
        (n) => n.remove()
      ), s0--;
    };
  }, []);
}
a2(Vg, "$3db38b7d1fb3fe6a$export$b7ece24a22aeda8c");
function jg() {
  let e7 = document.createElement("span");
  return e7.setAttribute("data-radix-focus-guard", ""), e7.tabIndex = 0, e7.style.cssText = "outline: none; opacity: 0; position: fixed; pointer-events: none", e7;
}
a2(jg, "$3db38b7d1fb3fe6a$var$createFocusGuard");
var $e2 = a2(function() {
  return $e2 = Object.assign || a2(function(t) {
    for (var r, n = 1, o = arguments.length; n < o; n++) {
      r = arguments[n];
      for (var i in r) Object.prototype.hasOwnProperty.call(r, i) && (t[i] = r[i]);
    }
    return t;
  }, "__assign"), $e2.apply(this, arguments);
}, "__assign");
function xl(e7, t) {
  var r = {};
  for (var n in e7) Object.prototype.hasOwnProperty.call(e7, n) && t.indexOf(n) < 0 && (r[n] = e7[n]);
  if (e7 != null && typeof Object.getOwnPropertySymbols == "function")
    for (var o = 0, n = Object.getOwnPropertySymbols(e7); o < n.length; o++)
      t.indexOf(n[o]) < 0 && Object.prototype.propertyIsEnumerable.call(e7, n[o]) && (r[n[o]] = e7[n[o]]);
  return r;
}
a2(xl, "__rest");
function qg(e7, t, r) {
  if (r || arguments.length === 2) for (var n = 0, o = t.length, i; n < o; n++)
    (i || !(n in t)) && (i || (i = Array.prototype.slice.call(t, 0, n)), i[n] = t[n]);
  return e7.concat(i || Array.prototype.slice.call(t));
}
a2(qg, "__spreadArray");
var qr2 = "right-scroll-bar-position";
var Wr2 = "width-before-scroll-bar";
var u0 = "with-scroll-bars-hidden";
var c0 = "--removed-body-scroll-bar-size";
function Cl(e7, t) {
  return typeof e7 == "function" ? e7(t) : e7 && (e7.current = t), e7;
}
a2(Cl, "assignRef");
function Wg(e7, t) {
  var r = (0, import_react32.useState)(function() {
    return {
      // value
      value: e7,
      // last callback
      callback: t,
      // "memoized" public interface
      facade: {
        get current() {
          return r.value;
        },
        set current(n) {
          var o = r.value;
          o !== n && (r.value = n, r.callback(n, o));
        }
      }
    };
  })[0];
  return r.callback = t, r.facade;
}
a2(Wg, "useCallbackRef");
var Ug = /* @__PURE__ */ new WeakMap();
function p0(e7, t) {
  var r = Wg(t || null, function(n) {
    return e7.forEach(function(o) {
      return Cl(o, n);
    });
  });
  return Gg.useLayoutEffect(function() {
    var n = Ug.get(r);
    if (n) {
      var o = new Set(n), i = new Set(e7), l7 = r.current;
      o.forEach(function(u6) {
        i.has(u6) || Cl(u6, null);
      }), i.forEach(function(u6) {
        o.has(u6) || Cl(u6, l7);
      });
    }
    Ug.set(r, e7);
  }, [e7]), r;
}
a2(p0, "useMergeRefs");
function OT(e7) {
  return e7;
}
a2(OT, "ItoI");
function NT(e7, t) {
  t === void 0 && (t = OT);
  var r = [], n = false, o = {
    read: a2(function() {
      if (n)
        throw new Error("Sidecar: could not `read` from an `assigned` medium. `read` could be used only with `useMedium`.");
      return r.length ? r[r.length - 1] : e7;
    }, "read"),
    useMedium: a2(function(i) {
      var l7 = t(i, n);
      return r.push(l7), function() {
        r = r.filter(function(u6) {
          return u6 !== l7;
        });
      };
    }, "useMedium"),
    assignSyncMedium: a2(function(i) {
      for (n = true; r.length; ) {
        var l7 = r;
        r = [], l7.forEach(i);
      }
      r = {
        push: a2(function(u6) {
          return i(u6);
        }, "push"),
        filter: a2(function() {
          return r;
        }, "filter")
      };
    }, "assignSyncMedium"),
    assignMedium: a2(function(i) {
      n = true;
      var l7 = [];
      if (r.length) {
        var u6 = r;
        r = [], u6.forEach(i), l7 = r;
      }
      var c = a2(function() {
        var d = l7;
        l7 = [], d.forEach(i);
      }, "executeQueue"), p = a2(function() {
        return Promise.resolve().then(c);
      }, "cycle");
      p(), r = {
        push: a2(function(d) {
          l7.push(d), p();
        }, "push"),
        filter: a2(function(d) {
          return l7 = l7.filter(d), r;
        }, "filter")
      };
    }, "assignMedium")
  };
  return o;
}
a2(NT, "innerCreateMedium");
function d0(e7) {
  e7 === void 0 && (e7 = {});
  var t = NT(null);
  return t.options = $e2({ async: true, ssr: false }, e7), t;
}
a2(d0, "createSidecarMedium");
var Yg = a2(function(e7) {
  var t = e7.sideCar, r = xl(e7, ["sideCar"]);
  if (!t)
    throw new Error("Sidecar: please provide `sideCar` property to import the right car");
  var n = t.read();
  if (!n)
    throw new Error("Sidecar medium not found");
  return Xg.createElement(n, $e2({}, r));
}, "SideCar");
Yg.isSideCarExport = true;
function f0(e7, t) {
  return e7.useMedium(t), Yg;
}
a2(f0, "exportSidecar");
var El = d0();
var h0 = a2(function() {
}, "nothing");
var Ha2 = Se2.forwardRef(function(e7, t) {
  var r = Se2.useRef(null), n = Se2.useState({
    onScrollCapture: h0,
    onWheelCapture: h0,
    onTouchMoveCapture: h0
  }), o = n[0], i = n[1], l7 = e7.forwardProps, u6 = e7.children, c = e7.className, p = e7.removeScrollBar, d = e7.enabled, h7 = e7.shards, f = e7.sideCar, v7 = e7.noIsolation, b = e7.inert, m = e7.allowPinchZoom, g7 = e7.as, y = g7 === void 0 ? "div" : g7, w5 = xl(e7, ["forwardProps", "children", "className", "removeScrollBar", "enabled", "shards", "sideCar", "noIsolation", "inert", "allowPinchZoom", "as"]), D7 = f, x7 = p0([r, t]), C7 = $e2($e2(
    {},
    w5
  ), o);
  return Se2.createElement(
    Se2.Fragment,
    null,
    d && Se2.createElement(D7, { sideCar: El, removeScrollBar: p, shards: h7, noIsolation: v7, inert: b, setCallbacks: i, allowPinchZoom: !!m, lockRef: r }),
    l7 ? Se2.cloneElement(Se2.Children.only(u6), $e2($e2({}, C7), { ref: x7 })) : Se2.createElement(y, $e2({}, C7, { className: c, ref: x7 }), u6)
  );
});
Ha2.defaultProps = {
  enabled: true,
  removeScrollBar: true,
  inert: false
};
Ha2.classNames = {
  fullWidth: Wr2,
  zeroRight: qr2
};
var Kg;
var Zg = a2(function() {
  if (Kg)
    return Kg;
  if (typeof __webpack_nonce__ < "u")
    return __webpack_nonce__;
}, "getNonce");
function jT() {
  if (!document)
    return null;
  var e7 = document.createElement("style");
  e7.type = "text/css";
  var t = Zg();
  return t && e7.setAttribute("nonce", t), e7;
}
a2(jT, "makeStyleTag");
function VT(e7, t) {
  e7.styleSheet ? e7.styleSheet.cssText = t : e7.appendChild(document.createTextNode(t));
}
a2(VT, "injectStyles");
function qT(e7) {
  var t = document.head || document.getElementsByTagName("head")[0];
  t.appendChild(e7);
}
a2(qT, "insertStyleTag");
var m0 = a2(function() {
  var e7 = 0, t = null;
  return {
    add: a2(function(r) {
      e7 == 0 && (t = jT()) && (VT(t, r), qT(t)), e7++;
    }, "add"),
    remove: a2(function() {
      e7--, !e7 && t && (t.parentNode && t.parentNode.removeChild(t), t = null);
    }, "remove")
  };
}, "stylesheetSingleton");
var g0 = a2(function() {
  var e7 = m0();
  return function(t, r) {
    Jg.useEffect(function() {
      return e7.add(t), function() {
        e7.remove();
      };
    }, [t && r]);
  };
}, "styleHookSingleton");
var $a2 = a2(function() {
  var e7 = g0(), t = a2(function(r) {
    var n = r.styles, o = r.dynamic;
    return e7(n, o), null;
  }, "Sheet");
  return t;
}, "styleSingleton");
var WT = {
  left: 0,
  top: 0,
  right: 0,
  gap: 0
};
var v0 = a2(function(e7) {
  return parseInt(e7 || "", 10) || 0;
}, "parse");
var UT = a2(function(e7) {
  var t = window.getComputedStyle(document.body), r = t[e7 === "padding" ? "paddingLeft" : "marginLeft"], n = t[e7 === "padding" ? "paddingTop" : "marginTop"], o = t[e7 === "padding" ? "paddingRight" : "marginRight"];
  return [v0(r), v0(n), v0(o)];
}, "getOffset");
var w0 = a2(function(e7) {
  if (e7 === void 0 && (e7 = "margin"), typeof window > "u")
    return WT;
  var t = UT(e7), r = document.documentElement.clientWidth, n = window.innerWidth;
  return {
    left: t[0],
    top: t[1],
    right: t[2],
    gap: Math.max(0, n - r + t[2] - t[0])
  };
}, "getGapWidth");
var GT = $a2();
var Sl = "data-scroll-locked";
var XT = a2(function(e7, t, r, n) {
  var o = e7.left, i = e7.top, l7 = e7.right, u6 = e7.gap;
  return r === void 0 && (r = "margin"), `
  .`.concat(u0, ` {
   overflow: hidden `).concat(n, `;
   padding-right: `).concat(u6, "px ").concat(n, `;
  }
  body[`).concat(Sl, `] {
    overflow: hidden `).concat(n, `;
    overscroll-behavior: contain;
    `).concat([
    t && "position: relative ".concat(n, ";"),
    r === "margin" && `
    padding-left: `.concat(o, `px;
    padding-top: `).concat(i, `px;
    padding-right: `).concat(l7, `px;
    margin-left:0;
    margin-top:0;
    margin-right: `).concat(u6, "px ").concat(n, `;
    `),
    r === "padding" && "padding-right: ".concat(u6, "px ").concat(n, ";")
  ].filter(Boolean).join(""), `
  }
  
  .`).concat(qr2, ` {
    right: `).concat(u6, "px ").concat(n, `;
  }
  
  .`).concat(Wr2, ` {
    margin-right: `).concat(u6, "px ").concat(n, `;
  }
  
  .`).concat(qr2, " .").concat(qr2, ` {
    right: 0 `).concat(n, `;
  }
  
  .`).concat(Wr2, " .").concat(Wr2, ` {
    margin-right: 0 `).concat(n, `;
  }
  
  body[`).concat(Sl, `] {
    `).concat(c0, ": ").concat(u6, `px;
  }
`);
}, "getStyles");
var b0 = a2(function(e7) {
  var t = e7.noRelative, r = e7.noImportant, n = e7.gapMode, o = n === void 0 ? "margin" : n, i = Ro2.useMemo(function() {
    return w0(o);
  }, [o]);
  return Ro2.useEffect(function() {
    return document.body.setAttribute(Sl, ""), function() {
      document.body.removeAttribute(Sl);
    };
  }, []), Ro2.createElement(GT, { styles: XT(i, !t, o, r ? "" : "!important") });
}, "RemoveScrollBar");
var y0 = false;
if (typeof window < "u")
  try {
    za2 = Object.defineProperty({}, "passive", {
      get: a2(function() {
        return y0 = true, true;
      }, "get")
    }), window.addEventListener("test", za2, za2), window.removeEventListener("test", za2, za2);
  } catch {
    y0 = false;
  }
var za2;
var Ur2 = y0 ? { passive: false } : false;
var YT = a2(function(e7) {
  return e7.tagName === "TEXTAREA";
}, "alwaysContainsScroll");
var Qg = a2(function(e7, t) {
  var r = window.getComputedStyle(e7);
  return (
    // not-not-scrollable
    r[t] !== "hidden" && // contains scroll inside self
    !(r.overflowY === r.overflowX && !YT(e7) && r[t] === "visible")
  );
}, "elementCanBeScrolled");
var KT = a2(function(e7) {
  return Qg(e7, "overflowY");
}, "elementCouldBeVScrolled");
var ZT = a2(function(e7) {
  return Qg(e7, "overflowX");
}, "elementCouldBeHScrolled");
var D0 = a2(function(e7, t) {
  var r = t;
  do {
    typeof ShadowRoot < "u" && r instanceof ShadowRoot && (r = r.host);
    var n = ev(e7, r);
    if (n) {
      var o = tv(e7, r), i = o[1], l7 = o[2];
      if (i > l7)
        return true;
    }
    r = r.parentNode;
  } while (r && r !== document.body);
  return false;
}, "locationCouldBeScrolled");
var JT = a2(function(e7) {
  var t = e7.scrollTop, r = e7.scrollHeight, n = e7.clientHeight;
  return [
    t,
    r,
    n
  ];
}, "getVScrollVariables");
var QT = a2(function(e7) {
  var t = e7.scrollLeft, r = e7.scrollWidth, n = e7.clientWidth;
  return [
    t,
    r,
    n
  ];
}, "getHScrollVariables");
var ev = a2(function(e7, t) {
  return e7 === "v" ? KT(t) : ZT(t);
}, "elementCouldBeScrolled");
var tv = a2(function(e7, t) {
  return e7 === "v" ? JT(t) : QT(t);
}, "getScrollVariables");
var eL = a2(function(e7, t) {
  return e7 === "h" && t === "rtl" ? -1 : 1;
}, "getDirectionFactor");
var rv = a2(function(e7, t, r, n, o) {
  var i = eL(e7, window.getComputedStyle(t).direction), l7 = i * n, u6 = r.target, c = t.contains(u6), p = false, d = l7 > 0, h7 = 0, f = 0;
  do {
    var v7 = tv(e7, u6), b = v7[0], m = v7[1], g7 = v7[2], y = m - g7 - i * b;
    (b || y) && ev(e7, u6) && (h7 += y, f += b), u6 = u6.parentNode;
  } while (
    // portaled content
    !c && u6 !== document.body || // self content
    c && (t.contains(u6) || t === u6)
  );
  return (d && (o && h7 === 0 || !o && l7 > h7) || !d && (o && f === 0 || !o && -l7 > f)) && (p = true), p;
}, "handleScroll");
var Rl = a2(function(e7) {
  return "changedTouches" in e7 ? [e7.changedTouches[0].clientX, e7.changedTouches[0].clientY] : [0, 0];
}, "getTouchXY");
var nv = a2(function(e7) {
  return [e7.deltaX, e7.deltaY];
}, "getDeltaXY");
var ov = a2(function(e7) {
  return e7 && "current" in e7 ? e7.current : e7;
}, "extractRef");
var tL = a2(function(e7, t) {
  return e7[0] === t[0] && e7[1] === t[1];
}, "deltaCompare");
var rL = a2(function(e7) {
  return `
  .block-interactivity-`.concat(e7, ` {pointer-events: none;}
  .allow-interactivity-`).concat(e7, ` {pointer-events: all;}
`);
}, "generateStyle");
var nL = 0;
var Ao2 = [];
function av(e7) {
  var t = J2.useRef([]), r = J2.useRef([0, 0]), n = J2.useRef(), o = J2.useState(nL++)[0], i = J2.useState(function() {
    return $a2();
  })[0], l7 = J2.useRef(e7);
  J2.useEffect(function() {
    l7.current = e7;
  }, [e7]), J2.useEffect(function() {
    if (e7.inert) {
      document.body.classList.add("block-interactivity-".concat(o));
      var m = qg([e7.lockRef.current], (e7.shards || []).map(ov), true).filter(Boolean);
      return m.forEach(function(g7) {
        return g7.classList.add("allow-interactivity-".concat(o));
      }), function() {
        document.body.classList.remove("block-interactivity-".concat(o)), m.forEach(function(g7) {
          return g7.classList.remove("allow-interactivity-".concat(o));
        });
      };
    }
  }, [e7.inert, e7.lockRef.current, e7.shards]);
  var u6 = J2.useCallback(function(m, g7) {
    if ("touches" in m && m.touches.length === 2)
      return !l7.current.allowPinchZoom;
    var y = Rl(m), w5 = r.current, D7 = "deltaX" in m ? m.deltaX : w5[0] - y[0], x7 = "deltaY" in m ? m.deltaY : w5[1] - y[1], C7, E7 = m.target, S4 = Math.abs(D7) > Math.abs(x7) ? "h" : "v";
    if ("touches" in m && S4 === "h" && E7.type === "range")
      return false;
    var R = D0(S4, E7);
    if (!R)
      return true;
    if (R ? C7 = S4 : (C7 = S4 === "v" ? "h" : "v", R = D0(S4, E7)), !R)
      return false;
    if (!n.current && "changedTouches" in m && (D7 || x7) && (n.current = C7), !C7)
      return true;
    var A = n.current || C7;
    return rv(A, g7, m, A === "h" ? D7 : x7, true);
  }, []), c = J2.useCallback(function(m) {
    var g7 = m;
    if (!(!Ao2.length || Ao2[Ao2.length - 1] !== i)) {
      var y = "deltaY" in g7 ? nv(g7) : Rl(g7), w5 = t.current.filter(function(C7) {
        return C7.name === g7.type && C7.target === g7.target && tL(C7.delta, y);
      })[0];
      if (w5 && w5.should) {
        g7.cancelable && g7.preventDefault();
        return;
      }
      if (!w5) {
        var D7 = (l7.current.shards || []).map(ov).filter(Boolean).filter(function(C7) {
          return C7.contains(g7.target);
        }), x7 = D7.length > 0 ? u6(g7, D7[0]) : !l7.current.noIsolation;
        x7 && g7.cancelable && g7.preventDefault();
      }
    }
  }, []), p = J2.useCallback(function(m, g7, y, w5) {
    var D7 = { name: m, delta: g7, target: y, should: w5 };
    t.current.push(D7), setTimeout(function() {
      t.current = t.current.filter(function(x7) {
        return x7 !== D7;
      });
    }, 1);
  }, []), d = J2.useCallback(function(m) {
    r.current = Rl(m), n.current = void 0;
  }, []), h7 = J2.useCallback(function(m) {
    p(m.type, nv(m), m.target, u6(m, e7.lockRef.current));
  }, []), f = J2.useCallback(function(m) {
    p(m.type, Rl(m), m.target, u6(m, e7.lockRef.current));
  }, []);
  J2.useEffect(function() {
    return Ao2.push(i), e7.setCallbacks({
      onScrollCapture: h7,
      onWheelCapture: h7,
      onTouchMoveCapture: f
    }), document.addEventListener("wheel", c, Ur2), document.addEventListener("touchmove", c, Ur2), document.addEventListener(
      "touchstart",
      d,
      Ur2
    ), function() {
      Ao2 = Ao2.filter(function(m) {
        return m !== i;
      }), document.removeEventListener("wheel", c, Ur2), document.removeEventListener("touchmove", c, Ur2), document.removeEventListener("touchstart", d, Ur2);
    };
  }, []);
  var v7 = e7.removeScrollBar, b = e7.inert;
  return J2.createElement(
    J2.Fragment,
    null,
    b ? J2.createElement(i, { styles: rL(o) }) : null,
    v7 ? J2.createElement(b0, { gapMode: "margin" }) : null
  );
}
a2(av, "RemoveScrollSideCar");
var iv = f0(El, av);
var lv = Al.forwardRef(function(e7, t) {
  return Al.createElement(Ha2, $e2({}, e7, { ref: t, sideCar: iv }));
});
lv.classNames = Ha2.classNames;
var x0 = lv;
var oL = a2(function(e7) {
  if (typeof document > "u")
    return null;
  var t = Array.isArray(e7) ? e7[0] : e7;
  return t.ownerDocument.body;
}, "getDefaultParent");
var Fo = /* @__PURE__ */ new WeakMap();
var Fl = /* @__PURE__ */ new WeakMap();
var kl = {};
var C0 = 0;
var sv = a2(function(e7) {
  return e7 && (e7.host || sv(e7.parentNode));
}, "unwrapHost");
var aL = a2(function(e7, t) {
  return t.map(function(r) {
    if (e7.contains(r))
      return r;
    var n = sv(r);
    return n && e7.contains(n) ? n : (console.error("aria-hidden", r, "in not contained inside", e7, ". Doing nothing"), null);
  }).filter(function(r) {
    return !!r;
  });
}, "correctTargets");
var iL = a2(function(e7, t, r, n) {
  var o = aL(t, Array.isArray(e7) ? e7 : [e7]);
  kl[r] || (kl[r] = /* @__PURE__ */ new WeakMap());
  var i = kl[r], l7 = [], u6 = /* @__PURE__ */ new Set(), c = new Set(o), p = a2(function(h7) {
    !h7 || u6.has(h7) || (u6.add(h7), p(h7.parentNode));
  }, "keep");
  o.forEach(p);
  var d = a2(function(h7) {
    !h7 || c.has(h7) || Array.prototype.forEach.call(h7.children, function(f) {
      if (u6.has(f))
        d(f);
      else {
        var v7 = f.getAttribute(n), b = v7 !== null && v7 !== "false", m = (Fo.get(f) || 0) + 1, g7 = (i.get(f) || 0) + 1;
        Fo.set(f, m), i.set(f, g7), l7.push(f), m === 1 && b && Fl.set(f, true), g7 === 1 && f.setAttribute(r, "true"), b || f.setAttribute(n, "true");
      }
    });
  }, "deep");
  return d(t), u6.clear(), C0++, function() {
    l7.forEach(function(h7) {
      var f = Fo.get(h7) - 1, v7 = i.get(h7) - 1;
      Fo.set(h7, f), i.set(h7, v7), f || (Fl.has(h7) || h7.removeAttribute(n), Fl.delete(h7)), v7 || h7.removeAttribute(r);
    }), C0--, C0 || (Fo = /* @__PURE__ */ new WeakMap(), Fo = /* @__PURE__ */ new WeakMap(), Fl = /* @__PURE__ */ new WeakMap(), kl = {});
  };
}, "applyAttributeToOthers");
var uv = a2(function(e7, t, r) {
  r === void 0 && (r = "data-aria-hidden");
  var n = Array.from(Array.isArray(e7) ? e7 : [e7]), o = t || oL(e7);
  return o ? (n.push.apply(n, Array.from(o.querySelectorAll("[aria-live]"))), iL(n, o, r, "aria-hidden")) : function() {
    return null;
  };
}, "hideOthers");
qe2();
var R0 = (0, import_react33.forwardRef)((e7, t) => {
  let { children: r, ...n } = e7, o = import_react33.Children.toArray(r), i = o.find(uL);
  if (i) {
    let l7 = i.props.children, u6 = o.map((c) => c === i ? import_react33.Children.count(l7) > 1 ? import_react33.Children.only(null) : (0, import_react33.isValidElement)(l7) ? l7.props.children : null : c);
    return (0, import_react33.createElement)(S0, H2({}, n, {
      ref: t
    }), (0, import_react33.isValidElement)(l7) ? (0, import_react33.cloneElement)(l7, void 0, u6) : null);
  }
  return (0, import_react33.createElement)(S0, H2({}, n, {
    ref: t
  }), r);
});
R0.displayName = "Slot";
var S0 = (0, import_react33.forwardRef)((e7, t) => {
  let { children: r, ...n } = e7;
  return (0, import_react33.isValidElement)(r) ? (0, import_react33.cloneElement)(r, {
    ...cL(n, r.props),
    ref: t ? Ia2(t, r.ref) : r.ref
  }) : import_react33.Children.count(r) > 1 ? import_react33.Children.only(null) : null;
});
S0.displayName = "SlotClone";
var sL = a2(({ children: e7 }) => (0, import_react33.createElement)(import_react33.Fragment, null, e7), "$5e63c961fc1ce211$export$d9f1ccf0bdb05d45");
function uL(e7) {
  return (0, import_react33.isValidElement)(e7) && e7.type === sL;
}
a2(uL, "$5e63c961fc1ce211$var$isSlottable");
function cL(e7, t) {
  let r = {
    ...t
  };
  for (let n in t) {
    let o = e7[n], i = t[n];
    /^on[A-Z]/.test(n) ? o && i ? r[n] = (...u6) => {
      i(...u6), o(...u6);
    } : o && (r[n] = o) : n === "style" ? r[n] = {
      ...o,
      ...i
    } : n === "className" && (r[n] = [
      o,
      i
    ].filter(Boolean).join(" "));
  }
  return {
    ...e7,
    ...r
  };
}
a2(cL, "$5e63c961fc1ce211$var$mergeProps");
var dv = "Dialog";
var [fv, mL] = xg(dv);
var [gL, lt2] = fv(dv);
var hv = a2((e7) => {
  let { __scopeDialog: t, children: r, open: n, defaultOpen: o, onOpenChange: i, modal: l7 = true } = e7, u6 = (0, import_react18.useRef)(null), c = (0, import_react18.useRef)(null), [p = false, d] = Cg(
    {
      prop: n,
      defaultProp: o,
      onChange: i
    }
  );
  return (0, import_react18.createElement)(gL, {
    scope: t,
    triggerRef: u6,
    contentRef: c,
    contentId: bl(),
    titleId: bl(),
    descriptionId: bl(),
    open: p,
    onOpenChange: d,
    onOpenToggle: (0, import_react18.useCallback)(
      () => d(
        (h7) => !h7
      ),
      [
        d
      ]
    ),
    modal: l7
  }, r);
}, "$5d3850c4d0b4e6c7$export$3ddf2d174ce01153");
var vL = "DialogTrigger";
var mv = (0, import_react18.forwardRef)((e7, t) => {
  let { __scopeDialog: r, ...n } = e7, o = lt2(vL, r), i = St2(t, o.triggerRef);
  return (0, import_react18.createElement)(Ze2.button, H2({
    type: "button",
    "aria-haspopup": "dialog",
    "aria-expanded": o.open,
    "aria-controls": o.contentId,
    "data-state": F0(o.open)
  }, n, {
    ref: i,
    onClick: Et2(e7.onClick, o.onOpenToggle)
  }));
});
var gv = "DialogPortal";
var [wL, vv] = fv(gv, {
  forceMount: void 0
});
var wv = a2((e7) => {
  let { __scopeDialog: t, forceMount: r, children: n, container: o } = e7, i = lt2(gv, t);
  return (0, import_react18.createElement)(wL, {
    scope: t,
    forceMount: r
  }, import_react18.Children.map(
    n,
    (l7) => (0, import_react18.createElement)(Pa2, {
      present: r || i.open
    }, (0, import_react18.createElement)(Ng, {
      asChild: true,
      container: o
    }, l7))
  ));
}, "$5d3850c4d0b4e6c7$export$dad7c95542bacce0");
var A0 = "DialogOverlay";
var bv = (0, import_react18.forwardRef)((e7, t) => {
  let r = vv(A0, e7.__scopeDialog), { forceMount: n = r.forceMount, ...o } = e7, i = lt2(A0, e7.__scopeDialog);
  return i.modal ? (0, import_react18.createElement)(Pa2, {
    present: n || i.open
  }, (0, import_react18.createElement)(bL, H2({}, o, {
    ref: t
  }))) : null;
});
var bL = (0, import_react18.forwardRef)((e7, t) => {
  let { __scopeDialog: r, ...n } = e7, o = lt2(A0, r);
  return (
    // Make sure `Content` is scrollable even when it doesn't live inside `RemoveScroll`
    // ie. when `Overlay` and `Content` are siblings
    (0, import_react18.createElement)(x0, {
      as: R0,
      allowPinchZoom: true,
      shards: [
        o.contentRef
      ]
    }, (0, import_react18.createElement)(Ze2.div, H2({
      "data-state": F0(o.open)
    }, n, {
      ref: t,
      style: {
        pointerEvents: "auto",
        ...n.style
      }
    })))
  );
});
var To2 = "DialogContent";
var yv = (0, import_react18.forwardRef)((e7, t) => {
  let r = vv(To2, e7.__scopeDialog), { forceMount: n = r.forceMount, ...o } = e7, i = lt2(To2, e7.__scopeDialog);
  return (0, import_react18.createElement)(Pa2, {
    present: n || i.open
  }, i.modal ? (0, import_react18.createElement)(yL, H2({}, o, {
    ref: t
  })) : (0, import_react18.createElement)(DL, H2({}, o, {
    ref: t
  })));
});
var yL = (0, import_react18.forwardRef)((e7, t) => {
  let r = lt2(To2, e7.__scopeDialog), n = (0, import_react18.useRef)(null), o = St2(t, r.contentRef, n);
  return (0, import_react18.useEffect)(() => {
    let i = n.current;
    if (i) return uv(i);
  }, []), (0, import_react18.createElement)(Dv, H2({}, e7, {
    ref: o,
    trapFocus: r.open,
    disableOutsidePointerEvents: true,
    onCloseAutoFocus: Et2(e7.onCloseAutoFocus, (i) => {
      var l7;
      i.preventDefault(), (l7 = r.triggerRef.current) === null || l7 === void 0 || l7.focus();
    }),
    onPointerDownOutside: Et2(e7.onPointerDownOutside, (i) => {
      let l7 = i.detail.originalEvent, u6 = l7.button === 0 && l7.ctrlKey === true;
      (l7.button === 2 || u6) && i.preventDefault();
    }),
    onFocusOutside: Et2(
      e7.onFocusOutside,
      (i) => i.preventDefault()
    )
  }));
});
var DL = (0, import_react18.forwardRef)((e7, t) => {
  let r = lt2(To2, e7.__scopeDialog), n = (0, import_react18.useRef)(false), o = (0, import_react18.useRef)(false);
  return (0, import_react18.createElement)(Dv, H2({}, e7, {
    ref: t,
    trapFocus: false,
    disableOutsidePointerEvents: false,
    onCloseAutoFocus: a2((i) => {
      var l7;
      if ((l7 = e7.onCloseAutoFocus) === null || l7 === void 0 || l7.call(e7, i), !i.defaultPrevented) {
        var u6;
        n.current || (u6 = r.triggerRef.current) === null || u6 === void 0 || u6.focus(), i.preventDefault();
      }
      n.current = false, o.current = false;
    }, "onCloseAutoFocus"),
    onInteractOutside: a2((i) => {
      var l7, u6;
      (l7 = e7.onInteractOutside) === null || l7 === void 0 || l7.call(e7, i), i.defaultPrevented || (n.current = true, i.detail.originalEvent.type === "pointerdown" && (o.current = true));
      let c = i.target;
      ((u6 = r.triggerRef.current) === null || u6 === void 0 ? void 0 : u6.contains(c)) && i.preventDefault(), i.detail.originalEvent.type === "focusin" && o.current && i.preventDefault();
    }, "onInteractOutside")
  }));
});
var Dv = (0, import_react18.forwardRef)((e7, t) => {
  let { __scopeDialog: r, trapFocus: n, onOpenAutoFocus: o, onCloseAutoFocus: i, ...l7 } = e7, u6 = lt2(To2, r), c = (0, import_react18.useRef)(null), p = St2(t, c);
  return Vg(), (0, import_react18.createElement)(import_react18.Fragment, null, (0, import_react18.createElement)(zg, {
    asChild: true,
    loop: true,
    trapped: n,
    onMountAutoFocus: o,
    onUnmountAutoFocus: i
  }, (0, import_react18.createElement)(Lg, H2({
    role: "dialog",
    id: u6.contentId,
    "aria-describedby": u6.descriptionId,
    "aria-labelledby": u6.titleId,
    "data-state": F0(u6.open)
  }, l7, {
    ref: p,
    onDismiss: a2(() => u6.onOpenChange(false), "onDismiss")
  }))), false);
});
var xv = "DialogTitle";
var Cv = (0, import_react18.forwardRef)((e7, t) => {
  let { __scopeDialog: r, ...n } = e7, o = lt2(xv, r);
  return (0, import_react18.createElement)(Ze2.h2, H2({
    id: o.titleId
  }, n, {
    ref: t
  }));
});
var xL = "DialogDescription";
var Ev = (0, import_react18.forwardRef)((e7, t) => {
  let { __scopeDialog: r, ...n } = e7, o = lt2(xL, r);
  return (0, import_react18.createElement)(Ze2.p, H2({
    id: o.descriptionId
  }, n, {
    ref: t
  }));
});
var CL = "DialogClose";
var Sv = (0, import_react18.forwardRef)((e7, t) => {
  let { __scopeDialog: r, ...n } = e7, o = lt2(CL, r);
  return (0, import_react18.createElement)(Ze2.button, H2({
    type: "button"
  }, n, {
    ref: t,
    onClick: Et2(
      e7.onClick,
      () => o.onOpenChange(false)
    )
  }));
});
function F0(e7) {
  return e7 ? "open" : "closed";
}
a2(F0, "$5d3850c4d0b4e6c7$var$getState");
var EL = "DialogTitleWarning";
var [SL, zW] = Dg(EL, {
  contentName: To2,
  titleName: xv,
  docsSlug: "dialog"
});
var k0 = hv;
var RL = mv;
var T0 = wv;
var L0 = bv;
var I0 = yv;
var B0 = Cv;
var M0 = Ev;
var _0 = Sv;
var z0 = {};
an2(z0, {
  Actions: () => jL,
  CloseButton: () => Fv,
  Col: () => Tv,
  Container: () => $0,
  Content: () => $L,
  Description: () => NL,
  Error: () => VL,
  ErrorWrapper: () => Lv,
  Header: () => zL,
  Overlay: () => H0,
  Row: () => kv,
  Title: () => OL
});
uu();
var Lo = (0, import_react36.forwardRef)(
  ({
    asChild: e7 = false,
    animation: t = "none",
    size: r = "small",
    variant: n = "outline",
    padding: o = "medium",
    disabled: i = false,
    active: l7 = false,
    onClick: u6,
    ...c
  }, p) => {
    let d = "button";
    c.isLink && (d = "a"), e7 && (d = aa2);
    let h7 = n, f = r, [v7, b] = (0, import_react36.useState)(false), m = a2((g7) => {
      u6 && u6(g7), t !== "none" && b(true);
    }, "handleClick");
    if ((0, import_react36.useEffect)(() => {
      let g7 = setTimeout(() => {
        v7 && b(false);
      }, 1e3);
      return () => clearTimeout(g7);
    }, [v7]), c.primary && (h7 = "solid", f = "medium"), (c.secondary || c.tertiary || c.gray || c.outline || c.inForm) && (h7 = "outline", f = "medium"), c.small || c.isLink || c.primary || c.secondary || c.tertiary || c.gray || c.outline || c.inForm || c.containsIcon) {
      let g7 = import_react36.default.Children.toArray(c.children).filter(
        (y) => typeof y == "string" && y !== ""
      );
      (0, import_client_logger4.deprecate)(
        `Use of deprecated props in the button ${g7.length > 0 ? `"${g7.join(" ")}"` : "component"} detected, see the migration notes at https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#new-ui-and-props-for-button-and-iconbutton-components`
      );
    }
    return import_react36.default.createElement(
      BL,
      {
        as: d,
        ref: p,
        variant: h7,
        size: f,
        padding: o,
        disabled: i,
        active: l7,
        animating: v7,
        animation: t,
        onClick: m,
        ...c
      }
    );
  }
);
Lo.displayName = "Button";
var BL = Tr("button", {
  shouldForwardProp: a2((e7) => sr(e7), "shouldForwardProp")
})(({ theme: e7, variant: t, size: r, disabled: n, active: o, animating: i, animation: l7 = "none", padding: u6 }) => ({
  border: 0,
  cursor: n ? "not-allowed" : "pointer",
  display: "inline-flex",
  gap: "6px",
  alignItems: "center",
  justifyContent: "center",
  overflow: "hidden",
  padding: u6 === "small" && r === "small" ? "0 7px" : u6 === "small" && r === "medium" ? "0 9px" : r === "small" ? "0 10px" : r === "medium" ? "0 12px" : 0,
  height: r === "small" ? "28px" : "32px",
  position: "relative",
  textAlign: "center",
  textDecoration: "none",
  transitionProperty: "background, box-shadow",
  transitionDuration: "150ms",
  transitionTimingFunction: "ease-out",
  verticalAlign: "top",
  whiteSpace: "nowrap",
  userSelect: "none",
  opacity: n ? 0.5 : 1,
  margin: 0,
  fontSize: `${e7.typography.size.s1}px`,
  fontWeight: e7.typography.weight.bold,
  lineHeight: "1",
  background: t === "solid" ? e7.color.secondary : t === "outline" ? e7.button.background : t === "ghost" && o ? e7.background.hoverable : "transparent",
  ...t === "ghost" ? {
    // This is a hack to apply bar styles to the button as soon as it is part of a bar
    // It is a temporary solution until we have implemented Theming 2.0.
    ".sb-bar &": {
      background: o ? be2(0.9, e7.barTextColor) : "transparent",
      color: o ? e7.barSelectedColor : e7.barTextColor,
      "&:hover": {
        color: e7.barHoverColor,
        background: be2(0.86, e7.barHoverColor)
      },
      "&:active": {
        color: e7.barSelectedColor,
        background: be2(0.9, e7.barSelectedColor)
      },
      "&:focus": {
        boxShadow: `${Jo(e7.barHoverColor, 1)} 0 0 0 1px inset`,
        outline: "none"
      }
    }
  } : {},
  color: t === "solid" ? e7.color.lightest : t === "outline" ? e7.input.color : t === "ghost" && o ? e7.color.secondary : t === "ghost" ? e7.color.mediumdark : e7.input.color,
  boxShadow: t === "outline" ? `${e7.button.border} 0 0 0 1px inset` : "none",
  borderRadius: e7.input.borderRadius,
  // Making sure that the button never shrinks below its minimum size
  flexShrink: 0,
  "&:hover": {
    color: t === "ghost" ? e7.color.secondary : void 0,
    background: (() => {
      let c = e7.color.secondary;
      return t === "solid" && (c = e7.color.secondary), t === "outline" && (c = e7.button.background), t === "ghost" ? be2(0.86, e7.color.secondary) : e7.base === "light" ? Yt2(0.02, c) : hs(0.03, c);
    })()
  },
  "&:active": {
    color: t === "ghost" ? e7.color.secondary : void 0,
    background: (() => {
      let c = e7.color.secondary;
      return t === "solid" && (c = e7.color.secondary), t === "outline" && (c = e7.button.background), t === "ghost" ? e7.background.hoverable : e7.base === "light" ? Yt2(0.02, c) : hs(0.03, c);
    })()
  },
  "&:focus": {
    boxShadow: `${Jo(e7.color.secondary, 1)} 0 0 0 1px inset`,
    outline: "none"
  },
  "> svg": {
    animation: i && l7 !== "none" ? `${e7.animation[l7]} 1000ms ease-out` : ""
  }
}));
var Il = (0, import_react35.forwardRef)(
  ({ padding: e7 = "small", variant: t = "ghost", ...r }, n) => import_react35.default.createElement(Lo, { padding: e7, variant: t, ref: n, ...r })
);
Il.displayName = "IconButton";
var Av = be({
  from: { opacity: 0 },
  to: { opacity: 1 }
});
var PL = be({
  from: { maxHeight: 0 },
  to: {}
});
var HL = be({
  from: {
    opacity: 0,
    transform: "translate(-50%, -50%) scale(0.9)"
  },
  to: {
    opacity: 1,
    transform: "translate(-50%, -50%) scale(1)"
  }
});
var H0 = Tr.div({
  backdropFilter: "blur(24px)",
  position: "fixed",
  inset: 0,
  width: "100%",
  height: "100%",
  zIndex: 10,
  animation: `${Av} 200ms`
});
var $0 = Tr.div(
  ({ theme: e7, width: t, height: r }) => ({
    backgroundColor: e7.background.bar,
    borderRadius: 6,
    boxShadow: "0px 4px 67px 0px #00000040",
    position: "fixed",
    top: "50%",
    left: "50%",
    transform: "translate(-50%, -50%)",
    width: t ?? 740,
    height: r ?? "auto",
    maxWidth: "calc(100% - 40px)",
    maxHeight: "85vh",
    overflow: "hidden",
    zIndex: 11,
    animation: `${HL} 200ms`,
    "&:focus-visible": {
      outline: "none"
    }
  })
);
var Fv = a2((e7) => import_react34.default.createElement(_0, { asChild: true }, import_react34.default.createElement(Il, { ...e7 }, import_react34.default.createElement($u, null))), "CloseButton");
var $L = Tr.div({
  display: "flex",
  flexDirection: "column",
  margin: 16,
  gap: 16
});
var kv = Tr.div({
  display: "flex",
  justifyContent: "space-between",
  gap: 16
});
var Tv = Tr.div({
  display: "flex",
  flexDirection: "column",
  gap: 4
});
var zL = a2((e7) => import_react34.default.createElement(kv, null, import_react34.default.createElement(Tv, { ...e7 }), import_react34.default.createElement(Fv, null)), "Header");
var OL = Tr(B0)(({ theme: e7 }) => ({
  margin: 0,
  fontSize: e7.typography.size.s3,
  fontWeight: e7.typography.weight.bold
}));
var NL = Tr(M0)(({ theme: e7 }) => ({
  position: "relative",
  zIndex: 1,
  margin: 0,
  fontSize: e7.typography.size.s2
}));
var jL = Tr.div({
  display: "flex",
  flexDirection: "row-reverse",
  gap: 8
});
var Lv = Tr.div(({ theme: e7 }) => ({
  maxHeight: 100,
  overflow: "auto",
  animation: `${PL} 300ms, ${Av} 300ms`,
  backgroundColor: e7.background.critical,
  color: e7.color.lightest,
  fontSize: e7.typography.size.s2,
  "& > div": {
    position: "relative",
    padding: "8px 16px"
  }
}));
var VL = a2(({
  children: e7,
  ...t
}) => import_react34.default.createElement(Lv, { ...t }, import_react34.default.createElement("div", null, e7)), "Error");
function qL({
  children: e7,
  width: t,
  height: r,
  onEscapeKeyDown: n,
  onInteractOutside: o = a2((c) => c.preventDefault(), "onInteractOutside"),
  className: i,
  container: l7,
  ...u6
}) {
  return import_react17.default.createElement(k0, { ...u6 }, import_react17.default.createElement(T0, { container: l7 }, import_react17.default.createElement(
    L0,
    { asChild: true },
    import_react17.default.createElement(H0, null)
  ), import_react17.default.createElement(
    I0,
    {
      asChild: true,
      onInteractOutside: o,
      onEscapeKeyDown: n
    },
    import_react17.default.createElement($0, { className: i, width: t, height: r }, e7)
  )));
}
a2(qL, "BaseModal");
var WL = Object.assign(qL, z0, { Dialog: Ll });
var XL = a2((e7) => typeof e7 == "number" ? e7 : Number(e7), "toNumber");
var YL = Tr.div(
  ({ theme: e7, col: t, row: r = 1 }) => t ? {
    display: "inline-block",
    verticalAlign: "inherit",
    "& > *": {
      marginLeft: t * e7.layoutMargin,
      verticalAlign: "inherit"
    },
    [`& > *:first-child${gc}`]: {
      marginLeft: 0
    }
  } : {
    "& > *": {
      marginTop: r * e7.layoutMargin
    },
    [`& > *:first-child${gc}`]: {
      marginTop: 0
    }
  },
  ({ theme: e7, outer: t, col: r, row: n }) => {
    switch (true) {
      case !!(t && r):
        return {
          marginLeft: t * e7.layoutMargin,
          marginRight: t * e7.layoutMargin
        };
      case !!(t && n):
        return {
          marginTop: t * e7.layoutMargin,
          marginBottom: t * e7.layoutMargin
        };
      default:
        return {};
    }
  }
);
var KL = a2(({ col: e7, row: t, outer: r, children: n, ...o }) => {
  let i = XL(typeof r == "number" || !r ? r : e7 || t);
  return import_react37.default.createElement(YL, { col: e7, row: t, outer: i, ...o }, n);
}, "Spaced");
var JL = Tr.div(({ theme: e7 }) => ({
  fontWeight: e7.typography.weight.bold
}));
var QL = Tr.div();
var eI = Tr.div(({ theme: e7 }) => ({
  padding: 30,
  textAlign: "center",
  color: e7.color.defaultText,
  fontSize: e7.typography.size.s2 - 1
}));
var tI = a2(({ children: e7, ...t }) => {
  let [r, n] = import_react38.Children.toArray(e7);
  return import_react38.default.createElement(eI, { ...t }, import_react38.default.createElement(JL, null, r), n && import_react38.default.createElement(
    QL,
    null,
    n
  ));
}, "Placeholder");
Ci();
function oI(e7, t) {
  var r = (0, import_react40.useRef)(null), n = (0, import_react40.useRef)(null);
  n.current = t;
  var o = (0, import_react40.useRef)(null);
  (0, import_react40.useEffect)(function() {
    i();
  });
  var i = (0, import_react40.useCallback)(function() {
    var l7 = o.current, u6 = n.current, c = l7 || (u6 ? u6 instanceof Element ? u6 : u6.current : null);
    r.current && r.current.element === c && r.current.subscriber === e7 || (r.current && r.current.cleanup && r.current.cleanup(), r.current = {
      element: c,
      subscriber: e7,
      // Only calling the subscriber, if there's an actual element to report.
      // Setting cleanup to undefined unless a subscriber returns one, as an existing cleanup function would've been just called.
      cleanup: c ? e7(c) : void 0
    });
  }, [e7]);
  return (0, import_react40.useEffect)(function() {
    return function() {
      r.current && r.current.cleanup && (r.current.cleanup(), r.current = null);
    };
  }, []), (0, import_react40.useCallback)(function(l7) {
    o.current = l7, i();
  }, [i]);
}
a2(oI, "useResolvedElement");
function Bv(e7, t, r) {
  return e7[t] ? e7[t][0] ? e7[t][0][r] : (
    // TS complains about this, because the RO entry type follows the spec and does not reflect Firefox's current
    // behaviour of returning objects instead of arrays for `borderBoxSize` and `contentBoxSize`.
    // @ts-ignore
    e7[t][r]
  ) : t === "contentBoxSize" ? e7.contentRect[r === "inlineSize" ? "width" : "height"] : void 0;
}
a2(Bv, "extractSize");
function Bl(e7) {
  e7 === void 0 && (e7 = {});
  var t = e7.onResize, r = (0, import_react40.useRef)(void 0);
  r.current = t;
  var n = e7.round || Math.round, o = (0, import_react40.useRef)(), i = (0, import_react40.useState)({
    width: void 0,
    height: void 0
  }), l7 = i[0], u6 = i[1], c = (0, import_react40.useRef)(false);
  (0, import_react40.useEffect)(function() {
    return c.current = false, function() {
      c.current = true;
    };
  }, []);
  var p = (0, import_react40.useRef)({
    width: void 0,
    height: void 0
  }), d = oI((0, import_react40.useCallback)(function(h7) {
    return (!o.current || o.current.box !== e7.box || o.current.round !== n) && (o.current = {
      box: e7.box,
      round: n,
      instance: new ResizeObserver(function(f) {
        var v7 = f[0], b = e7.box === "border-box" ? "borderBoxSize" : e7.box === "device-pixel-content-box" ? "devicePixelContentBoxSize" : "contentBoxSize", m = Bv(v7, b, "inlineSize"), g7 = Bv(v7, b, "blockSize"), y = m ? n(m) : void 0, w5 = g7 ? n(g7) : void 0;
        if (p.current.width !== y || p.current.height !== w5) {
          var D7 = {
            width: y,
            height: w5
          };
          p.current.width = y, p.current.height = w5, r.current ? r.current(D7) : c.current || u6(D7);
        }
      })
    }), o.current.instance.observe(h7, {
      box: e7.box
    }), function() {
      o.current && o.current.instance.unobserve(h7);
    };
  }, [e7.box, n]), e7.ref);
  return (0, import_react40.useMemo)(function() {
    return {
      ref: d,
      width: l7.width,
      height: l7.height
    };
  }, [d, l7.width, l7.height]);
}
a2(Bl, "useResizeObserver");
var cI = Tr.div(
  ({ scale: e7 = 1, elementHeight: t }) => ({
    height: t || "auto",
    transformOrigin: "top left",
    transform: `scale(${1 / e7})`
  })
);
function _v({ scale: e7, children: t }) {
  let r = (0, import_react39.useRef)(null), [n, o] = (0, import_react39.useState)(0), i = (0, import_react39.useCallback)(
    ({ height: l7 }) => {
      l7 && o(l7 / e7);
    },
    [e7]
  );
  return (0, import_react39.useEffect)(() => {
    r.current && o(r.current.getBoundingClientRect().height);
  }, [e7]), Bl({
    ref: r,
    onResize: i
  }), import_react39.default.createElement(cI, { scale: e7, elementHeight: n }, import_react39.default.createElement("div", { ref: r, className: "innerZoomElementWrapper" }, t));
}
a2(_v, "ZoomElement");
var q0 = class q02 extends import_react41.Component {
  constructor() {
    super(...arguments);
    this.iframe = null;
  }
  componentDidMount() {
    let { iFrameRef: r } = this.props;
    this.iframe = r.current;
  }
  shouldComponentUpdate(r) {
    let { scale: n, active: o } = this.props;
    return n !== r.scale && this.setIframeInnerZoom(r.scale), o !== r.active && this.iframe.setAttribute("data-is-storybook", r.active ? "true" : "false"), r.children.props.src !== this.props.children.props.src;
  }
  setIframeInnerZoom(r) {
    try {
      Object.assign(this.iframe.contentDocument.body.style, {
        width: `${r * 100}%`,
        height: `${r * 100}%`,
        transform: `scale(${1 / r})`,
        transformOrigin: "top left"
      });
    } catch {
      this.setIframeZoom(r);
    }
  }
  setIframeZoom(r) {
    Object.assign(this.iframe.style, {
      width: `${r * 100}%`,
      height: `${r * 100}%`,
      transform: `scale(${1 / r})`,
      transformOrigin: "top left"
    });
  }
  render() {
    let { children: r } = this.props;
    return import_react41.default.createElement(import_react41.default.Fragment, null, r);
  }
};
a2(q0, "ZoomIFrame");
var Ml = q0;
var dI = {
  Element: _v,
  IFrame: Ml
};
oi();
var { document: fI } = ln2;
var hI = Tr.strong(({ theme: e7 }) => ({
  color: e7.color.orange
}));
var mI = Tr.strong(({ theme: e7 }) => ({
  color: e7.color.ancillary,
  textDecoration: "underline"
}));
var Hv = Tr.em(({ theme: e7 }) => ({
  color: e7.textMutedColor
}));
var gI = /(Error): (.*)\n/;
var vI = /at (?:(.*) )?\(?(.+)\)?/;
var wI = /([^@]+)?(?:\/<)?@(.+)?/;
var bI = /([^@]+)?@(.+)?/;
var yI = a2(({
  error: e7
}) => {
  if (!e7)
    return import_react42.default.createElement(import_react42.Fragment, null, "This error has no stack or message");
  if (!e7.stack)
    return import_react42.default.createElement(import_react42.Fragment, null, e7.message || "This error has no stack or message");
  let t = e7.stack.toString();
  t && e7.message && !t.includes(e7.message) && (t = `Error: ${e7.message}

${t}`);
  let r = t.match(gI);
  if (!r)
    return import_react42.default.createElement(import_react42.Fragment, null, t);
  let [, n, o] = r, i = t.split(/\n/).slice(1), [, ...l7] = i.map((u6) => {
    let c = u6.match(vI) || u6.match(wI) || u6.match(bI);
    return c ? {
      name: (c[1] || "").replace("/<", ""),
      location: c[2].replace(fI.location.origin, "")
    } : null;
  }).filter(Boolean);
  return import_react42.default.createElement(import_react42.Fragment, null, import_react42.default.createElement("span", null, n), ": ", import_react42.default.createElement(
    hI,
    null,
    o
  ), import_react42.default.createElement("br", null), l7.map(
    (u6, c) => (u6 == null ? void 0 : u6.name) ? import_react42.default.createElement(import_react42.Fragment, { key: c }, "  ", "at ", import_react42.default.createElement(mI, null, u6.name), " (", import_react42.default.createElement(Hv, null, u6.location), ")", import_react42.default.createElement("br", null)) : import_react42.default.createElement(
      import_react42.Fragment,
      { key: c },
      "  ",
      "at ",
      import_react42.default.createElement(Hv, null, u6 == null ? void 0 : u6.location),
      import_react42.default.createElement("br", null)
    )
  ));
}, "ErrorFormatter");
var DI = Tr.label(({ theme: e7 }) => ({
  display: "flex",
  borderBottom: `1px solid ${e7.appBorderColor}`,
  margin: "0 15px",
  padding: "8px 0",
  "&:last-child": {
    marginBottom: "3rem"
  }
}));
var xI = Tr.span(({ theme: e7 }) => ({
  minWidth: 100,
  fontWeight: e7.typography.weight.bold,
  marginRight: 15,
  display: "flex",
  justifyContent: "flex-start",
  alignItems: "center",
  lineHeight: "16px"
}));
var zv = a2(({ label: e7, children: t, ...r }) => import_react43.default.createElement(DI, { ...r }, e7 ? import_react43.default.createElement(
  xI,
  null,
  import_react43.default.createElement("span", null, e7)
) : null, t), "Field");
qe2();
ai();
var EI = import_react45.useLayoutEffect;
var Ov = EI;
var jv = a2(function(t) {
  var r = Nv.useRef(t);
  return Ov(function() {
    r.current = t;
  }), r;
}, "useLatest");
var Vv = a2(function(t, r) {
  if (typeof t == "function") {
    t(r);
    return;
  }
  t.current = r;
}, "updateRef");
var AI = a2(function(t, r) {
  var n = (0, import_react46.useRef)();
  return (0, import_react46.useCallback)(function(o) {
    t.current = o, n.current && Vv(n.current, null), n.current = r, r && Vv(r, o);
  }, [r]);
}, "useComposedRef");
var qv = AI;
var Wv = {
  "min-height": "0",
  "max-height": "none",
  height: "0",
  visibility: "hidden",
  overflow: "hidden",
  position: "absolute",
  "z-index": "-1000",
  top: "0",
  right: "0"
};
var FI = a2(function(t) {
  Object.keys(Wv).forEach(function(r) {
    t.style.setProperty(r, Wv[r], "important");
  });
}, "forceHiddenStyles");
var Uv = FI;
var Fe2 = null;
var Gv = a2(function(t, r) {
  var n = t.scrollHeight;
  return r.sizingStyle.boxSizing === "border-box" ? n + r.borderSize : n - r.paddingSize;
}, "getHeight");
function kI(e7, t, r, n) {
  r === void 0 && (r = 1), n === void 0 && (n = 1 / 0), Fe2 || (Fe2 = document.createElement("textarea"), Fe2.setAttribute("tabindex", "-1"), Fe2.setAttribute("aria-hidden", "true"), Uv(Fe2)), Fe2.parentNode === null && document.body.appendChild(Fe2);
  var o = e7.paddingSize, i = e7.borderSize, l7 = e7.sizingStyle, u6 = l7.boxSizing;
  Object.keys(l7).forEach(function(f) {
    var v7 = f;
    Fe2.style[v7] = l7[v7];
  }), Uv(Fe2), Fe2.value = t;
  var c = Gv(Fe2, e7);
  Fe2.value = t, c = Gv(Fe2, e7), Fe2.value = "x";
  var p = Fe2.scrollHeight - o, d = p * r;
  u6 === "border-box" && (d = d + o + i), c = Math.max(d, c);
  var h7 = p * n;
  return u6 === "border-box" && (h7 = h7 + o + i), c = Math.min(h7, c), [c, p];
}
a2(kI, "calculateNodeHeight");
var Xv = a2(function() {
}, "noop");
var TI = a2(function(t, r) {
  return t.reduce(function(n, o) {
    return n[o] = r[o], n;
  }, {});
}, "pick");
var LI = [
  "borderBottomWidth",
  "borderLeftWidth",
  "borderRightWidth",
  "borderTopWidth",
  "boxSizing",
  "fontFamily",
  "fontSize",
  "fontStyle",
  "fontWeight",
  "letterSpacing",
  "lineHeight",
  "paddingBottom",
  "paddingLeft",
  "paddingRight",
  "paddingTop",
  // non-standard
  "tabSize",
  "textIndent",
  // non-standard
  "textRendering",
  "textTransform",
  "width",
  "wordBreak"
];
var II = !!document.documentElement.currentStyle;
var BI = a2(function(t) {
  var r = window.getComputedStyle(t);
  if (r === null)
    return null;
  var n = TI(LI, r), o = n.boxSizing;
  if (o === "")
    return null;
  II && o === "border-box" && (n.width = parseFloat(n.width) + parseFloat(n.borderRightWidth) + parseFloat(n.borderLeftWidth) + parseFloat(n.paddingRight) + parseFloat(n.paddingLeft) + "px");
  var i = parseFloat(n.paddingBottom) + parseFloat(n.paddingTop), l7 = parseFloat(n.borderBottomWidth) + parseFloat(n.borderTopWidth);
  return {
    sizingStyle: n,
    paddingSize: i,
    borderSize: l7
  };
}, "getSizingData");
var MI = BI;
function Yv(e7, t, r) {
  var n = jv(r);
  st2.useLayoutEffect(function() {
    var o = a2(function(l7) {
      return n.current(l7);
    }, "handler");
    if (e7)
      return e7.addEventListener(t, o), function() {
        return e7.removeEventListener(t, o);
      };
  }, []);
}
a2(Yv, "useListener");
var _I = a2(function(t) {
  Yv(window, "resize", t);
}, "useWindowResizeListener");
var PI = a2(function(t) {
  Yv(document.fonts, "loadingdone", t);
}, "useFontsLoadedListener");
var HI = ["cacheMeasurements", "maxRows", "minRows", "onChange", "onHeightChange"];
var $I = a2(function(t, r) {
  var n = t.cacheMeasurements, o = t.maxRows, i = t.minRows, l7 = t.onChange, u6 = l7 === void 0 ? Xv : l7, c = t.onHeightChange, p = c === void 0 ? Xv : c, d = sn2(t, HI), h7 = d.value !== void 0, f = st2.useRef(null), v7 = qv(f, r), b = st2.useRef(0), m = st2.useRef(), g7 = a2(
    function() {
      var D7 = f.current, x7 = n && m.current ? m.current : MI(D7);
      if (x7) {
        m.current = x7;
        var C7 = kI(x7, D7.value || D7.placeholder || "x", i, o), E7 = C7[0], S4 = C7[1];
        b.current !== E7 && (b.current = E7, D7.style.setProperty("height", E7 + "px", "important"), p(E7, {
          rowHeight: S4
        }));
      }
    },
    "resizeTextarea"
  ), y = a2(function(D7) {
    h7 || g7(), u6(D7);
  }, "handleChange");
  return st2.useLayoutEffect(g7), _I(g7), PI(g7), st2.createElement("textarea", H2({}, d, {
    onChange: y,
    ref: v7
  }));
}, "TextareaAutosize");
var Kv = st2.forwardRef($I);
var zI = {
  // resets
  appearance: "none",
  border: "0 none",
  boxSizing: "inherit",
  display: " block",
  margin: " 0",
  background: "transparent",
  padding: 0,
  fontSize: "inherit",
  position: "relative"
};
var K0 = a2(({ theme: e7 }) => ({
  ...zI,
  transition: "box-shadow 200ms ease-out, opacity 200ms ease-out",
  color: e7.input.color || "inherit",
  background: e7.input.background,
  boxShadow: `${e7.input.border} 0 0 0 1px inset`,
  borderRadius: e7.input.borderRadius,
  fontSize: e7.typography.size.s2 - 1,
  lineHeight: "20px",
  padding: "6px 10px",
  // 32
  boxSizing: "border-box",
  height: 32,
  '&[type="file"]': {
    height: "auto"
  },
  "&:focus": {
    boxShadow: `${e7.color.secondary} 0 0 0 1px inset`,
    outline: "none"
  },
  "&[disabled]": {
    cursor: "not-allowed",
    opacity: 0.5
  },
  "&:-webkit-autofill": { WebkitBoxShadow: `0 0 0 3em ${e7.color.lightest} inset` },
  "&::placeholder": {
    color: e7.textMutedColor,
    opacity: 1
  }
}), "styles");
var Z0 = a2(({ size: e7 }) => {
  switch (e7) {
    case "100%":
      return { width: "100%" };
    case "flex":
      return { flex: 1 };
    case "auto":
    default:
      return { display: "inline" };
  }
}, "sizes");
var Zv = a2(({
  align: e7
}) => {
  switch (e7) {
    case "end":
      return { textAlign: "right" };
    case "center":
      return { textAlign: "center" };
    case "start":
    default:
      return { textAlign: "left" };
  }
}, "alignment");
var J0 = a2(({ valid: e7, theme: t }) => {
  switch (e7) {
    case "valid":
      return { boxShadow: `${t.color.positive} 0 0 0 1px inset !important` };
    case "error":
      return { boxShadow: `${t.color.negative} 0 0 0 1px inset !important` };
    case "warn":
      return {
        boxShadow: `${t.color.warning} 0 0 0 1px inset`
      };
    case void 0:
    case null:
    default:
      return {};
  }
}, "validation");
var Jv = Object.assign(
  Tr(
    (0, import_react44.forwardRef)(a2(function({ size: t, valid: r, align: n, ...o }, i) {
      return import_react44.default.createElement("input", { ...o, ref: i });
    }, "Input"))
  )(K0, Z0, Zv, J0, {
    minHeight: 32
  }),
  {
    displayName: "Input"
  }
);
var Qv = Object.assign(
  Tr(
    (0, import_react44.forwardRef)(a2(function({ size: t, valid: r, align: n, ...o }, i) {
      return import_react44.default.createElement("select", { ...o, ref: i });
    }, "Select"))
  )(K0, Z0, J0, {
    height: 32,
    userSelect: "none",
    paddingRight: 20,
    appearance: "menulist"
  }),
  {
    displayName: "Select"
  }
);
var e3 = Object.assign(
  Tr(
    (0, import_react44.forwardRef)(a2(function({ size: t, valid: r, align: n, ...o }, i) {
      return import_react44.default.createElement(Kv, { ...o, ref: i });
    }, "Textarea"))
  )(K0, Z0, Zv, J0, ({ height: e7 = 400 }) => ({
    overflow: "visible",
    maxHeight: e7
  })),
  {
    displayName: "Textarea"
  }
);
var NI = Object.assign(
  Tr.form({
    boxSizing: "border-box",
    width: "100%"
  }),
  {
    Field: zv,
    Input: Jv,
    Select: Qv,
    Textarea: e3,
    Button: Lo
  }
);
var HB = (0, import_react47.lazy)(
  () => Promise.resolve().then(() => (Yl(), T1)).then((e7) => ({ default: e7.WithTooltip }))
);
var $B = a2((e7) => import_react47.default.createElement(import_react47.Suspense, { fallback: import_react47.default.createElement("div", null) }, import_react47.default.createElement(HB, { ...e7 })), "WithTooltip");
var zB = (0, import_react47.lazy)(
  () => Promise.resolve().then(() => (Yl(), T1)).then((e7) => ({ default: e7.WithTooltipPure }))
);
var OB = a2((e7) => import_react47.default.createElement(import_react47.Suspense, { fallback: import_react47.default.createElement("div", null) }, import_react47.default.createElement(zB, { ...e7 })), "WithTooltipPure");
var NB = Tr.div(({ theme: e7 }) => ({
  fontWeight: e7.typography.weight.bold
}));
var jB = Tr.span();
var VB = Tr.div(({ theme: e7 }) => ({
  marginTop: 8,
  textAlign: "center",
  "> *": {
    margin: "0 8px",
    fontWeight: e7.typography.weight.bold
  }
}));
var qB = Tr.div(({ theme: e7 }) => ({
  color: e7.color.defaultText,
  lineHeight: "18px"
}));
var WB = Tr.div({
  padding: 15,
  width: 280,
  boxSizing: "border-box"
});
var UB = a2(({ title: e7, desc: t, links: r }) => import_react48.default.createElement(WB, null, import_react48.default.createElement(
  qB,
  null,
  e7 && import_react48.default.createElement(NB, null, e7),
  t && import_react48.default.createElement(jB, null, t)
), r && import_react48.default.createElement(
  VB,
  null,
  r.map(({ title: n, ...o }) => import_react48.default.createElement(ju, { ...o, key: n }, n))
)), "TooltipMessage");
var YB = Tr.div(({ theme: e7 }) => ({
  padding: "2px 6px",
  lineHeight: "16px",
  fontSize: 10,
  fontWeight: e7.typography.weight.bold,
  color: e7.color.lightest,
  boxShadow: "0 0 5px 0 rgba(0, 0, 0, 0.3)",
  borderRadius: 4,
  whiteSpace: "nowrap",
  pointerEvents: "none",
  zIndex: -1,
  background: e7.base === "light" ? "rgba(60, 60, 60, 0.9)" : "rgba(0, 0, 0, 0.95)",
  margin: 6
}));
var KB = a2(({ note: e7, ...t }) => import_react49.default.createElement(YB, { ...t }, e7), "TooltipNote");
var m4 = we2(Qo(), 1);
var ZB = Tr(({ active: e7, loading: t, disabled: r, ...n }) => import_react51.default.createElement("span", { ...n }))(
  ({ theme: e7 }) => ({
    color: e7.color.defaultText,
    // Previously was theme.typography.weight.normal but this weight does not exists in Theme
    fontWeight: e7.typography.weight.regular
  }),
  ({ active: e7, theme: t }) => e7 ? {
    color: t.color.secondary,
    fontWeight: t.typography.weight.bold
  } : {},
  ({ loading: e7, theme: t }) => e7 ? {
    display: "inline-block",
    flex: "none",
    ...t.animation.inlineGlow
  } : {},
  ({ disabled: e7, theme: t }) => e7 ? {
    color: be2(0.7, t.color.defaultText)
  } : {}
);
var JB = Tr.span({
  display: "flex",
  "& svg": {
    height: 12,
    width: 12,
    margin: "3px 0",
    verticalAlign: "top"
  },
  "& path": {
    fill: "inherit"
  }
});
var QB = Tr.span(
  {
    flex: 1,
    textAlign: "left",
    display: "flex",
    flexDirection: "column"
  },
  ({ isIndented: e7 }) => e7 ? { marginLeft: 24 } : {}
);
var eM = Tr.span(
  ({ theme: e7 }) => ({
    fontSize: "11px",
    lineHeight: "14px"
  }),
  ({ active: e7, theme: t }) => e7 ? {
    color: t.color.secondary
  } : {},
  ({ theme: e7, disabled: t }) => t ? {
    color: e7.textMutedColor
  } : {}
);
var tM = Tr.span(
  ({ active: e7, theme: t }) => e7 ? {
    color: t.color.secondary
  } : {},
  () => ({
    display: "flex",
    maxWidth: 14
  })
);
var rM = Tr.div(
  ({ theme: e7 }) => ({
    width: "100%",
    border: "none",
    background: "none",
    fontSize: e7.typography.size.s1,
    transition: "all 150ms ease-out",
    color: e7.color.dark,
    textDecoration: "none",
    justifyContent: "space-between",
    lineHeight: "18px",
    padding: "7px 10px",
    display: "flex",
    alignItems: "center",
    "& > * + *": {
      paddingLeft: 10
    }
  }),
  ({ theme: e7, href: t, onClick: r }) => (t || r) && {
    cursor: "pointer",
    "&:hover": {
      background: e7.background.hoverable
    },
    "&:hover svg": {
      opacity: 1
    }
  },
  ({ disabled: e7 }) => e7 && { cursor: "not-allowed" }
);
var nM = (0, m4.default)(100)((e7, t, r) => ({
  ...e7 && {
    as: "button",
    onClick: e7
  },
  ...t && {
    as: "a",
    href: t,
    ...r && {
      as: r,
      to: t
    }
  }
}));
var oM = a2(({
  loading: e7 = false,
  title: t = import_react51.default.createElement("span", null, "Loading state"),
  center: r = null,
  right: n = null,
  active: o = false,
  disabled: i = false,
  isIndented: l7,
  href: u6 = void 0,
  onClick: c = void 0,
  icon: p,
  LinkWrapper: d = void 0,
  ...h7
}) => {
  let f = { active: o, disabled: i }, v7 = nM(c, u6, d);
  return import_react51.default.createElement(rM, { ...h7, ...f, ...v7 }, import_react51.default.createElement(import_react51.default.Fragment, null, p && import_react51.default.createElement(tM, { ...f }, p), t || r ? import_react51.default.createElement(QB, { isIndented: !!(!p && l7) }, t && import_react51.default.createElement(
    ZB,
    { ...f, loading: e7 },
    t
  ), r && import_react51.default.createElement(eM, { ...f }, r)) : null, n && import_react51.default.createElement(
    JB,
    { ...f },
    n
  )));
}, "ListItem");
var L1 = oM;
var lM = Tr.div(
  {
    minWidth: 180,
    overflow: "hidden",
    overflowY: "auto",
    maxHeight: 15.5 * 32
    // 11.5 items
  },
  ({ theme: e7 }) => ({
    borderRadius: e7.appBorderRadius
  })
);
var sM = a2(({ id: e7, onClick: t, ...r }) => {
  let { active: n, disabled: o, title: i, href: l7 } = r, u6 = (0, import_react50.useCallback)(
    (c) => t == null ? void 0 : t(c, { id: e7, active: n, disabled: o, title: i, href: l7 }),
    [t, e7, n, o, i, l7]
  );
  return import_react50.default.createElement(L1, { id: `list-item-${e7}`, ...r, ...t && { onClick: u6 } });
}, "Item");
var B1 = a2(({ links: e7, LinkWrapper: t, ...r }) => {
  let n = e7.some((o) => o.icon);
  return import_react50.default.createElement(lM, { ...r }, e7.map((o) => import_react50.default.createElement(sM, {
    key: o.id,
    isIndented: n,
    LinkWrapper: t,
    ...o
  })));
}, "TooltipLinkList");
Ci();
var M1 = Tr.div(
  {
    display: "flex",
    whiteSpace: "nowrap",
    flexBasis: "auto",
    marginLeft: 3,
    marginRight: 3
  },
  ({ scrollable: e7 }) => e7 ? { flexShrink: 0 } : {},
  ({ left: e7 }) => e7 ? {
    "& > *": {
      marginLeft: 4
    }
  } : {},
  ({ right: e7 }) => e7 ? {
    marginLeft: 30,
    "& > *": {
      marginRight: 4
    }
  } : {}
);
M1.displayName = "Side";
var cM = a2(({ children: e7, className: t, scrollable: r }) => r ? import_react53.default.createElement(
  wn2,
  { vertical: false, className: t },
  e7
) : import_react53.default.createElement("div", { className: t }, e7), "UnstyledBar");
var P1 = Tr(cM)(
  ({ theme: e7, scrollable: t = true }) => ({
    color: e7.barTextColor,
    width: "100%",
    height: 40,
    flexShrink: 0,
    overflow: t ? "auto" : "hidden",
    overflowY: "hidden"
  }),
  ({ theme: e7, border: t = false }) => t ? {
    boxShadow: `${e7.appBorderColor}  0 -1px 0 0 inset`,
    background: e7.barBg
  } : {}
);
P1.displayName = "Bar";
var pM = Tr.div(({ bgColor: e7 }) => ({
  display: "flex",
  justifyContent: "space-between",
  position: "relative",
  flexWrap: "nowrap",
  flexShrink: 0,
  height: 40,
  backgroundColor: e7 || ""
}));
var Kl = a2(({ children: e7, backgroundColor: t, className: r, ...n }) => {
  let [o, i] = import_react53.Children.toArray(e7);
  return import_react53.default.createElement(P1, { className: `sb-bar ${r}`, ...n }, import_react53.default.createElement(pM, { bgColor: t }, import_react53.default.createElement(M1, { scrollable: n.scrollable, left: true }, o), i ? import_react53.default.createElement(M1, { right: true }, i) : null));
}, "FlexBar");
Kl.displayName = "FlexBar";
var hM = a2((e7) => typeof e7.props.href == "string", "isLink");
var mM = a2(
  (e7) => typeof e7.props.href != "string",
  "isButton"
);
function gM({ children: e7, ...t }, r) {
  let n = { props: t, ref: r };
  if (hM(n))
    return import_react54.default.createElement("a", { ref: n.ref, ...n.props }, e7);
  if (mM(n))
    return import_react54.default.createElement("button", { ref: n.ref, type: "button", ...n.props }, e7);
  throw new Error("invalid props");
}
a2(gM, "ForwardRefFunction");
var g4 = (0, import_react54.forwardRef)(gM);
g4.displayName = "ButtonOrLink";
var rn2 = Tr(g4, { shouldForwardProp: sr })(
  {
    whiteSpace: "normal",
    display: "inline-flex",
    overflow: "hidden",
    verticalAlign: "top",
    justifyContent: "center",
    alignItems: "center",
    textAlign: "center",
    textDecoration: "none",
    "&:empty": {
      display: "none"
    },
    "&[hidden]": {
      display: "none"
    }
  },
  ({ theme: e7 }) => ({
    padding: "0 15px",
    transition: "color 0.2s linear, border-bottom-color 0.2s linear",
    height: 40,
    lineHeight: "12px",
    cursor: "pointer",
    background: "transparent",
    border: "0 solid transparent",
    borderTop: "3px solid transparent",
    borderBottom: "3px solid transparent",
    fontWeight: "bold",
    fontSize: 13,
    "&:focus": {
      outline: "0 none",
      borderBottomColor: e7.barSelectedColor
    }
  }),
  ({ active: e7, textColor: t, theme: r }) => e7 ? {
    color: t || r.barSelectedColor,
    borderBottomColor: r.barSelectedColor
  } : {
    color: t || r.barTextColor,
    borderBottomColor: "transparent",
    "&:hover": {
      color: r.barHoverColor
    }
  }
);
rn2.displayName = "TabButton";
var vM = Tr.div(({ theme: e7 }) => ({
  width: 14,
  height: 14,
  backgroundColor: e7.appBorderColor,
  animation: `${e7.animation.glow} 1.5s ease-in-out infinite`
}));
var wM = Tr.div(() => ({
  marginTop: 6,
  padding: 7,
  height: 28
}));
var bM = a2(() => import_react54.default.createElement(wM, null, import_react54.default.createElement(vM, null)), "IconButtonSkeleton");
var yM = Tr.div(({ theme: e7 }) => ({
  height: "100%",
  display: "flex",
  padding: 30,
  alignItems: "center",
  justifyContent: "center",
  flexDirection: "column",
  gap: 15,
  background: e7.background.content
}));
var DM = Tr.div({
  display: "flex",
  flexDirection: "column",
  gap: 4,
  maxWidth: 415
});
var xM = Tr.div(({ theme: e7 }) => ({
  fontWeight: e7.typography.weight.bold,
  fontSize: e7.typography.size.s2 - 1,
  textAlign: "center",
  color: e7.textColor
}));
var CM = Tr.div(({ theme: e7 }) => ({
  fontWeight: e7.typography.weight.regular,
  fontSize: e7.typography.size.s2 - 1,
  textAlign: "center",
  color: e7.textMutedColor
}));
var $1 = a2(({ title: e7, description: t, footer: r }) => import_react55.default.createElement(yM, null, import_react55.default.createElement(
  DM,
  null,
  import_react55.default.createElement(xM, null, e7),
  t && import_react55.default.createElement(CM, null, t)
), r), "EmptyTabContent");
var z1 = Tr.div(
  ({ active: e7 }) => e7 ? { display: "block" } : { display: "none" }
);
var v4 = a2((e7) => import_react56.Children.toArray(e7).map(
  // @ts-expect-error (non strict)
  ({
    props: { title: t, id: r, color: n, children: o }
  }) => {
    let i = Array.isArray(
      o
    ) ? o[0] : o;
    return {
      title: t,
      id: r,
      ...n ? { color: n } : {},
      render: typeof i == "function" ? i : ({ active: u6 }) => import_react56.default.createElement(z1, { active: u6, role: "tabpanel" }, i)
    };
  }
), "childrenToList");
Yl();
var kM = Tr.span(({ theme: e7, isActive: t }) => ({
  display: "inline-block",
  width: 0,
  height: 0,
  marginLeft: 8,
  color: t ? e7.color.secondary : e7.color.mediumdark,
  borderRight: "3px solid transparent",
  borderLeft: "3px solid transparent",
  borderTop: "3px solid",
  transition: "transform .1s ease-out"
}));
var TM = Tr(rn2)(({ active: e7, theme: t, preActive: r }) => `
    color: ${r || e7 ? t.barSelectedColor : t.barTextColor};
    .addon-collapsible-icon {
      color: ${r || e7 ? t.barSelectedColor : t.barTextColor};
    }
    &:hover {
      color: ${t.barHoverColor};
      .addon-collapsible-icon {
        color: ${t.barHoverColor};
      }
    }
  `);
function y4(e7) {
  let t = (0, import_react57.useRef)(), r = (0, import_react57.useRef)(), n = (0, import_react57.useRef)(/* @__PURE__ */ new Map()), { width: o = 1 } = Bl({
    // @ts-expect-error (non strict)
    ref: t
  }), [i, l7] = (0, import_react57.useState)(e7), [u6, c] = (0, import_react57.useState)([]), p = (0, import_react57.useRef)(e7), d = (0, import_react57.useCallback)(
    ({
      menuName: f,
      actions: v7
    }) => {
      let b = u6.some(({ active: y }) => y), [m, g7] = (0, import_react57.useState)(false);
      return import_react57.default.createElement(import_react57.default.Fragment, null, import_react57.default.createElement(
        k1,
        {
          interactive: true,
          visible: m,
          onVisibleChange: g7,
          placement: "bottom",
          delayHide: 100,
          tooltip: import_react57.default.createElement(
            B1,
            {
              links: u6.map(({ title: y, id: w5, color: D7, active: x7 }) => ({
                id: w5,
                title: y,
                color: D7,
                active: x7,
                onClick: a2((C7) => {
                  C7.preventDefault(), v7.onSelect(w5);
                }, "onClick")
              }))
            }
          )
        },
        import_react57.default.createElement(
          TM,
          {
            ref: r,
            active: b,
            preActive: m,
            style: { visibility: u6.length ? "visible" : "hidden" },
            "aria-hidden": !u6.length,
            className: "tabbutton",
            type: "button",
            role: "tab"
          },
          f,
          import_react57.default.createElement(
            kM,
            {
              className: "addon-collapsible-icon",
              isActive: b || m
            }
          )
        )
      ), u6.map(({ title: y, id: w5, color: D7 }, x7) => {
        let C7 = `index-${x7}`;
        return import_react57.default.createElement(
          rn2,
          {
            id: `tabbutton-${O2(w5) ?? C7}`,
            style: { visibility: "hidden" },
            "aria-hidden": true,
            tabIndex: -1,
            ref: (E7) => {
              n.current.set(w5, E7);
            },
            className: "tabbutton",
            type: "button",
            key: w5,
            textColor: D7,
            role: "tab"
          },
          y
        );
      }));
    },
    [u6]
  ), h7 = (0, import_react57.useCallback)(() => {
    if (!t.current || !r.current)
      return;
    let { x: f, width: v7 } = t.current.getBoundingClientRect(), { width: b } = r.current.getBoundingClientRect(), m = u6.length ? f + v7 - b : f + v7, g7 = [], y = 0, w5 = e7.filter((D7) => {
      let { id: x7 } = D7, C7 = n.current.get(x7), { width: E7 = 0 } = (C7 == null ? void 0 : C7.getBoundingClientRect()) || {}, S4 = f + y + E7 > m;
      return (!S4 || !C7) && g7.push(D7), y += E7, S4;
    });
    (g7.length !== i.length || p.current !== e7) && (l7(g7), c(w5), p.current = e7);
  }, [u6.length, e7, i]);
  return (0, import_react57.useLayoutEffect)(h7, [h7, o]), {
    tabRefs: n,
    addonsRef: r,
    tabBarRef: t,
    visibleList: i,
    invisibleList: u6,
    AddonTab: d
  };
}
a2(y4, "useList");
var _M = "/* emotion-disable-server-rendering-unsafe-selector-warning-please-do-not-use-this-the-warning-exists-for-a-reason */";
var PM = Tr.div(
  ({ theme: e7, bordered: t }) => t ? {
    backgroundClip: "padding-box",
    border: `1px solid ${e7.appBorderColor}`,
    borderRadius: e7.appBorderRadius,
    overflow: "hidden",
    boxSizing: "border-box"
  } : {},
  ({ absolute: e7 }) => e7 ? {
    width: "100%",
    height: "100%",
    boxSizing: "border-box",
    display: "flex",
    flexDirection: "column"
  } : {
    display: "block"
  }
);
var V1 = Tr.div({
  overflow: "hidden",
  "&:first-of-type": {
    marginLeft: -3
  },
  whiteSpace: "nowrap",
  flexGrow: 1
});
V1.displayName = "TabBar";
var HM = Tr.div(
  {
    display: "block",
    position: "relative"
  },
  ({ theme: e7 }) => ({
    fontSize: e7.typography.size.s2 - 1,
    background: e7.background.content
  }),
  ({ bordered: e7, theme: t }) => e7 ? {
    borderRadius: `0 0 ${t.appBorderRadius - 1}px ${t.appBorderRadius - 1}px`
  } : {},
  ({ absolute: e7, bordered: t }) => e7 ? {
    height: `calc(100% - ${t ? 42 : 40}px)`,
    position: "absolute",
    left: 0 + (t ? 1 : 0),
    right: 0 + (t ? 1 : 0),
    bottom: 0 + (t ? 1 : 0),
    top: 40 + (t ? 1 : 0),
    overflow: "auto",
    [`& > *:first-child${_M}`]: {
      position: "absolute",
      left: 0 + (t ? 1 : 0),
      right: 0 + (t ? 1 : 0),
      bottom: 0 + (t ? 1 : 0),
      top: 0 + (t ? 1 : 0),
      height: `calc(100% - ${t ? 2 : 0}px)`,
      overflow: "auto"
    }
  } : {}
);
var $M = a2(({ active: e7, render: t, children: r }) => import_react52.default.createElement(z1, { active: e7 }, t ? t() : r), "TabWrapper");
var q1 = (0, import_react52.memo)(
  ({
    children: e7,
    selected: t = null,
    actions: r,
    absolute: n = false,
    bordered: o = false,
    tools: i = null,
    backgroundColor: l7,
    id: u6 = null,
    menuName: c = "Tabs",
    emptyState: p,
    showToolsWhenEmpty: d
  }) => {
    let h7 = (0, import_react52.useMemo)(
      () => v4(e7).map((y, w5) => ({
        ...y,
        active: t ? y.id === t : w5 === 0
      })),
      [e7, t]
    ), { visibleList: f, tabBarRef: v7, tabRefs: b, AddonTab: m } = y4(h7), g7 = p ?? import_react52.default.createElement($1, { title: "Nothing found" });
    return !d && h7.length === 0 ? g7 : (
      // @ts-expect-error (non strict)
      import_react52.default.createElement(PM, { absolute: n, bordered: o, id: u6 }, import_react52.default.createElement(Kl, {
        scrollable: false,
        border: true,
        backgroundColor: l7
      }, import_react52.default.createElement(V1, { style: { whiteSpace: "normal" }, ref: v7, role: "tablist" }, f.map(({
        title: y,
        id: w5,
        active: D7,
        color: x7
      }, C7) => {
        let E7 = `index-${C7}`;
        return import_react52.default.createElement(
          rn2,
          {
            id: `tabbutton-${O2(w5) ?? E7}`,
            ref: (S4) => {
              b.current.set(w5, S4);
            },
            className: `tabbutton ${D7 ? "tabbutton-active" : ""}`,
            type: "button",
            key: w5,
            active: D7,
            textColor: x7,
            onClick: (S4) => {
              S4.preventDefault(), r.onSelect(w5);
            },
            role: "tab"
          },
          typeof y == "function" ? import_react52.default.createElement("title", null) : y
        );
      }), import_react52.default.createElement(m, { menuName: c, actions: r })), i), import_react52.default.createElement(HM, { id: "panel-tab-content", bordered: o, absolute: n }, h7.length ? h7.map(({ id: y, active: w5, render: D7 }) => import_react52.default.createElement(D7, { key: y, active: w5 }, null)) : g7))
    );
  }
);
q1.displayName = "Tabs";
var ts = class ts2 extends import_react52.Component {
  constructor(r) {
    super(r);
    this.handlers = {
      onSelect: a2((r7) => this.setState({ selected: r7 }), "onSelect")
    };
    this.state = {
      selected: r.initial
    };
  }
  render() {
    let { bordered: r = false, absolute: n = false, children: o, backgroundColor: i, menuName: l7 } = this.props, { selected: u6 } = this.state;
    return import_react52.default.createElement(
      q1,
      {
        bordered: r,
        absolute: n,
        selected: u6,
        backgroundColor: i,
        menuName: l7,
        actions: this.handlers
      },
      o
    );
  }
};
a2(ts, "TabsState"), ts.defaultProps = {
  children: [],
  // @ts-expect-error (non strict)
  initial: null,
  absolute: false,
  bordered: false,
  backgroundColor: "",
  // @ts-expect-error (non strict)
  menuName: void 0
};
var N1 = ts;
var W1 = Tr.span(
  ({ theme: e7 }) => ({
    width: 1,
    height: 20,
    background: e7.appBorderColor,
    marginLeft: 2,
    marginRight: 2
  }),
  ({ force: e7 }) => e7 ? {} : {
    "& + &": {
      display: "none"
    }
  }
);
W1.displayName = "Separator";
var NM = a2((e7) => e7.reduce(
  (t, r, n) => r ? import_react58.default.createElement(import_react58.Fragment, { key: r.id || r.key || `f-${n}` }, t, n > 0 ? import_react58.default.createElement(W1, {
    key: `s-${n}`
  }) : null, r.render() || r) : t,
  null
), "interleaveSeparators");
var WM = a2((e7) => {
  let t = (0, import_react59.useRef)();
  return (0, import_react59.useEffect)(() => {
    t.current = e7;
  }, [e7]), t.current;
}, "usePrevious");
var UM = a2((e7, t) => {
  let r = WM(t);
  return e7 ? t : r;
}, "useUpdate");
var GM = a2(({ active: e7, children: t }) => (
  // the hidden attribute is an valid html element that's both accessible and works to visually hide content
  import_react59.default.createElement("div", { hidden: !e7 }, UM(e7, t))
), "AddonPanel");
var JM = Ou;
var QM = Tr.svg`
  display: inline-block;
  shape-rendering: inherit;
  vertical-align: middle;
  fill: currentColor;
  path {
    fill: currentColor;
  }
`;
var e_ = a2(({
  icon: e7,
  useSymbol: t,
  __suppressDeprecationWarning: r = false,
  ...n
}) => {
  r || (0, import_client_logger5.deprecate)(
    `Use of the deprecated Icons ${`(${e7})` || ""} component detected. Please use the @storybook/icons component directly. For more informations, see the migration notes at https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#icons-is-deprecated`
  );
  let o = rs2[e7] || null;
  if (!o)
    return import_client_logger5.logger.warn(
      `Use of an unknown prop ${`(${e7})` || ""} in the Icons component. The Icons component is deprecated. Please use the @storybook/icons component directly. For more informations, see the migration notes at https://github.com/storybookjs/storybook/blob/next/MIGRATION.md#icons-is-deprecated`
    ), null;
  let i = JM[o];
  return import_react60.default.createElement(i, { ...n });
}, "Icons");
var t_ = (0, import_react60.memo)(a2(function({ icons: t = Object.keys(rs2) }) {
  return import_react60.default.createElement(
    QM,
    {
      viewBox: "0 0 14 14",
      style: { position: "absolute", width: 0, height: 0 },
      "data-chromatic": "ignore"
    },
    t.map((r) => import_react60.default.createElement("symbol", { id: `icon--${r}`, key: r }, rs2[r]))
  );
}, "Symbols"));
var rs2 = {
  user: "UserIcon",
  useralt: "UserAltIcon",
  useradd: "UserAddIcon",
  users: "UsersIcon",
  profile: "ProfileIcon",
  facehappy: "FaceHappyIcon",
  faceneutral: "FaceNeutralIcon",
  facesad: "FaceSadIcon",
  accessibility: "AccessibilityIcon",
  accessibilityalt: "AccessibilityAltIcon",
  arrowup: "ChevronUpIcon",
  arrowdown: "ChevronDownIcon",
  arrowleft: "ChevronLeftIcon",
  arrowright: "ChevronRightIcon",
  arrowupalt: "ArrowUpIcon",
  arrowdownalt: "ArrowDownIcon",
  arrowleftalt: "ArrowLeftIcon",
  arrowrightalt: "ArrowRightIcon",
  expandalt: "ExpandAltIcon",
  collapse: "CollapseIcon",
  expand: "ExpandIcon",
  unfold: "UnfoldIcon",
  transfer: "TransferIcon",
  redirect: "RedirectIcon",
  undo: "UndoIcon",
  reply: "ReplyIcon",
  sync: "SyncIcon",
  upload: "UploadIcon",
  download: "DownloadIcon",
  back: "BackIcon",
  proceed: "ProceedIcon",
  refresh: "RefreshIcon",
  globe: "GlobeIcon",
  compass: "CompassIcon",
  location: "LocationIcon",
  pin: "PinIcon",
  time: "TimeIcon",
  dashboard: "DashboardIcon",
  timer: "TimerIcon",
  home: "HomeIcon",
  admin: "AdminIcon",
  info: "InfoIcon",
  question: "QuestionIcon",
  support: "SupportIcon",
  alert: "AlertIcon",
  email: "EmailIcon",
  phone: "PhoneIcon",
  link: "LinkIcon",
  unlink: "LinkBrokenIcon",
  bell: "BellIcon",
  rss: "RSSIcon",
  sharealt: "ShareAltIcon",
  share: "ShareIcon",
  circle: "CircleIcon",
  circlehollow: "CircleHollowIcon",
  bookmarkhollow: "BookmarkHollowIcon",
  bookmark: "BookmarkIcon",
  hearthollow: "HeartHollowIcon",
  heart: "HeartIcon",
  starhollow: "StarHollowIcon",
  star: "StarIcon",
  certificate: "CertificateIcon",
  verified: "VerifiedIcon",
  thumbsup: "ThumbsUpIcon",
  shield: "ShieldIcon",
  basket: "BasketIcon",
  beaker: "BeakerIcon",
  hourglass: "HourglassIcon",
  flag: "FlagIcon",
  cloudhollow: "CloudHollowIcon",
  edit: "EditIcon",
  cog: "CogIcon",
  nut: "NutIcon",
  wrench: "WrenchIcon",
  ellipsis: "EllipsisIcon",
  check: "CheckIcon",
  form: "FormIcon",
  batchdeny: "BatchDenyIcon",
  batchaccept: "BatchAcceptIcon",
  controls: "ControlsIcon",
  plus: "PlusIcon",
  closeAlt: "CloseAltIcon",
  cross: "CrossIcon",
  trash: "TrashIcon",
  pinalt: "PinAltIcon",
  unpin: "UnpinIcon",
  add: "AddIcon",
  subtract: "SubtractIcon",
  close: "CloseIcon",
  delete: "DeleteIcon",
  passed: "PassedIcon",
  changed: "ChangedIcon",
  failed: "FailedIcon",
  clear: "ClearIcon",
  comment: "CommentIcon",
  commentadd: "CommentAddIcon",
  requestchange: "RequestChangeIcon",
  comments: "CommentsIcon",
  lock: "LockIcon",
  unlock: "UnlockIcon",
  key: "KeyIcon",
  outbox: "OutboxIcon",
  credit: "CreditIcon",
  button: "ButtonIcon",
  type: "TypeIcon",
  pointerdefault: "PointerDefaultIcon",
  pointerhand: "PointerHandIcon",
  browser: "BrowserIcon",
  tablet: "TabletIcon",
  mobile: "MobileIcon",
  watch: "WatchIcon",
  sidebar: "SidebarIcon",
  sidebaralt: "SidebarAltIcon",
  sidebaralttoggle: "SidebarAltToggleIcon",
  sidebartoggle: "SidebarToggleIcon",
  bottombar: "BottomBarIcon",
  bottombartoggle: "BottomBarToggleIcon",
  cpu: "CPUIcon",
  database: "DatabaseIcon",
  memory: "MemoryIcon",
  structure: "StructureIcon",
  box: "BoxIcon",
  power: "PowerIcon",
  photo: "PhotoIcon",
  component: "ComponentIcon",
  grid: "GridIcon",
  outline: "OutlineIcon",
  photodrag: "PhotoDragIcon",
  search: "SearchIcon",
  zoom: "ZoomIcon",
  zoomout: "ZoomOutIcon",
  zoomreset: "ZoomResetIcon",
  eye: "EyeIcon",
  eyeclose: "EyeCloseIcon",
  lightning: "LightningIcon",
  lightningoff: "LightningOffIcon",
  contrast: "ContrastIcon",
  switchalt: "SwitchAltIcon",
  mirror: "MirrorIcon",
  grow: "GrowIcon",
  paintbrush: "PaintBrushIcon",
  ruler: "RulerIcon",
  stop: "StopIcon",
  camera: "CameraIcon",
  video: "VideoIcon",
  speaker: "SpeakerIcon",
  play: "PlayIcon",
  playback: "PlayBackIcon",
  playnext: "PlayNextIcon",
  rewind: "RewindIcon",
  fastforward: "FastForwardIcon",
  stopalt: "StopAltIcon",
  sidebyside: "SideBySideIcon",
  stacked: "StackedIcon",
  sun: "SunIcon",
  moon: "MoonIcon",
  book: "BookIcon",
  document: "DocumentIcon",
  copy: "CopyIcon",
  category: "CategoryIcon",
  folder: "FolderIcon",
  print: "PrintIcon",
  graphline: "GraphLineIcon",
  calendar: "CalendarIcon",
  graphbar: "GraphBarIcon",
  menu: "MenuIcon",
  menualt: "MenuIcon",
  filter: "FilterIcon",
  docchart: "DocChartIcon",
  doclist: "DocListIcon",
  markup: "MarkupIcon",
  bold: "BoldIcon",
  paperclip: "PaperClipIcon",
  listordered: "ListOrderedIcon",
  listunordered: "ListUnorderedIcon",
  paragraph: "ParagraphIcon",
  markdown: "MarkdownIcon",
  repository: "RepoIcon",
  commit: "CommitIcon",
  branch: "BranchIcon",
  pullrequest: "PullRequestIcon",
  merge: "MergeIcon",
  apple: "AppleIcon",
  linux: "LinuxIcon",
  ubuntu: "UbuntuIcon",
  windows: "WindowsIcon",
  storybook: "StorybookIcon",
  azuredevops: "AzureDevOpsIcon",
  bitbucket: "BitbucketIcon",
  chrome: "ChromeIcon",
  chromatic: "ChromaticIcon",
  componentdriven: "ComponentDrivenIcon",
  discord: "DiscordIcon",
  facebook: "FacebookIcon",
  figma: "FigmaIcon",
  gdrive: "GDriveIcon",
  github: "GithubIcon",
  gitlab: "GitlabIcon",
  google: "GoogleIcon",
  graphql: "GraphqlIcon",
  medium: "MediumIcon",
  redux: "ReduxIcon",
  twitter: "TwitterIcon",
  youtube: "YoutubeIcon",
  vscode: "VSCodeIcon"
};
var r_ = a2(({ alt: e7, ...t }) => import_react61.default.createElement("svg", { width: "200px", height: "40px", viewBox: "0 0 200 40", ...t, role: "img" }, e7 ? import_react61.default.createElement("title", null, e7) : null, import_react61.default.createElement("defs", null, import_react61.default.createElement(
  "path",
  {
    d: "M1.2 36.9L0 3.9c0-1.1.8-2 1.9-2.1l28-1.8a2 2 0 0 1 2.2 1.9 2 2 0 0 1 0 .1v36a2 2 0 0 1-2 2 2 2 0 0 1-.1 0L3.2 38.8a2 2 0 0 1-2-2z",
    id: "a"
  }
)), import_react61.default.createElement("g", { fill: "none", fillRule: "evenodd" }, import_react61.default.createElement(
  "path",
  {
    d: "M53.3 31.7c-1.7 0-3.4-.3-5-.7-1.5-.5-2.8-1.1-3.9-2l1.6-3.5c2.2 1.5 4.6 2.3 7.3 2.3 1.5 0 2.5-.2 3.3-.7.7-.5 1.1-1 1.1-1.9 0-.7-.3-1.3-1-1.7s-2-.8-3.7-1.2c-2-.4-3.6-.9-4.8-1.5-1.1-.5-2-1.2-2.6-2-.5-1-.8-2-.8-3.2 0-1.4.4-2.6 1.2-3.6.7-1.1 1.8-2 3.2-2.6 1.3-.6 2.9-.9 4.7-.9 1.6 0 3.1.3 4.6.7 1.5.5 2.7 1.1 3.5 2l-1.6 3.5c-2-1.5-4.2-2.3-6.5-2.3-1.3 0-2.3.2-3 .8-.8.5-1.2 1.1-1.2 2 0 .5.2 1 .5 1.3.2.3.7.6 1.4.9l2.9.8c2.9.6 5 1.4 6.2 2.4a5 5 0 0 1 2 4.2 6 6 0 0 1-2.5 5c-1.7 1.2-4 1.9-7 1.9zm21-3.6l1.4-.1-.2 3.5-1.9.1c-2.4 0-4.1-.5-5.2-1.5-1.1-1-1.6-2.7-1.6-4.8v-6h-3v-3.6h3V11h4.8v4.6h4v3.6h-4v6c0 1.8.9 2.8 2.6 2.8zm11.1 3.5c-1.6 0-3-.3-4.3-1a7 7 0 0 1-3-2.8c-.6-1.3-1-2.7-1-4.4 0-1.6.4-3 1-4.3a7 7 0 0 1 3-2.8c1.2-.7 2.7-1 4.3-1 1.7 0 3.2.3 4.4 1a7 7 0 0 1 3 2.8c.6 1.2 1 2.7 1 4.3 0 1.7-.4 3.1-1 4.4a7 7 0 0 1-3 2.8c-1.2.7-2.7 1-4.4 1zm0-3.6c2.4 0 3.6-1.6 3.6-4.6 0-1.5-.3-2.6-1-3.4a3.2 3.2 0 0 0-2.6-1c-2.3 0-3.5 1.4-3.5 4.4 0 3 1.2 4.6 3.5 4.6zm21.7-8.8l-2.7.3c-1.3.2-2.3.5-2.8 1.2-.6.6-.9 1.4-.9 2.5v8.2H96V15.7h4.6v2.6c.8-1.8 2.5-2.8 5-3h1.3l.3 4zm14-3.5h4.8L116.4 37h-4.9l3-6.6-6.4-14.8h5l4 10 4-10zm16-.4c1.4 0 2.6.3 3.6 1 1 .6 1.9 1.6 2.5 2.8.6 1.2.9 2.7.9 4.3 0 1.6-.3 3-1 4.3a6.9 6.9 0 0 1-2.4 2.9c-1 .7-2.2 1-3.6 1-1 0-2-.2-3-.7-.8-.4-1.5-1-2-1.9v2.4h-4.7V8.8h4.8v9c.5-.8 1.2-1.4 2-1.9.9-.4 1.8-.6 3-.6zM135.7 28c1.1 0 2-.4 2.6-1.2.6-.8 1-2 1-3.4 0-1.5-.4-2.5-1-3.3s-1.5-1.1-2.6-1.1-2 .3-2.6 1.1c-.6.8-1 2-1 3.3 0 1.5.4 2.6 1 3.4.6.8 1.5 1.2 2.6 1.2zm18.9 3.6c-1.7 0-3.2-.3-4.4-1a7 7 0 0 1-3-2.8c-.6-1.3-1-2.7-1-4.4 0-1.6.4-3 1-4.3a7 7 0 0 1 3-2.8c1.2-.7 2.7-1 4.4-1 1.6 0 3 .3 4.3 1a7 7 0 0 1 3 2.8c.6 1.2 1 2.7 1 4.3 0 1.7-.4 3.1-1 4.4a7 7 0 0 1-3 2.8c-1.2.7-2.7 1-4.3 1zm0-3.6c2.3 0 3.5-1.6 3.5-4.6 0-1.5-.3-2.6-1-3.4a3.2 3.2 0 0 0-2.5-1c-2.4 0-3.6 1.4-3.6 4.4 0 3 1.2 4.6 3.6 4.6zm18 3.6c-1.7 0-3.2-.3-4.4-1a7 7 0 0 1-3-2.8c-.6-1.3-1-2.7-1-4.4 0-1.6.4-3 1-4.3a7 7 0 0 1 3-2.8c1.2-.7 2.7-1 4.4-1 1.6 0 3 .3 4.4 1a7 7 0 0 1 2.9 2.8c.6 1.2 1 2.7 1 4.3 0 1.7-.4 3.1-1 4.4a7 7 0 0 1-3 2.8c-1.2.7-2.7 1-4.3 1zm0-3.6c2.3 0 3.5-1.6 3.5-4.6 0-1.5-.3-2.6-1-3.4a3.2 3.2 0 0 0-2.5-1c-2.4 0-3.6 1.4-3.6 4.4 0 3 1.2 4.6 3.6 4.6zm27.4 3.4h-6l-6-7v7h-4.8V8.8h4.9v13.6l5.8-6.7h5.7l-6.6 7.5 7 8.2z",
    fill: "currentColor"
  }
), import_react61.default.createElement("mask", { id: "b", fill: "#fff" }, import_react61.default.createElement("use", { xlinkHref: "#a" })), import_react61.default.createElement("use", { fill: "#FF4785", fillRule: "nonzero", xlinkHref: "#a" }), import_react61.default.createElement(
  "path",
  {
    d: "M23.7 5L24 .2l3.9-.3.1 4.8a.3.3 0 0 1-.5.2L26 3.8l-1.7 1.4a.3.3 0 0 1-.5-.3zm-5 10c0 .9 5.3.5 6 0 0-5.4-2.8-8.2-8-8.2-5.3 0-8.2 2.8-8.2 7.1 0 7.4 10 7.6 10 11.6 0 1.2-.5 1.9-1.8 1.9-1.6 0-2.2-.9-2.1-3.6 0-.6-6.1-.8-6.3 0-.5 6.7 3.7 8.6 8.5 8.6 4.6 0 8.3-2.5 8.3-7 0-7.9-10.2-7.7-10.2-11.6 0-1.6 1.2-1.8 2-1.8.6 0 2 0 1.9 3z",
    fill: "#FFF",
    fillRule: "nonzero",
    mask: "url(#b)"
  }
))), "StorybookLogo");
var n_ = a2((e7) => import_react62.default.createElement("svg", { viewBox: "0 0 64 64", ...e7 }, import_react62.default.createElement("title", null, "Storybook icon"), import_react62.default.createElement("g", { id: "Artboard", stroke: "none", strokeWidth: "1", fill: "none", fillRule: "evenodd" }, import_react62.default.createElement(
  "path",
  {
    d: "M8.04798541,58.7875918 L6.07908839,6.32540407 C6.01406344,4.5927838 7.34257463,3.12440831 9.07303814,3.01625434 L53.6958037,0.227331489 C55.457209,0.117243658 56.974354,1.45590096 57.0844418,3.21730626 C57.0885895,3.28366922 57.0906648,3.35014546 57.0906648,3.41663791 L57.0906648,60.5834697 C57.0906648,62.3483119 55.6599776,63.7789992 53.8951354,63.7789992 C53.847325,63.7789992 53.7995207,63.7779262 53.7517585,63.775781 L11.0978899,61.8600599 C9.43669044,61.7854501 8.11034889,60.4492961 8.04798541,58.7875918 Z",
    id: "path-1",
    fill: "#FF4785",
    fillRule: "nonzero"
  }
), import_react62.default.createElement(
  "path",
  {
    d: "M35.9095005,24.1768792 C35.9095005,25.420127 44.2838488,24.8242707 45.4080313,23.9509748 C45.4080313,15.4847538 40.8652557,11.0358878 32.5466666,11.0358878 C24.2280775,11.0358878 19.5673077,15.553972 19.5673077,22.3311017 C19.5673077,34.1346028 35.4965208,34.3605071 35.4965208,40.7987804 C35.4965208,42.606015 34.6115646,43.6790606 32.6646607,43.6790606 C30.127786,43.6790606 29.1248356,42.3834613 29.2428298,37.9783269 C29.2428298,37.0226907 19.5673077,36.7247626 19.2723223,37.9783269 C18.5211693,48.6535354 25.1720308,51.7326752 32.7826549,51.7326752 C40.1572906,51.7326752 45.939005,47.8018145 45.939005,40.6858282 C45.939005,28.035186 29.7738035,28.3740425 29.7738035,22.1051974 C29.7738035,19.5637737 31.6617103,19.2249173 32.7826549,19.2249173 C33.9625966,19.2249173 36.0864917,19.4328883 35.9095005,24.1768792 Z",
    id: "path9_fill-path",
    fill: "#FFFFFF",
    fillRule: "nonzero"
  }
), import_react62.default.createElement(
  "path",
  {
    d: "M44.0461638,0.830433986 L50.1874092,0.446606143 L50.443532,7.7810017 C50.4527198,8.04410717 50.2468789,8.26484453 49.9837734,8.27403237 C49.871115,8.27796649 49.7607078,8.24184808 49.6721567,8.17209069 L47.3089847,6.3104681 L44.5110468,8.43287463 C44.3012992,8.591981 44.0022839,8.55092814 43.8431776,8.34118051 C43.7762017,8.25288717 43.742082,8.14401677 43.7466857,8.03329059 L44.0461638,0.830433986 Z",
    id: "Path",
    fill: "#FFFFFF"
  }
))), "StorybookIcon");
var x4 = be`
	from {
		transform: rotate(0deg);
	}
	to {
		transform: rotate(360deg);
	}
`;
var i_ = Tr.div(({ size: e7 = 32 }) => ({
  borderRadius: "50%",
  cursor: "progress",
  display: "inline-block",
  overflow: "hidden",
  position: "absolute",
  transition: "all 200ms ease-out",
  verticalAlign: "top",
  top: "50%",
  left: "50%",
  marginTop: -(e7 / 2),
  marginLeft: -(e7 / 2),
  height: e7,
  width: e7,
  zIndex: 4,
  borderWidth: 2,
  borderStyle: "solid",
  borderColor: "rgba(97, 97, 97, 0.29)",
  borderTopColor: "rgb(100,100,100)",
  animation: `${x4} 0.7s linear infinite`,
  mixBlendMode: "difference"
}));
var C4 = Tr.div({
  position: "absolute",
  display: "flex",
  flexDirection: "column",
  justifyContent: "center",
  alignItems: "center",
  width: "100%",
  height: "100%"
});
var l_ = Tr.div(({ theme: e7 }) => ({
  position: "relative",
  width: "80%",
  marginBottom: "0.75rem",
  maxWidth: 300,
  height: 5,
  borderRadius: 5,
  background: be2(0.8, e7.color.secondary),
  overflow: "hidden",
  cursor: "progress"
}));
var s_ = Tr.div(({ theme: e7 }) => ({
  position: "absolute",
  top: 0,
  left: 0,
  height: "100%",
  background: e7.color.secondary
}));
var E4 = Tr.div(({ theme: e7 }) => ({
  minHeight: "2em",
  fontSize: `${e7.typography.size.s1}px`,
  color: e7.barTextColor
}));
var u_ = Tr(Hu)(({ theme: e7 }) => ({
  width: 20,
  height: 20,
  marginBottom: "0.5rem",
  color: e7.textMutedColor
}));
var c_ = be`
  from { content: "..." }
  33% { content: "." }
  66% { content: ".." }
  to { content: "..." }
`;
var p_ = Tr.span({
  "&::after": {
    content: "'...'",
    animation: `${c_} 1s linear infinite`,
    animationDelay: "1s",
    display: "inline-block",
    width: "1em",
    height: "auto"
  }
});
var d_ = a2(({ progress: e7, error: t, size: r, ...n }) => {
  if (t)
    return import_react63.default.createElement(C4, { "aria-label": t.toString(), "aria-live": "polite", role: "status", ...n }, import_react63.default.createElement(u_, null), import_react63.default.createElement(E4, null, t.message));
  if (e7) {
    let { value: o, modules: i } = e7, { message: l7 } = e7;
    return i && (l7 += ` ${i.complete} / ${i.total} modules`), import_react63.default.createElement(
      C4,
      {
        "aria-label": "Content is loading...",
        "aria-live": "polite",
        "aria-valuemin": 0,
        "aria-valuemax": 100,
        "aria-valuenow": o * 100,
        "aria-valuetext": l7,
        role: "progressbar",
        ...n
      },
      import_react63.default.createElement(l_, null, import_react63.default.createElement(s_, { style: { width: `${o * 100}%` } })),
      import_react63.default.createElement(E4, null, l7, o < 1 && import_react63.default.createElement(p_, { key: l7 }))
    );
  }
  return import_react63.default.createElement(
    i_,
    {
      "aria-label": "Content is loading...",
      "aria-live": "polite",
      role: "status",
      size: r,
      ...n
    }
  );
}, "Loader");
function f_(e7) {
  let t = {}, r = e7.split("&");
  for (let n = 0; n < r.length; n++) {
    let o = r[n].split("=");
    t[decodeURIComponent(o[0])] = decodeURIComponent(o[1] || "");
  }
  return t;
}
a2(f_, "parseQuery");
var h_ = a2((e7, t, r = {}) => {
  let [n, o] = e7.split("?"), i = o ? {
    ...f_(o),
    ...r,
    id: t
  } : {
    ...r,
    id: t
  };
  return `${n}?${Object.entries(i).map((l7) => `${l7[0]}=${l7[1]}`).join("&")}`;
}, "getStoryHref");
var w_ = Tr.pre`
  line-height: 18px;
  padding: 11px 1rem;
  white-space: pre-wrap;
  background: rgba(0, 0, 0, 0.05);
  color: ${g.darkest};
  border-radius: 3px;
  margin: 1rem 0;
  width: 100%;
  display: block;
  overflow: hidden;
  font-family: ${H.fonts.mono};
  font-size: ${H.size.s2 - 1}px;
`;
var b_ = a2(({ code: e7, ...t }) => import_react64.default.createElement(w_, { id: "clipboard-code", ...t }, e7), "ClipboardCode");
var iee = Pu;
var x_ = {};
Object.keys(Pu).forEach((e7) => {
  x_[e7] = (0, import_react10.forwardRef)((t, r) => (0, import_react10.createElement)(e7, { ...t, ref: r }));
});

export {
  Mt,
  jt,
  Tr,
  Ne,
  zr,
  pc,
  gc,
  require_react_dom,
  P2 as P,
  au,
  wn2 as wn,
  mu,
  te2 as te,
  kt2 as kt,
  q6 as q,
  dp,
  ms,
  gs,
  vu,
  wu,
  bu2 as bu,
  yu,
  Du,
  xu,
  Cu,
  Eu,
  Su,
  Ru,
  Au,
  Fu,
  ku,
  Tu,
  Lu,
  Iu,
  Bu,
  Mu,
  _u,
  Kb,
  ju,
  Ex,
  wg,
  Lo,
  Il,
  WL,
  KL,
  tI,
  dI,
  yI,
  NI,
  $B,
  OB,
  UB,
  KB,
  L1,
  B1,
  P1,
  Kl,
  rn2 as rn,
  bM,
  $1,
  V1,
  $M,
  q1,
  N1,
  W1,
  NM,
  GM,
  e_,
  t_,
  rs2 as rs,
  r_,
  n_,
  d_,
  h_,
  b_,
  iee,
  x_
};
/*! Bundled license information:

scheduler/cjs/scheduler.development.js:
  (**
   * @license React
   * scheduler.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)

react-dom/cjs/react-dom.development.js:
  (**
   * @license React
   * react-dom.development.js
   *
   * Copyright (c) Facebook, Inc. and its affiliates.
   *
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
  (**
   * Checks if an event is supported in the current execution environment.
   *
   * NOTE: This will not work correctly for non-generic events such as `change`,
   * `reset`, `load`, `error`, and `select`.
   *
   * Borrows from Modernizr.
   *
   * @param {string} eventNameSuffix Event name, e.g. "click".
   * @return {boolean} True if the event is supported.
   * @internal
   * @license Modernizr 3.0.0pre (Custom Build) | MIT
   *)
*/
//# sourceMappingURL=chunk-3SYQ7YYY.js.map
